// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Quest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace D3 {
namespace Quests {

namespace {

const ::google::protobuf::Descriptor* QuestReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestStepComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestStepComplete_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Quest_2eproto() {
  protobuf_AddDesc_Quest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Quest.proto");
  GOOGLE_CHECK(file != NULL);
  QuestReward_descriptor_ = file->message_type(0);
  static const int QuestReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestReward, xp_granted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestReward, gold_granted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestReward, item_),
  };
  QuestReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestReward_descriptor_,
      QuestReward::default_instance_,
      QuestReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestReward));
  QuestStepComplete_descriptor_ = file->message_type(1);
  static const int QuestStepComplete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepComplete, is_quest_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepComplete, reward_),
  };
  QuestStepComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestStepComplete_descriptor_,
      QuestStepComplete::default_instance_,
      QuestStepComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestStepComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestStepComplete));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Quest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestReward_descriptor_, &QuestReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestStepComplete_descriptor_, &QuestStepComplete::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Quest_2eproto() {
  delete QuestReward::default_instance_;
  delete QuestReward_reflection_;
  delete QuestStepComplete::default_instance_;
  delete QuestStepComplete_reflection_;
}

void protobuf_AddDesc_Quest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::D3::Items::protobuf_AddDesc_Items_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Quest.proto\022\tD3.Quests\032\013Items.proto\"Z\n"
    "\013QuestReward\022\022\n\nxp_granted\030\001 \001(\005\022\024\n\014gold"
    "_granted\030\002 \001(\005\022!\n\004item\030\003 \001(\0132\023.D3.Items."
    "Generator\"V\n\021QuestStepComplete\022\031\n\021is_que"
    "st_complete\030\001 \002(\010\022&\n\006reward\030\002 \001(\0132\026.D3.Q"
    "uests.QuestReward", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Quest.proto", &protobuf_RegisterTypes);
  QuestReward::default_instance_ = new QuestReward();
  QuestStepComplete::default_instance_ = new QuestStepComplete();
  QuestReward::default_instance_->InitAsDefaultInstance();
  QuestStepComplete::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Quest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Quest_2eproto {
  StaticDescriptorInitializer_Quest_2eproto() {
    protobuf_AddDesc_Quest_2eproto();
  }
} static_descriptor_initializer_Quest_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int QuestReward::kXpGrantedFieldNumber;
const int QuestReward::kGoldGrantedFieldNumber;
const int QuestReward::kItemFieldNumber;
#endif  // !_MSC_VER

QuestReward::QuestReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestReward::InitAsDefaultInstance() {
  item_ = const_cast< ::D3::Items::Generator*>(&::D3::Items::Generator::default_instance());
}

QuestReward::QuestReward(const QuestReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestReward::SharedCtor() {
  _cached_size_ = 0;
  xp_granted_ = 0;
  gold_granted_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestReward::~QuestReward() {
  SharedDtor();
}

void QuestReward::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void QuestReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestReward_descriptor_;
}

const QuestReward& QuestReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();  return *default_instance_;
}

QuestReward* QuestReward::default_instance_ = NULL;

QuestReward* QuestReward::New() const {
  return new QuestReward;
}

void QuestReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xp_granted_ = 0;
    gold_granted_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::D3::Items::Generator::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 xp_granted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_granted_)));
          set_has_xp_granted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold_granted;
        break;
      }
      
      // optional int32 gold_granted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_granted_)));
          set_has_gold_granted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }
      
      // optional .D3.Items.Generator item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 xp_granted = 1;
  if (has_xp_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xp_granted(), output);
  }
  
  // optional int32 gold_granted = 2;
  if (has_gold_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold_granted(), output);
  }
  
  // optional .D3.Items.Generator item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 xp_granted = 1;
  if (has_xp_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xp_granted(), target);
  }
  
  // optional int32 gold_granted = 2;
  if (has_gold_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold_granted(), target);
  }
  
  // optional .D3.Items.Generator item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 xp_granted = 1;
    if (has_xp_granted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp_granted());
    }
    
    // optional int32 gold_granted = 2;
    if (has_gold_granted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_granted());
    }
    
    // optional .D3.Items.Generator item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestReward::MergeFrom(const QuestReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xp_granted()) {
      set_xp_granted(from.xp_granted());
    }
    if (from.has_gold_granted()) {
      set_gold_granted(from.gold_granted());
    }
    if (from.has_item()) {
      mutable_item()->::D3::Items::Generator::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestReward::CopyFrom(const QuestReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestReward::IsInitialized() const {
  
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void QuestReward::Swap(QuestReward* other) {
  if (other != this) {
    std::swap(xp_granted_, other->xp_granted_);
    std::swap(gold_granted_, other->gold_granted_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestReward_descriptor_;
  metadata.reflection = QuestReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestStepComplete::kIsQuestCompleteFieldNumber;
const int QuestStepComplete::kRewardFieldNumber;
#endif  // !_MSC_VER

QuestStepComplete::QuestStepComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestStepComplete::InitAsDefaultInstance() {
  reward_ = const_cast< ::D3::Quests::QuestReward*>(&::D3::Quests::QuestReward::default_instance());
}

QuestStepComplete::QuestStepComplete(const QuestStepComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestStepComplete::SharedCtor() {
  _cached_size_ = 0;
  is_quest_complete_ = false;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestStepComplete::~QuestStepComplete() {
  SharedDtor();
}

void QuestStepComplete::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void QuestStepComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestStepComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestStepComplete_descriptor_;
}

const QuestStepComplete& QuestStepComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2eproto();  return *default_instance_;
}

QuestStepComplete* QuestStepComplete::default_instance_ = NULL;

QuestStepComplete* QuestStepComplete::New() const {
  return new QuestStepComplete;
}

void QuestStepComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_quest_complete_ = false;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::D3::Quests::QuestReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestStepComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_quest_complete = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_quest_complete_)));
          set_has_is_quest_complete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }
      
      // optional .D3.Quests.QuestReward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestStepComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_quest_complete = 1;
  if (has_is_quest_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_quest_complete(), output);
  }
  
  // optional .D3.Quests.QuestReward reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestStepComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_quest_complete = 1;
  if (has_is_quest_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_quest_complete(), target);
  }
  
  // optional .D3.Quests.QuestReward reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestStepComplete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_quest_complete = 1;
    if (has_is_quest_complete()) {
      total_size += 1 + 1;
    }
    
    // optional .D3.Quests.QuestReward reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestStepComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestStepComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestStepComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestStepComplete::MergeFrom(const QuestStepComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_quest_complete()) {
      set_is_quest_complete(from.is_quest_complete());
    }
    if (from.has_reward()) {
      mutable_reward()->::D3::Quests::QuestReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestStepComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestStepComplete::CopyFrom(const QuestStepComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestStepComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void QuestStepComplete::Swap(QuestStepComplete* other) {
  if (other != this) {
    std::swap(is_quest_complete_, other->is_quest_complete_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestStepComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestStepComplete_descriptor_;
  metadata.reflection = QuestStepComplete_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Quests
}  // namespace D3

// @@protoc_insertion_point(global_scope)
