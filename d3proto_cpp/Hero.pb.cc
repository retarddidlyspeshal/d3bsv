// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Hero.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace D3 {
namespace Hero {

namespace {

const ::google::protobuf::Descriptor* VisualItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisualItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisualEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisualEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestHistoryEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestHistoryEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRewardHistoryEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRewardHistoryEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Digest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Digest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotbarButtonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotbarButtonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillKeyMapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillKeyMapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavedQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LearnedLore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LearnedLore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavedConversations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedConversations_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavePointData_Proto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavePointData_Proto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Timestamps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timestamps_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavedDefinition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedDefinition_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameSequence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameSequence_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameText_reflection_ = NULL;
const ::google::protobuf::Descriptor* Escrow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Escrow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Hero_2eproto() {
  protobuf_AddDesc_Hero_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Hero.proto");
  GOOGLE_CHECK(file != NULL);
  VisualItem_descriptor_ = file->message_type(0);
  static const int VisualItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualItem, gbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualItem, dye_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualItem, item_effect_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualItem, effect_level_),
  };
  VisualItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisualItem_descriptor_,
      VisualItem::default_instance_,
      VisualItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisualItem));
  VisualEquipment_descriptor_ = file->message_type(1);
  static const int VisualEquipment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualEquipment, visual_item_),
  };
  VisualEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisualEquipment_descriptor_,
      VisualEquipment::default_instance_,
      VisualEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisualEquipment));
  QuestHistoryEntry_descriptor_ = file->message_type(2);
  static const int QuestHistoryEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHistoryEntry, sno_quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHistoryEntry, difficulty_),
  };
  QuestHistoryEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestHistoryEntry_descriptor_,
      QuestHistoryEntry::default_instance_,
      QuestHistoryEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHistoryEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestHistoryEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestHistoryEntry));
  QuestRewardHistoryEntry_descriptor_ = file->message_type(3);
  static const int QuestRewardHistoryEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewardHistoryEntry, sno_quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewardHistoryEntry, step_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewardHistoryEntry, difficulty_),
  };
  QuestRewardHistoryEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRewardHistoryEntry_descriptor_,
      QuestRewardHistoryEntry::default_instance_,
      QuestRewardHistoryEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewardHistoryEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewardHistoryEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRewardHistoryEntry));
  Digest_descriptor_ = file->message_type(4);
  static const int Digest_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, gbid_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, player_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, visual_equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, quest_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, last_played_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, highest_unlocked_act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, last_played_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, highest_unlocked_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, last_played_quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, last_played_quest_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, time_played_),
  };
  Digest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Digest_descriptor_,
      Digest::default_instance_,
      Digest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Digest));
  HotbarButtonData_descriptor_ = file->message_type(5);
  static const int HotbarButtonData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotbarButtonData, sno_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotbarButtonData, gbid_item_),
  };
  HotbarButtonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotbarButtonData_descriptor_,
      HotbarButtonData::default_instance_,
      HotbarButtonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotbarButtonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotbarButtonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotbarButtonData));
  SkillKeyMapping_descriptor_ = file->message_type(6);
  static const int SkillKeyMapping_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillKeyMapping, sno_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillKeyMapping, id_hotkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillKeyMapping, skill_button_),
  };
  SkillKeyMapping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillKeyMapping_descriptor_,
      SkillKeyMapping::default_instance_,
      SkillKeyMapping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillKeyMapping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillKeyMapping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillKeyMapping));
  SavedQuest_descriptor_ = file->message_type(7);
  static const int SavedQuest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedQuest, sno_quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedQuest, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedQuest, current_step_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedQuest, objective_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedQuest, failure_condition_state_),
  };
  SavedQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavedQuest_descriptor_,
      SavedQuest::default_instance_,
      SavedQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavedQuest));
  LearnedLore_descriptor_ = file->message_type(8);
  static const int LearnedLore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedLore, sno_lore_learned_),
  };
  LearnedLore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LearnedLore_descriptor_,
      LearnedLore::default_instance_,
      LearnedLore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedLore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedLore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LearnedLore));
  SavedConversations_descriptor_ = file->message_type(9);
  static const int SavedConversations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedConversations, played_conversations_bitfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedConversations, sno_saved_conversations_),
  };
  SavedConversations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavedConversations_descriptor_,
      SavedConversations::default_instance_,
      SavedConversations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedConversations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedConversations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavedConversations));
  SavePointData_Proto_descriptor_ = file->message_type(10);
  static const int SavePointData_Proto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavePointData_Proto, sno_world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavePointData_Proto, savepoint_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavePointData_Proto, creates_portal_),
  };
  SavePointData_Proto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavePointData_Proto_descriptor_,
      SavePointData_Proto::default_instance_,
      SavePointData_Proto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavePointData_Proto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavePointData_Proto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavePointData_Proto));
  SavedData_descriptor_ = file->message_type(11);
  static const int SavedData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, hotbar_button_assignments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, skill_key_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, time_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, activated_waypoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, hireling_saved_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, last_level_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, learned_lore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, saved_conversations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, sno_active_skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, sno_traits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, seen_tutorials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, save_point_),
  };
  SavedData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavedData_descriptor_,
      SavedData::default_instance_,
      SavedData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavedData));
  Timestamps_descriptor_ = file->message_type(12);
  static const int Timestamps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamps, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamps, delete_time_),
  };
  Timestamps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Timestamps_descriptor_,
      Timestamps::default_instance_,
      Timestamps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Timestamps));
  SavedDefinition_descriptor_ = file->message_type(13);
  static const int SavedDefinition_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, digest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, saved_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, saved_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, saved_quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, quest_reward_history_),
  };
  SavedDefinition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavedDefinition_descriptor_,
      SavedDefinition::default_instance_,
      SavedDefinition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavedDefinition));
  NameSequence_descriptor_ = file->message_type(14);
  static const int NameSequence_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSequence, sequence_),
  };
  NameSequence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameSequence_descriptor_,
      NameSequence::default_instance_,
      NameSequence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSequence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSequence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameSequence));
  NameText_descriptor_ = file->message_type(15);
  static const int NameText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameText, name_),
  };
  NameText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameText_descriptor_,
      NameText::default_instance_,
      NameText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameText));
  Escrow_descriptor_ = file->message_type(16);
  static const int Escrow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Escrow, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Escrow, generator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Escrow, hero_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Escrow, state_),
  };
  Escrow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Escrow_descriptor_,
      Escrow::default_instance_,
      Escrow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Escrow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Escrow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Escrow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Hero_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisualItem_descriptor_, &VisualItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisualEquipment_descriptor_, &VisualEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestHistoryEntry_descriptor_, &QuestHistoryEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRewardHistoryEntry_descriptor_, &QuestRewardHistoryEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Digest_descriptor_, &Digest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotbarButtonData_descriptor_, &HotbarButtonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillKeyMapping_descriptor_, &SkillKeyMapping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavedQuest_descriptor_, &SavedQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LearnedLore_descriptor_, &LearnedLore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavedConversations_descriptor_, &SavedConversations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavePointData_Proto_descriptor_, &SavePointData_Proto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavedData_descriptor_, &SavedData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Timestamps_descriptor_, &Timestamps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavedDefinition_descriptor_, &SavedDefinition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameSequence_descriptor_, &NameSequence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameText_descriptor_, &NameText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Escrow_descriptor_, &Escrow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Hero_2eproto() {
  delete VisualItem::default_instance_;
  delete VisualItem_reflection_;
  delete VisualEquipment::default_instance_;
  delete VisualEquipment_reflection_;
  delete QuestHistoryEntry::default_instance_;
  delete QuestHistoryEntry_reflection_;
  delete QuestRewardHistoryEntry::default_instance_;
  delete QuestRewardHistoryEntry_reflection_;
  delete Digest::default_instance_;
  delete Digest_reflection_;
  delete HotbarButtonData::default_instance_;
  delete HotbarButtonData_reflection_;
  delete SkillKeyMapping::default_instance_;
  delete SkillKeyMapping_reflection_;
  delete SavedQuest::default_instance_;
  delete SavedQuest_reflection_;
  delete LearnedLore::default_instance_;
  delete LearnedLore_reflection_;
  delete SavedConversations::default_instance_;
  delete SavedConversations_reflection_;
  delete SavePointData_Proto::default_instance_;
  delete SavePointData_Proto_reflection_;
  delete SavedData::default_instance_;
  delete SavedData_reflection_;
  delete Timestamps::default_instance_;
  delete Timestamps_reflection_;
  delete SavedDefinition::default_instance_;
  delete SavedDefinition_reflection_;
  delete NameSequence::default_instance_;
  delete NameSequence_reflection_;
  delete NameText::default_instance_;
  delete NameText_reflection_;
  delete Escrow::default_instance_;
  delete Escrow_reflection_;
}

void protobuf_AddDesc_Hero_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::D3::AttributeSerializer::protobuf_AddDesc_AttributeSerializer_2eproto();
  ::D3::Hireling::protobuf_AddDesc_Hireling_2eproto();
  ::D3::Items::protobuf_AddDesc_Items_2eproto();
  ::D3::OnlineService::protobuf_AddDesc_OnlineService_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nHero.proto\022\007D3.Hero\032\031AttributeSerializ"
    "er.proto\032\016Hireling.proto\032\013Items.proto\032\023O"
    "nlineService.proto\"\\\n\nVisualItem\022\014\n\004gbid"
    "\030\001 \001(\017\022\020\n\010dye_type\030\002 \001(\021\022\030\n\020item_effect_"
    "type\030\003 \001(\021\022\024\n\014effect_level\030\004 \001(\021\";\n\017Visu"
    "alEquipment\022(\n\013visual_item\030\001 \003(\0132\023.D3.He"
    "ro.VisualItem\":\n\021QuestHistoryEntry\022\021\n\tsn"
    "o_quest\030\001 \002(\017\022\022\n\ndifficulty\030\002 \002(\021\"R\n\027Que"
    "stRewardHistoryEntry\022\021\n\tsno_quest\030\001 \002(\017\022"
    "\020\n\010step_uid\030\002 \002(\021\022\022\n\ndifficulty\030\003 \002(\021\"\305\003"
    "\n\006Digest\022\017\n\007version\030\001 \002(\r\022+\n\007hero_id\030\002 \002"
    "(\0132\032.D3.OnlineService.EntityId\022\021\n\thero_n"
    "ame\030\003 \002(\t\022\022\n\ngbid_class\030\004 \002(\017\022\r\n\005level\030\005"
    " \002(\021\022\024\n\014player_flags\030\006 \002(\r\0222\n\020visual_equ"
    "ipment\030\007 \002(\0132\030.D3.Hero.VisualEquipment\0221"
    "\n\rquest_history\030\010 \003(\0132\032.D3.Hero.QuestHis"
    "toryEntry\022\027\n\017last_played_act\030\n \002(\021\022\034\n\024hi"
    "ghest_unlocked_act\030\013 \002(\021\022\036\n\026last_played_"
    "difficulty\030\014 \002(\021\022#\n\033highest_unlocked_dif"
    "ficulty\030\r \002(\021\022\031\n\021last_played_quest\030\016 \002(\017"
    "\022\036\n\026last_played_quest_step\030\017 \002(\021\022\023\n\013time"
    "_played\030\020 \002(\r\"8\n\020HotbarButtonData\022\021\n\tsno"
    "_power\030\001 \002(\017\022\021\n\tgbid_item\030\002 \002(\017\"M\n\017Skill"
    "KeyMapping\022\021\n\tsno_power\030\001 \002(\017\022\021\n\tid_hotk"
    "ey\030\002 \002(\021\022\024\n\014skill_button\030\003 \002(\021\"\207\001\n\nSaved"
    "Quest\022\021\n\tsno_quest\030\001 \002(\017\022\022\n\ndifficulty\030\002"
    " \002(\021\022\030\n\020current_step_uid\030\003 \002(\021\022\027\n\017object"
    "ive_state\030\004 \003(\021\022\037\n\027failure_condition_sta"
    "te\030\005 \003(\021\"\'\n\013LearnedLore\022\030\n\020sno_lore_lear"
    "ned\030\001 \003(\017\"\\\n\022SavedConversations\022%\n\035playe"
    "d_conversations_bitfield\030\001 \002(\014\022\037\n\027sno_sa"
    "ved_conversations\030\002 \003(\017\"Z\n\023SavePointData"
    "_Proto\022\021\n\tsno_world\030\001 \002(\017\022\030\n\020savepoint_n"
    "umber\030\002 \002(\021\022\026\n\016creates_portal\030\003 \002(\r\"\331\003\n\t"
    "SavedData\022<\n\031hotbar_button_assignments\030\001"
    " \003(\0132\031.D3.Hero.HotbarButtonData\022/\n\rskill"
    "_key_map\030\002 \003(\0132\030.D3.Hero.SkillKeyMapping"
    "\022\023\n\013time_played\030\003 \002(\r\022\033\n\023activated_waypo"
    "ints\030\004 \002(\r\0223\n\023hireling_saved_data\030\005 \002(\0132"
    "\026.D3.Hireling.SavedData\022\027\n\017last_level_ti"
    "me\030\006 \002(\r\022*\n\014learned_lore\030\007 \002(\0132\024.D3.Hero"
    ".LearnedLore\0228\n\023saved_conversations\030\010 \002("
    "\0132\033.D3.Hero.SavedConversations\022\031\n\021sno_ac"
    "tive_skills\030\t \003(\017\022\022\n\nsno_traits\030\n \003(\017\022\026\n"
    "\016seen_tutorials\030\013 \003(\017\0220\n\nsave_point\030\014 \002("
    "\0132\034.D3.Hero.SavePointData_Proto\"6\n\nTimes"
    "tamps\022\023\n\013create_time\030\001 \002(\022\022\023\n\013delete_tim"
    "e\030\002 \001(\022\"\273\002\n\017SavedDefinition\022\017\n\007version\030\001"
    " \002(\r\022\037\n\006digest\030\002 \001(\0132\017.D3.Hero.Digest\022A\n"
    "\020saved_attributes\030\003 \002(\0132\'.D3.AttributeSe"
    "rializer.SavedAttributes\022&\n\nsaved_data\030\004"
    " \001(\0132\022.D3.Hero.SavedData\022(\n\013saved_quest\030"
    "\005 \003(\0132\023.D3.Hero.SavedQuest\022!\n\005items\030\006 \001("
    "\0132\022.D3.Items.ItemList\022>\n\024quest_reward_hi"
    "story\030\007 \003(\0132 .D3.Hero.QuestRewardHistory"
    "Entry\" \n\014NameSequence\022\020\n\010sequence\030\001 \001(\003\""
    "\030\n\010NameText\022\014\n\004name\030\001 \002(\t\"w\n\006Escrow\022\017\n\007v"
    "ersion\030\001 \002(\r\022&\n\tgenerator\030\002 \001(\0132\023.D3.Ite"
    "ms.Generator\022%\n\thero_data\030\003 \001(\0132\022.D3.Her"
    "o.SavedData\022\r\n\005state\030\004 \001(\r", 2386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Hero.proto", &protobuf_RegisterTypes);
  VisualItem::default_instance_ = new VisualItem();
  VisualEquipment::default_instance_ = new VisualEquipment();
  QuestHistoryEntry::default_instance_ = new QuestHistoryEntry();
  QuestRewardHistoryEntry::default_instance_ = new QuestRewardHistoryEntry();
  Digest::default_instance_ = new Digest();
  HotbarButtonData::default_instance_ = new HotbarButtonData();
  SkillKeyMapping::default_instance_ = new SkillKeyMapping();
  SavedQuest::default_instance_ = new SavedQuest();
  LearnedLore::default_instance_ = new LearnedLore();
  SavedConversations::default_instance_ = new SavedConversations();
  SavePointData_Proto::default_instance_ = new SavePointData_Proto();
  SavedData::default_instance_ = new SavedData();
  Timestamps::default_instance_ = new Timestamps();
  SavedDefinition::default_instance_ = new SavedDefinition();
  NameSequence::default_instance_ = new NameSequence();
  NameText::default_instance_ = new NameText();
  Escrow::default_instance_ = new Escrow();
  VisualItem::default_instance_->InitAsDefaultInstance();
  VisualEquipment::default_instance_->InitAsDefaultInstance();
  QuestHistoryEntry::default_instance_->InitAsDefaultInstance();
  QuestRewardHistoryEntry::default_instance_->InitAsDefaultInstance();
  Digest::default_instance_->InitAsDefaultInstance();
  HotbarButtonData::default_instance_->InitAsDefaultInstance();
  SkillKeyMapping::default_instance_->InitAsDefaultInstance();
  SavedQuest::default_instance_->InitAsDefaultInstance();
  LearnedLore::default_instance_->InitAsDefaultInstance();
  SavedConversations::default_instance_->InitAsDefaultInstance();
  SavePointData_Proto::default_instance_->InitAsDefaultInstance();
  SavedData::default_instance_->InitAsDefaultInstance();
  Timestamps::default_instance_->InitAsDefaultInstance();
  SavedDefinition::default_instance_->InitAsDefaultInstance();
  NameSequence::default_instance_->InitAsDefaultInstance();
  NameText::default_instance_->InitAsDefaultInstance();
  Escrow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Hero_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Hero_2eproto {
  StaticDescriptorInitializer_Hero_2eproto() {
    protobuf_AddDesc_Hero_2eproto();
  }
} static_descriptor_initializer_Hero_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int VisualItem::kGbidFieldNumber;
const int VisualItem::kDyeTypeFieldNumber;
const int VisualItem::kItemEffectTypeFieldNumber;
const int VisualItem::kEffectLevelFieldNumber;
#endif  // !_MSC_VER

VisualItem::VisualItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisualItem::InitAsDefaultInstance() {
}

VisualItem::VisualItem(const VisualItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisualItem::SharedCtor() {
  _cached_size_ = 0;
  gbid_ = 0;
  dye_type_ = 0;
  item_effect_type_ = 0;
  effect_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisualItem::~VisualItem() {
  SharedDtor();
}

void VisualItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisualItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisualItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisualItem_descriptor_;
}

const VisualItem& VisualItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

VisualItem* VisualItem::default_instance_ = NULL;

VisualItem* VisualItem::New() const {
  return new VisualItem;
}

void VisualItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gbid_ = 0;
    dye_type_ = 0;
    item_effect_type_ = 0;
    effect_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisualItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 gbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &gbid_)));
          set_has_gbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dye_type;
        break;
      }
      
      // optional sint32 dye_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dye_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dye_type_)));
          set_has_dye_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_effect_type;
        break;
      }
      
      // optional sint32 item_effect_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_effect_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &item_effect_type_)));
          set_has_item_effect_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_effect_level;
        break;
      }
      
      // optional sint32 effect_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effect_level_)));
          set_has_effect_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisualItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed32 gbid = 1;
  if (has_gbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->gbid(), output);
  }
  
  // optional sint32 dye_type = 2;
  if (has_dye_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dye_type(), output);
  }
  
  // optional sint32 item_effect_type = 3;
  if (has_item_effect_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->item_effect_type(), output);
  }
  
  // optional sint32 effect_level = 4;
  if (has_effect_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->effect_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisualItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed32 gbid = 1;
  if (has_gbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->gbid(), target);
  }
  
  // optional sint32 dye_type = 2;
  if (has_dye_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dye_type(), target);
  }
  
  // optional sint32 item_effect_type = 3;
  if (has_item_effect_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->item_effect_type(), target);
  }
  
  // optional sint32 effect_level = 4;
  if (has_effect_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->effect_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisualItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed32 gbid = 1;
    if (has_gbid()) {
      total_size += 1 + 4;
    }
    
    // optional sint32 dye_type = 2;
    if (has_dye_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dye_type());
    }
    
    // optional sint32 item_effect_type = 3;
    if (has_item_effect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->item_effect_type());
    }
    
    // optional sint32 effect_level = 4;
    if (has_effect_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effect_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisualItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisualItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisualItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisualItem::MergeFrom(const VisualItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gbid()) {
      set_gbid(from.gbid());
    }
    if (from.has_dye_type()) {
      set_dye_type(from.dye_type());
    }
    if (from.has_item_effect_type()) {
      set_item_effect_type(from.item_effect_type());
    }
    if (from.has_effect_level()) {
      set_effect_level(from.effect_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisualItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualItem::CopyFrom(const VisualItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualItem::IsInitialized() const {
  
  return true;
}

void VisualItem::Swap(VisualItem* other) {
  if (other != this) {
    std::swap(gbid_, other->gbid_);
    std::swap(dye_type_, other->dye_type_);
    std::swap(item_effect_type_, other->item_effect_type_);
    std::swap(effect_level_, other->effect_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisualItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisualItem_descriptor_;
  metadata.reflection = VisualItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisualEquipment::kVisualItemFieldNumber;
#endif  // !_MSC_VER

VisualEquipment::VisualEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VisualEquipment::InitAsDefaultInstance() {
}

VisualEquipment::VisualEquipment(const VisualEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VisualEquipment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisualEquipment::~VisualEquipment() {
  SharedDtor();
}

void VisualEquipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisualEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisualEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisualEquipment_descriptor_;
}

const VisualEquipment& VisualEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

VisualEquipment* VisualEquipment::default_instance_ = NULL;

VisualEquipment* VisualEquipment::New() const {
  return new VisualEquipment;
}

void VisualEquipment::Clear() {
  visual_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisualEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .D3.Hero.VisualItem visual_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visual_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_visual_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_visual_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VisualEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .D3.Hero.VisualItem visual_item = 1;
  for (int i = 0; i < this->visual_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->visual_item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VisualEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .D3.Hero.VisualItem visual_item = 1;
  for (int i = 0; i < this->visual_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->visual_item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VisualEquipment::ByteSize() const {
  int total_size = 0;
  
  // repeated .D3.Hero.VisualItem visual_item = 1;
  total_size += 1 * this->visual_item_size();
  for (int i = 0; i < this->visual_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visual_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisualEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisualEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisualEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisualEquipment::MergeFrom(const VisualEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  visual_item_.MergeFrom(from.visual_item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisualEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualEquipment::CopyFrom(const VisualEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualEquipment::IsInitialized() const {
  
  return true;
}

void VisualEquipment::Swap(VisualEquipment* other) {
  if (other != this) {
    visual_item_.Swap(&other->visual_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisualEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisualEquipment_descriptor_;
  metadata.reflection = VisualEquipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestHistoryEntry::kSnoQuestFieldNumber;
const int QuestHistoryEntry::kDifficultyFieldNumber;
#endif  // !_MSC_VER

QuestHistoryEntry::QuestHistoryEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestHistoryEntry::InitAsDefaultInstance() {
}

QuestHistoryEntry::QuestHistoryEntry(const QuestHistoryEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestHistoryEntry::SharedCtor() {
  _cached_size_ = 0;
  sno_quest_ = 0;
  difficulty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestHistoryEntry::~QuestHistoryEntry() {
  SharedDtor();
}

void QuestHistoryEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestHistoryEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestHistoryEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestHistoryEntry_descriptor_;
}

const QuestHistoryEntry& QuestHistoryEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

QuestHistoryEntry* QuestHistoryEntry::default_instance_ = NULL;

QuestHistoryEntry* QuestHistoryEntry::New() const {
  return new QuestHistoryEntry;
}

void QuestHistoryEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sno_quest_ = 0;
    difficulty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestHistoryEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 sno_quest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sno_quest_)));
          set_has_sno_quest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_difficulty;
        break;
      }
      
      // required sint32 difficulty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestHistoryEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 sno_quest = 1;
  if (has_sno_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->sno_quest(), output);
  }
  
  // required sint32 difficulty = 2;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->difficulty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestHistoryEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 sno_quest = 1;
  if (has_sno_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->sno_quest(), target);
  }
  
  // required sint32 difficulty = 2;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->difficulty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestHistoryEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 sno_quest = 1;
    if (has_sno_quest()) {
      total_size += 1 + 4;
    }
    
    // required sint32 difficulty = 2;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->difficulty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestHistoryEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestHistoryEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestHistoryEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestHistoryEntry::MergeFrom(const QuestHistoryEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sno_quest()) {
      set_sno_quest(from.sno_quest());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestHistoryEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestHistoryEntry::CopyFrom(const QuestHistoryEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestHistoryEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void QuestHistoryEntry::Swap(QuestHistoryEntry* other) {
  if (other != this) {
    std::swap(sno_quest_, other->sno_quest_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestHistoryEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestHistoryEntry_descriptor_;
  metadata.reflection = QuestHistoryEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRewardHistoryEntry::kSnoQuestFieldNumber;
const int QuestRewardHistoryEntry::kStepUidFieldNumber;
const int QuestRewardHistoryEntry::kDifficultyFieldNumber;
#endif  // !_MSC_VER

QuestRewardHistoryEntry::QuestRewardHistoryEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRewardHistoryEntry::InitAsDefaultInstance() {
}

QuestRewardHistoryEntry::QuestRewardHistoryEntry(const QuestRewardHistoryEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRewardHistoryEntry::SharedCtor() {
  _cached_size_ = 0;
  sno_quest_ = 0;
  step_uid_ = 0;
  difficulty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRewardHistoryEntry::~QuestRewardHistoryEntry() {
  SharedDtor();
}

void QuestRewardHistoryEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRewardHistoryEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRewardHistoryEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRewardHistoryEntry_descriptor_;
}

const QuestRewardHistoryEntry& QuestRewardHistoryEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

QuestRewardHistoryEntry* QuestRewardHistoryEntry::default_instance_ = NULL;

QuestRewardHistoryEntry* QuestRewardHistoryEntry::New() const {
  return new QuestRewardHistoryEntry;
}

void QuestRewardHistoryEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sno_quest_ = 0;
    step_uid_ = 0;
    difficulty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRewardHistoryEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 sno_quest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sno_quest_)));
          set_has_sno_quest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_uid;
        break;
      }
      
      // required sint32 step_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &step_uid_)));
          set_has_step_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_difficulty;
        break;
      }
      
      // required sint32 difficulty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRewardHistoryEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 sno_quest = 1;
  if (has_sno_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->sno_quest(), output);
  }
  
  // required sint32 step_uid = 2;
  if (has_step_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->step_uid(), output);
  }
  
  // required sint32 difficulty = 3;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->difficulty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRewardHistoryEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 sno_quest = 1;
  if (has_sno_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->sno_quest(), target);
  }
  
  // required sint32 step_uid = 2;
  if (has_step_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->step_uid(), target);
  }
  
  // required sint32 difficulty = 3;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->difficulty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRewardHistoryEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 sno_quest = 1;
    if (has_sno_quest()) {
      total_size += 1 + 4;
    }
    
    // required sint32 step_uid = 2;
    if (has_step_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->step_uid());
    }
    
    // required sint32 difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->difficulty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRewardHistoryEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRewardHistoryEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRewardHistoryEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRewardHistoryEntry::MergeFrom(const QuestRewardHistoryEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sno_quest()) {
      set_sno_quest(from.sno_quest());
    }
    if (from.has_step_uid()) {
      set_step_uid(from.step_uid());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRewardHistoryEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRewardHistoryEntry::CopyFrom(const QuestRewardHistoryEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRewardHistoryEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void QuestRewardHistoryEntry::Swap(QuestRewardHistoryEntry* other) {
  if (other != this) {
    std::swap(sno_quest_, other->sno_quest_);
    std::swap(step_uid_, other->step_uid_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRewardHistoryEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRewardHistoryEntry_descriptor_;
  metadata.reflection = QuestRewardHistoryEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Digest::kVersionFieldNumber;
const int Digest::kHeroIdFieldNumber;
const int Digest::kHeroNameFieldNumber;
const int Digest::kGbidClassFieldNumber;
const int Digest::kLevelFieldNumber;
const int Digest::kPlayerFlagsFieldNumber;
const int Digest::kVisualEquipmentFieldNumber;
const int Digest::kQuestHistoryFieldNumber;
const int Digest::kLastPlayedActFieldNumber;
const int Digest::kHighestUnlockedActFieldNumber;
const int Digest::kLastPlayedDifficultyFieldNumber;
const int Digest::kHighestUnlockedDifficultyFieldNumber;
const int Digest::kLastPlayedQuestFieldNumber;
const int Digest::kLastPlayedQuestStepFieldNumber;
const int Digest::kTimePlayedFieldNumber;
#endif  // !_MSC_VER

Digest::Digest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Digest::InitAsDefaultInstance() {
  hero_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
  visual_equipment_ = const_cast< ::D3::Hero::VisualEquipment*>(&::D3::Hero::VisualEquipment::default_instance());
}

Digest::Digest(const Digest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Digest::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  hero_id_ = NULL;
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gbid_class_ = 0;
  level_ = 0;
  player_flags_ = 0u;
  visual_equipment_ = NULL;
  last_played_act_ = 0;
  highest_unlocked_act_ = 0;
  last_played_difficulty_ = 0;
  highest_unlocked_difficulty_ = 0;
  last_played_quest_ = 0;
  last_played_quest_step_ = 0;
  time_played_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Digest::~Digest() {
  SharedDtor();
}

void Digest::SharedDtor() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (this != default_instance_) {
    delete hero_id_;
    delete visual_equipment_;
  }
}

void Digest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Digest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Digest_descriptor_;
}

const Digest& Digest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

Digest* Digest::default_instance_ = NULL;

Digest* Digest::New() const {
  return new Digest;
}

void Digest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_hero_id()) {
      if (hero_id_ != NULL) hero_id_->::D3::OnlineService::EntityId::Clear();
    }
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_->clear();
      }
    }
    gbid_class_ = 0;
    level_ = 0;
    player_flags_ = 0u;
    if (has_visual_equipment()) {
      if (visual_equipment_ != NULL) visual_equipment_->::D3::Hero::VisualEquipment::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_played_act_ = 0;
    highest_unlocked_act_ = 0;
    last_played_difficulty_ = 0;
    highest_unlocked_difficulty_ = 0;
    last_played_quest_ = 0;
    last_played_quest_step_ = 0;
    time_played_ = 0u;
  }
  quest_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Digest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_id;
        break;
      }
      
      // required .D3.OnlineService.EntityId hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_name;
        break;
      }
      
      // required string hero_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_gbid_class;
        break;
      }
      
      // required sfixed32 gbid_class = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gbid_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &gbid_class_)));
          set_has_gbid_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // required sint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_flags;
        break;
      }
      
      // required uint32 player_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_flags_)));
          set_has_player_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_visual_equipment;
        break;
      }
      
      // required .D3.Hero.VisualEquipment visual_equipment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visual_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visual_equipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_quest_history;
        break;
      }
      
      // repeated .D3.Hero.QuestHistoryEntry quest_history = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_quest_history;
        if (input->ExpectTag(80)) goto parse_last_played_act;
        break;
      }
      
      // required sint32 last_played_act = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_played_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &last_played_act_)));
          set_has_last_played_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_highest_unlocked_act;
        break;
      }
      
      // required sint32 highest_unlocked_act = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_unlocked_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &highest_unlocked_act_)));
          set_has_highest_unlocked_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_last_played_difficulty;
        break;
      }
      
      // required sint32 last_played_difficulty = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_played_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &last_played_difficulty_)));
          set_has_last_played_difficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_highest_unlocked_difficulty;
        break;
      }
      
      // required sint32 highest_unlocked_difficulty = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_unlocked_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &highest_unlocked_difficulty_)));
          set_has_highest_unlocked_difficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_last_played_quest;
        break;
      }
      
      // required sfixed32 last_played_quest = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_last_played_quest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_played_quest_)));
          set_has_last_played_quest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_last_played_quest_step;
        break;
      }
      
      // required sint32 last_played_quest_step = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_played_quest_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &last_played_quest_step_)));
          set_has_last_played_quest_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_time_played;
        break;
      }
      
      // required uint32 time_played = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_played_)));
          set_has_time_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Digest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // required .D3.OnlineService.EntityId hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero_id(), output);
  }
  
  // required string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hero_name(), output);
  }
  
  // required sfixed32 gbid_class = 4;
  if (has_gbid_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->gbid_class(), output);
  }
  
  // required sint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->level(), output);
  }
  
  // required uint32 player_flags = 6;
  if (has_player_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->player_flags(), output);
  }
  
  // required .D3.Hero.VisualEquipment visual_equipment = 7;
  if (has_visual_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->visual_equipment(), output);
  }
  
  // repeated .D3.Hero.QuestHistoryEntry quest_history = 8;
  for (int i = 0; i < this->quest_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->quest_history(i), output);
  }
  
  // required sint32 last_played_act = 10;
  if (has_last_played_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->last_played_act(), output);
  }
  
  // required sint32 highest_unlocked_act = 11;
  if (has_highest_unlocked_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->highest_unlocked_act(), output);
  }
  
  // required sint32 last_played_difficulty = 12;
  if (has_last_played_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->last_played_difficulty(), output);
  }
  
  // required sint32 highest_unlocked_difficulty = 13;
  if (has_highest_unlocked_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->highest_unlocked_difficulty(), output);
  }
  
  // required sfixed32 last_played_quest = 14;
  if (has_last_played_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->last_played_quest(), output);
  }
  
  // required sint32 last_played_quest_step = 15;
  if (has_last_played_quest_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->last_played_quest_step(), output);
  }
  
  // required uint32 time_played = 16;
  if (has_time_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->time_played(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Digest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // required .D3.OnlineService.EntityId hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero_id(), target);
  }
  
  // required string hero_name = 3;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero_name(), target);
  }
  
  // required sfixed32 gbid_class = 4;
  if (has_gbid_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->gbid_class(), target);
  }
  
  // required sint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->level(), target);
  }
  
  // required uint32 player_flags = 6;
  if (has_player_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->player_flags(), target);
  }
  
  // required .D3.Hero.VisualEquipment visual_equipment = 7;
  if (has_visual_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->visual_equipment(), target);
  }
  
  // repeated .D3.Hero.QuestHistoryEntry quest_history = 8;
  for (int i = 0; i < this->quest_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->quest_history(i), target);
  }
  
  // required sint32 last_played_act = 10;
  if (has_last_played_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->last_played_act(), target);
  }
  
  // required sint32 highest_unlocked_act = 11;
  if (has_highest_unlocked_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->highest_unlocked_act(), target);
  }
  
  // required sint32 last_played_difficulty = 12;
  if (has_last_played_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->last_played_difficulty(), target);
  }
  
  // required sint32 highest_unlocked_difficulty = 13;
  if (has_highest_unlocked_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->highest_unlocked_difficulty(), target);
  }
  
  // required sfixed32 last_played_quest = 14;
  if (has_last_played_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->last_played_quest(), target);
  }
  
  // required sint32 last_played_quest_step = 15;
  if (has_last_played_quest_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->last_played_quest_step(), target);
  }
  
  // required uint32 time_played = 16;
  if (has_time_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->time_played(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Digest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // required .D3.OnlineService.EntityId hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_id());
    }
    
    // required string hero_name = 3;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }
    
    // required sfixed32 gbid_class = 4;
    if (has_gbid_class()) {
      total_size += 1 + 4;
    }
    
    // required sint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }
    
    // required uint32 player_flags = 6;
    if (has_player_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_flags());
    }
    
    // required .D3.Hero.VisualEquipment visual_equipment = 7;
    if (has_visual_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visual_equipment());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint32 last_played_act = 10;
    if (has_last_played_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->last_played_act());
    }
    
    // required sint32 highest_unlocked_act = 11;
    if (has_highest_unlocked_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->highest_unlocked_act());
    }
    
    // required sint32 last_played_difficulty = 12;
    if (has_last_played_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->last_played_difficulty());
    }
    
    // required sint32 highest_unlocked_difficulty = 13;
    if (has_highest_unlocked_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->highest_unlocked_difficulty());
    }
    
    // required sfixed32 last_played_quest = 14;
    if (has_last_played_quest()) {
      total_size += 1 + 4;
    }
    
    // required sint32 last_played_quest_step = 15;
    if (has_last_played_quest_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->last_played_quest_step());
    }
    
    // required uint32 time_played = 16;
    if (has_time_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_played());
    }
    
  }
  // repeated .D3.Hero.QuestHistoryEntry quest_history = 8;
  total_size += 1 * this->quest_history_size();
  for (int i = 0; i < this->quest_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest_history(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Digest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Digest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Digest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Digest::MergeFrom(const Digest& from) {
  GOOGLE_CHECK_NE(&from, this);
  quest_history_.MergeFrom(from.quest_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_hero_id()) {
      mutable_hero_id()->::D3::OnlineService::EntityId::MergeFrom(from.hero_id());
    }
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_gbid_class()) {
      set_gbid_class(from.gbid_class());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_player_flags()) {
      set_player_flags(from.player_flags());
    }
    if (from.has_visual_equipment()) {
      mutable_visual_equipment()->::D3::Hero::VisualEquipment::MergeFrom(from.visual_equipment());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_played_act()) {
      set_last_played_act(from.last_played_act());
    }
    if (from.has_highest_unlocked_act()) {
      set_highest_unlocked_act(from.highest_unlocked_act());
    }
    if (from.has_last_played_difficulty()) {
      set_last_played_difficulty(from.last_played_difficulty());
    }
    if (from.has_highest_unlocked_difficulty()) {
      set_highest_unlocked_difficulty(from.highest_unlocked_difficulty());
    }
    if (from.has_last_played_quest()) {
      set_last_played_quest(from.last_played_quest());
    }
    if (from.has_last_played_quest_step()) {
      set_last_played_quest_step(from.last_played_quest_step());
    }
    if (from.has_time_played()) {
      set_time_played(from.time_played());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Digest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Digest::CopyFrom(const Digest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Digest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007f7f) != 0x00007f7f) return false;
  
  if (has_hero_id()) {
    if (!this->hero_id().IsInitialized()) return false;
  }
  for (int i = 0; i < quest_history_size(); i++) {
    if (!this->quest_history(i).IsInitialized()) return false;
  }
  return true;
}

void Digest::Swap(Digest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_name_, other->hero_name_);
    std::swap(gbid_class_, other->gbid_class_);
    std::swap(level_, other->level_);
    std::swap(player_flags_, other->player_flags_);
    std::swap(visual_equipment_, other->visual_equipment_);
    quest_history_.Swap(&other->quest_history_);
    std::swap(last_played_act_, other->last_played_act_);
    std::swap(highest_unlocked_act_, other->highest_unlocked_act_);
    std::swap(last_played_difficulty_, other->last_played_difficulty_);
    std::swap(highest_unlocked_difficulty_, other->highest_unlocked_difficulty_);
    std::swap(last_played_quest_, other->last_played_quest_);
    std::swap(last_played_quest_step_, other->last_played_quest_step_);
    std::swap(time_played_, other->time_played_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Digest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Digest_descriptor_;
  metadata.reflection = Digest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotbarButtonData::kSnoPowerFieldNumber;
const int HotbarButtonData::kGbidItemFieldNumber;
#endif  // !_MSC_VER

HotbarButtonData::HotbarButtonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HotbarButtonData::InitAsDefaultInstance() {
}

HotbarButtonData::HotbarButtonData(const HotbarButtonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HotbarButtonData::SharedCtor() {
  _cached_size_ = 0;
  sno_power_ = 0;
  gbid_item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotbarButtonData::~HotbarButtonData() {
  SharedDtor();
}

void HotbarButtonData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HotbarButtonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotbarButtonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotbarButtonData_descriptor_;
}

const HotbarButtonData& HotbarButtonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

HotbarButtonData* HotbarButtonData::default_instance_ = NULL;

HotbarButtonData* HotbarButtonData::New() const {
  return new HotbarButtonData;
}

void HotbarButtonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sno_power_ = 0;
    gbid_item_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotbarButtonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 sno_power = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sno_power_)));
          set_has_sno_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_gbid_item;
        break;
      }
      
      // required sfixed32 gbid_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gbid_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &gbid_item_)));
          set_has_gbid_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HotbarButtonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 sno_power = 1;
  if (has_sno_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->sno_power(), output);
  }
  
  // required sfixed32 gbid_item = 2;
  if (has_gbid_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->gbid_item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HotbarButtonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 sno_power = 1;
  if (has_sno_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->sno_power(), target);
  }
  
  // required sfixed32 gbid_item = 2;
  if (has_gbid_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->gbid_item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HotbarButtonData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 sno_power = 1;
    if (has_sno_power()) {
      total_size += 1 + 4;
    }
    
    // required sfixed32 gbid_item = 2;
    if (has_gbid_item()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotbarButtonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotbarButtonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotbarButtonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotbarButtonData::MergeFrom(const HotbarButtonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sno_power()) {
      set_sno_power(from.sno_power());
    }
    if (from.has_gbid_item()) {
      set_gbid_item(from.gbid_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotbarButtonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotbarButtonData::CopyFrom(const HotbarButtonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotbarButtonData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HotbarButtonData::Swap(HotbarButtonData* other) {
  if (other != this) {
    std::swap(sno_power_, other->sno_power_);
    std::swap(gbid_item_, other->gbid_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotbarButtonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotbarButtonData_descriptor_;
  metadata.reflection = HotbarButtonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillKeyMapping::kSnoPowerFieldNumber;
const int SkillKeyMapping::kIdHotkeyFieldNumber;
const int SkillKeyMapping::kSkillButtonFieldNumber;
#endif  // !_MSC_VER

SkillKeyMapping::SkillKeyMapping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillKeyMapping::InitAsDefaultInstance() {
}

SkillKeyMapping::SkillKeyMapping(const SkillKeyMapping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillKeyMapping::SharedCtor() {
  _cached_size_ = 0;
  sno_power_ = 0;
  id_hotkey_ = 0;
  skill_button_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillKeyMapping::~SkillKeyMapping() {
  SharedDtor();
}

void SkillKeyMapping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillKeyMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillKeyMapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillKeyMapping_descriptor_;
}

const SkillKeyMapping& SkillKeyMapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

SkillKeyMapping* SkillKeyMapping::default_instance_ = NULL;

SkillKeyMapping* SkillKeyMapping::New() const {
  return new SkillKeyMapping;
}

void SkillKeyMapping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sno_power_ = 0;
    id_hotkey_ = 0;
    skill_button_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillKeyMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 sno_power = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sno_power_)));
          set_has_sno_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_hotkey;
        break;
      }
      
      // required sint32 id_hotkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_hotkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_hotkey_)));
          set_has_id_hotkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_button;
        break;
      }
      
      // required sint32 skill_button = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_button_)));
          set_has_skill_button();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillKeyMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 sno_power = 1;
  if (has_sno_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->sno_power(), output);
  }
  
  // required sint32 id_hotkey = 2;
  if (has_id_hotkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->id_hotkey(), output);
  }
  
  // required sint32 skill_button = 3;
  if (has_skill_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->skill_button(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillKeyMapping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 sno_power = 1;
  if (has_sno_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->sno_power(), target);
  }
  
  // required sint32 id_hotkey = 2;
  if (has_id_hotkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->id_hotkey(), target);
  }
  
  // required sint32 skill_button = 3;
  if (has_skill_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->skill_button(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillKeyMapping::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 sno_power = 1;
    if (has_sno_power()) {
      total_size += 1 + 4;
    }
    
    // required sint32 id_hotkey = 2;
    if (has_id_hotkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id_hotkey());
    }
    
    // required sint32 skill_button = 3;
    if (has_skill_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_button());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillKeyMapping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillKeyMapping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillKeyMapping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillKeyMapping::MergeFrom(const SkillKeyMapping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sno_power()) {
      set_sno_power(from.sno_power());
    }
    if (from.has_id_hotkey()) {
      set_id_hotkey(from.id_hotkey());
    }
    if (from.has_skill_button()) {
      set_skill_button(from.skill_button());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillKeyMapping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillKeyMapping::CopyFrom(const SkillKeyMapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillKeyMapping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SkillKeyMapping::Swap(SkillKeyMapping* other) {
  if (other != this) {
    std::swap(sno_power_, other->sno_power_);
    std::swap(id_hotkey_, other->id_hotkey_);
    std::swap(skill_button_, other->skill_button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillKeyMapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillKeyMapping_descriptor_;
  metadata.reflection = SkillKeyMapping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavedQuest::kSnoQuestFieldNumber;
const int SavedQuest::kDifficultyFieldNumber;
const int SavedQuest::kCurrentStepUidFieldNumber;
const int SavedQuest::kObjectiveStateFieldNumber;
const int SavedQuest::kFailureConditionStateFieldNumber;
#endif  // !_MSC_VER

SavedQuest::SavedQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavedQuest::InitAsDefaultInstance() {
}

SavedQuest::SavedQuest(const SavedQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavedQuest::SharedCtor() {
  _cached_size_ = 0;
  sno_quest_ = 0;
  difficulty_ = 0;
  current_step_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavedQuest::~SavedQuest() {
  SharedDtor();
}

void SavedQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SavedQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedQuest_descriptor_;
}

const SavedQuest& SavedQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

SavedQuest* SavedQuest::default_instance_ = NULL;

SavedQuest* SavedQuest::New() const {
  return new SavedQuest;
}

void SavedQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sno_quest_ = 0;
    difficulty_ = 0;
    current_step_uid_ = 0;
  }
  objective_state_.Clear();
  failure_condition_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavedQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 sno_quest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sno_quest_)));
          set_has_sno_quest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_difficulty;
        break;
      }
      
      // required sint32 difficulty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_step_uid;
        break;
      }
      
      // required sint32 current_step_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_step_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &current_step_uid_)));
          set_has_current_step_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_objective_state;
        break;
      }
      
      // repeated sint32 objective_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objective_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 32, input, this->mutable_objective_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_objective_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_objective_state;
        if (input->ExpectTag(40)) goto parse_failure_condition_state;
        break;
      }
      
      // repeated sint32 failure_condition_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failure_condition_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 40, input, this->mutable_failure_condition_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_failure_condition_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_failure_condition_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavedQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 sno_quest = 1;
  if (has_sno_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->sno_quest(), output);
  }
  
  // required sint32 difficulty = 2;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->difficulty(), output);
  }
  
  // required sint32 current_step_uid = 3;
  if (has_current_step_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->current_step_uid(), output);
  }
  
  // repeated sint32 objective_state = 4;
  for (int i = 0; i < this->objective_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      4, this->objective_state(i), output);
  }
  
  // repeated sint32 failure_condition_state = 5;
  for (int i = 0; i < this->failure_condition_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      5, this->failure_condition_state(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavedQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 sno_quest = 1;
  if (has_sno_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->sno_quest(), target);
  }
  
  // required sint32 difficulty = 2;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->difficulty(), target);
  }
  
  // required sint32 current_step_uid = 3;
  if (has_current_step_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->current_step_uid(), target);
  }
  
  // repeated sint32 objective_state = 4;
  for (int i = 0; i < this->objective_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(4, this->objective_state(i), target);
  }
  
  // repeated sint32 failure_condition_state = 5;
  for (int i = 0; i < this->failure_condition_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(5, this->failure_condition_state(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavedQuest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 sno_quest = 1;
    if (has_sno_quest()) {
      total_size += 1 + 4;
    }
    
    // required sint32 difficulty = 2;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->difficulty());
    }
    
    // required sint32 current_step_uid = 3;
    if (has_current_step_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->current_step_uid());
    }
    
  }
  // repeated sint32 objective_state = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->objective_state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->objective_state(i));
    }
    total_size += 1 * this->objective_state_size() + data_size;
  }
  
  // repeated sint32 failure_condition_state = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->failure_condition_state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->failure_condition_state(i));
    }
    total_size += 1 * this->failure_condition_state_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavedQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavedQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavedQuest::MergeFrom(const SavedQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  objective_state_.MergeFrom(from.objective_state_);
  failure_condition_state_.MergeFrom(from.failure_condition_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sno_quest()) {
      set_sno_quest(from.sno_quest());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_current_step_uid()) {
      set_current_step_uid(from.current_step_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavedQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedQuest::CopyFrom(const SavedQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SavedQuest::Swap(SavedQuest* other) {
  if (other != this) {
    std::swap(sno_quest_, other->sno_quest_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(current_step_uid_, other->current_step_uid_);
    objective_state_.Swap(&other->objective_state_);
    failure_condition_state_.Swap(&other->failure_condition_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavedQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedQuest_descriptor_;
  metadata.reflection = SavedQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LearnedLore::kSnoLoreLearnedFieldNumber;
#endif  // !_MSC_VER

LearnedLore::LearnedLore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LearnedLore::InitAsDefaultInstance() {
}

LearnedLore::LearnedLore(const LearnedLore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LearnedLore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearnedLore::~LearnedLore() {
  SharedDtor();
}

void LearnedLore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LearnedLore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnedLore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearnedLore_descriptor_;
}

const LearnedLore& LearnedLore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

LearnedLore* LearnedLore::default_instance_ = NULL;

LearnedLore* LearnedLore::New() const {
  return new LearnedLore;
}

void LearnedLore::Clear() {
  sno_lore_learned_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LearnedLore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sfixed32 sno_lore_learned = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sno_lore_learned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 13, input, this->mutable_sno_lore_learned())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_sno_lore_learned())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_sno_lore_learned;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LearnedLore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sfixed32 sno_lore_learned = 1;
  for (int i = 0; i < this->sno_lore_learned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      1, this->sno_lore_learned(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LearnedLore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sfixed32 sno_lore_learned = 1;
  for (int i = 0; i < this->sno_lore_learned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32ToArray(1, this->sno_lore_learned(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LearnedLore::ByteSize() const {
  int total_size = 0;
  
  // repeated sfixed32 sno_lore_learned = 1;
  {
    int data_size = 0;
    data_size = 4 * this->sno_lore_learned_size();
    total_size += 1 * this->sno_lore_learned_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnedLore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LearnedLore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LearnedLore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LearnedLore::MergeFrom(const LearnedLore& from) {
  GOOGLE_CHECK_NE(&from, this);
  sno_lore_learned_.MergeFrom(from.sno_lore_learned_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LearnedLore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnedLore::CopyFrom(const LearnedLore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnedLore::IsInitialized() const {
  
  return true;
}

void LearnedLore::Swap(LearnedLore* other) {
  if (other != this) {
    sno_lore_learned_.Swap(&other->sno_lore_learned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LearnedLore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LearnedLore_descriptor_;
  metadata.reflection = LearnedLore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavedConversations::kPlayedConversationsBitfieldFieldNumber;
const int SavedConversations::kSnoSavedConversationsFieldNumber;
#endif  // !_MSC_VER

SavedConversations::SavedConversations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavedConversations::InitAsDefaultInstance() {
}

SavedConversations::SavedConversations(const SavedConversations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavedConversations::SharedCtor() {
  _cached_size_ = 0;
  played_conversations_bitfield_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavedConversations::~SavedConversations() {
  SharedDtor();
}

void SavedConversations::SharedDtor() {
  if (played_conversations_bitfield_ != &::google::protobuf::internal::kEmptyString) {
    delete played_conversations_bitfield_;
  }
  if (this != default_instance_) {
  }
}

void SavedConversations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedConversations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedConversations_descriptor_;
}

const SavedConversations& SavedConversations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

SavedConversations* SavedConversations::default_instance_ = NULL;

SavedConversations* SavedConversations::New() const {
  return new SavedConversations;
}

void SavedConversations::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_played_conversations_bitfield()) {
      if (played_conversations_bitfield_ != &::google::protobuf::internal::kEmptyString) {
        played_conversations_bitfield_->clear();
      }
    }
  }
  sno_saved_conversations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavedConversations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes played_conversations_bitfield = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_played_conversations_bitfield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sno_saved_conversations;
        break;
      }
      
      // repeated sfixed32 sno_saved_conversations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sno_saved_conversations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 21, input, this->mutable_sno_saved_conversations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_sno_saved_conversations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sno_saved_conversations;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavedConversations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes played_conversations_bitfield = 1;
  if (has_played_conversations_bitfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->played_conversations_bitfield(), output);
  }
  
  // repeated sfixed32 sno_saved_conversations = 2;
  for (int i = 0; i < this->sno_saved_conversations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      2, this->sno_saved_conversations(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavedConversations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes played_conversations_bitfield = 1;
  if (has_played_conversations_bitfield()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->played_conversations_bitfield(), target);
  }
  
  // repeated sfixed32 sno_saved_conversations = 2;
  for (int i = 0; i < this->sno_saved_conversations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32ToArray(2, this->sno_saved_conversations(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavedConversations::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes played_conversations_bitfield = 1;
    if (has_played_conversations_bitfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->played_conversations_bitfield());
    }
    
  }
  // repeated sfixed32 sno_saved_conversations = 2;
  {
    int data_size = 0;
    data_size = 4 * this->sno_saved_conversations_size();
    total_size += 1 * this->sno_saved_conversations_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedConversations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavedConversations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavedConversations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavedConversations::MergeFrom(const SavedConversations& from) {
  GOOGLE_CHECK_NE(&from, this);
  sno_saved_conversations_.MergeFrom(from.sno_saved_conversations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_played_conversations_bitfield()) {
      set_played_conversations_bitfield(from.played_conversations_bitfield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavedConversations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedConversations::CopyFrom(const SavedConversations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedConversations::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SavedConversations::Swap(SavedConversations* other) {
  if (other != this) {
    std::swap(played_conversations_bitfield_, other->played_conversations_bitfield_);
    sno_saved_conversations_.Swap(&other->sno_saved_conversations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavedConversations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedConversations_descriptor_;
  metadata.reflection = SavedConversations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavePointData_Proto::kSnoWorldFieldNumber;
const int SavePointData_Proto::kSavepointNumberFieldNumber;
const int SavePointData_Proto::kCreatesPortalFieldNumber;
#endif  // !_MSC_VER

SavePointData_Proto::SavePointData_Proto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavePointData_Proto::InitAsDefaultInstance() {
}

SavePointData_Proto::SavePointData_Proto(const SavePointData_Proto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavePointData_Proto::SharedCtor() {
  _cached_size_ = 0;
  sno_world_ = 0;
  savepoint_number_ = 0;
  creates_portal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavePointData_Proto::~SavePointData_Proto() {
  SharedDtor();
}

void SavePointData_Proto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SavePointData_Proto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavePointData_Proto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavePointData_Proto_descriptor_;
}

const SavePointData_Proto& SavePointData_Proto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

SavePointData_Proto* SavePointData_Proto::default_instance_ = NULL;

SavePointData_Proto* SavePointData_Proto::New() const {
  return new SavePointData_Proto;
}

void SavePointData_Proto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sno_world_ = 0;
    savepoint_number_ = 0;
    creates_portal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavePointData_Proto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 sno_world = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sno_world_)));
          set_has_sno_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_savepoint_number;
        break;
      }
      
      // required sint32 savepoint_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_savepoint_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &savepoint_number_)));
          set_has_savepoint_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_creates_portal;
        break;
      }
      
      // required uint32 creates_portal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creates_portal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creates_portal_)));
          set_has_creates_portal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavePointData_Proto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 sno_world = 1;
  if (has_sno_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->sno_world(), output);
  }
  
  // required sint32 savepoint_number = 2;
  if (has_savepoint_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->savepoint_number(), output);
  }
  
  // required uint32 creates_portal = 3;
  if (has_creates_portal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creates_portal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavePointData_Proto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 sno_world = 1;
  if (has_sno_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->sno_world(), target);
  }
  
  // required sint32 savepoint_number = 2;
  if (has_savepoint_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->savepoint_number(), target);
  }
  
  // required uint32 creates_portal = 3;
  if (has_creates_portal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->creates_portal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavePointData_Proto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 sno_world = 1;
    if (has_sno_world()) {
      total_size += 1 + 4;
    }
    
    // required sint32 savepoint_number = 2;
    if (has_savepoint_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->savepoint_number());
    }
    
    // required uint32 creates_portal = 3;
    if (has_creates_portal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creates_portal());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavePointData_Proto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavePointData_Proto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavePointData_Proto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavePointData_Proto::MergeFrom(const SavePointData_Proto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sno_world()) {
      set_sno_world(from.sno_world());
    }
    if (from.has_savepoint_number()) {
      set_savepoint_number(from.savepoint_number());
    }
    if (from.has_creates_portal()) {
      set_creates_portal(from.creates_portal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavePointData_Proto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavePointData_Proto::CopyFrom(const SavePointData_Proto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavePointData_Proto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SavePointData_Proto::Swap(SavePointData_Proto* other) {
  if (other != this) {
    std::swap(sno_world_, other->sno_world_);
    std::swap(savepoint_number_, other->savepoint_number_);
    std::swap(creates_portal_, other->creates_portal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavePointData_Proto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavePointData_Proto_descriptor_;
  metadata.reflection = SavePointData_Proto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavedData::kHotbarButtonAssignmentsFieldNumber;
const int SavedData::kSkillKeyMapFieldNumber;
const int SavedData::kTimePlayedFieldNumber;
const int SavedData::kActivatedWaypointsFieldNumber;
const int SavedData::kHirelingSavedDataFieldNumber;
const int SavedData::kLastLevelTimeFieldNumber;
const int SavedData::kLearnedLoreFieldNumber;
const int SavedData::kSavedConversationsFieldNumber;
const int SavedData::kSnoActiveSkillsFieldNumber;
const int SavedData::kSnoTraitsFieldNumber;
const int SavedData::kSeenTutorialsFieldNumber;
const int SavedData::kSavePointFieldNumber;
#endif  // !_MSC_VER

SavedData::SavedData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavedData::InitAsDefaultInstance() {
  hireling_saved_data_ = const_cast< ::D3::Hireling::SavedData*>(&::D3::Hireling::SavedData::default_instance());
  learned_lore_ = const_cast< ::D3::Hero::LearnedLore*>(&::D3::Hero::LearnedLore::default_instance());
  saved_conversations_ = const_cast< ::D3::Hero::SavedConversations*>(&::D3::Hero::SavedConversations::default_instance());
  save_point_ = const_cast< ::D3::Hero::SavePointData_Proto*>(&::D3::Hero::SavePointData_Proto::default_instance());
}

SavedData::SavedData(const SavedData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavedData::SharedCtor() {
  _cached_size_ = 0;
  time_played_ = 0u;
  activated_waypoints_ = 0u;
  hireling_saved_data_ = NULL;
  last_level_time_ = 0u;
  learned_lore_ = NULL;
  saved_conversations_ = NULL;
  save_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavedData::~SavedData() {
  SharedDtor();
}

void SavedData::SharedDtor() {
  if (this != default_instance_) {
    delete hireling_saved_data_;
    delete learned_lore_;
    delete saved_conversations_;
    delete save_point_;
  }
}

void SavedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedData_descriptor_;
}

const SavedData& SavedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

SavedData* SavedData::default_instance_ = NULL;

SavedData* SavedData::New() const {
  return new SavedData;
}

void SavedData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    time_played_ = 0u;
    activated_waypoints_ = 0u;
    if (has_hireling_saved_data()) {
      if (hireling_saved_data_ != NULL) hireling_saved_data_->::D3::Hireling::SavedData::Clear();
    }
    last_level_time_ = 0u;
    if (has_learned_lore()) {
      if (learned_lore_ != NULL) learned_lore_->::D3::Hero::LearnedLore::Clear();
    }
    if (has_saved_conversations()) {
      if (saved_conversations_ != NULL) saved_conversations_->::D3::Hero::SavedConversations::Clear();
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (has_save_point()) {
      if (save_point_ != NULL) save_point_->::D3::Hero::SavePointData_Proto::Clear();
    }
  }
  hotbar_button_assignments_.Clear();
  skill_key_map_.Clear();
  sno_active_skills_.Clear();
  sno_traits_.Clear();
  seen_tutorials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .D3.Hero.HotbarButtonData hotbar_button_assignments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotbar_button_assignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hotbar_button_assignments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hotbar_button_assignments;
        if (input->ExpectTag(18)) goto parse_skill_key_map;
        break;
      }
      
      // repeated .D3.Hero.SkillKeyMapping skill_key_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_key_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_key_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_key_map;
        if (input->ExpectTag(24)) goto parse_time_played;
        break;
      }
      
      // required uint32 time_played = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_played_)));
          set_has_time_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_activated_waypoints;
        break;
      }
      
      // required uint32 activated_waypoints = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activated_waypoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activated_waypoints_)));
          set_has_activated_waypoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hireling_saved_data;
        break;
      }
      
      // required .D3.Hireling.SavedData hireling_saved_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hireling_saved_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hireling_saved_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_level_time;
        break;
      }
      
      // required uint32 last_level_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_level_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_level_time_)));
          set_has_last_level_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_learned_lore;
        break;
      }
      
      // required .D3.Hero.LearnedLore learned_lore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_learned_lore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_learned_lore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_saved_conversations;
        break;
      }
      
      // required .D3.Hero.SavedConversations saved_conversations = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saved_conversations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saved_conversations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_sno_active_skills;
        break;
      }
      
      // repeated sfixed32 sno_active_skills = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sno_active_skills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 77, input, this->mutable_sno_active_skills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_sno_active_skills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_sno_active_skills;
        if (input->ExpectTag(85)) goto parse_sno_traits;
        break;
      }
      
      // repeated sfixed32 sno_traits = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sno_traits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 85, input, this->mutable_sno_traits())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_sno_traits())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_sno_traits;
        if (input->ExpectTag(93)) goto parse_seen_tutorials;
        break;
      }
      
      // repeated sfixed32 seen_tutorials = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seen_tutorials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 93, input, this->mutable_seen_tutorials())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_seen_tutorials())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_seen_tutorials;
        if (input->ExpectTag(98)) goto parse_save_point;
        break;
      }
      
      // required .D3.Hero.SavePointData_Proto save_point = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .D3.Hero.HotbarButtonData hotbar_button_assignments = 1;
  for (int i = 0; i < this->hotbar_button_assignments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hotbar_button_assignments(i), output);
  }
  
  // repeated .D3.Hero.SkillKeyMapping skill_key_map = 2;
  for (int i = 0; i < this->skill_key_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill_key_map(i), output);
  }
  
  // required uint32 time_played = 3;
  if (has_time_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_played(), output);
  }
  
  // required uint32 activated_waypoints = 4;
  if (has_activated_waypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->activated_waypoints(), output);
  }
  
  // required .D3.Hireling.SavedData hireling_saved_data = 5;
  if (has_hireling_saved_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hireling_saved_data(), output);
  }
  
  // required uint32 last_level_time = 6;
  if (has_last_level_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_level_time(), output);
  }
  
  // required .D3.Hero.LearnedLore learned_lore = 7;
  if (has_learned_lore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->learned_lore(), output);
  }
  
  // required .D3.Hero.SavedConversations saved_conversations = 8;
  if (has_saved_conversations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->saved_conversations(), output);
  }
  
  // repeated sfixed32 sno_active_skills = 9;
  for (int i = 0; i < this->sno_active_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      9, this->sno_active_skills(i), output);
  }
  
  // repeated sfixed32 sno_traits = 10;
  for (int i = 0; i < this->sno_traits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      10, this->sno_traits(i), output);
  }
  
  // repeated sfixed32 seen_tutorials = 11;
  for (int i = 0; i < this->seen_tutorials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      11, this->seen_tutorials(i), output);
  }
  
  // required .D3.Hero.SavePointData_Proto save_point = 12;
  if (has_save_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->save_point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavedData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .D3.Hero.HotbarButtonData hotbar_button_assignments = 1;
  for (int i = 0; i < this->hotbar_button_assignments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hotbar_button_assignments(i), target);
  }
  
  // repeated .D3.Hero.SkillKeyMapping skill_key_map = 2;
  for (int i = 0; i < this->skill_key_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill_key_map(i), target);
  }
  
  // required uint32 time_played = 3;
  if (has_time_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_played(), target);
  }
  
  // required uint32 activated_waypoints = 4;
  if (has_activated_waypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->activated_waypoints(), target);
  }
  
  // required .D3.Hireling.SavedData hireling_saved_data = 5;
  if (has_hireling_saved_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hireling_saved_data(), target);
  }
  
  // required uint32 last_level_time = 6;
  if (has_last_level_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_level_time(), target);
  }
  
  // required .D3.Hero.LearnedLore learned_lore = 7;
  if (has_learned_lore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->learned_lore(), target);
  }
  
  // required .D3.Hero.SavedConversations saved_conversations = 8;
  if (has_saved_conversations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->saved_conversations(), target);
  }
  
  // repeated sfixed32 sno_active_skills = 9;
  for (int i = 0; i < this->sno_active_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32ToArray(9, this->sno_active_skills(i), target);
  }
  
  // repeated sfixed32 sno_traits = 10;
  for (int i = 0; i < this->sno_traits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32ToArray(10, this->sno_traits(i), target);
  }
  
  // repeated sfixed32 seen_tutorials = 11;
  for (int i = 0; i < this->seen_tutorials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32ToArray(11, this->seen_tutorials(i), target);
  }
  
  // required .D3.Hero.SavePointData_Proto save_point = 12;
  if (has_save_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->save_point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavedData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 time_played = 3;
    if (has_time_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_played());
    }
    
    // required uint32 activated_waypoints = 4;
    if (has_activated_waypoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activated_waypoints());
    }
    
    // required .D3.Hireling.SavedData hireling_saved_data = 5;
    if (has_hireling_saved_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hireling_saved_data());
    }
    
    // required uint32 last_level_time = 6;
    if (has_last_level_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_level_time());
    }
    
    // required .D3.Hero.LearnedLore learned_lore = 7;
    if (has_learned_lore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->learned_lore());
    }
    
    // required .D3.Hero.SavedConversations saved_conversations = 8;
    if (has_saved_conversations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->saved_conversations());
    }
    
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // required .D3.Hero.SavePointData_Proto save_point = 12;
    if (has_save_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->save_point());
    }
    
  }
  // repeated .D3.Hero.HotbarButtonData hotbar_button_assignments = 1;
  total_size += 1 * this->hotbar_button_assignments_size();
  for (int i = 0; i < this->hotbar_button_assignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hotbar_button_assignments(i));
  }
  
  // repeated .D3.Hero.SkillKeyMapping skill_key_map = 2;
  total_size += 1 * this->skill_key_map_size();
  for (int i = 0; i < this->skill_key_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_key_map(i));
  }
  
  // repeated sfixed32 sno_active_skills = 9;
  {
    int data_size = 0;
    data_size = 4 * this->sno_active_skills_size();
    total_size += 1 * this->sno_active_skills_size() + data_size;
  }
  
  // repeated sfixed32 sno_traits = 10;
  {
    int data_size = 0;
    data_size = 4 * this->sno_traits_size();
    total_size += 1 * this->sno_traits_size() + data_size;
  }
  
  // repeated sfixed32 seen_tutorials = 11;
  {
    int data_size = 0;
    data_size = 4 * this->seen_tutorials_size();
    total_size += 1 * this->seen_tutorials_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavedData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavedData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavedData::MergeFrom(const SavedData& from) {
  GOOGLE_CHECK_NE(&from, this);
  hotbar_button_assignments_.MergeFrom(from.hotbar_button_assignments_);
  skill_key_map_.MergeFrom(from.skill_key_map_);
  sno_active_skills_.MergeFrom(from.sno_active_skills_);
  sno_traits_.MergeFrom(from.sno_traits_);
  seen_tutorials_.MergeFrom(from.seen_tutorials_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_time_played()) {
      set_time_played(from.time_played());
    }
    if (from.has_activated_waypoints()) {
      set_activated_waypoints(from.activated_waypoints());
    }
    if (from.has_hireling_saved_data()) {
      mutable_hireling_saved_data()->::D3::Hireling::SavedData::MergeFrom(from.hireling_saved_data());
    }
    if (from.has_last_level_time()) {
      set_last_level_time(from.last_level_time());
    }
    if (from.has_learned_lore()) {
      mutable_learned_lore()->::D3::Hero::LearnedLore::MergeFrom(from.learned_lore());
    }
    if (from.has_saved_conversations()) {
      mutable_saved_conversations()->::D3::Hero::SavedConversations::MergeFrom(from.saved_conversations());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_save_point()) {
      mutable_save_point()->::D3::Hero::SavePointData_Proto::MergeFrom(from.save_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavedData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedData::CopyFrom(const SavedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000008fc) != 0x000008fc) return false;
  
  for (int i = 0; i < hotbar_button_assignments_size(); i++) {
    if (!this->hotbar_button_assignments(i).IsInitialized()) return false;
  }
  for (int i = 0; i < skill_key_map_size(); i++) {
    if (!this->skill_key_map(i).IsInitialized()) return false;
  }
  if (has_hireling_saved_data()) {
    if (!this->hireling_saved_data().IsInitialized()) return false;
  }
  if (has_saved_conversations()) {
    if (!this->saved_conversations().IsInitialized()) return false;
  }
  if (has_save_point()) {
    if (!this->save_point().IsInitialized()) return false;
  }
  return true;
}

void SavedData::Swap(SavedData* other) {
  if (other != this) {
    hotbar_button_assignments_.Swap(&other->hotbar_button_assignments_);
    skill_key_map_.Swap(&other->skill_key_map_);
    std::swap(time_played_, other->time_played_);
    std::swap(activated_waypoints_, other->activated_waypoints_);
    std::swap(hireling_saved_data_, other->hireling_saved_data_);
    std::swap(last_level_time_, other->last_level_time_);
    std::swap(learned_lore_, other->learned_lore_);
    std::swap(saved_conversations_, other->saved_conversations_);
    sno_active_skills_.Swap(&other->sno_active_skills_);
    sno_traits_.Swap(&other->sno_traits_);
    seen_tutorials_.Swap(&other->seen_tutorials_);
    std::swap(save_point_, other->save_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedData_descriptor_;
  metadata.reflection = SavedData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Timestamps::kCreateTimeFieldNumber;
const int Timestamps::kDeleteTimeFieldNumber;
#endif  // !_MSC_VER

Timestamps::Timestamps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Timestamps::InitAsDefaultInstance() {
}

Timestamps::Timestamps(const Timestamps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Timestamps::SharedCtor() {
  _cached_size_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  delete_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timestamps::~Timestamps() {
  SharedDtor();
}

void Timestamps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Timestamps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timestamps_descriptor_;
}

const Timestamps& Timestamps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

Timestamps* Timestamps::default_instance_ = NULL;

Timestamps* Timestamps::New() const {
  return new Timestamps;
}

void Timestamps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    create_time_ = GOOGLE_LONGLONG(0);
    delete_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Timestamps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 create_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delete_time;
        break;
      }
      
      // optional sint64 delete_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &delete_time_)));
          set_has_delete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Timestamps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 create_time = 1;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->create_time(), output);
  }
  
  // optional sint64 delete_time = 2;
  if (has_delete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->delete_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Timestamps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 create_time = 1;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->create_time(), target);
  }
  
  // optional sint64 delete_time = 2;
  if (has_delete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->delete_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Timestamps::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 create_time = 1;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->create_time());
    }
    
    // optional sint64 delete_time = 2;
    if (has_delete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->delete_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Timestamps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Timestamps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timestamps::MergeFrom(const Timestamps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_delete_time()) {
      set_delete_time(from.delete_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Timestamps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamps::CopyFrom(const Timestamps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Timestamps::Swap(Timestamps* other) {
  if (other != this) {
    std::swap(create_time_, other->create_time_);
    std::swap(delete_time_, other->delete_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Timestamps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timestamps_descriptor_;
  metadata.reflection = Timestamps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavedDefinition::kVersionFieldNumber;
const int SavedDefinition::kDigestFieldNumber;
const int SavedDefinition::kSavedAttributesFieldNumber;
const int SavedDefinition::kSavedDataFieldNumber;
const int SavedDefinition::kSavedQuestFieldNumber;
const int SavedDefinition::kItemsFieldNumber;
const int SavedDefinition::kQuestRewardHistoryFieldNumber;
#endif  // !_MSC_VER

SavedDefinition::SavedDefinition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavedDefinition::InitAsDefaultInstance() {
  digest_ = const_cast< ::D3::Hero::Digest*>(&::D3::Hero::Digest::default_instance());
  saved_attributes_ = const_cast< ::D3::AttributeSerializer::SavedAttributes*>(&::D3::AttributeSerializer::SavedAttributes::default_instance());
  saved_data_ = const_cast< ::D3::Hero::SavedData*>(&::D3::Hero::SavedData::default_instance());
  items_ = const_cast< ::D3::Items::ItemList*>(&::D3::Items::ItemList::default_instance());
}

SavedDefinition::SavedDefinition(const SavedDefinition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavedDefinition::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  digest_ = NULL;
  saved_attributes_ = NULL;
  saved_data_ = NULL;
  items_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavedDefinition::~SavedDefinition() {
  SharedDtor();
}

void SavedDefinition::SharedDtor() {
  if (this != default_instance_) {
    delete digest_;
    delete saved_attributes_;
    delete saved_data_;
    delete items_;
  }
}

void SavedDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedDefinition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedDefinition_descriptor_;
}

const SavedDefinition& SavedDefinition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

SavedDefinition* SavedDefinition::default_instance_ = NULL;

SavedDefinition* SavedDefinition::New() const {
  return new SavedDefinition;
}

void SavedDefinition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_digest()) {
      if (digest_ != NULL) digest_->::D3::Hero::Digest::Clear();
    }
    if (has_saved_attributes()) {
      if (saved_attributes_ != NULL) saved_attributes_->::D3::AttributeSerializer::SavedAttributes::Clear();
    }
    if (has_saved_data()) {
      if (saved_data_ != NULL) saved_data_->::D3::Hero::SavedData::Clear();
    }
    if (has_items()) {
      if (items_ != NULL) items_->::D3::Items::ItemList::Clear();
    }
  }
  saved_quest_.Clear();
  quest_reward_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavedDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_digest;
        break;
      }
      
      // optional .D3.Hero.Digest digest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_digest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_saved_attributes;
        break;
      }
      
      // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saved_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saved_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_saved_data;
        break;
      }
      
      // optional .D3.Hero.SavedData saved_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saved_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saved_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_saved_quest;
        break;
      }
      
      // repeated .D3.Hero.SavedQuest saved_quest = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saved_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_saved_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_saved_quest;
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }
      
      // optional .D3.Items.ItemList items = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_quest_reward_history;
        break;
      }
      
      // repeated .D3.Hero.QuestRewardHistoryEntry quest_reward_history = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_reward_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest_reward_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_quest_reward_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavedDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // optional .D3.Hero.Digest digest = 2;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->digest(), output);
  }
  
  // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
  if (has_saved_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->saved_attributes(), output);
  }
  
  // optional .D3.Hero.SavedData saved_data = 4;
  if (has_saved_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->saved_data(), output);
  }
  
  // repeated .D3.Hero.SavedQuest saved_quest = 5;
  for (int i = 0; i < this->saved_quest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->saved_quest(i), output);
  }
  
  // optional .D3.Items.ItemList items = 6;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(), output);
  }
  
  // repeated .D3.Hero.QuestRewardHistoryEntry quest_reward_history = 7;
  for (int i = 0; i < this->quest_reward_history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->quest_reward_history(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavedDefinition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // optional .D3.Hero.Digest digest = 2;
  if (has_digest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->digest(), target);
  }
  
  // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
  if (has_saved_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->saved_attributes(), target);
  }
  
  // optional .D3.Hero.SavedData saved_data = 4;
  if (has_saved_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->saved_data(), target);
  }
  
  // repeated .D3.Hero.SavedQuest saved_quest = 5;
  for (int i = 0; i < this->saved_quest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->saved_quest(i), target);
  }
  
  // optional .D3.Items.ItemList items = 6;
  if (has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(), target);
  }
  
  // repeated .D3.Hero.QuestRewardHistoryEntry quest_reward_history = 7;
  for (int i = 0; i < this->quest_reward_history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->quest_reward_history(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavedDefinition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional .D3.Hero.Digest digest = 2;
    if (has_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->digest());
    }
    
    // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
    if (has_saved_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->saved_attributes());
    }
    
    // optional .D3.Hero.SavedData saved_data = 4;
    if (has_saved_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->saved_data());
    }
    
    // optional .D3.Items.ItemList items = 6;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items());
    }
    
  }
  // repeated .D3.Hero.SavedQuest saved_quest = 5;
  total_size += 1 * this->saved_quest_size();
  for (int i = 0; i < this->saved_quest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->saved_quest(i));
  }
  
  // repeated .D3.Hero.QuestRewardHistoryEntry quest_reward_history = 7;
  total_size += 1 * this->quest_reward_history_size();
  for (int i = 0; i < this->quest_reward_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest_reward_history(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedDefinition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavedDefinition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavedDefinition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavedDefinition::MergeFrom(const SavedDefinition& from) {
  GOOGLE_CHECK_NE(&from, this);
  saved_quest_.MergeFrom(from.saved_quest_);
  quest_reward_history_.MergeFrom(from.quest_reward_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_digest()) {
      mutable_digest()->::D3::Hero::Digest::MergeFrom(from.digest());
    }
    if (from.has_saved_attributes()) {
      mutable_saved_attributes()->::D3::AttributeSerializer::SavedAttributes::MergeFrom(from.saved_attributes());
    }
    if (from.has_saved_data()) {
      mutable_saved_data()->::D3::Hero::SavedData::MergeFrom(from.saved_data());
    }
    if (from.has_items()) {
      mutable_items()->::D3::Items::ItemList::MergeFrom(from.items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavedDefinition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedDefinition::CopyFrom(const SavedDefinition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedDefinition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_digest()) {
    if (!this->digest().IsInitialized()) return false;
  }
  if (has_saved_attributes()) {
    if (!this->saved_attributes().IsInitialized()) return false;
  }
  if (has_saved_data()) {
    if (!this->saved_data().IsInitialized()) return false;
  }
  for (int i = 0; i < saved_quest_size(); i++) {
    if (!this->saved_quest(i).IsInitialized()) return false;
  }
  if (has_items()) {
    if (!this->items().IsInitialized()) return false;
  }
  for (int i = 0; i < quest_reward_history_size(); i++) {
    if (!this->quest_reward_history(i).IsInitialized()) return false;
  }
  return true;
}

void SavedDefinition::Swap(SavedDefinition* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(digest_, other->digest_);
    std::swap(saved_attributes_, other->saved_attributes_);
    std::swap(saved_data_, other->saved_data_);
    saved_quest_.Swap(&other->saved_quest_);
    std::swap(items_, other->items_);
    quest_reward_history_.Swap(&other->quest_reward_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavedDefinition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedDefinition_descriptor_;
  metadata.reflection = SavedDefinition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameSequence::kSequenceFieldNumber;
#endif  // !_MSC_VER

NameSequence::NameSequence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameSequence::InitAsDefaultInstance() {
}

NameSequence::NameSequence(const NameSequence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameSequence::SharedCtor() {
  _cached_size_ = 0;
  sequence_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameSequence::~NameSequence() {
  SharedDtor();
}

void NameSequence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NameSequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameSequence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameSequence_descriptor_;
}

const NameSequence& NameSequence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

NameSequence* NameSequence::default_instance_ = NULL;

NameSequence* NameSequence::New() const {
  return new NameSequence;
}

void NameSequence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sequence(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameSequence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sequence(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameSequence::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameSequence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameSequence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameSequence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameSequence::MergeFrom(const NameSequence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameSequence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameSequence::CopyFrom(const NameSequence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameSequence::IsInitialized() const {
  
  return true;
}

void NameSequence::Swap(NameSequence* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameSequence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameSequence_descriptor_;
  metadata.reflection = NameSequence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameText::kNameFieldNumber;
#endif  // !_MSC_VER

NameText::NameText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameText::InitAsDefaultInstance() {
}

NameText::NameText(const NameText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameText::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameText::~NameText() {
  SharedDtor();
}

void NameText::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NameText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameText_descriptor_;
}

const NameText& NameText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

NameText* NameText::default_instance_ = NULL;

NameText* NameText::New() const {
  return new NameText;
}

void NameText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameText::MergeFrom(const NameText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameText::CopyFrom(const NameText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameText::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NameText::Swap(NameText* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameText_descriptor_;
  metadata.reflection = NameText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Escrow::kVersionFieldNumber;
const int Escrow::kGeneratorFieldNumber;
const int Escrow::kHeroDataFieldNumber;
const int Escrow::kStateFieldNumber;
#endif  // !_MSC_VER

Escrow::Escrow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Escrow::InitAsDefaultInstance() {
  generator_ = const_cast< ::D3::Items::Generator*>(&::D3::Items::Generator::default_instance());
  hero_data_ = const_cast< ::D3::Hero::SavedData*>(&::D3::Hero::SavedData::default_instance());
}

Escrow::Escrow(const Escrow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Escrow::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  generator_ = NULL;
  hero_data_ = NULL;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Escrow::~Escrow() {
  SharedDtor();
}

void Escrow::SharedDtor() {
  if (this != default_instance_) {
    delete generator_;
    delete hero_data_;
  }
}

void Escrow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Escrow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Escrow_descriptor_;
}

const Escrow& Escrow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Hero_2eproto();  return *default_instance_;
}

Escrow* Escrow::default_instance_ = NULL;

Escrow* Escrow::New() const {
  return new Escrow;
}

void Escrow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_generator()) {
      if (generator_ != NULL) generator_->::D3::Items::Generator::Clear();
    }
    if (has_hero_data()) {
      if (hero_data_ != NULL) hero_data_->::D3::Hero::SavedData::Clear();
    }
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Escrow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_generator;
        break;
      }
      
      // optional .D3.Items.Generator generator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_data;
        break;
      }
      
      // optional .D3.Hero.SavedData hero_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // optional uint32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Escrow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // optional .D3.Items.Generator generator = 2;
  if (has_generator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->generator(), output);
  }
  
  // optional .D3.Hero.SavedData hero_data = 3;
  if (has_hero_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero_data(), output);
  }
  
  // optional uint32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Escrow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // optional .D3.Items.Generator generator = 2;
  if (has_generator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->generator(), target);
  }
  
  // optional .D3.Hero.SavedData hero_data = 3;
  if (has_hero_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero_data(), target);
  }
  
  // optional uint32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Escrow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional .D3.Items.Generator generator = 2;
    if (has_generator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generator());
    }
    
    // optional .D3.Hero.SavedData hero_data = 3;
    if (has_hero_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_data());
    }
    
    // optional uint32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Escrow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Escrow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Escrow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Escrow::MergeFrom(const Escrow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_generator()) {
      mutable_generator()->::D3::Items::Generator::MergeFrom(from.generator());
    }
    if (from.has_hero_data()) {
      mutable_hero_data()->::D3::Hero::SavedData::MergeFrom(from.hero_data());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Escrow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Escrow::CopyFrom(const Escrow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Escrow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_generator()) {
    if (!this->generator().IsInitialized()) return false;
  }
  if (has_hero_data()) {
    if (!this->hero_data().IsInitialized()) return false;
  }
  return true;
}

void Escrow::Swap(Escrow* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(generator_, other->generator_);
    std::swap(hero_data_, other->hero_data_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Escrow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Escrow_descriptor_;
  metadata.reflection = Escrow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Hero
}  // namespace D3

// @@protoc_insertion_point(global_scope)
