// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

#ifndef PROTOBUF_GameMessage_2eproto__INCLUDED
#define PROTOBUF_GameMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Hero.pb.h"
#include "OnlineService.pb.h"
#include "Settings.pb.h"
#include "Account.pb.h"
// @@protoc_insertion_point(includes)

namespace D3 {
namespace GameMessage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameMessage_2eproto();
void protobuf_AssignDesc_GameMessage_2eproto();
void protobuf_ShutdownFile_GameMessage_2eproto();

class HeroDigestList;
class ClientToonSettings;
class HeroDigestListRequest;
class HeroDigestResponse;
class HeroDigestListResponse;
class PlayerBanner;
class SaveBannerConfiguration;
class HeroDigestBanner;
class GameCurrentPlayers;

// ===================================================================

class HeroDigestList : public ::google::protobuf::Message {
 public:
  HeroDigestList();
  virtual ~HeroDigestList();
  
  HeroDigestList(const HeroDigestList& from);
  
  inline HeroDigestList& operator=(const HeroDigestList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroDigestList& default_instance();
  
  void Swap(HeroDigestList* other);
  
  // implements Message ----------------------------------------------
  
  HeroDigestList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroDigestList& from);
  void MergeFrom(const HeroDigestList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.OnlineService.EntityId account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline const ::D3::OnlineService::EntityId& account_id() const;
  inline ::D3::OnlineService::EntityId* mutable_account_id();
  inline ::D3::OnlineService::EntityId* release_account_id();
  
  // repeated .D3.Hero.Digest digest_list = 2;
  inline int digest_list_size() const;
  inline void clear_digest_list();
  static const int kDigestListFieldNumber = 2;
  inline const ::D3::Hero::Digest& digest_list(int index) const;
  inline ::D3::Hero::Digest* mutable_digest_list(int index);
  inline ::D3::Hero::Digest* add_digest_list();
  inline const ::google::protobuf::RepeatedPtrField< ::D3::Hero::Digest >&
      digest_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::D3::Hero::Digest >*
      mutable_digest_list();
  
  // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestList)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::OnlineService::EntityId* account_id_;
  ::google::protobuf::RepeatedPtrField< ::D3::Hero::Digest > digest_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();
  
  void InitAsDefaultInstance();
  static HeroDigestList* default_instance_;
};
// -------------------------------------------------------------------

class ClientToonSettings : public ::google::protobuf::Message {
 public:
  ClientToonSettings();
  virtual ~ClientToonSettings();
  
  ClientToonSettings(const ClientToonSettings& from);
  
  inline ClientToonSettings& operator=(const ClientToonSettings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientToonSettings& default_instance();
  
  void Swap(ClientToonSettings* other);
  
  // implements Message ----------------------------------------------
  
  ClientToonSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientToonSettings& from);
  void MergeFrom(const ClientToonSettings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.OnlineService.EntityId toon_id = 1;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 1;
  inline const ::D3::OnlineService::EntityId& toon_id() const;
  inline ::D3::OnlineService::EntityId* mutable_toon_id();
  inline ::D3::OnlineService::EntityId* release_toon_id();
  
  // required .D3.Client.ToonSettings client_toon_settings = 2;
  inline bool has_client_toon_settings() const;
  inline void clear_client_toon_settings();
  static const int kClientToonSettingsFieldNumber = 2;
  inline const ::D3::Client::ToonSettings& client_toon_settings() const;
  inline ::D3::Client::ToonSettings* mutable_client_toon_settings();
  inline ::D3::Client::ToonSettings* release_client_toon_settings();
  
  // @@protoc_insertion_point(class_scope:D3.GameMessage.ClientToonSettings)
 private:
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_client_toon_settings();
  inline void clear_has_client_toon_settings();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::OnlineService::EntityId* toon_id_;
  ::D3::Client::ToonSettings* client_toon_settings_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ClientToonSettings* default_instance_;
};
// -------------------------------------------------------------------

class HeroDigestListRequest : public ::google::protobuf::Message {
 public:
  HeroDigestListRequest();
  virtual ~HeroDigestListRequest();
  
  HeroDigestListRequest(const HeroDigestListRequest& from);
  
  inline HeroDigestListRequest& operator=(const HeroDigestListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroDigestListRequest& default_instance();
  
  void Swap(HeroDigestListRequest* other);
  
  // implements Message ----------------------------------------------
  
  HeroDigestListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroDigestListRequest& from);
  void MergeFrom(const HeroDigestListRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .D3.OnlineService.EntityId toon_id = 1;
  inline int toon_id_size() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 1;
  inline const ::D3::OnlineService::EntityId& toon_id(int index) const;
  inline ::D3::OnlineService::EntityId* mutable_toon_id(int index);
  inline ::D3::OnlineService::EntityId* add_toon_id();
  inline const ::google::protobuf::RepeatedPtrField< ::D3::OnlineService::EntityId >&
      toon_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::D3::OnlineService::EntityId >*
      mutable_toon_id();
  
  // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestListRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::D3::OnlineService::EntityId > toon_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();
  
  void InitAsDefaultInstance();
  static HeroDigestListRequest* default_instance_;
};
// -------------------------------------------------------------------

class HeroDigestResponse : public ::google::protobuf::Message {
 public:
  HeroDigestResponse();
  virtual ~HeroDigestResponse();
  
  HeroDigestResponse(const HeroDigestResponse& from);
  
  inline HeroDigestResponse& operator=(const HeroDigestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroDigestResponse& default_instance();
  
  void Swap(HeroDigestResponse* other);
  
  // implements Message ----------------------------------------------
  
  HeroDigestResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroDigestResponse& from);
  void MergeFrom(const HeroDigestResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.OnlineService.EntityId toon_id = 1;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 1;
  inline const ::D3::OnlineService::EntityId& toon_id() const;
  inline ::D3::OnlineService::EntityId* mutable_toon_id();
  inline ::D3::OnlineService::EntityId* release_toon_id();
  
  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);
  
  // optional .D3.Hero.Digest hero_digest = 3;
  inline bool has_hero_digest() const;
  inline void clear_hero_digest();
  static const int kHeroDigestFieldNumber = 3;
  inline const ::D3::Hero::Digest& hero_digest() const;
  inline ::D3::Hero::Digest* mutable_hero_digest();
  inline ::D3::Hero::Digest* release_hero_digest();
  
  // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestResponse)
 private:
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_hero_digest();
  inline void clear_has_hero_digest();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::OnlineService::EntityId* toon_id_;
  ::D3::Hero::Digest* hero_digest_;
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();
  
  void InitAsDefaultInstance();
  static HeroDigestResponse* default_instance_;
};
// -------------------------------------------------------------------

class HeroDigestListResponse : public ::google::protobuf::Message {
 public:
  HeroDigestListResponse();
  virtual ~HeroDigestListResponse();
  
  HeroDigestListResponse(const HeroDigestListResponse& from);
  
  inline HeroDigestListResponse& operator=(const HeroDigestListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroDigestListResponse& default_instance();
  
  void Swap(HeroDigestListResponse* other);
  
  // implements Message ----------------------------------------------
  
  HeroDigestListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroDigestListResponse& from);
  void MergeFrom(const HeroDigestListResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .D3.GameMessage.HeroDigestResponse digest_list = 1;
  inline int digest_list_size() const;
  inline void clear_digest_list();
  static const int kDigestListFieldNumber = 1;
  inline const ::D3::GameMessage::HeroDigestResponse& digest_list(int index) const;
  inline ::D3::GameMessage::HeroDigestResponse* mutable_digest_list(int index);
  inline ::D3::GameMessage::HeroDigestResponse* add_digest_list();
  inline const ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestResponse >&
      digest_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestResponse >*
      mutable_digest_list();
  
  // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestListResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestResponse > digest_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();
  
  void InitAsDefaultInstance();
  static HeroDigestListResponse* default_instance_;
};
// -------------------------------------------------------------------

class PlayerBanner : public ::google::protobuf::Message {
 public:
  PlayerBanner();
  virtual ~PlayerBanner();
  
  PlayerBanner(const PlayerBanner& from);
  
  inline PlayerBanner& operator=(const PlayerBanner& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBanner& default_instance();
  
  void Swap(PlayerBanner* other);
  
  // implements Message ----------------------------------------------
  
  PlayerBanner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerBanner& from);
  void MergeFrom(const PlayerBanner& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 player_index = 1;
  inline bool has_player_index() const;
  inline void clear_player_index();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 player_index() const;
  inline void set_player_index(::google::protobuf::uint32 value);
  
  // required .D3.Account.BannerConfiguration banner = 2;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 2;
  inline const ::D3::Account::BannerConfiguration& banner() const;
  inline ::D3::Account::BannerConfiguration* mutable_banner();
  inline ::D3::Account::BannerConfiguration* release_banner();
  
  // @@protoc_insertion_point(class_scope:D3.GameMessage.PlayerBanner)
 private:
  inline void set_has_player_index();
  inline void clear_has_player_index();
  inline void set_has_banner();
  inline void clear_has_banner();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::Account::BannerConfiguration* banner_;
  ::google::protobuf::uint32 player_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerBanner* default_instance_;
};
// -------------------------------------------------------------------

class SaveBannerConfiguration : public ::google::protobuf::Message {
 public:
  SaveBannerConfiguration();
  virtual ~SaveBannerConfiguration();
  
  SaveBannerConfiguration(const SaveBannerConfiguration& from);
  
  inline SaveBannerConfiguration& operator=(const SaveBannerConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveBannerConfiguration& default_instance();
  
  void Swap(SaveBannerConfiguration* other);
  
  // implements Message ----------------------------------------------
  
  SaveBannerConfiguration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveBannerConfiguration& from);
  void MergeFrom(const SaveBannerConfiguration& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.Account.BannerConfiguration banner = 1;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 1;
  inline const ::D3::Account::BannerConfiguration& banner() const;
  inline ::D3::Account::BannerConfiguration* mutable_banner();
  inline ::D3::Account::BannerConfiguration* release_banner();
  
  // optional uint32 slot_index = 2;
  inline bool has_slot_index() const;
  inline void clear_slot_index();
  static const int kSlotIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 slot_index() const;
  inline void set_slot_index(::google::protobuf::uint32 value);
  
  // optional bool make_active = 3;
  inline bool has_make_active() const;
  inline void clear_make_active();
  static const int kMakeActiveFieldNumber = 3;
  inline bool make_active() const;
  inline void set_make_active(bool value);
  
  // @@protoc_insertion_point(class_scope:D3.GameMessage.SaveBannerConfiguration)
 private:
  inline void set_has_banner();
  inline void clear_has_banner();
  inline void set_has_slot_index();
  inline void clear_has_slot_index();
  inline void set_has_make_active();
  inline void clear_has_make_active();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::Account::BannerConfiguration* banner_;
  ::google::protobuf::uint32 slot_index_;
  bool make_active_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();
  
  void InitAsDefaultInstance();
  static SaveBannerConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class HeroDigestBanner : public ::google::protobuf::Message {
 public:
  HeroDigestBanner();
  virtual ~HeroDigestBanner();
  
  HeroDigestBanner(const HeroDigestBanner& from);
  
  inline HeroDigestBanner& operator=(const HeroDigestBanner& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroDigestBanner& default_instance();
  
  void Swap(HeroDigestBanner* other);
  
  // implements Message ----------------------------------------------
  
  HeroDigestBanner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroDigestBanner& from);
  void MergeFrom(const HeroDigestBanner& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.Hero.Digest hero_digest = 1;
  inline bool has_hero_digest() const;
  inline void clear_hero_digest();
  static const int kHeroDigestFieldNumber = 1;
  inline const ::D3::Hero::Digest& hero_digest() const;
  inline ::D3::Hero::Digest* mutable_hero_digest();
  inline ::D3::Hero::Digest* release_hero_digest();
  
  // required .D3.Account.BannerConfiguration banner = 2;
  inline bool has_banner() const;
  inline void clear_banner();
  static const int kBannerFieldNumber = 2;
  inline const ::D3::Account::BannerConfiguration& banner() const;
  inline ::D3::Account::BannerConfiguration* mutable_banner();
  inline ::D3::Account::BannerConfiguration* release_banner();
  
  // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestBanner)
 private:
  inline void set_has_hero_digest();
  inline void clear_has_hero_digest();
  inline void set_has_banner();
  inline void clear_has_banner();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::Hero::Digest* hero_digest_;
  ::D3::Account::BannerConfiguration* banner_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();
  
  void InitAsDefaultInstance();
  static HeroDigestBanner* default_instance_;
};
// -------------------------------------------------------------------

class GameCurrentPlayers : public ::google::protobuf::Message {
 public:
  GameCurrentPlayers();
  virtual ~GameCurrentPlayers();
  
  GameCurrentPlayers(const GameCurrentPlayers& from);
  
  inline GameCurrentPlayers& operator=(const GameCurrentPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCurrentPlayers& default_instance();
  
  void Swap(GameCurrentPlayers* other);
  
  // implements Message ----------------------------------------------
  
  GameCurrentPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameCurrentPlayers& from);
  void MergeFrom(const GameCurrentPlayers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .D3.GameMessage.HeroDigestBanner players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::D3::GameMessage::HeroDigestBanner& players(int index) const;
  inline ::D3::GameMessage::HeroDigestBanner* mutable_players(int index);
  inline ::D3::GameMessage::HeroDigestBanner* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestBanner >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestBanner >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:D3.GameMessage.GameCurrentPlayers)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestBanner > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();
  
  void InitAsDefaultInstance();
  static GameCurrentPlayers* default_instance_;
};
// ===================================================================


// ===================================================================

// HeroDigestList

// required .D3.OnlineService.EntityId account_id = 1;
inline bool HeroDigestList::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroDigestList::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroDigestList::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroDigestList::clear_account_id() {
  if (account_id_ != NULL) account_id_->::D3::OnlineService::EntityId::Clear();
  clear_has_account_id();
}
inline const ::D3::OnlineService::EntityId& HeroDigestList::account_id() const {
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::D3::OnlineService::EntityId* HeroDigestList::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::D3::OnlineService::EntityId;
  return account_id_;
}
inline ::D3::OnlineService::EntityId* HeroDigestList::release_account_id() {
  clear_has_account_id();
  ::D3::OnlineService::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}

// repeated .D3.Hero.Digest digest_list = 2;
inline int HeroDigestList::digest_list_size() const {
  return digest_list_.size();
}
inline void HeroDigestList::clear_digest_list() {
  digest_list_.Clear();
}
inline const ::D3::Hero::Digest& HeroDigestList::digest_list(int index) const {
  return digest_list_.Get(index);
}
inline ::D3::Hero::Digest* HeroDigestList::mutable_digest_list(int index) {
  return digest_list_.Mutable(index);
}
inline ::D3::Hero::Digest* HeroDigestList::add_digest_list() {
  return digest_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::D3::Hero::Digest >&
HeroDigestList::digest_list() const {
  return digest_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::D3::Hero::Digest >*
HeroDigestList::mutable_digest_list() {
  return &digest_list_;
}

// -------------------------------------------------------------------

// ClientToonSettings

// required .D3.OnlineService.EntityId toon_id = 1;
inline bool ClientToonSettings::has_toon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientToonSettings::set_has_toon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientToonSettings::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientToonSettings::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::D3::OnlineService::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::D3::OnlineService::EntityId& ClientToonSettings::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::D3::OnlineService::EntityId* ClientToonSettings::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::D3::OnlineService::EntityId;
  return toon_id_;
}
inline ::D3::OnlineService::EntityId* ClientToonSettings::release_toon_id() {
  clear_has_toon_id();
  ::D3::OnlineService::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// required .D3.Client.ToonSettings client_toon_settings = 2;
inline bool ClientToonSettings::has_client_toon_settings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientToonSettings::set_has_client_toon_settings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientToonSettings::clear_has_client_toon_settings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientToonSettings::clear_client_toon_settings() {
  if (client_toon_settings_ != NULL) client_toon_settings_->::D3::Client::ToonSettings::Clear();
  clear_has_client_toon_settings();
}
inline const ::D3::Client::ToonSettings& ClientToonSettings::client_toon_settings() const {
  return client_toon_settings_ != NULL ? *client_toon_settings_ : *default_instance_->client_toon_settings_;
}
inline ::D3::Client::ToonSettings* ClientToonSettings::mutable_client_toon_settings() {
  set_has_client_toon_settings();
  if (client_toon_settings_ == NULL) client_toon_settings_ = new ::D3::Client::ToonSettings;
  return client_toon_settings_;
}
inline ::D3::Client::ToonSettings* ClientToonSettings::release_client_toon_settings() {
  clear_has_client_toon_settings();
  ::D3::Client::ToonSettings* temp = client_toon_settings_;
  client_toon_settings_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// HeroDigestListRequest

// repeated .D3.OnlineService.EntityId toon_id = 1;
inline int HeroDigestListRequest::toon_id_size() const {
  return toon_id_.size();
}
inline void HeroDigestListRequest::clear_toon_id() {
  toon_id_.Clear();
}
inline const ::D3::OnlineService::EntityId& HeroDigestListRequest::toon_id(int index) const {
  return toon_id_.Get(index);
}
inline ::D3::OnlineService::EntityId* HeroDigestListRequest::mutable_toon_id(int index) {
  return toon_id_.Mutable(index);
}
inline ::D3::OnlineService::EntityId* HeroDigestListRequest::add_toon_id() {
  return toon_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::D3::OnlineService::EntityId >&
HeroDigestListRequest::toon_id() const {
  return toon_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::D3::OnlineService::EntityId >*
HeroDigestListRequest::mutable_toon_id() {
  return &toon_id_;
}

// -------------------------------------------------------------------

// HeroDigestResponse

// required .D3.OnlineService.EntityId toon_id = 1;
inline bool HeroDigestResponse::has_toon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroDigestResponse::set_has_toon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroDigestResponse::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroDigestResponse::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::D3::OnlineService::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::D3::OnlineService::EntityId& HeroDigestResponse::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::D3::OnlineService::EntityId* HeroDigestResponse::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::D3::OnlineService::EntityId;
  return toon_id_;
}
inline ::D3::OnlineService::EntityId* HeroDigestResponse::release_toon_id() {
  clear_has_toon_id();
  ::D3::OnlineService::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// required bool success = 2;
inline bool HeroDigestResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroDigestResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroDigestResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroDigestResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool HeroDigestResponse::success() const {
  return success_;
}
inline void HeroDigestResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional .D3.Hero.Digest hero_digest = 3;
inline bool HeroDigestResponse::has_hero_digest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroDigestResponse::set_has_hero_digest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroDigestResponse::clear_has_hero_digest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroDigestResponse::clear_hero_digest() {
  if (hero_digest_ != NULL) hero_digest_->::D3::Hero::Digest::Clear();
  clear_has_hero_digest();
}
inline const ::D3::Hero::Digest& HeroDigestResponse::hero_digest() const {
  return hero_digest_ != NULL ? *hero_digest_ : *default_instance_->hero_digest_;
}
inline ::D3::Hero::Digest* HeroDigestResponse::mutable_hero_digest() {
  set_has_hero_digest();
  if (hero_digest_ == NULL) hero_digest_ = new ::D3::Hero::Digest;
  return hero_digest_;
}
inline ::D3::Hero::Digest* HeroDigestResponse::release_hero_digest() {
  clear_has_hero_digest();
  ::D3::Hero::Digest* temp = hero_digest_;
  hero_digest_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// HeroDigestListResponse

// repeated .D3.GameMessage.HeroDigestResponse digest_list = 1;
inline int HeroDigestListResponse::digest_list_size() const {
  return digest_list_.size();
}
inline void HeroDigestListResponse::clear_digest_list() {
  digest_list_.Clear();
}
inline const ::D3::GameMessage::HeroDigestResponse& HeroDigestListResponse::digest_list(int index) const {
  return digest_list_.Get(index);
}
inline ::D3::GameMessage::HeroDigestResponse* HeroDigestListResponse::mutable_digest_list(int index) {
  return digest_list_.Mutable(index);
}
inline ::D3::GameMessage::HeroDigestResponse* HeroDigestListResponse::add_digest_list() {
  return digest_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestResponse >&
HeroDigestListResponse::digest_list() const {
  return digest_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestResponse >*
HeroDigestListResponse::mutable_digest_list() {
  return &digest_list_;
}

// -------------------------------------------------------------------

// PlayerBanner

// required uint32 player_index = 1;
inline bool PlayerBanner::has_player_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerBanner::set_has_player_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerBanner::clear_has_player_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerBanner::clear_player_index() {
  player_index_ = 0u;
  clear_has_player_index();
}
inline ::google::protobuf::uint32 PlayerBanner::player_index() const {
  return player_index_;
}
inline void PlayerBanner::set_player_index(::google::protobuf::uint32 value) {
  set_has_player_index();
  player_index_ = value;
}

// required .D3.Account.BannerConfiguration banner = 2;
inline bool PlayerBanner::has_banner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerBanner::set_has_banner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerBanner::clear_has_banner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerBanner::clear_banner() {
  if (banner_ != NULL) banner_->::D3::Account::BannerConfiguration::Clear();
  clear_has_banner();
}
inline const ::D3::Account::BannerConfiguration& PlayerBanner::banner() const {
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::D3::Account::BannerConfiguration* PlayerBanner::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) banner_ = new ::D3::Account::BannerConfiguration;
  return banner_;
}
inline ::D3::Account::BannerConfiguration* PlayerBanner::release_banner() {
  clear_has_banner();
  ::D3::Account::BannerConfiguration* temp = banner_;
  banner_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SaveBannerConfiguration

// required .D3.Account.BannerConfiguration banner = 1;
inline bool SaveBannerConfiguration::has_banner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveBannerConfiguration::set_has_banner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveBannerConfiguration::clear_has_banner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveBannerConfiguration::clear_banner() {
  if (banner_ != NULL) banner_->::D3::Account::BannerConfiguration::Clear();
  clear_has_banner();
}
inline const ::D3::Account::BannerConfiguration& SaveBannerConfiguration::banner() const {
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::D3::Account::BannerConfiguration* SaveBannerConfiguration::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) banner_ = new ::D3::Account::BannerConfiguration;
  return banner_;
}
inline ::D3::Account::BannerConfiguration* SaveBannerConfiguration::release_banner() {
  clear_has_banner();
  ::D3::Account::BannerConfiguration* temp = banner_;
  banner_ = NULL;
  return temp;
}

// optional uint32 slot_index = 2;
inline bool SaveBannerConfiguration::has_slot_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveBannerConfiguration::set_has_slot_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveBannerConfiguration::clear_has_slot_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveBannerConfiguration::clear_slot_index() {
  slot_index_ = 0u;
  clear_has_slot_index();
}
inline ::google::protobuf::uint32 SaveBannerConfiguration::slot_index() const {
  return slot_index_;
}
inline void SaveBannerConfiguration::set_slot_index(::google::protobuf::uint32 value) {
  set_has_slot_index();
  slot_index_ = value;
}

// optional bool make_active = 3;
inline bool SaveBannerConfiguration::has_make_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveBannerConfiguration::set_has_make_active() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveBannerConfiguration::clear_has_make_active() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveBannerConfiguration::clear_make_active() {
  make_active_ = false;
  clear_has_make_active();
}
inline bool SaveBannerConfiguration::make_active() const {
  return make_active_;
}
inline void SaveBannerConfiguration::set_make_active(bool value) {
  set_has_make_active();
  make_active_ = value;
}

// -------------------------------------------------------------------

// HeroDigestBanner

// required .D3.Hero.Digest hero_digest = 1;
inline bool HeroDigestBanner::has_hero_digest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroDigestBanner::set_has_hero_digest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroDigestBanner::clear_has_hero_digest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroDigestBanner::clear_hero_digest() {
  if (hero_digest_ != NULL) hero_digest_->::D3::Hero::Digest::Clear();
  clear_has_hero_digest();
}
inline const ::D3::Hero::Digest& HeroDigestBanner::hero_digest() const {
  return hero_digest_ != NULL ? *hero_digest_ : *default_instance_->hero_digest_;
}
inline ::D3::Hero::Digest* HeroDigestBanner::mutable_hero_digest() {
  set_has_hero_digest();
  if (hero_digest_ == NULL) hero_digest_ = new ::D3::Hero::Digest;
  return hero_digest_;
}
inline ::D3::Hero::Digest* HeroDigestBanner::release_hero_digest() {
  clear_has_hero_digest();
  ::D3::Hero::Digest* temp = hero_digest_;
  hero_digest_ = NULL;
  return temp;
}

// required .D3.Account.BannerConfiguration banner = 2;
inline bool HeroDigestBanner::has_banner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroDigestBanner::set_has_banner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroDigestBanner::clear_has_banner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroDigestBanner::clear_banner() {
  if (banner_ != NULL) banner_->::D3::Account::BannerConfiguration::Clear();
  clear_has_banner();
}
inline const ::D3::Account::BannerConfiguration& HeroDigestBanner::banner() const {
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::D3::Account::BannerConfiguration* HeroDigestBanner::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) banner_ = new ::D3::Account::BannerConfiguration;
  return banner_;
}
inline ::D3::Account::BannerConfiguration* HeroDigestBanner::release_banner() {
  clear_has_banner();
  ::D3::Account::BannerConfiguration* temp = banner_;
  banner_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GameCurrentPlayers

// repeated .D3.GameMessage.HeroDigestBanner players = 1;
inline int GameCurrentPlayers::players_size() const {
  return players_.size();
}
inline void GameCurrentPlayers::clear_players() {
  players_.Clear();
}
inline const ::D3::GameMessage::HeroDigestBanner& GameCurrentPlayers::players(int index) const {
  return players_.Get(index);
}
inline ::D3::GameMessage::HeroDigestBanner* GameCurrentPlayers::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::D3::GameMessage::HeroDigestBanner* GameCurrentPlayers::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestBanner >&
GameCurrentPlayers::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::D3::GameMessage::HeroDigestBanner >*
GameCurrentPlayers::mutable_players() {
  return &players_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameMessage
}  // namespace D3

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameMessage_2eproto__INCLUDED
