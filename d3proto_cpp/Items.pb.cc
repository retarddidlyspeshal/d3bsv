// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Items.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace D3 {
namespace Items {

namespace {

const ::google::protobuf::Descriptor* RareItemName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RareItemName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Generator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Generator_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmbeddedGenerator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmbeddedGenerator_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavedItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionAccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ownership_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ownership_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Items_2eproto() {
  protobuf_AddDesc_Items_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Items.proto");
  GOOGLE_CHECK(file != NULL);
  RareItemName_descriptor_ = file->message_type(0);
  static const int RareItemName_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RareItemName, item_name_is_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RareItemName, sno_affix_string_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RareItemName, affix_string_list_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RareItemName, item_string_list_index_),
  };
  RareItemName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RareItemName_descriptor_,
      RareItemName::default_instance_,
      RareItemName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RareItemName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RareItemName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RareItemName));
  Generator_descriptor_ = file->message_type(1);
  static const int Generator_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, gb_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, base_affixes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, rare_item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, enchant_affix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, socket_affix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, stack_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, dye_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, item_quality_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, item_binding_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, max_durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, attuned_skill_),
  };
  Generator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Generator_descriptor_,
      Generator::default_instance_,
      Generator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Generator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Generator));
  EmbeddedGenerator_descriptor_ = file->message_type(2);
  static const int EmbeddedGenerator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddedGenerator, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddedGenerator, generator_),
  };
  EmbeddedGenerator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmbeddedGenerator_descriptor_,
      EmbeddedGenerator::default_instance_,
      EmbeddedGenerator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddedGenerator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbeddedGenerator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmbeddedGenerator));
  SavedItem_descriptor_ = file->message_type(3);
  static const int SavedItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, owner_entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, socket_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, hireling_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, item_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, square_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, used_socket_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, generator_),
  };
  SavedItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavedItem_descriptor_,
      SavedItem::default_instance_,
      SavedItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavedItem));
  AuctionAccountInfo_descriptor_ = file->message_type(4);
  static const int AuctionAccountInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionAccountInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionAccountInfo, escrow_id_),
  };
  AuctionAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionAccountInfo_descriptor_,
      AuctionAccountInfo::default_instance_,
      AuctionAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionAccountInfo));
  AuctionItem_descriptor_ = file->message_type(5);
  static const int AuctionItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, generator_),
  };
  AuctionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionItem_descriptor_,
      AuctionItem::default_instance_,
      AuctionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionItem));
  AuctionInfo_descriptor_ = file->message_type(6);
  static const int AuctionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, owner_),
  };
  AuctionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionInfo_descriptor_,
      AuctionInfo::default_instance_,
      AuctionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionInfo));
  ItemList_descriptor_ = file->message_type(7);
  static const int ItemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemList, items_),
  };
  ItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemList_descriptor_,
      ItemList::default_instance_,
      ItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemList));
  Ownership_descriptor_ = file->message_type(8);
  static const int Ownership_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ownership, owner_entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ownership, delete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ownership, escrow_id_),
  };
  Ownership_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ownership_descriptor_,
      Ownership::default_instance_,
      Ownership_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ownership, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ownership, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ownership));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Items_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RareItemName_descriptor_, &RareItemName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Generator_descriptor_, &Generator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmbeddedGenerator_descriptor_, &EmbeddedGenerator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavedItem_descriptor_, &SavedItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionAccountInfo_descriptor_, &AuctionAccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionItem_descriptor_, &AuctionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionInfo_descriptor_, &AuctionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemList_descriptor_, &ItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ownership_descriptor_, &Ownership::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Items_2eproto() {
  delete RareItemName::default_instance_;
  delete RareItemName_reflection_;
  delete Generator::default_instance_;
  delete Generator_reflection_;
  delete EmbeddedGenerator::default_instance_;
  delete EmbeddedGenerator_reflection_;
  delete SavedItem::default_instance_;
  delete SavedItem_reflection_;
  delete AuctionAccountInfo::default_instance_;
  delete AuctionAccountInfo_reflection_;
  delete AuctionItem::default_instance_;
  delete AuctionItem_reflection_;
  delete AuctionInfo::default_instance_;
  delete AuctionInfo_reflection_;
  delete ItemList::default_instance_;
  delete ItemList_reflection_;
  delete Ownership::default_instance_;
  delete Ownership_reflection_;
}

void protobuf_AddDesc_Items_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::D3::GameBalance::protobuf_AddDesc_GBHandle_2eproto();
  ::D3::OnlineService::protobuf_AddDesc_OnlineService_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Items.proto\022\010D3.Items\032\016GBHandle.proto\032"
    "\023OnlineService.proto\"\213\001\n\014RareItemName\022\033\n"
    "\023item_name_is_prefix\030\001 \002(\010\022\035\n\025sno_affix_"
    "string_list\030\002 \002(\017\022\037\n\027affix_string_list_i"
    "ndex\030\003 \002(\021\022\036\n\026item_string_list_index\030\004 \002"
    "(\021\"\226\003\n\tGenerator\022\014\n\004seed\030\001 \002(\r\022)\n\tgb_han"
    "dle\030\002 \002(\0132\026.D3.GameBalance.Handle\022\024\n\014bas"
    "e_affixes\030\003 \003(\017\022.\n\016rare_item_name\030\004 \002(\0132"
    "\026.D3.Items.RareItemName\022\025\n\renchant_affix"
    "\030\005 \002(\017\022\024\n\014socket_affix\030\006 \002(\017\022\r\n\005flags\030\007 "
    "\002(\r\022\022\n\ndurability\030\010 \002(\r\022\022\n\nstack_size\030\t "
    "\002(\004\022\020\n\010dye_type\030\n \002(\r\022\032\n\022item_quality_le"
    "vel\030\013 \002(\021\022\032\n\022item_binding_level\030\014 \002(\021\022\026\n"
    "\016max_durability\030\r \002(\r\022-\n\010contents\030\016 \003(\0132"
    "\033.D3.Items.EmbeddedGenerator\022\025\n\rattuned_"
    "skill\030\017 \001(\017\"a\n\021EmbeddedGenerator\022$\n\002id\030\001"
    " \002(\0132\030.D3.OnlineService.ItemId\022&\n\tgenera"
    "tor\030\002 \002(\0132\023.D3.Items.Generator\"\227\002\n\tSaved"
    "Item\022$\n\002id\030\001 \002(\0132\030.D3.OnlineService.Item"
    "Id\0223\n\017owner_entity_id\030\002 \001(\0132\032.D3.OnlineS"
    "ervice.EntityId\022+\n\tsocket_id\030\003 \001(\0132\030.D3."
    "OnlineService.ItemId\022\026\n\016hireling_class\030\004"
    " \002(\021\022\021\n\titem_slot\030\005 \002(\021\022\024\n\014square_index\030"
    "\006 \002(\021\022\031\n\021used_socket_count\030\007 \002(\r\022&\n\tgene"
    "rator\030\010 \001(\0132\023.D3.Items.Generator\"s\n\022Auct"
    "ionAccountInfo\022.\n\naccount_id\030\001 \002(\0132\032.D3."
    "OnlineService.EntityId\022-\n\tescrow_id\030\002 \002("
    "\0132\032.D3.OnlineService.EntityId\"[\n\013Auction"
    "Item\022$\n\002id\030\001 \002(\0132\030.D3.OnlineService.Item"
    "Id\022&\n\tgenerator\030\002 \002(\0132\023.D3.Items.Generat"
    "or\"W\n\013AuctionInfo\022$\n\002id\030\001 \002(\0132\030.D3.Onlin"
    "eService.ItemId\022\"\n\005owner\030\002 \001(\0132\023.D3.Item"
    "s.Ownership\".\n\010ItemList\022\"\n\005items\030\001 \003(\0132\023"
    ".D3.Items.SavedItem\"\204\001\n\tOwnership\0223\n\017own"
    "er_entity_id\030\001 \002(\0132\032.D3.OnlineService.En"
    "tityId\022\023\n\013delete_time\030\002 \001(\022\022-\n\tescrow_id"
    "\030\003 \001(\0132\032.D3.OnlineService.EntityId", 1474);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Items.proto", &protobuf_RegisterTypes);
  RareItemName::default_instance_ = new RareItemName();
  Generator::default_instance_ = new Generator();
  EmbeddedGenerator::default_instance_ = new EmbeddedGenerator();
  SavedItem::default_instance_ = new SavedItem();
  AuctionAccountInfo::default_instance_ = new AuctionAccountInfo();
  AuctionItem::default_instance_ = new AuctionItem();
  AuctionInfo::default_instance_ = new AuctionInfo();
  ItemList::default_instance_ = new ItemList();
  Ownership::default_instance_ = new Ownership();
  RareItemName::default_instance_->InitAsDefaultInstance();
  Generator::default_instance_->InitAsDefaultInstance();
  EmbeddedGenerator::default_instance_->InitAsDefaultInstance();
  SavedItem::default_instance_->InitAsDefaultInstance();
  AuctionAccountInfo::default_instance_->InitAsDefaultInstance();
  AuctionItem::default_instance_->InitAsDefaultInstance();
  AuctionInfo::default_instance_->InitAsDefaultInstance();
  ItemList::default_instance_->InitAsDefaultInstance();
  Ownership::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Items_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Items_2eproto {
  StaticDescriptorInitializer_Items_2eproto() {
    protobuf_AddDesc_Items_2eproto();
  }
} static_descriptor_initializer_Items_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RareItemName::kItemNameIsPrefixFieldNumber;
const int RareItemName::kSnoAffixStringListFieldNumber;
const int RareItemName::kAffixStringListIndexFieldNumber;
const int RareItemName::kItemStringListIndexFieldNumber;
#endif  // !_MSC_VER

RareItemName::RareItemName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RareItemName::InitAsDefaultInstance() {
}

RareItemName::RareItemName(const RareItemName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RareItemName::SharedCtor() {
  _cached_size_ = 0;
  item_name_is_prefix_ = false;
  sno_affix_string_list_ = 0;
  affix_string_list_index_ = 0;
  item_string_list_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RareItemName::~RareItemName() {
  SharedDtor();
}

void RareItemName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RareItemName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RareItemName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RareItemName_descriptor_;
}

const RareItemName& RareItemName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Items_2eproto();  return *default_instance_;
}

RareItemName* RareItemName::default_instance_ = NULL;

RareItemName* RareItemName::New() const {
  return new RareItemName;
}

void RareItemName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_name_is_prefix_ = false;
    sno_affix_string_list_ = 0;
    affix_string_list_index_ = 0;
    item_string_list_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RareItemName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool item_name_is_prefix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_name_is_prefix_)));
          set_has_item_name_is_prefix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sno_affix_string_list;
        break;
      }
      
      // required sfixed32 sno_affix_string_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sno_affix_string_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sno_affix_string_list_)));
          set_has_sno_affix_string_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_affix_string_list_index;
        break;
      }
      
      // required sint32 affix_string_list_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affix_string_list_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &affix_string_list_index_)));
          set_has_affix_string_list_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_string_list_index;
        break;
      }
      
      // required sint32 item_string_list_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_string_list_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &item_string_list_index_)));
          set_has_item_string_list_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RareItemName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool item_name_is_prefix = 1;
  if (has_item_name_is_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->item_name_is_prefix(), output);
  }
  
  // required sfixed32 sno_affix_string_list = 2;
  if (has_sno_affix_string_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->sno_affix_string_list(), output);
  }
  
  // required sint32 affix_string_list_index = 3;
  if (has_affix_string_list_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->affix_string_list_index(), output);
  }
  
  // required sint32 item_string_list_index = 4;
  if (has_item_string_list_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->item_string_list_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RareItemName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool item_name_is_prefix = 1;
  if (has_item_name_is_prefix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->item_name_is_prefix(), target);
  }
  
  // required sfixed32 sno_affix_string_list = 2;
  if (has_sno_affix_string_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->sno_affix_string_list(), target);
  }
  
  // required sint32 affix_string_list_index = 3;
  if (has_affix_string_list_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->affix_string_list_index(), target);
  }
  
  // required sint32 item_string_list_index = 4;
  if (has_item_string_list_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->item_string_list_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RareItemName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool item_name_is_prefix = 1;
    if (has_item_name_is_prefix()) {
      total_size += 1 + 1;
    }
    
    // required sfixed32 sno_affix_string_list = 2;
    if (has_sno_affix_string_list()) {
      total_size += 1 + 4;
    }
    
    // required sint32 affix_string_list_index = 3;
    if (has_affix_string_list_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->affix_string_list_index());
    }
    
    // required sint32 item_string_list_index = 4;
    if (has_item_string_list_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->item_string_list_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RareItemName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RareItemName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RareItemName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RareItemName::MergeFrom(const RareItemName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_name_is_prefix()) {
      set_item_name_is_prefix(from.item_name_is_prefix());
    }
    if (from.has_sno_affix_string_list()) {
      set_sno_affix_string_list(from.sno_affix_string_list());
    }
    if (from.has_affix_string_list_index()) {
      set_affix_string_list_index(from.affix_string_list_index());
    }
    if (from.has_item_string_list_index()) {
      set_item_string_list_index(from.item_string_list_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RareItemName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RareItemName::CopyFrom(const RareItemName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RareItemName::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RareItemName::Swap(RareItemName* other) {
  if (other != this) {
    std::swap(item_name_is_prefix_, other->item_name_is_prefix_);
    std::swap(sno_affix_string_list_, other->sno_affix_string_list_);
    std::swap(affix_string_list_index_, other->affix_string_list_index_);
    std::swap(item_string_list_index_, other->item_string_list_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RareItemName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RareItemName_descriptor_;
  metadata.reflection = RareItemName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Generator::kSeedFieldNumber;
const int Generator::kGbHandleFieldNumber;
const int Generator::kBaseAffixesFieldNumber;
const int Generator::kRareItemNameFieldNumber;
const int Generator::kEnchantAffixFieldNumber;
const int Generator::kSocketAffixFieldNumber;
const int Generator::kFlagsFieldNumber;
const int Generator::kDurabilityFieldNumber;
const int Generator::kStackSizeFieldNumber;
const int Generator::kDyeTypeFieldNumber;
const int Generator::kItemQualityLevelFieldNumber;
const int Generator::kItemBindingLevelFieldNumber;
const int Generator::kMaxDurabilityFieldNumber;
const int Generator::kContentsFieldNumber;
const int Generator::kAttunedSkillFieldNumber;
#endif  // !_MSC_VER

Generator::Generator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Generator::InitAsDefaultInstance() {
  gb_handle_ = const_cast< ::D3::GameBalance::Handle*>(&::D3::GameBalance::Handle::default_instance());
  rare_item_name_ = const_cast< ::D3::Items::RareItemName*>(&::D3::Items::RareItemName::default_instance());
}

Generator::Generator(const Generator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Generator::SharedCtor() {
  _cached_size_ = 0;
  seed_ = 0u;
  gb_handle_ = NULL;
  rare_item_name_ = NULL;
  enchant_affix_ = 0;
  socket_affix_ = 0;
  flags_ = 0u;
  durability_ = 0u;
  stack_size_ = GOOGLE_ULONGLONG(0);
  dye_type_ = 0u;
  item_quality_level_ = 0;
  item_binding_level_ = 0;
  max_durability_ = 0u;
  attuned_skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Generator::~Generator() {
  SharedDtor();
}

void Generator::SharedDtor() {
  if (this != default_instance_) {
    delete gb_handle_;
    delete rare_item_name_;
  }
}

void Generator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Generator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Generator_descriptor_;
}

const Generator& Generator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Items_2eproto();  return *default_instance_;
}

Generator* Generator::default_instance_ = NULL;

Generator* Generator::New() const {
  return new Generator;
}

void Generator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seed_ = 0u;
    if (has_gb_handle()) {
      if (gb_handle_ != NULL) gb_handle_->::D3::GameBalance::Handle::Clear();
    }
    if (has_rare_item_name()) {
      if (rare_item_name_ != NULL) rare_item_name_->::D3::Items::RareItemName::Clear();
    }
    enchant_affix_ = 0;
    socket_affix_ = 0;
    flags_ = 0u;
    durability_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    stack_size_ = GOOGLE_ULONGLONG(0);
    dye_type_ = 0u;
    item_quality_level_ = 0;
    item_binding_level_ = 0;
    max_durability_ = 0u;
    attuned_skill_ = 0;
  }
  base_affixes_.Clear();
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Generator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gb_handle;
        break;
      }
      
      // required .D3.GameBalance.Handle gb_handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gb_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gb_handle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_base_affixes;
        break;
      }
      
      // repeated sfixed32 base_affixes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_base_affixes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 29, input, this->mutable_base_affixes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_base_affixes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_base_affixes;
        if (input->ExpectTag(34)) goto parse_rare_item_name;
        break;
      }
      
      // required .D3.Items.RareItemName rare_item_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rare_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rare_item_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_enchant_affix;
        break;
      }
      
      // required sfixed32 enchant_affix = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enchant_affix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &enchant_affix_)));
          set_has_enchant_affix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_socket_affix;
        break;
      }
      
      // required sfixed32 socket_affix = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_socket_affix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &socket_affix_)));
          set_has_socket_affix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }
      
      // required uint32 flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_durability;
        break;
      }
      
      // required uint32 durability = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &durability_)));
          set_has_durability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_stack_size;
        break;
      }
      
      // required uint64 stack_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stack_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stack_size_)));
          set_has_stack_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dye_type;
        break;
      }
      
      // required uint32 dye_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dye_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dye_type_)));
          set_has_dye_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_item_quality_level;
        break;
      }
      
      // required sint32 item_quality_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_quality_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &item_quality_level_)));
          set_has_item_quality_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_item_binding_level;
        break;
      }
      
      // required sint32 item_binding_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_binding_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &item_binding_level_)));
          set_has_item_binding_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_max_durability;
        break;
      }
      
      // required uint32 max_durability = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_durability_)));
          set_has_max_durability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_contents;
        break;
      }
      
      // repeated .D3.Items.EmbeddedGenerator contents = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_contents;
        if (input->ExpectTag(125)) goto parse_attuned_skill;
        break;
      }
      
      // optional sfixed32 attuned_skill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attuned_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &attuned_skill_)));
          set_has_attuned_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Generator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seed = 1;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seed(), output);
  }
  
  // required .D3.GameBalance.Handle gb_handle = 2;
  if (has_gb_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gb_handle(), output);
  }
  
  // repeated sfixed32 base_affixes = 3;
  for (int i = 0; i < this->base_affixes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      3, this->base_affixes(i), output);
  }
  
  // required .D3.Items.RareItemName rare_item_name = 4;
  if (has_rare_item_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rare_item_name(), output);
  }
  
  // required sfixed32 enchant_affix = 5;
  if (has_enchant_affix()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->enchant_affix(), output);
  }
  
  // required sfixed32 socket_affix = 6;
  if (has_socket_affix()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->socket_affix(), output);
  }
  
  // required uint32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }
  
  // required uint32 durability = 8;
  if (has_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->durability(), output);
  }
  
  // required uint64 stack_size = 9;
  if (has_stack_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->stack_size(), output);
  }
  
  // required uint32 dye_type = 10;
  if (has_dye_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dye_type(), output);
  }
  
  // required sint32 item_quality_level = 11;
  if (has_item_quality_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->item_quality_level(), output);
  }
  
  // required sint32 item_binding_level = 12;
  if (has_item_binding_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->item_binding_level(), output);
  }
  
  // required uint32 max_durability = 13;
  if (has_max_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_durability(), output);
  }
  
  // repeated .D3.Items.EmbeddedGenerator contents = 14;
  for (int i = 0; i < this->contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->contents(i), output);
  }
  
  // optional sfixed32 attuned_skill = 15;
  if (has_attuned_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(15, this->attuned_skill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Generator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seed = 1;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seed(), target);
  }
  
  // required .D3.GameBalance.Handle gb_handle = 2;
  if (has_gb_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gb_handle(), target);
  }
  
  // repeated sfixed32 base_affixes = 3;
  for (int i = 0; i < this->base_affixes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32ToArray(3, this->base_affixes(i), target);
  }
  
  // required .D3.Items.RareItemName rare_item_name = 4;
  if (has_rare_item_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rare_item_name(), target);
  }
  
  // required sfixed32 enchant_affix = 5;
  if (has_enchant_affix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->enchant_affix(), target);
  }
  
  // required sfixed32 socket_affix = 6;
  if (has_socket_affix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->socket_affix(), target);
  }
  
  // required uint32 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flags(), target);
  }
  
  // required uint32 durability = 8;
  if (has_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->durability(), target);
  }
  
  // required uint64 stack_size = 9;
  if (has_stack_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->stack_size(), target);
  }
  
  // required uint32 dye_type = 10;
  if (has_dye_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dye_type(), target);
  }
  
  // required sint32 item_quality_level = 11;
  if (has_item_quality_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->item_quality_level(), target);
  }
  
  // required sint32 item_binding_level = 12;
  if (has_item_binding_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->item_binding_level(), target);
  }
  
  // required uint32 max_durability = 13;
  if (has_max_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_durability(), target);
  }
  
  // repeated .D3.Items.EmbeddedGenerator contents = 14;
  for (int i = 0; i < this->contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->contents(i), target);
  }
  
  // optional sfixed32 attuned_skill = 15;
  if (has_attuned_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(15, this->attuned_skill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Generator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seed = 1;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seed());
    }
    
    // required .D3.GameBalance.Handle gb_handle = 2;
    if (has_gb_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gb_handle());
    }
    
    // required .D3.Items.RareItemName rare_item_name = 4;
    if (has_rare_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rare_item_name());
    }
    
    // required sfixed32 enchant_affix = 5;
    if (has_enchant_affix()) {
      total_size += 1 + 4;
    }
    
    // required sfixed32 socket_affix = 6;
    if (has_socket_affix()) {
      total_size += 1 + 4;
    }
    
    // required uint32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // required uint32 durability = 8;
    if (has_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->durability());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 stack_size = 9;
    if (has_stack_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stack_size());
    }
    
    // required uint32 dye_type = 10;
    if (has_dye_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dye_type());
    }
    
    // required sint32 item_quality_level = 11;
    if (has_item_quality_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->item_quality_level());
    }
    
    // required sint32 item_binding_level = 12;
    if (has_item_binding_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->item_binding_level());
    }
    
    // required uint32 max_durability = 13;
    if (has_max_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_durability());
    }
    
    // optional sfixed32 attuned_skill = 15;
    if (has_attuned_skill()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated sfixed32 base_affixes = 3;
  {
    int data_size = 0;
    data_size = 4 * this->base_affixes_size();
    total_size += 1 * this->base_affixes_size() + data_size;
  }
  
  // repeated .D3.Items.EmbeddedGenerator contents = 14;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contents(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Generator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Generator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Generator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Generator::MergeFrom(const Generator& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_affixes_.MergeFrom(from.base_affixes_);
  contents_.MergeFrom(from.contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_gb_handle()) {
      mutable_gb_handle()->::D3::GameBalance::Handle::MergeFrom(from.gb_handle());
    }
    if (from.has_rare_item_name()) {
      mutable_rare_item_name()->::D3::Items::RareItemName::MergeFrom(from.rare_item_name());
    }
    if (from.has_enchant_affix()) {
      set_enchant_affix(from.enchant_affix());
    }
    if (from.has_socket_affix()) {
      set_socket_affix(from.socket_affix());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_durability()) {
      set_durability(from.durability());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stack_size()) {
      set_stack_size(from.stack_size());
    }
    if (from.has_dye_type()) {
      set_dye_type(from.dye_type());
    }
    if (from.has_item_quality_level()) {
      set_item_quality_level(from.item_quality_level());
    }
    if (from.has_item_binding_level()) {
      set_item_binding_level(from.item_binding_level());
    }
    if (from.has_max_durability()) {
      set_max_durability(from.max_durability());
    }
    if (from.has_attuned_skill()) {
      set_attuned_skill(from.attuned_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Generator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Generator::CopyFrom(const Generator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Generator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001ffb) != 0x00001ffb) return false;
  
  if (has_gb_handle()) {
    if (!this->gb_handle().IsInitialized()) return false;
  }
  if (has_rare_item_name()) {
    if (!this->rare_item_name().IsInitialized()) return false;
  }
  for (int i = 0; i < contents_size(); i++) {
    if (!this->contents(i).IsInitialized()) return false;
  }
  return true;
}

void Generator::Swap(Generator* other) {
  if (other != this) {
    std::swap(seed_, other->seed_);
    std::swap(gb_handle_, other->gb_handle_);
    base_affixes_.Swap(&other->base_affixes_);
    std::swap(rare_item_name_, other->rare_item_name_);
    std::swap(enchant_affix_, other->enchant_affix_);
    std::swap(socket_affix_, other->socket_affix_);
    std::swap(flags_, other->flags_);
    std::swap(durability_, other->durability_);
    std::swap(stack_size_, other->stack_size_);
    std::swap(dye_type_, other->dye_type_);
    std::swap(item_quality_level_, other->item_quality_level_);
    std::swap(item_binding_level_, other->item_binding_level_);
    std::swap(max_durability_, other->max_durability_);
    contents_.Swap(&other->contents_);
    std::swap(attuned_skill_, other->attuned_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Generator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Generator_descriptor_;
  metadata.reflection = Generator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmbeddedGenerator::kIdFieldNumber;
const int EmbeddedGenerator::kGeneratorFieldNumber;
#endif  // !_MSC_VER

EmbeddedGenerator::EmbeddedGenerator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmbeddedGenerator::InitAsDefaultInstance() {
  id_ = const_cast< ::D3::OnlineService::ItemId*>(&::D3::OnlineService::ItemId::default_instance());
  generator_ = const_cast< ::D3::Items::Generator*>(&::D3::Items::Generator::default_instance());
}

EmbeddedGenerator::EmbeddedGenerator(const EmbeddedGenerator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmbeddedGenerator::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  generator_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmbeddedGenerator::~EmbeddedGenerator() {
  SharedDtor();
}

void EmbeddedGenerator::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete generator_;
  }
}

void EmbeddedGenerator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbeddedGenerator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmbeddedGenerator_descriptor_;
}

const EmbeddedGenerator& EmbeddedGenerator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Items_2eproto();  return *default_instance_;
}

EmbeddedGenerator* EmbeddedGenerator::default_instance_ = NULL;

EmbeddedGenerator* EmbeddedGenerator::New() const {
  return new EmbeddedGenerator;
}

void EmbeddedGenerator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::D3::OnlineService::ItemId::Clear();
    }
    if (has_generator()) {
      if (generator_ != NULL) generator_->::D3::Items::Generator::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmbeddedGenerator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.OnlineService.ItemId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_generator;
        break;
      }
      
      // required .D3.Items.Generator generator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmbeddedGenerator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.OnlineService.ItemId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required .D3.Items.Generator generator = 2;
  if (has_generator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->generator(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmbeddedGenerator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.OnlineService.ItemId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required .D3.Items.Generator generator = 2;
  if (has_generator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->generator(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmbeddedGenerator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.OnlineService.ItemId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required .D3.Items.Generator generator = 2;
    if (has_generator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generator());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbeddedGenerator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmbeddedGenerator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmbeddedGenerator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmbeddedGenerator::MergeFrom(const EmbeddedGenerator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::D3::OnlineService::ItemId::MergeFrom(from.id());
    }
    if (from.has_generator()) {
      mutable_generator()->::D3::Items::Generator::MergeFrom(from.generator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmbeddedGenerator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbeddedGenerator::CopyFrom(const EmbeddedGenerator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbeddedGenerator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_generator()) {
    if (!this->generator().IsInitialized()) return false;
  }
  return true;
}

void EmbeddedGenerator::Swap(EmbeddedGenerator* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(generator_, other->generator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmbeddedGenerator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmbeddedGenerator_descriptor_;
  metadata.reflection = EmbeddedGenerator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavedItem::kIdFieldNumber;
const int SavedItem::kOwnerEntityIdFieldNumber;
const int SavedItem::kSocketIdFieldNumber;
const int SavedItem::kHirelingClassFieldNumber;
const int SavedItem::kItemSlotFieldNumber;
const int SavedItem::kSquareIndexFieldNumber;
const int SavedItem::kUsedSocketCountFieldNumber;
const int SavedItem::kGeneratorFieldNumber;
#endif  // !_MSC_VER

SavedItem::SavedItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavedItem::InitAsDefaultInstance() {
  id_ = const_cast< ::D3::OnlineService::ItemId*>(&::D3::OnlineService::ItemId::default_instance());
  owner_entity_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
  socket_id_ = const_cast< ::D3::OnlineService::ItemId*>(&::D3::OnlineService::ItemId::default_instance());
  generator_ = const_cast< ::D3::Items::Generator*>(&::D3::Items::Generator::default_instance());
}

SavedItem::SavedItem(const SavedItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavedItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  owner_entity_id_ = NULL;
  socket_id_ = NULL;
  hireling_class_ = 0;
  item_slot_ = 0;
  square_index_ = 0;
  used_socket_count_ = 0u;
  generator_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavedItem::~SavedItem() {
  SharedDtor();
}

void SavedItem::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete owner_entity_id_;
    delete socket_id_;
    delete generator_;
  }
}

void SavedItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedItem_descriptor_;
}

const SavedItem& SavedItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Items_2eproto();  return *default_instance_;
}

SavedItem* SavedItem::default_instance_ = NULL;

SavedItem* SavedItem::New() const {
  return new SavedItem;
}

void SavedItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::D3::OnlineService::ItemId::Clear();
    }
    if (has_owner_entity_id()) {
      if (owner_entity_id_ != NULL) owner_entity_id_->::D3::OnlineService::EntityId::Clear();
    }
    if (has_socket_id()) {
      if (socket_id_ != NULL) socket_id_->::D3::OnlineService::ItemId::Clear();
    }
    hireling_class_ = 0;
    item_slot_ = 0;
    square_index_ = 0;
    used_socket_count_ = 0u;
    if (has_generator()) {
      if (generator_ != NULL) generator_->::D3::Items::Generator::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavedItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.OnlineService.ItemId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner_entity_id;
        break;
      }
      
      // optional .D3.OnlineService.EntityId owner_entity_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_entity_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_entity_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_socket_id;
        break;
      }
      
      // optional .D3.OnlineService.ItemId socket_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socket_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hireling_class;
        break;
      }
      
      // required sint32 hireling_class = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hireling_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hireling_class_)));
          set_has_hireling_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_slot;
        break;
      }
      
      // required sint32 item_slot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &item_slot_)));
          set_has_item_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_square_index;
        break;
      }
      
      // required sint32 square_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_square_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &square_index_)));
          set_has_square_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_used_socket_count;
        break;
      }
      
      // required uint32 used_socket_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_socket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_socket_count_)));
          set_has_used_socket_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_generator;
        break;
      }
      
      // optional .D3.Items.Generator generator = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavedItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.OnlineService.ItemId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .D3.OnlineService.EntityId owner_entity_id = 2;
  if (has_owner_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->owner_entity_id(), output);
  }
  
  // optional .D3.OnlineService.ItemId socket_id = 3;
  if (has_socket_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->socket_id(), output);
  }
  
  // required sint32 hireling_class = 4;
  if (has_hireling_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->hireling_class(), output);
  }
  
  // required sint32 item_slot = 5;
  if (has_item_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->item_slot(), output);
  }
  
  // required sint32 square_index = 6;
  if (has_square_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->square_index(), output);
  }
  
  // required uint32 used_socket_count = 7;
  if (has_used_socket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->used_socket_count(), output);
  }
  
  // optional .D3.Items.Generator generator = 8;
  if (has_generator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->generator(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavedItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.OnlineService.ItemId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .D3.OnlineService.EntityId owner_entity_id = 2;
  if (has_owner_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->owner_entity_id(), target);
  }
  
  // optional .D3.OnlineService.ItemId socket_id = 3;
  if (has_socket_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->socket_id(), target);
  }
  
  // required sint32 hireling_class = 4;
  if (has_hireling_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->hireling_class(), target);
  }
  
  // required sint32 item_slot = 5;
  if (has_item_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->item_slot(), target);
  }
  
  // required sint32 square_index = 6;
  if (has_square_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->square_index(), target);
  }
  
  // required uint32 used_socket_count = 7;
  if (has_used_socket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->used_socket_count(), target);
  }
  
  // optional .D3.Items.Generator generator = 8;
  if (has_generator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->generator(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavedItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.OnlineService.ItemId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .D3.OnlineService.EntityId owner_entity_id = 2;
    if (has_owner_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_entity_id());
    }
    
    // optional .D3.OnlineService.ItemId socket_id = 3;
    if (has_socket_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket_id());
    }
    
    // required sint32 hireling_class = 4;
    if (has_hireling_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hireling_class());
    }
    
    // required sint32 item_slot = 5;
    if (has_item_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->item_slot());
    }
    
    // required sint32 square_index = 6;
    if (has_square_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->square_index());
    }
    
    // required uint32 used_socket_count = 7;
    if (has_used_socket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->used_socket_count());
    }
    
    // optional .D3.Items.Generator generator = 8;
    if (has_generator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generator());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavedItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavedItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavedItem::MergeFrom(const SavedItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::D3::OnlineService::ItemId::MergeFrom(from.id());
    }
    if (from.has_owner_entity_id()) {
      mutable_owner_entity_id()->::D3::OnlineService::EntityId::MergeFrom(from.owner_entity_id());
    }
    if (from.has_socket_id()) {
      mutable_socket_id()->::D3::OnlineService::ItemId::MergeFrom(from.socket_id());
    }
    if (from.has_hireling_class()) {
      set_hireling_class(from.hireling_class());
    }
    if (from.has_item_slot()) {
      set_item_slot(from.item_slot());
    }
    if (from.has_square_index()) {
      set_square_index(from.square_index());
    }
    if (from.has_used_socket_count()) {
      set_used_socket_count(from.used_socket_count());
    }
    if (from.has_generator()) {
      mutable_generator()->::D3::Items::Generator::MergeFrom(from.generator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavedItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedItem::CopyFrom(const SavedItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000079) != 0x00000079) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_owner_entity_id()) {
    if (!this->owner_entity_id().IsInitialized()) return false;
  }
  if (has_socket_id()) {
    if (!this->socket_id().IsInitialized()) return false;
  }
  if (has_generator()) {
    if (!this->generator().IsInitialized()) return false;
  }
  return true;
}

void SavedItem::Swap(SavedItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(owner_entity_id_, other->owner_entity_id_);
    std::swap(socket_id_, other->socket_id_);
    std::swap(hireling_class_, other->hireling_class_);
    std::swap(item_slot_, other->item_slot_);
    std::swap(square_index_, other->square_index_);
    std::swap(used_socket_count_, other->used_socket_count_);
    std::swap(generator_, other->generator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavedItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedItem_descriptor_;
  metadata.reflection = SavedItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionAccountInfo::kAccountIdFieldNumber;
const int AuctionAccountInfo::kEscrowIdFieldNumber;
#endif  // !_MSC_VER

AuctionAccountInfo::AuctionAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionAccountInfo::InitAsDefaultInstance() {
  account_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
  escrow_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
}

AuctionAccountInfo::AuctionAccountInfo(const AuctionAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = NULL;
  escrow_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionAccountInfo::~AuctionAccountInfo() {
  SharedDtor();
}

void AuctionAccountInfo::SharedDtor() {
  if (this != default_instance_) {
    delete account_id_;
    delete escrow_id_;
  }
}

void AuctionAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionAccountInfo_descriptor_;
}

const AuctionAccountInfo& AuctionAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Items_2eproto();  return *default_instance_;
}

AuctionAccountInfo* AuctionAccountInfo::default_instance_ = NULL;

AuctionAccountInfo* AuctionAccountInfo::New() const {
  return new AuctionAccountInfo;
}

void AuctionAccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::D3::OnlineService::EntityId::Clear();
    }
    if (has_escrow_id()) {
      if (escrow_id_ != NULL) escrow_id_->::D3::OnlineService::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.OnlineService.EntityId account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_escrow_id;
        break;
      }
      
      // required .D3.OnlineService.EntityId escrow_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_escrow_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_escrow_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.OnlineService.EntityId account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account_id(), output);
  }
  
  // required .D3.OnlineService.EntityId escrow_id = 2;
  if (has_escrow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->escrow_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.OnlineService.EntityId account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_id(), target);
  }
  
  // required .D3.OnlineService.EntityId escrow_id = 2;
  if (has_escrow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->escrow_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionAccountInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.OnlineService.EntityId account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }
    
    // required .D3.OnlineService.EntityId escrow_id = 2;
    if (has_escrow_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->escrow_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionAccountInfo::MergeFrom(const AuctionAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      mutable_account_id()->::D3::OnlineService::EntityId::MergeFrom(from.account_id());
    }
    if (from.has_escrow_id()) {
      mutable_escrow_id()->::D3::OnlineService::EntityId::MergeFrom(from.escrow_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionAccountInfo::CopyFrom(const AuctionAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionAccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_account_id()) {
    if (!this->account_id().IsInitialized()) return false;
  }
  if (has_escrow_id()) {
    if (!this->escrow_id().IsInitialized()) return false;
  }
  return true;
}

void AuctionAccountInfo::Swap(AuctionAccountInfo* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(escrow_id_, other->escrow_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionAccountInfo_descriptor_;
  metadata.reflection = AuctionAccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionItem::kIdFieldNumber;
const int AuctionItem::kGeneratorFieldNumber;
#endif  // !_MSC_VER

AuctionItem::AuctionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionItem::InitAsDefaultInstance() {
  id_ = const_cast< ::D3::OnlineService::ItemId*>(&::D3::OnlineService::ItemId::default_instance());
  generator_ = const_cast< ::D3::Items::Generator*>(&::D3::Items::Generator::default_instance());
}

AuctionItem::AuctionItem(const AuctionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  generator_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionItem::~AuctionItem() {
  SharedDtor();
}

void AuctionItem::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete generator_;
  }
}

void AuctionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionItem_descriptor_;
}

const AuctionItem& AuctionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Items_2eproto();  return *default_instance_;
}

AuctionItem* AuctionItem::default_instance_ = NULL;

AuctionItem* AuctionItem::New() const {
  return new AuctionItem;
}

void AuctionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::D3::OnlineService::ItemId::Clear();
    }
    if (has_generator()) {
      if (generator_ != NULL) generator_->::D3::Items::Generator::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.OnlineService.ItemId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_generator;
        break;
      }
      
      // required .D3.Items.Generator generator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.OnlineService.ItemId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required .D3.Items.Generator generator = 2;
  if (has_generator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->generator(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.OnlineService.ItemId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required .D3.Items.Generator generator = 2;
  if (has_generator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->generator(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.OnlineService.ItemId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required .D3.Items.Generator generator = 2;
    if (has_generator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generator());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionItem::MergeFrom(const AuctionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::D3::OnlineService::ItemId::MergeFrom(from.id());
    }
    if (from.has_generator()) {
      mutable_generator()->::D3::Items::Generator::MergeFrom(from.generator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionItem::CopyFrom(const AuctionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_generator()) {
    if (!this->generator().IsInitialized()) return false;
  }
  return true;
}

void AuctionItem::Swap(AuctionItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(generator_, other->generator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionItem_descriptor_;
  metadata.reflection = AuctionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionInfo::kIdFieldNumber;
const int AuctionInfo::kOwnerFieldNumber;
#endif  // !_MSC_VER

AuctionInfo::AuctionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuctionInfo::InitAsDefaultInstance() {
  id_ = const_cast< ::D3::OnlineService::ItemId*>(&::D3::OnlineService::ItemId::default_instance());
  owner_ = const_cast< ::D3::Items::Ownership*>(&::D3::Items::Ownership::default_instance());
}

AuctionInfo::AuctionInfo(const AuctionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuctionInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  owner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionInfo::~AuctionInfo() {
  SharedDtor();
}

void AuctionInfo::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete owner_;
  }
}

void AuctionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionInfo_descriptor_;
}

const AuctionInfo& AuctionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Items_2eproto();  return *default_instance_;
}

AuctionInfo* AuctionInfo::default_instance_ = NULL;

AuctionInfo* AuctionInfo::New() const {
  return new AuctionInfo;
}

void AuctionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::D3::OnlineService::ItemId::Clear();
    }
    if (has_owner()) {
      if (owner_ != NULL) owner_->::D3::Items::Ownership::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.OnlineService.ItemId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner;
        break;
      }
      
      // optional .D3.Items.Ownership owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuctionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.OnlineService.ItemId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .D3.Items.Ownership owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->owner(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuctionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.OnlineService.ItemId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .D3.Items.Ownership owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->owner(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuctionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.OnlineService.ItemId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .D3.Items.Ownership owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionInfo::MergeFrom(const AuctionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::D3::OnlineService::ItemId::MergeFrom(from.id());
    }
    if (from.has_owner()) {
      mutable_owner()->::D3::Items::Ownership::MergeFrom(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionInfo::CopyFrom(const AuctionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_owner()) {
    if (!this->owner().IsInitialized()) return false;
  }
  return true;
}

void AuctionInfo::Swap(AuctionInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionInfo_descriptor_;
  metadata.reflection = AuctionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemList::kItemsFieldNumber;
#endif  // !_MSC_VER

ItemList::ItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemList::InitAsDefaultInstance() {
}

ItemList::ItemList(const ItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemList::~ItemList() {
  SharedDtor();
}

void ItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemList_descriptor_;
}

const ItemList& ItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Items_2eproto();  return *default_instance_;
}

ItemList* ItemList::default_instance_ = NULL;

ItemList* ItemList::New() const {
  return new ItemList;
}

void ItemList::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .D3.Items.SavedItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .D3.Items.SavedItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .D3.Items.SavedItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemList::ByteSize() const {
  int total_size = 0;
  
  // repeated .D3.Items.SavedItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemList::MergeFrom(const ItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemList::CopyFrom(const ItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemList::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ItemList::Swap(ItemList* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemList_descriptor_;
  metadata.reflection = ItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ownership::kOwnerEntityIdFieldNumber;
const int Ownership::kDeleteTimeFieldNumber;
const int Ownership::kEscrowIdFieldNumber;
#endif  // !_MSC_VER

Ownership::Ownership()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ownership::InitAsDefaultInstance() {
  owner_entity_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
  escrow_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
}

Ownership::Ownership(const Ownership& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ownership::SharedCtor() {
  _cached_size_ = 0;
  owner_entity_id_ = NULL;
  delete_time_ = GOOGLE_LONGLONG(0);
  escrow_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ownership::~Ownership() {
  SharedDtor();
}

void Ownership::SharedDtor() {
  if (this != default_instance_) {
    delete owner_entity_id_;
    delete escrow_id_;
  }
}

void Ownership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ownership::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ownership_descriptor_;
}

const Ownership& Ownership::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Items_2eproto();  return *default_instance_;
}

Ownership* Ownership::default_instance_ = NULL;

Ownership* Ownership::New() const {
  return new Ownership;
}

void Ownership::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_owner_entity_id()) {
      if (owner_entity_id_ != NULL) owner_entity_id_->::D3::OnlineService::EntityId::Clear();
    }
    delete_time_ = GOOGLE_LONGLONG(0);
    if (has_escrow_id()) {
      if (escrow_id_ != NULL) escrow_id_->::D3::OnlineService::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ownership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.OnlineService.EntityId owner_entity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_entity_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delete_time;
        break;
      }
      
      // optional sint64 delete_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &delete_time_)));
          set_has_delete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_escrow_id;
        break;
      }
      
      // optional .D3.OnlineService.EntityId escrow_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_escrow_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_escrow_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ownership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.OnlineService.EntityId owner_entity_id = 1;
  if (has_owner_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->owner_entity_id(), output);
  }
  
  // optional sint64 delete_time = 2;
  if (has_delete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->delete_time(), output);
  }
  
  // optional .D3.OnlineService.EntityId escrow_id = 3;
  if (has_escrow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->escrow_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ownership::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.OnlineService.EntityId owner_entity_id = 1;
  if (has_owner_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->owner_entity_id(), target);
  }
  
  // optional sint64 delete_time = 2;
  if (has_delete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->delete_time(), target);
  }
  
  // optional .D3.OnlineService.EntityId escrow_id = 3;
  if (has_escrow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->escrow_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ownership::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.OnlineService.EntityId owner_entity_id = 1;
    if (has_owner_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_entity_id());
    }
    
    // optional sint64 delete_time = 2;
    if (has_delete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->delete_time());
    }
    
    // optional .D3.OnlineService.EntityId escrow_id = 3;
    if (has_escrow_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->escrow_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ownership::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ownership* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ownership*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ownership::MergeFrom(const Ownership& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_entity_id()) {
      mutable_owner_entity_id()->::D3::OnlineService::EntityId::MergeFrom(from.owner_entity_id());
    }
    if (from.has_delete_time()) {
      set_delete_time(from.delete_time());
    }
    if (from.has_escrow_id()) {
      mutable_escrow_id()->::D3::OnlineService::EntityId::MergeFrom(from.escrow_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ownership::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ownership::CopyFrom(const Ownership& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ownership::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_owner_entity_id()) {
    if (!this->owner_entity_id().IsInitialized()) return false;
  }
  if (has_escrow_id()) {
    if (!this->escrow_id().IsInitialized()) return false;
  }
  return true;
}

void Ownership::Swap(Ownership* other) {
  if (other != this) {
    std::swap(owner_entity_id_, other->owner_entity_id_);
    std::swap(delete_time_, other->delete_time_);
    std::swap(escrow_id_, other->escrow_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ownership::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ownership_descriptor_;
  metadata.reflection = Ownership_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Items
}  // namespace D3

// @@protoc_insertion_point(global_scope)
