// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/storage/storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace storage {

namespace {

const ::google::protobuf::Descriptor* TableId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnId_reflection_ = NULL;
const ::google::protobuf::Descriptor* RowId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RowId_reflection_ = NULL;
const ::google::protobuf::Descriptor* Privilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Privilege_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Privilege_Permission_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ScanOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanOperation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScanOperation_Op_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_Op_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_Cond_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenColumnRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenColumnRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenColumnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenColumnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecuteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecuteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecuteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecuteResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fstorage_2fstorage_2eproto() {
  protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/storage/storage.proto");
  GOOGLE_CHECK(file != NULL);
  TableId_descriptor_ = file->message_type(0);
  static const int TableId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableId, hash_),
  };
  TableId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableId_descriptor_,
      TableId::default_instance_,
      TableId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableId));
  ColumnId_descriptor_ = file->message_type(1);
  static const int ColumnId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnId, hash_),
  };
  ColumnId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnId_descriptor_,
      ColumnId::default_instance_,
      ColumnId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnId));
  RowId_descriptor_ = file->message_type(2);
  static const int RowId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowId, hash_),
  };
  RowId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RowId_descriptor_,
      RowId::default_instance_,
      RowId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RowId));
  Privilege_descriptor_ = file->message_type(3);
  static const int Privilege_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, program_),
  };
  Privilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Privilege_descriptor_,
      Privilege::default_instance_,
      Privilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Privilege));
  Privilege_Permission_descriptor_ = Privilege_descriptor_->enum_type(0);
  ScanOperation_descriptor_ = file->message_type(4);
  static const int ScanOperation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanOperation, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanOperation, field_),
  };
  ScanOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanOperation_descriptor_,
      ScanOperation::default_instance_,
      ScanOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanOperation));
  ScanOperation_Op_descriptor_ = ScanOperation_descriptor_->enum_type(0);
  Command_descriptor_ = file->message_type(5);
  static const int Command_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, min_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, max_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, scan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, message_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Command_Op_descriptor_ = Command_descriptor_->enum_type(0);
  Command_Cond_descriptor_ = Command_descriptor_->enum_type(1);
  Operation_descriptor_ = file->message_type(6);
  static const int Operation_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, column_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, row_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, rops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, mutate_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, privilege_),
  };
  Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_descriptor_,
      Operation::default_instance_,
      Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation));
  Cell_descriptor_ = file->message_type(7);
  static const int Cell_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, column_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, row_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, data_),
  };
  Cell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cell_descriptor_,
      Cell::default_instance_,
      Cell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cell));
  OperationResult_descriptor_ = file->message_type(8);
  static const int OperationResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationResult, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationResult, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationResult, data_),
  };
  OperationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationResult_descriptor_,
      OperationResult::default_instance_,
      OperationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationResult));
  OpenTableRequest_descriptor_ = file->message_type(9);
  static const int OpenTableRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenTableRequest, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenTableRequest, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenTableRequest, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenTableRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenTableRequest, process_name_),
  };
  OpenTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenTableRequest_descriptor_,
      OpenTableRequest::default_instance_,
      OpenTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenTableRequest));
  OpenTableResponse_descriptor_ = file->message_type(10);
  static const int OpenTableResponse_offsets_[1] = {
  };
  OpenTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenTableResponse_descriptor_,
      OpenTableResponse::default_instance_,
      OpenTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenTableResponse));
  OpenColumnRequest_descriptor_ = file->message_type(11);
  static const int OpenColumnRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnRequest, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnRequest, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnRequest, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnRequest, column_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnRequest, proto_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnRequest, process_name_),
  };
  OpenColumnRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenColumnRequest_descriptor_,
      OpenColumnRequest::default_instance_,
      OpenColumnRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenColumnRequest));
  OpenColumnResponse_descriptor_ = file->message_type(12);
  static const int OpenColumnResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnResponse, server_field_ops_),
  };
  OpenColumnResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenColumnResponse_descriptor_,
      OpenColumnResponse::default_instance_,
      OpenColumnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenColumnResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenColumnResponse));
  ExecuteRequest_descriptor_ = file->message_type(13);
  static const int ExecuteRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, read_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, wants_row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, wants_column_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, max_data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, operations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, query_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, process_name_),
  };
  ExecuteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecuteRequest_descriptor_,
      ExecuteRequest::default_instance_,
      ExecuteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecuteRequest));
  ExecuteResponse_descriptor_ = file->message_type(14);
  static const int ExecuteResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteResponse, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteResponse, error_message_),
  };
  ExecuteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecuteResponse_descriptor_,
      ExecuteResponse::default_instance_,
      ExecuteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecuteResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fstorage_2fstorage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableId_descriptor_, &TableId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnId_descriptor_, &ColumnId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RowId_descriptor_, &RowId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Privilege_descriptor_, &Privilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanOperation_descriptor_, &ScanOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_descriptor_, &Operation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cell_descriptor_, &Cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationResult_descriptor_, &OperationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenTableRequest_descriptor_, &OpenTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenTableResponse_descriptor_, &OpenTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenColumnRequest_descriptor_, &OpenColumnRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenColumnResponse_descriptor_, &OpenColumnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecuteRequest_descriptor_, &ExecuteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecuteResponse_descriptor_, &ExecuteResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fstorage_2fstorage_2eproto() {
  delete TableId::default_instance_;
  delete TableId_reflection_;
  delete ColumnId::default_instance_;
  delete ColumnId_reflection_;
  delete RowId::default_instance_;
  delete RowId_reflection_;
  delete Privilege::default_instance_;
  delete Privilege_reflection_;
  delete ScanOperation::default_instance_;
  delete ScanOperation_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Operation::default_instance_;
  delete Operation_reflection_;
  delete Cell::default_instance_;
  delete Cell_reflection_;
  delete OperationResult::default_instance_;
  delete OperationResult_reflection_;
  delete OpenTableRequest::default_instance_;
  delete OpenTableRequest_reflection_;
  delete OpenTableResponse::default_instance_;
  delete OpenTableResponse_reflection_;
  delete OpenColumnRequest::default_instance_;
  delete OpenColumnRequest_reflection_;
  delete OpenColumnResponse::default_instance_;
  delete OpenColumnResponse_reflection_;
  delete ExecuteRequest::default_instance_;
  delete ExecuteRequest_reflection_;
  delete ExecuteResponse::default_instance_;
  delete ExecuteResponse_reflection_;
}

void protobuf_AddDesc_service_2fstorage_2fstorage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fdescriptor_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035service/storage/storage.proto\022\025bnet.pr"
    "otocol.storage\032\035lib/protocol/descriptor."
    "proto\032\031lib/protocol/entity.proto\032\021lib/rp"
    "c/rpc.proto\"\027\n\007TableId\022\014\n\004hash\030\001 \002(\014\"\030\n\010"
    "ColumnId\022\014\n\004hash\030\001 \002(\014\"\025\n\005RowId\022\014\n\004hash\030"
    "\001 \002(\014\"m\n\tPrivilege\022\014\n\004bits\030\001 \001(\006\022\017\n\007prog"
    "ram\030\002 \001(\007\"A\n\nPermission\022\t\n\005OWNER\020\001\022\n\n\006FR"
    "IEND\020\002\022\t\n\005OTHER\020\004\022\010\n\004GAME\020\010\022\007\n\003ALL\020\017\"\373\001\n"
    "\rScanOperation\0223\n\002op\030\001 \002(\0162\'.bnet.protoc"
    "ol.storage.ScanOperation.Op\022\"\n\005field\030\002 \002"
    "(\0132\023.bnet.protocol.Path\"\220\001\n\002Op\022\014\n\010IS_CLE"
    "AR\020\001\022\r\n\tNOT_CLEAR\020\002\022\r\n\tIS_EQUALS\020\003\022\016\n\nNO"
    "T_EQUALS\020\004\022\023\n\017IS_GREATER_THAN\020\005\022\024\n\020NOT_G"
    "REATER_THAN\020\006\022\020\n\014IS_LESS_THAN\020\007\022\021\n\rNOT_L"
    "ESS_THAN\020\010\"\205\006\n\007Command\022-\n\002op\030\001 \002(\0162!.bne"
    "t.protocol.storage.Command.Op\022\014\n\004data\030\002 "
    "\001(\014\022#\n\006fields\030\003 \003(\0132\023.bnet.protocol.Path"
    "\022\023\n\013min_version\030\004 \001(\006\022\023\n\013max_version\030\005 \001"
    "(\006\0222\n\004scan\030\006 \001(\0132$.bnet.protocol.storage"
    ".ScanOperation\022\r\n\005limit\030\007 \001(\r\0226\n\tconditi"
    "on\030\010 \001(\0162#.bnet.protocol.storage.Command"
    ".Cond\022\017\n\007message\030\013 \001(\t\"\251\002\n\002Op\022\016\n\nROW_DEL"
    "ETE\020\001\022\r\n\tROW_FETCH\020\002\022\016\n\nCOL_DELETE\020\003\022\r\n\t"
    "COL_FETCH\020\004\022\r\n\tCOL_WRITE\020\005\022\r\n\tCOL_MERGE\020"
    "\006\022\r\n\tFLD_CLEAR\020\007\022\r\n\tFLD_FETCH\020\010\022\r\n\tFLD_W"
    "RITE\020\t\022\r\n\tFLD_MERGE\020\n\022\014\n\010FLD_INCR\020\013\022\014\n\010F"
    "LD_TEST\020\014\022\014\n\010FLD_SCAN\020\r\022\014\n\010ROW_TEST\020\016\022\014\n"
    "\010COL_TEST\020\017\022\014\n\010FLD_SMAX\020\020\022\014\n\010COL_COND\020\021\022"
    "\014\n\010FLD_COND\020\022\022\014\n\010COND_POP\020\023\022\r\n\tLOG_DEBUG"
    "\020\024\"\265\001\n\004Cond\022\017\n\013COND_ALWAYS\020\000\022\023\n\017COND_NOT"
    "_EXISTS\020\001\022\022\n\016COND_NOT_EQUAL\020\002\022\022\n\016COND_LE"
    "SS_THAN\020\003\022\024\n\020COND_NOT_GREATER\020\004\022\017\n\013COND_"
    "EQUALS\020\005\022\021\n\rCOND_NOT_LESS\020\006\022\025\n\021COND_GREA"
    "TER_THAN\020\007\022\016\n\nCOND_NEVER\020\010\"\274\002\n\tOperation"
    "\0220\n\010table_id\030\001 \002(\0132\036.bnet.protocol.stora"
    "ge.TableId\0222\n\tcolumn_id\030\002 \001(\0132\037.bnet.pro"
    "tocol.storage.ColumnId\022,\n\006row_id\030\003 \001(\0132\034"
    ".bnet.protocol.storage.RowId\022\017\n\007row_key\030"
    "\004 \001(\014\022\017\n\007version\030\005 \001(\006\022,\n\004rops\030\006 \003(\0132\036.b"
    "net.protocol.storage.Command\022\026\n\016mutate_v"
    "ersion\030\007 \001(\006\0223\n\tprivilege\030\010 \001(\0132 .bnet.p"
    "rotocol.storage.Privilege\"\230\001\n\004Cell\0222\n\tco"
    "lumn_id\030\001 \002(\0132\037.bnet.protocol.storage.Co"
    "lumnId\022,\n\006row_id\030\002 \002(\0132\034.bnet.protocol.s"
    "torage.RowId\022\017\n\007row_key\030\003 \001(\014\022\017\n\007version"
    "\030\004 \001(\006\022\014\n\004data\030\005 \001(\014\"\202\001\n\017OperationResult"
    "\022\022\n\nerror_code\030\001 \001(\r\0220\n\010table_id\030\002 \002(\0132\036"
    ".bnet.protocol.storage.TableId\022)\n\004data\030\003"
    " \003(\0132\033.bnet.protocol.storage.Cell\"\312\001\n\020Op"
    "enTableRequest\022\016\n\006schema\030\001 \001(\t\0223\n\tprivil"
    "ege\030\002 \001(\0132 .bnet.protocol.storage.Privil"
    "ege\0220\n\010table_id\030\003 \002(\0132\036.bnet.protocol.st"
    "orage.TableId\022)\n\010agent_id\030\004 \001(\0132\027.bnet.p"
    "rotocol.EntityId\022\024\n\014process_name\030\005 \001(\t\"\023"
    "\n\021OpenTableResponse\"\223\002\n\021OpenColumnReques"
    "t\022\016\n\006schema\030\001 \001(\t\0223\n\tprivilege\030\002 \001(\0132 .b"
    "net.protocol.storage.Privilege\0220\n\010table_"
    "id\030\004 \002(\0132\036.bnet.protocol.storage.TableId"
    "\0222\n\tcolumn_id\030\005 \002(\0132\037.bnet.protocol.stor"
    "age.ColumnId\022\022\n\nproto_type\030\006 \001(\t\022)\n\010agen"
    "t_id\030\007 \001(\0132\027.bnet.protocol.EntityId\022\024\n\014p"
    "rocess_name\030\010 \001(\t\".\n\022OpenColumnResponse\022"
    "\030\n\020server_field_ops\030\002 \001(\010\"\315\002\n\016ExecuteReq"
    "uest\022\016\n\006schema\030\001 \001(\t\0223\n\tprivilege\030\002 \001(\0132"
    " .bnet.protocol.storage.Privilege\022\021\n\trea"
    "d_only\030\003 \001(\010\022\025\n\rwants_row_key\030\004 \001(\010\022\031\n\021w"
    "ants_column_name\030\005 \001(\010\022\025\n\rmax_data_size\030"
    "\006 \001(\r\0224\n\noperations\030\007 \003(\0132 .bnet.protoco"
    "l.storage.Operation\022\017\n\007timeout\030\014 \001(\r\022)\n\010"
    "agent_id\030\t \001(\0132\027.bnet.protocol.EntityId\022"
    "\022\n\nquery_name\030\n \001(\t\022\024\n\014process_name\030\013 \001("
    "\t\"u\n\017ExecuteResponse\022\022\n\nerror_code\030\001 \001(\r"
    "\0227\n\007results\030\002 \003(\0132&.bnet.protocol.storag"
    "e.OperationResult\022\025\n\rerror_message\030\003 \001(\t", 2960);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/storage/storage.proto", &protobuf_RegisterTypes);
  TableId::default_instance_ = new TableId();
  ColumnId::default_instance_ = new ColumnId();
  RowId::default_instance_ = new RowId();
  Privilege::default_instance_ = new Privilege();
  ScanOperation::default_instance_ = new ScanOperation();
  Command::default_instance_ = new Command();
  Operation::default_instance_ = new Operation();
  Cell::default_instance_ = new Cell();
  OperationResult::default_instance_ = new OperationResult();
  OpenTableRequest::default_instance_ = new OpenTableRequest();
  OpenTableResponse::default_instance_ = new OpenTableResponse();
  OpenColumnRequest::default_instance_ = new OpenColumnRequest();
  OpenColumnResponse::default_instance_ = new OpenColumnResponse();
  ExecuteRequest::default_instance_ = new ExecuteRequest();
  ExecuteResponse::default_instance_ = new ExecuteResponse();
  TableId::default_instance_->InitAsDefaultInstance();
  ColumnId::default_instance_->InitAsDefaultInstance();
  RowId::default_instance_->InitAsDefaultInstance();
  Privilege::default_instance_->InitAsDefaultInstance();
  ScanOperation::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  Operation::default_instance_->InitAsDefaultInstance();
  Cell::default_instance_->InitAsDefaultInstance();
  OperationResult::default_instance_->InitAsDefaultInstance();
  OpenTableRequest::default_instance_->InitAsDefaultInstance();
  OpenTableResponse::default_instance_->InitAsDefaultInstance();
  OpenColumnRequest::default_instance_->InitAsDefaultInstance();
  OpenColumnResponse::default_instance_->InitAsDefaultInstance();
  ExecuteRequest::default_instance_->InitAsDefaultInstance();
  ExecuteResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fstorage_2fstorage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fstorage_2fstorage_2eproto {
  StaticDescriptorInitializer_service_2fstorage_2fstorage_2eproto() {
    protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  }
} static_descriptor_initializer_service_2fstorage_2fstorage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TableId::kHashFieldNumber;
#endif  // !_MSC_VER

TableId::TableId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableId::InitAsDefaultInstance() {
}

TableId::TableId(const TableId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableId::SharedCtor() {
  _cached_size_ = 0;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableId::~TableId() {
  SharedDtor();
}

void TableId::SharedDtor() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void TableId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableId_descriptor_;
}

const TableId& TableId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

TableId* TableId::default_instance_ = NULL;

TableId* TableId::New() const {
  return new TableId;
}

void TableId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes hash = 1;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableId::MergeFrom(const TableId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableId::CopyFrom(const TableId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TableId::Swap(TableId* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableId_descriptor_;
  metadata.reflection = TableId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnId::kHashFieldNumber;
#endif  // !_MSC_VER

ColumnId::ColumnId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnId::InitAsDefaultInstance() {
}

ColumnId::ColumnId(const ColumnId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnId::SharedCtor() {
  _cached_size_ = 0;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnId::~ColumnId() {
  SharedDtor();
}

void ColumnId::SharedDtor() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void ColumnId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnId_descriptor_;
}

const ColumnId& ColumnId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

ColumnId* ColumnId::default_instance_ = NULL;

ColumnId* ColumnId::New() const {
  return new ColumnId;
}

void ColumnId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes hash = 1;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnId::MergeFrom(const ColumnId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnId::CopyFrom(const ColumnId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ColumnId::Swap(ColumnId* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnId_descriptor_;
  metadata.reflection = ColumnId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RowId::kHashFieldNumber;
#endif  // !_MSC_VER

RowId::RowId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RowId::InitAsDefaultInstance() {
}

RowId::RowId(const RowId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RowId::SharedCtor() {
  _cached_size_ = 0;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowId::~RowId() {
  SharedDtor();
}

void RowId::SharedDtor() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void RowId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RowId_descriptor_;
}

const RowId& RowId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

RowId* RowId::default_instance_ = NULL;

RowId* RowId::New() const {
  return new RowId;
}

void RowId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RowId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RowId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RowId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes hash = 1;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RowId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes hash = 1;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RowId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RowId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RowId::MergeFrom(const RowId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RowId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowId::CopyFrom(const RowId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RowId::Swap(RowId* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RowId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RowId_descriptor_;
  metadata.reflection = RowId_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Privilege_Permission_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Privilege_Permission_descriptor_;
}
bool Privilege_Permission_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Privilege_Permission Privilege::OWNER;
const Privilege_Permission Privilege::FRIEND;
const Privilege_Permission Privilege::OTHER;
const Privilege_Permission Privilege::GAME;
const Privilege_Permission Privilege::ALL;
const Privilege_Permission Privilege::Permission_MIN;
const Privilege_Permission Privilege::Permission_MAX;
const int Privilege::Permission_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Privilege::kBitsFieldNumber;
const int Privilege::kProgramFieldNumber;
#endif  // !_MSC_VER

Privilege::Privilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Privilege::InitAsDefaultInstance() {
}

Privilege::Privilege(const Privilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Privilege::SharedCtor() {
  _cached_size_ = 0;
  bits_ = GOOGLE_ULONGLONG(0);
  program_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Privilege::~Privilege() {
  SharedDtor();
}

void Privilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Privilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Privilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Privilege_descriptor_;
}

const Privilege& Privilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

Privilege* Privilege::default_instance_ = NULL;

Privilege* Privilege::New() const {
  return new Privilege;
}

void Privilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bits_ = GOOGLE_ULONGLONG(0);
    program_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Privilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 bits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_program;
        break;
      }
      
      // optional fixed32 program = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_program:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Privilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 bits = 1;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->bits(), output);
  }
  
  // optional fixed32 program = 2;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->program(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Privilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 bits = 1;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->bits(), target);
  }
  
  // optional fixed32 program = 2;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->program(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Privilege::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 bits = 1;
    if (has_bits()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 program = 2;
    if (has_program()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Privilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Privilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Privilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Privilege::MergeFrom(const Privilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_program()) {
      set_program(from.program());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Privilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Privilege::CopyFrom(const Privilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Privilege::IsInitialized() const {
  
  return true;
}

void Privilege::Swap(Privilege* other) {
  if (other != this) {
    std::swap(bits_, other->bits_);
    std::swap(program_, other->program_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Privilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Privilege_descriptor_;
  metadata.reflection = Privilege_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ScanOperation_Op_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanOperation_Op_descriptor_;
}
bool ScanOperation_Op_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ScanOperation_Op ScanOperation::IS_CLEAR;
const ScanOperation_Op ScanOperation::NOT_CLEAR;
const ScanOperation_Op ScanOperation::IS_EQUALS;
const ScanOperation_Op ScanOperation::NOT_EQUALS;
const ScanOperation_Op ScanOperation::IS_GREATER_THAN;
const ScanOperation_Op ScanOperation::NOT_GREATER_THAN;
const ScanOperation_Op ScanOperation::IS_LESS_THAN;
const ScanOperation_Op ScanOperation::NOT_LESS_THAN;
const ScanOperation_Op ScanOperation::Op_MIN;
const ScanOperation_Op ScanOperation::Op_MAX;
const int ScanOperation::Op_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ScanOperation::kOpFieldNumber;
const int ScanOperation::kFieldFieldNumber;
#endif  // !_MSC_VER

ScanOperation::ScanOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanOperation::InitAsDefaultInstance() {
  field_ = const_cast< ::bnet::protocol::Path*>(&::bnet::protocol::Path::default_instance());
}

ScanOperation::ScanOperation(const ScanOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanOperation::SharedCtor() {
  _cached_size_ = 0;
  op_ = 1;
  field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanOperation::~ScanOperation() {
  SharedDtor();
}

void ScanOperation::SharedDtor() {
  if (this != default_instance_) {
    delete field_;
  }
}

void ScanOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanOperation_descriptor_;
}

const ScanOperation& ScanOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

ScanOperation* ScanOperation::default_instance_ = NULL;

ScanOperation* ScanOperation::New() const {
  return new ScanOperation;
}

void ScanOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 1;
    if (has_field()) {
      if (field_ != NULL) field_->::bnet::protocol::Path::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.storage.ScanOperation.Op op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bnet::protocol::storage::ScanOperation_Op_IsValid(value)) {
            set_op(static_cast< ::bnet::protocol::storage::ScanOperation_Op >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }
      
      // required .bnet.protocol.Path field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.storage.ScanOperation.Op op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }
  
  // required .bnet.protocol.Path field = 2;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->field(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.storage.ScanOperation.Op op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }
  
  // required .bnet.protocol.Path field = 2;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->field(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanOperation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.storage.ScanOperation.Op op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }
    
    // required .bnet.protocol.Path field = 2;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanOperation::MergeFrom(const ScanOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_field()) {
      mutable_field()->::bnet::protocol::Path::MergeFrom(from.field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanOperation::CopyFrom(const ScanOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ScanOperation::Swap(ScanOperation* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(field_, other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanOperation_descriptor_;
  metadata.reflection = ScanOperation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_Op_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_Op_descriptor_;
}
bool Command_Op_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_Op Command::ROW_DELETE;
const Command_Op Command::ROW_FETCH;
const Command_Op Command::COL_DELETE;
const Command_Op Command::COL_FETCH;
const Command_Op Command::COL_WRITE;
const Command_Op Command::COL_MERGE;
const Command_Op Command::FLD_CLEAR;
const Command_Op Command::FLD_FETCH;
const Command_Op Command::FLD_WRITE;
const Command_Op Command::FLD_MERGE;
const Command_Op Command::FLD_INCR;
const Command_Op Command::FLD_TEST;
const Command_Op Command::FLD_SCAN;
const Command_Op Command::ROW_TEST;
const Command_Op Command::COL_TEST;
const Command_Op Command::FLD_SMAX;
const Command_Op Command::COL_COND;
const Command_Op Command::FLD_COND;
const Command_Op Command::COND_POP;
const Command_Op Command::LOG_DEBUG;
const Command_Op Command::Op_MIN;
const Command_Op Command::Op_MAX;
const int Command::Op_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Command_Cond_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_Cond_descriptor_;
}
bool Command_Cond_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_Cond Command::COND_ALWAYS;
const Command_Cond Command::COND_NOT_EXISTS;
const Command_Cond Command::COND_NOT_EQUAL;
const Command_Cond Command::COND_LESS_THAN;
const Command_Cond Command::COND_NOT_GREATER;
const Command_Cond Command::COND_EQUALS;
const Command_Cond Command::COND_NOT_LESS;
const Command_Cond Command::COND_GREATER_THAN;
const Command_Cond Command::COND_NEVER;
const Command_Cond Command::Cond_MIN;
const Command_Cond Command::Cond_MAX;
const int Command::Cond_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Command::kOpFieldNumber;
const int Command::kDataFieldNumber;
const int Command::kFieldsFieldNumber;
const int Command::kMinVersionFieldNumber;
const int Command::kMaxVersionFieldNumber;
const int Command::kScanFieldNumber;
const int Command::kLimitFieldNumber;
const int Command::kConditionFieldNumber;
const int Command::kMessageFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  scan_ = const_cast< ::bnet::protocol::storage::ScanOperation*>(&::bnet::protocol::storage::ScanOperation::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  op_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_version_ = GOOGLE_ULONGLONG(0);
  max_version_ = GOOGLE_ULONGLONG(0);
  scan_ = NULL;
  limit_ = 0u;
  condition_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete scan_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    min_version_ = GOOGLE_ULONGLONG(0);
    max_version_ = GOOGLE_ULONGLONG(0);
    if (has_scan()) {
      if (scan_ != NULL) scan_->::bnet::protocol::storage::ScanOperation::Clear();
    }
    limit_ = 0u;
    condition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.storage.Command.Op op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bnet::protocol::storage::Command_Op_IsValid(value)) {
            set_op(static_cast< ::bnet::protocol::storage::Command_Op >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        break;
      }
      
      // repeated .bnet.protocol.Path fields = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        if (input->ExpectTag(33)) goto parse_min_version;
        break;
      }
      
      // optional fixed64 min_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &min_version_)));
          set_has_min_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_max_version;
        break;
      }
      
      // optional fixed64 max_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_version_)));
          set_has_max_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_scan;
        break;
      }
      
      // optional .bnet.protocol.storage.ScanOperation scan = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_limit;
        break;
      }
      
      // optional uint32 limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_condition;
        break;
      }
      
      // optional .bnet.protocol.storage.Command.Cond condition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bnet::protocol::storage::Command_Cond_IsValid(value)) {
            set_condition(static_cast< ::bnet::protocol::storage::Command_Cond >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_message;
        break;
      }
      
      // optional string message = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.storage.Command.Op op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  // repeated .bnet.protocol.Path fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fields(i), output);
  }
  
  // optional fixed64 min_version = 4;
  if (has_min_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->min_version(), output);
  }
  
  // optional fixed64 max_version = 5;
  if (has_max_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->max_version(), output);
  }
  
  // optional .bnet.protocol.storage.ScanOperation scan = 6;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->scan(), output);
  }
  
  // optional uint32 limit = 7;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->limit(), output);
  }
  
  // optional .bnet.protocol.storage.Command.Cond condition = 8;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->condition(), output);
  }
  
  // optional string message = 11;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.storage.Command.Op op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  // repeated .bnet.protocol.Path fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fields(i), target);
  }
  
  // optional fixed64 min_version = 4;
  if (has_min_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->min_version(), target);
  }
  
  // optional fixed64 max_version = 5;
  if (has_max_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->max_version(), target);
  }
  
  // optional .bnet.protocol.storage.ScanOperation scan = 6;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->scan(), target);
  }
  
  // optional uint32 limit = 7;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->limit(), target);
  }
  
  // optional .bnet.protocol.storage.Command.Cond condition = 8;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->condition(), target);
  }
  
  // optional string message = 11;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.storage.Command.Op op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional fixed64 min_version = 4;
    if (has_min_version()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 max_version = 5;
    if (has_max_version()) {
      total_size += 1 + 8;
    }
    
    // optional .bnet.protocol.storage.ScanOperation scan = 6;
    if (has_scan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan());
    }
    
    // optional uint32 limit = 7;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }
    
    // optional .bnet.protocol.storage.Command.Cond condition = 8;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->condition());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string message = 11;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  // repeated .bnet.protocol.Path fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_min_version()) {
      set_min_version(from.min_version());
    }
    if (from.has_max_version()) {
      set_max_version(from.max_version());
    }
    if (from.has_scan()) {
      mutable_scan()->::bnet::protocol::storage::ScanOperation::MergeFrom(from.scan());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_scan()) {
    if (!this->scan().IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(data_, other->data_);
    fields_.Swap(&other->fields_);
    std::swap(min_version_, other->min_version_);
    std::swap(max_version_, other->max_version_);
    std::swap(scan_, other->scan_);
    std::swap(limit_, other->limit_);
    std::swap(condition_, other->condition_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Operation::kTableIdFieldNumber;
const int Operation::kColumnIdFieldNumber;
const int Operation::kRowIdFieldNumber;
const int Operation::kRowKeyFieldNumber;
const int Operation::kVersionFieldNumber;
const int Operation::kRopsFieldNumber;
const int Operation::kMutateVersionFieldNumber;
const int Operation::kPrivilegeFieldNumber;
#endif  // !_MSC_VER

Operation::Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation::InitAsDefaultInstance() {
  table_id_ = const_cast< ::bnet::protocol::storage::TableId*>(&::bnet::protocol::storage::TableId::default_instance());
  column_id_ = const_cast< ::bnet::protocol::storage::ColumnId*>(&::bnet::protocol::storage::ColumnId::default_instance());
  row_id_ = const_cast< ::bnet::protocol::storage::RowId*>(&::bnet::protocol::storage::RowId::default_instance());
  privilege_ = const_cast< ::bnet::protocol::storage::Privilege*>(&::bnet::protocol::storage::Privilege::default_instance());
}

Operation::Operation(const Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = NULL;
  column_id_ = NULL;
  row_id_ = NULL;
  row_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = GOOGLE_ULONGLONG(0);
  mutate_version_ = GOOGLE_ULONGLONG(0);
  privilege_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation::~Operation() {
  SharedDtor();
}

void Operation::SharedDtor() {
  if (row_key_ != &::google::protobuf::internal::kEmptyString) {
    delete row_key_;
  }
  if (this != default_instance_) {
    delete table_id_;
    delete column_id_;
    delete row_id_;
    delete privilege_;
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}

const Operation& Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

Operation* Operation::default_instance_ = NULL;

Operation* Operation::New() const {
  return new Operation;
}

void Operation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::bnet::protocol::storage::TableId::Clear();
    }
    if (has_column_id()) {
      if (column_id_ != NULL) column_id_->::bnet::protocol::storage::ColumnId::Clear();
    }
    if (has_row_id()) {
      if (row_id_ != NULL) row_id_->::bnet::protocol::storage::RowId::Clear();
    }
    if (has_row_key()) {
      if (row_key_ != &::google::protobuf::internal::kEmptyString) {
        row_key_->clear();
      }
    }
    version_ = GOOGLE_ULONGLONG(0);
    mutate_version_ = GOOGLE_ULONGLONG(0);
    if (has_privilege()) {
      if (privilege_ != NULL) privilege_->::bnet::protocol::storage::Privilege::Clear();
    }
  }
  rops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.storage.TableId table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column_id;
        break;
      }
      
      // optional .bnet.protocol.storage.ColumnId column_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_row_id;
        break;
      }
      
      // optional .bnet.protocol.storage.RowId row_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_row_key;
        break;
      }
      
      // optional bytes row_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_version;
        break;
      }
      
      // optional fixed64 version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rops;
        break;
      }
      
      // repeated .bnet.protocol.storage.Command rops = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rops;
        if (input->ExpectTag(57)) goto parse_mutate_version;
        break;
      }
      
      // optional fixed64 mutate_version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mutate_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mutate_version_)));
          set_has_mutate_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_privilege;
        break;
      }
      
      // optional .bnet.protocol.storage.Privilege privilege = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privilege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privilege()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.storage.TableId table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_id(), output);
  }
  
  // optional .bnet.protocol.storage.ColumnId column_id = 2;
  if (has_column_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->column_id(), output);
  }
  
  // optional .bnet.protocol.storage.RowId row_id = 3;
  if (has_row_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->row_id(), output);
  }
  
  // optional bytes row_key = 4;
  if (has_row_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->row_key(), output);
  }
  
  // optional fixed64 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->version(), output);
  }
  
  // repeated .bnet.protocol.storage.Command rops = 6;
  for (int i = 0; i < this->rops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rops(i), output);
  }
  
  // optional fixed64 mutate_version = 7;
  if (has_mutate_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->mutate_version(), output);
  }
  
  // optional .bnet.protocol.storage.Privilege privilege = 8;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->privilege(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.storage.TableId table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_id(), target);
  }
  
  // optional .bnet.protocol.storage.ColumnId column_id = 2;
  if (has_column_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->column_id(), target);
  }
  
  // optional .bnet.protocol.storage.RowId row_id = 3;
  if (has_row_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->row_id(), target);
  }
  
  // optional bytes row_key = 4;
  if (has_row_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->row_key(), target);
  }
  
  // optional fixed64 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->version(), target);
  }
  
  // repeated .bnet.protocol.storage.Command rops = 6;
  for (int i = 0; i < this->rops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rops(i), target);
  }
  
  // optional fixed64 mutate_version = 7;
  if (has_mutate_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->mutate_version(), target);
  }
  
  // optional .bnet.protocol.storage.Privilege privilege = 8;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->privilege(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.storage.TableId table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }
    
    // optional .bnet.protocol.storage.ColumnId column_id = 2;
    if (has_column_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column_id());
    }
    
    // optional .bnet.protocol.storage.RowId row_id = 3;
    if (has_row_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row_id());
    }
    
    // optional bytes row_key = 4;
    if (has_row_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row_key());
    }
    
    // optional fixed64 version = 5;
    if (has_version()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 mutate_version = 7;
    if (has_mutate_version()) {
      total_size += 1 + 8;
    }
    
    // optional .bnet.protocol.storage.Privilege privilege = 8;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privilege());
    }
    
  }
  // repeated .bnet.protocol.storage.Command rops = 6;
  total_size += 1 * this->rops_size();
  for (int i = 0; i < this->rops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rops(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  rops_.MergeFrom(from.rops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      mutable_table_id()->::bnet::protocol::storage::TableId::MergeFrom(from.table_id());
    }
    if (from.has_column_id()) {
      mutable_column_id()->::bnet::protocol::storage::ColumnId::MergeFrom(from.column_id());
    }
    if (from.has_row_id()) {
      mutable_row_id()->::bnet::protocol::storage::RowId::MergeFrom(from.row_id());
    }
    if (from.has_row_key()) {
      set_row_key(from.row_key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_mutate_version()) {
      set_mutate_version(from.mutate_version());
    }
    if (from.has_privilege()) {
      mutable_privilege()->::bnet::protocol::storage::Privilege::MergeFrom(from.privilege());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_table_id()) {
    if (!this->table_id().IsInitialized()) return false;
  }
  if (has_column_id()) {
    if (!this->column_id().IsInitialized()) return false;
  }
  if (has_row_id()) {
    if (!this->row_id().IsInitialized()) return false;
  }
  for (int i = 0; i < rops_size(); i++) {
    if (!this->rops(i).IsInitialized()) return false;
  }
  return true;
}

void Operation::Swap(Operation* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(column_id_, other->column_id_);
    std::swap(row_id_, other->row_id_);
    std::swap(row_key_, other->row_key_);
    std::swap(version_, other->version_);
    rops_.Swap(&other->rops_);
    std::swap(mutate_version_, other->mutate_version_);
    std::swap(privilege_, other->privilege_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_descriptor_;
  metadata.reflection = Operation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cell::kColumnIdFieldNumber;
const int Cell::kRowIdFieldNumber;
const int Cell::kRowKeyFieldNumber;
const int Cell::kVersionFieldNumber;
const int Cell::kDataFieldNumber;
#endif  // !_MSC_VER

Cell::Cell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cell::InitAsDefaultInstance() {
  column_id_ = const_cast< ::bnet::protocol::storage::ColumnId*>(&::bnet::protocol::storage::ColumnId::default_instance());
  row_id_ = const_cast< ::bnet::protocol::storage::RowId*>(&::bnet::protocol::storage::RowId::default_instance());
}

Cell::Cell(const Cell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cell::SharedCtor() {
  _cached_size_ = 0;
  column_id_ = NULL;
  row_id_ = NULL;
  row_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cell::~Cell() {
  SharedDtor();
}

void Cell::SharedDtor() {
  if (row_key_ != &::google::protobuf::internal::kEmptyString) {
    delete row_key_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete column_id_;
    delete row_id_;
  }
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_descriptor_;
}

const Cell& Cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

Cell* Cell::default_instance_ = NULL;

Cell* Cell::New() const {
  return new Cell;
}

void Cell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_column_id()) {
      if (column_id_ != NULL) column_id_->::bnet::protocol::storage::ColumnId::Clear();
    }
    if (has_row_id()) {
      if (row_id_ != NULL) row_id_->::bnet::protocol::storage::RowId::Clear();
    }
    if (has_row_key()) {
      if (row_key_ != &::google::protobuf::internal::kEmptyString) {
        row_key_->clear();
      }
    }
    version_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.storage.ColumnId column_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_row_id;
        break;
      }
      
      // required .bnet.protocol.storage.RowId row_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_row_key;
        break;
      }
      
      // optional bytes row_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_version;
        break;
      }
      
      // optional fixed64 version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.storage.ColumnId column_id = 1;
  if (has_column_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->column_id(), output);
  }
  
  // required .bnet.protocol.storage.RowId row_id = 2;
  if (has_row_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row_id(), output);
  }
  
  // optional bytes row_key = 3;
  if (has_row_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->row_key(), output);
  }
  
  // optional fixed64 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->version(), output);
  }
  
  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.storage.ColumnId column_id = 1;
  if (has_column_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->column_id(), target);
  }
  
  // required .bnet.protocol.storage.RowId row_id = 2;
  if (has_row_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->row_id(), target);
  }
  
  // optional bytes row_key = 3;
  if (has_row_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->row_key(), target);
  }
  
  // optional fixed64 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->version(), target);
  }
  
  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.storage.ColumnId column_id = 1;
    if (has_column_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column_id());
    }
    
    // required .bnet.protocol.storage.RowId row_id = 2;
    if (has_row_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row_id());
    }
    
    // optional bytes row_key = 3;
    if (has_row_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row_key());
    }
    
    // optional fixed64 version = 4;
    if (has_version()) {
      total_size += 1 + 8;
    }
    
    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column_id()) {
      mutable_column_id()->::bnet::protocol::storage::ColumnId::MergeFrom(from.column_id());
    }
    if (from.has_row_id()) {
      mutable_row_id()->::bnet::protocol::storage::RowId::MergeFrom(from.row_id());
    }
    if (from.has_row_key()) {
      set_row_key(from.row_key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_column_id()) {
    if (!this->column_id().IsInitialized()) return false;
  }
  if (has_row_id()) {
    if (!this->row_id().IsInitialized()) return false;
  }
  return true;
}

void Cell::Swap(Cell* other) {
  if (other != this) {
    std::swap(column_id_, other->column_id_);
    std::swap(row_id_, other->row_id_);
    std::swap(row_key_, other->row_key_);
    std::swap(version_, other->version_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_descriptor_;
  metadata.reflection = Cell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationResult::kErrorCodeFieldNumber;
const int OperationResult::kTableIdFieldNumber;
const int OperationResult::kDataFieldNumber;
#endif  // !_MSC_VER

OperationResult::OperationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperationResult::InitAsDefaultInstance() {
  table_id_ = const_cast< ::bnet::protocol::storage::TableId*>(&::bnet::protocol::storage::TableId::default_instance());
}

OperationResult::OperationResult(const OperationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperationResult::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  table_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperationResult::~OperationResult() {
  SharedDtor();
}

void OperationResult::SharedDtor() {
  if (this != default_instance_) {
    delete table_id_;
  }
}

void OperationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationResult_descriptor_;
}

const OperationResult& OperationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

OperationResult* OperationResult::default_instance_ = NULL;

OperationResult* OperationResult::New() const {
  return new OperationResult;
}

void OperationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::bnet::protocol::storage::TableId::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_id;
        break;
      }
      
      // required .bnet.protocol.storage.TableId table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // repeated .bnet.protocol.storage.Cell data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }
  
  // required .bnet.protocol.storage.TableId table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_id(), output);
  }
  
  // repeated .bnet.protocol.storage.Cell data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }
  
  // required .bnet.protocol.storage.TableId table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_id(), target);
  }
  
  // repeated .bnet.protocol.storage.Cell data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperationResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }
    
    // required .bnet.protocol.storage.TableId table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }
    
  }
  // repeated .bnet.protocol.storage.Cell data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationResult::MergeFrom(const OperationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_table_id()) {
      mutable_table_id()->::bnet::protocol::storage::TableId::MergeFrom(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationResult::CopyFrom(const OperationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_table_id()) {
    if (!this->table_id().IsInitialized()) return false;
  }
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void OperationResult::Swap(OperationResult* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(table_id_, other->table_id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationResult_descriptor_;
  metadata.reflection = OperationResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenTableRequest::kSchemaFieldNumber;
const int OpenTableRequest::kPrivilegeFieldNumber;
const int OpenTableRequest::kTableIdFieldNumber;
const int OpenTableRequest::kAgentIdFieldNumber;
const int OpenTableRequest::kProcessNameFieldNumber;
#endif  // !_MSC_VER

OpenTableRequest::OpenTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenTableRequest::InitAsDefaultInstance() {
  privilege_ = const_cast< ::bnet::protocol::storage::Privilege*>(&::bnet::protocol::storage::Privilege::default_instance());
  table_id_ = const_cast< ::bnet::protocol::storage::TableId*>(&::bnet::protocol::storage::TableId::default_instance());
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

OpenTableRequest::OpenTableRequest(const OpenTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenTableRequest::SharedCtor() {
  _cached_size_ = 0;
  schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privilege_ = NULL;
  table_id_ = NULL;
  agent_id_ = NULL;
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenTableRequest::~OpenTableRequest() {
  SharedDtor();
}

void OpenTableRequest::SharedDtor() {
  if (schema_ != &::google::protobuf::internal::kEmptyString) {
    delete schema_;
  }
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    delete process_name_;
  }
  if (this != default_instance_) {
    delete privilege_;
    delete table_id_;
    delete agent_id_;
  }
}

void OpenTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenTableRequest_descriptor_;
}

const OpenTableRequest& OpenTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

OpenTableRequest* OpenTableRequest::default_instance_ = NULL;

OpenTableRequest* OpenTableRequest::New() const {
  return new OpenTableRequest;
}

void OpenTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_schema()) {
      if (schema_ != &::google::protobuf::internal::kEmptyString) {
        schema_->clear();
      }
    }
    if (has_privilege()) {
      if (privilege_ != NULL) privilege_->::bnet::protocol::storage::Privilege::Clear();
    }
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::bnet::protocol::storage::TableId::Clear();
    }
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::kEmptyString) {
        process_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string schema = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->schema().data(), this->schema().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_privilege;
        break;
      }
      
      // optional .bnet.protocol.storage.Privilege privilege = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privilege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privilege()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_id;
        break;
      }
      
      // required .bnet.protocol.storage.TableId table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_agent_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId agent_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_process_name;
        break;
      }
      
      // optional string process_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->schema(), output);
  }
  
  // optional .bnet.protocol.storage.Privilege privilege = 2;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->privilege(), output);
  }
  
  // required .bnet.protocol.storage.TableId table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_id(), output);
  }
  
  // optional .bnet.protocol.EntityId agent_id = 4;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->agent_id(), output);
  }
  
  // optional string process_name = 5;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->process_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->schema(), target);
  }
  
  // optional .bnet.protocol.storage.Privilege privilege = 2;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->privilege(), target);
  }
  
  // required .bnet.protocol.storage.TableId table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_id(), target);
  }
  
  // optional .bnet.protocol.EntityId agent_id = 4;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->agent_id(), target);
  }
  
  // optional string process_name = 5;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->process_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenTableRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string schema = 1;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema());
    }
    
    // optional .bnet.protocol.storage.Privilege privilege = 2;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privilege());
    }
    
    // required .bnet.protocol.storage.TableId table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }
    
    // optional .bnet.protocol.EntityId agent_id = 4;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // optional string process_name = 5;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenTableRequest::MergeFrom(const OpenTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schema()) {
      set_schema(from.schema());
    }
    if (from.has_privilege()) {
      mutable_privilege()->::bnet::protocol::storage::Privilege::MergeFrom(from.privilege());
    }
    if (from.has_table_id()) {
      mutable_table_id()->::bnet::protocol::storage::TableId::MergeFrom(from.table_id());
    }
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenTableRequest::CopyFrom(const OpenTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenTableRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_table_id()) {
    if (!this->table_id().IsInitialized()) return false;
  }
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void OpenTableRequest::Swap(OpenTableRequest* other) {
  if (other != this) {
    std::swap(schema_, other->schema_);
    std::swap(privilege_, other->privilege_);
    std::swap(table_id_, other->table_id_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(process_name_, other->process_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenTableRequest_descriptor_;
  metadata.reflection = OpenTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenTableResponse::OpenTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenTableResponse::InitAsDefaultInstance() {
}

OpenTableResponse::OpenTableResponse(const OpenTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenTableResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenTableResponse::~OpenTableResponse() {
  SharedDtor();
}

void OpenTableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenTableResponse_descriptor_;
}

const OpenTableResponse& OpenTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

OpenTableResponse* OpenTableResponse::default_instance_ = NULL;

OpenTableResponse* OpenTableResponse::New() const {
  return new OpenTableResponse;
}

void OpenTableResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OpenTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenTableResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenTableResponse::MergeFrom(const OpenTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenTableResponse::CopyFrom(const OpenTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenTableResponse::IsInitialized() const {
  
  return true;
}

void OpenTableResponse::Swap(OpenTableResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenTableResponse_descriptor_;
  metadata.reflection = OpenTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenColumnRequest::kSchemaFieldNumber;
const int OpenColumnRequest::kPrivilegeFieldNumber;
const int OpenColumnRequest::kTableIdFieldNumber;
const int OpenColumnRequest::kColumnIdFieldNumber;
const int OpenColumnRequest::kProtoTypeFieldNumber;
const int OpenColumnRequest::kAgentIdFieldNumber;
const int OpenColumnRequest::kProcessNameFieldNumber;
#endif  // !_MSC_VER

OpenColumnRequest::OpenColumnRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenColumnRequest::InitAsDefaultInstance() {
  privilege_ = const_cast< ::bnet::protocol::storage::Privilege*>(&::bnet::protocol::storage::Privilege::default_instance());
  table_id_ = const_cast< ::bnet::protocol::storage::TableId*>(&::bnet::protocol::storage::TableId::default_instance());
  column_id_ = const_cast< ::bnet::protocol::storage::ColumnId*>(&::bnet::protocol::storage::ColumnId::default_instance());
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

OpenColumnRequest::OpenColumnRequest(const OpenColumnRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenColumnRequest::SharedCtor() {
  _cached_size_ = 0;
  schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privilege_ = NULL;
  table_id_ = NULL;
  column_id_ = NULL;
  proto_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_id_ = NULL;
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenColumnRequest::~OpenColumnRequest() {
  SharedDtor();
}

void OpenColumnRequest::SharedDtor() {
  if (schema_ != &::google::protobuf::internal::kEmptyString) {
    delete schema_;
  }
  if (proto_type_ != &::google::protobuf::internal::kEmptyString) {
    delete proto_type_;
  }
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    delete process_name_;
  }
  if (this != default_instance_) {
    delete privilege_;
    delete table_id_;
    delete column_id_;
    delete agent_id_;
  }
}

void OpenColumnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenColumnRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenColumnRequest_descriptor_;
}

const OpenColumnRequest& OpenColumnRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

OpenColumnRequest* OpenColumnRequest::default_instance_ = NULL;

OpenColumnRequest* OpenColumnRequest::New() const {
  return new OpenColumnRequest;
}

void OpenColumnRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_schema()) {
      if (schema_ != &::google::protobuf::internal::kEmptyString) {
        schema_->clear();
      }
    }
    if (has_privilege()) {
      if (privilege_ != NULL) privilege_->::bnet::protocol::storage::Privilege::Clear();
    }
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::bnet::protocol::storage::TableId::Clear();
    }
    if (has_column_id()) {
      if (column_id_ != NULL) column_id_->::bnet::protocol::storage::ColumnId::Clear();
    }
    if (has_proto_type()) {
      if (proto_type_ != &::google::protobuf::internal::kEmptyString) {
        proto_type_->clear();
      }
    }
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::kEmptyString) {
        process_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenColumnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string schema = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->schema().data(), this->schema().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_privilege;
        break;
      }
      
      // optional .bnet.protocol.storage.Privilege privilege = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privilege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privilege()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_table_id;
        break;
      }
      
      // required .bnet.protocol.storage.TableId table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_column_id;
        break;
      }
      
      // required .bnet.protocol.storage.ColumnId column_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proto_type;
        break;
      }
      
      // optional string proto_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proto_type().data(), this->proto_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_agent_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId agent_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_process_name;
        break;
      }
      
      // optional string process_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenColumnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->schema(), output);
  }
  
  // optional .bnet.protocol.storage.Privilege privilege = 2;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->privilege(), output);
  }
  
  // required .bnet.protocol.storage.TableId table_id = 4;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table_id(), output);
  }
  
  // required .bnet.protocol.storage.ColumnId column_id = 5;
  if (has_column_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->column_id(), output);
  }
  
  // optional string proto_type = 6;
  if (has_proto_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proto_type().data(), this->proto_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->proto_type(), output);
  }
  
  // optional .bnet.protocol.EntityId agent_id = 7;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->agent_id(), output);
  }
  
  // optional string process_name = 8;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->process_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenColumnRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->schema(), target);
  }
  
  // optional .bnet.protocol.storage.Privilege privilege = 2;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->privilege(), target);
  }
  
  // required .bnet.protocol.storage.TableId table_id = 4;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->table_id(), target);
  }
  
  // required .bnet.protocol.storage.ColumnId column_id = 5;
  if (has_column_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->column_id(), target);
  }
  
  // optional string proto_type = 6;
  if (has_proto_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proto_type().data(), this->proto_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->proto_type(), target);
  }
  
  // optional .bnet.protocol.EntityId agent_id = 7;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->agent_id(), target);
  }
  
  // optional string process_name = 8;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->process_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenColumnRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string schema = 1;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema());
    }
    
    // optional .bnet.protocol.storage.Privilege privilege = 2;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privilege());
    }
    
    // required .bnet.protocol.storage.TableId table_id = 4;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }
    
    // required .bnet.protocol.storage.ColumnId column_id = 5;
    if (has_column_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column_id());
    }
    
    // optional string proto_type = 6;
    if (has_proto_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_type());
    }
    
    // optional .bnet.protocol.EntityId agent_id = 7;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // optional string process_name = 8;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenColumnRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenColumnRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenColumnRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenColumnRequest::MergeFrom(const OpenColumnRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schema()) {
      set_schema(from.schema());
    }
    if (from.has_privilege()) {
      mutable_privilege()->::bnet::protocol::storage::Privilege::MergeFrom(from.privilege());
    }
    if (from.has_table_id()) {
      mutable_table_id()->::bnet::protocol::storage::TableId::MergeFrom(from.table_id());
    }
    if (from.has_column_id()) {
      mutable_column_id()->::bnet::protocol::storage::ColumnId::MergeFrom(from.column_id());
    }
    if (from.has_proto_type()) {
      set_proto_type(from.proto_type());
    }
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenColumnRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenColumnRequest::CopyFrom(const OpenColumnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenColumnRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  
  if (has_table_id()) {
    if (!this->table_id().IsInitialized()) return false;
  }
  if (has_column_id()) {
    if (!this->column_id().IsInitialized()) return false;
  }
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void OpenColumnRequest::Swap(OpenColumnRequest* other) {
  if (other != this) {
    std::swap(schema_, other->schema_);
    std::swap(privilege_, other->privilege_);
    std::swap(table_id_, other->table_id_);
    std::swap(column_id_, other->column_id_);
    std::swap(proto_type_, other->proto_type_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(process_name_, other->process_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenColumnRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenColumnRequest_descriptor_;
  metadata.reflection = OpenColumnRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenColumnResponse::kServerFieldOpsFieldNumber;
#endif  // !_MSC_VER

OpenColumnResponse::OpenColumnResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenColumnResponse::InitAsDefaultInstance() {
}

OpenColumnResponse::OpenColumnResponse(const OpenColumnResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenColumnResponse::SharedCtor() {
  _cached_size_ = 0;
  server_field_ops_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenColumnResponse::~OpenColumnResponse() {
  SharedDtor();
}

void OpenColumnResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenColumnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenColumnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenColumnResponse_descriptor_;
}

const OpenColumnResponse& OpenColumnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

OpenColumnResponse* OpenColumnResponse::default_instance_ = NULL;

OpenColumnResponse* OpenColumnResponse::New() const {
  return new OpenColumnResponse;
}

void OpenColumnResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_field_ops_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenColumnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool server_field_ops = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_field_ops_)));
          set_has_server_field_ops();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenColumnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool server_field_ops = 2;
  if (has_server_field_ops()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->server_field_ops(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenColumnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool server_field_ops = 2;
  if (has_server_field_ops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->server_field_ops(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenColumnResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool server_field_ops = 2;
    if (has_server_field_ops()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenColumnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenColumnResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenColumnResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenColumnResponse::MergeFrom(const OpenColumnResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_field_ops()) {
      set_server_field_ops(from.server_field_ops());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenColumnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenColumnResponse::CopyFrom(const OpenColumnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenColumnResponse::IsInitialized() const {
  
  return true;
}

void OpenColumnResponse::Swap(OpenColumnResponse* other) {
  if (other != this) {
    std::swap(server_field_ops_, other->server_field_ops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenColumnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenColumnResponse_descriptor_;
  metadata.reflection = OpenColumnResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecuteRequest::kSchemaFieldNumber;
const int ExecuteRequest::kPrivilegeFieldNumber;
const int ExecuteRequest::kReadOnlyFieldNumber;
const int ExecuteRequest::kWantsRowKeyFieldNumber;
const int ExecuteRequest::kWantsColumnNameFieldNumber;
const int ExecuteRequest::kMaxDataSizeFieldNumber;
const int ExecuteRequest::kOperationsFieldNumber;
const int ExecuteRequest::kTimeoutFieldNumber;
const int ExecuteRequest::kAgentIdFieldNumber;
const int ExecuteRequest::kQueryNameFieldNumber;
const int ExecuteRequest::kProcessNameFieldNumber;
#endif  // !_MSC_VER

ExecuteRequest::ExecuteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecuteRequest::InitAsDefaultInstance() {
  privilege_ = const_cast< ::bnet::protocol::storage::Privilege*>(&::bnet::protocol::storage::Privilege::default_instance());
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

ExecuteRequest::ExecuteRequest(const ExecuteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecuteRequest::SharedCtor() {
  _cached_size_ = 0;
  schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privilege_ = NULL;
  read_only_ = false;
  wants_row_key_ = false;
  wants_column_name_ = false;
  max_data_size_ = 0u;
  timeout_ = 0u;
  agent_id_ = NULL;
  query_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecuteRequest::~ExecuteRequest() {
  SharedDtor();
}

void ExecuteRequest::SharedDtor() {
  if (schema_ != &::google::protobuf::internal::kEmptyString) {
    delete schema_;
  }
  if (query_name_ != &::google::protobuf::internal::kEmptyString) {
    delete query_name_;
  }
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    delete process_name_;
  }
  if (this != default_instance_) {
    delete privilege_;
    delete agent_id_;
  }
}

void ExecuteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecuteRequest_descriptor_;
}

const ExecuteRequest& ExecuteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

ExecuteRequest* ExecuteRequest::default_instance_ = NULL;

ExecuteRequest* ExecuteRequest::New() const {
  return new ExecuteRequest;
}

void ExecuteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_schema()) {
      if (schema_ != &::google::protobuf::internal::kEmptyString) {
        schema_->clear();
      }
    }
    if (has_privilege()) {
      if (privilege_ != NULL) privilege_->::bnet::protocol::storage::Privilege::Clear();
    }
    read_only_ = false;
    wants_row_key_ = false;
    wants_column_name_ = false;
    max_data_size_ = 0u;
    timeout_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_query_name()) {
      if (query_name_ != &::google::protobuf::internal::kEmptyString) {
        query_name_->clear();
      }
    }
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::kEmptyString) {
        process_name_->clear();
      }
    }
  }
  operations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecuteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string schema = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->schema().data(), this->schema().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_privilege;
        break;
      }
      
      // optional .bnet.protocol.storage.Privilege privilege = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privilege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privilege()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_read_only;
        break;
      }
      
      // optional bool read_only = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
          set_has_read_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wants_row_key;
        break;
      }
      
      // optional bool wants_row_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wants_row_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_row_key_)));
          set_has_wants_row_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wants_column_name;
        break;
      }
      
      // optional bool wants_column_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wants_column_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_column_name_)));
          set_has_wants_column_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_data_size;
        break;
      }
      
      // optional uint32 max_data_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_data_size_)));
          set_has_max_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_operations;
        break;
      }
      
      // repeated .bnet.protocol.storage.Operation operations = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_operations;
        if (input->ExpectTag(74)) goto parse_agent_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId agent_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_query_name;
        break;
      }
      
      // optional string query_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query_name().data(), this->query_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_process_name;
        break;
      }
      
      // optional string process_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_timeout;
        break;
      }
      
      // optional uint32 timeout = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecuteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->schema(), output);
  }
  
  // optional .bnet.protocol.storage.Privilege privilege = 2;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->privilege(), output);
  }
  
  // optional bool read_only = 3;
  if (has_read_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->read_only(), output);
  }
  
  // optional bool wants_row_key = 4;
  if (has_wants_row_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->wants_row_key(), output);
  }
  
  // optional bool wants_column_name = 5;
  if (has_wants_column_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->wants_column_name(), output);
  }
  
  // optional uint32 max_data_size = 6;
  if (has_max_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_data_size(), output);
  }
  
  // repeated .bnet.protocol.storage.Operation operations = 7;
  for (int i = 0; i < this->operations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->operations(i), output);
  }
  
  // optional .bnet.protocol.EntityId agent_id = 9;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->agent_id(), output);
  }
  
  // optional string query_name = 10;
  if (has_query_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->query_name(), output);
  }
  
  // optional string process_name = 11;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->process_name(), output);
  }
  
  // optional uint32 timeout = 12;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecuteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->schema().data(), this->schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->schema(), target);
  }
  
  // optional .bnet.protocol.storage.Privilege privilege = 2;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->privilege(), target);
  }
  
  // optional bool read_only = 3;
  if (has_read_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->read_only(), target);
  }
  
  // optional bool wants_row_key = 4;
  if (has_wants_row_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->wants_row_key(), target);
  }
  
  // optional bool wants_column_name = 5;
  if (has_wants_column_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->wants_column_name(), target);
  }
  
  // optional uint32 max_data_size = 6;
  if (has_max_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_data_size(), target);
  }
  
  // repeated .bnet.protocol.storage.Operation operations = 7;
  for (int i = 0; i < this->operations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->operations(i), target);
  }
  
  // optional .bnet.protocol.EntityId agent_id = 9;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->agent_id(), target);
  }
  
  // optional string query_name = 10;
  if (has_query_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->query_name(), target);
  }
  
  // optional string process_name = 11;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->process_name(), target);
  }
  
  // optional uint32 timeout = 12;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecuteRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string schema = 1;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema());
    }
    
    // optional .bnet.protocol.storage.Privilege privilege = 2;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privilege());
    }
    
    // optional bool read_only = 3;
    if (has_read_only()) {
      total_size += 1 + 1;
    }
    
    // optional bool wants_row_key = 4;
    if (has_wants_row_key()) {
      total_size += 1 + 1;
    }
    
    // optional bool wants_column_name = 5;
    if (has_wants_column_name()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 max_data_size = 6;
    if (has_max_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_data_size());
    }
    
    // optional uint32 timeout = 12;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 9;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // optional string query_name = 10;
    if (has_query_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_name());
    }
    
    // optional string process_name = 11;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }
    
  }
  // repeated .bnet.protocol.storage.Operation operations = 7;
  total_size += 1 * this->operations_size();
  for (int i = 0; i < this->operations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operations(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecuteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecuteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecuteRequest::MergeFrom(const ExecuteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  operations_.MergeFrom(from.operations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schema()) {
      set_schema(from.schema());
    }
    if (from.has_privilege()) {
      mutable_privilege()->::bnet::protocol::storage::Privilege::MergeFrom(from.privilege());
    }
    if (from.has_read_only()) {
      set_read_only(from.read_only());
    }
    if (from.has_wants_row_key()) {
      set_wants_row_key(from.wants_row_key());
    }
    if (from.has_wants_column_name()) {
      set_wants_column_name(from.wants_column_name());
    }
    if (from.has_max_data_size()) {
      set_max_data_size(from.max_data_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_query_name()) {
      set_query_name(from.query_name());
    }
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecuteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteRequest::CopyFrom(const ExecuteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteRequest::IsInitialized() const {
  
  for (int i = 0; i < operations_size(); i++) {
    if (!this->operations(i).IsInitialized()) return false;
  }
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void ExecuteRequest::Swap(ExecuteRequest* other) {
  if (other != this) {
    std::swap(schema_, other->schema_);
    std::swap(privilege_, other->privilege_);
    std::swap(read_only_, other->read_only_);
    std::swap(wants_row_key_, other->wants_row_key_);
    std::swap(wants_column_name_, other->wants_column_name_);
    std::swap(max_data_size_, other->max_data_size_);
    operations_.Swap(&other->operations_);
    std::swap(timeout_, other->timeout_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(query_name_, other->query_name_);
    std::swap(process_name_, other->process_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecuteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecuteRequest_descriptor_;
  metadata.reflection = ExecuteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecuteResponse::kErrorCodeFieldNumber;
const int ExecuteResponse::kResultsFieldNumber;
const int ExecuteResponse::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

ExecuteResponse::ExecuteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecuteResponse::InitAsDefaultInstance() {
}

ExecuteResponse::ExecuteResponse(const ExecuteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecuteResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecuteResponse::~ExecuteResponse() {
  SharedDtor();
}

void ExecuteResponse::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void ExecuteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecuteResponse_descriptor_;
}

const ExecuteResponse& ExecuteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();  return *default_instance_;
}

ExecuteResponse* ExecuteResponse::default_instance_ = NULL;

ExecuteResponse* ExecuteResponse::New() const {
  return new ExecuteResponse;
}

void ExecuteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecuteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }
      
      // repeated .bnet.protocol.storage.OperationResult results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        if (input->ExpectTag(26)) goto parse_error_message;
        break;
      }
      
      // optional string error_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecuteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }
  
  // repeated .bnet.protocol.storage.OperationResult results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }
  
  // optional string error_message = 3;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error_message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecuteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .bnet.protocol.storage.OperationResult results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }
  
  // optional string error_message = 3;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecuteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }
    
    // optional string error_message = 3;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }
    
  }
  // repeated .bnet.protocol.storage.OperationResult results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecuteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecuteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecuteResponse::MergeFrom(const ExecuteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecuteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteResponse::CopyFrom(const ExecuteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteResponse::IsInitialized() const {
  
  for (int i = 0; i < results_size(); i++) {
    if (!this->results(i).IsInitialized()) return false;
  }
  return true;
}

void ExecuteResponse::Swap(ExecuteResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    results_.Swap(&other->results_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecuteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecuteResponse_descriptor_;
  metadata.reflection = ExecuteResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
