// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/channel_invitation/definition/channel_invitation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace channel_invitation {

namespace {

const ::google::protobuf::Descriptor* AcceptInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptInvitationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptInvitationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuggestInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuggestInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RevokeInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevokeInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HasRoomForInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HasRoomForInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitationAddedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitationAddedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitationRemovedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitationRemovedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuggestionAddedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuggestionAddedNotification_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto() {
  protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/channel_invitation/definition/channel_invitation.proto");
  GOOGLE_CHECK(file != NULL);
  AcceptInvitationRequest_descriptor_ = file->message_type(0);
  static const int AcceptInvitationRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInvitationRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInvitationRequest, invitation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInvitationRequest, object_id_),
  };
  AcceptInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptInvitationRequest_descriptor_,
      AcceptInvitationRequest::default_instance_,
      AcceptInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptInvitationRequest));
  AcceptInvitationResponse_descriptor_ = file->message_type(1);
  static const int AcceptInvitationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInvitationResponse, object_id_),
  };
  AcceptInvitationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptInvitationResponse_descriptor_,
      AcceptInvitationResponse::default_instance_,
      AcceptInvitationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInvitationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInvitationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptInvitationResponse));
  SubscribeRequest_descriptor_ = file->message_type(2);
  static const int SubscribeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, object_id_),
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeResponse_descriptor_ = file->message_type(3);
  static const int SubscribeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, received_invitation_),
  };
  SubscribeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeResponse_descriptor_,
      SubscribeResponse::default_instance_,
      SubscribeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeResponse));
  UnsubscribeRequest_descriptor_ = file->message_type(4);
  static const int UnsubscribeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, agent_id_),
  };
  UnsubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeRequest_descriptor_,
      UnsubscribeRequest::default_instance_,
      UnsubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeRequest));
  SuggestInvitationRequest_descriptor_ = file->message_type(5);
  static const int SuggestInvitationRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestInvitationRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestInvitationRequest, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestInvitationRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestInvitationRequest, approval_id_),
  };
  SuggestInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuggestInvitationRequest_descriptor_,
      SuggestInvitationRequest::default_instance_,
      SuggestInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuggestInvitationRequest));
  RevokeInvitationRequest_descriptor_ = file->message_type(6);
  static const int RevokeInvitationRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeInvitationRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeInvitationRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeInvitationRequest, invitation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeInvitationRequest, channel_id_),
  };
  RevokeInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevokeInvitationRequest_descriptor_,
      RevokeInvitationRequest::default_instance_,
      RevokeInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevokeInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevokeInvitationRequest));
  HasRoomForInvitationRequest_descriptor_ = file->message_type(7);
  static const int HasRoomForInvitationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HasRoomForInvitationRequest, service_type_),
  };
  HasRoomForInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HasRoomForInvitationRequest_descriptor_,
      HasRoomForInvitationRequest::default_instance_,
      HasRoomForInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HasRoomForInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HasRoomForInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HasRoomForInvitationRequest));
  InvitationAddedNotification_descriptor_ = file->message_type(8);
  static const int InvitationAddedNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAddedNotification, invitation_),
  };
  InvitationAddedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitationAddedNotification_descriptor_,
      InvitationAddedNotification::default_instance_,
      InvitationAddedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAddedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAddedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitationAddedNotification));
  InvitationRemovedNotification_descriptor_ = file->message_type(9);
  static const int InvitationRemovedNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRemovedNotification, invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRemovedNotification, reason_),
  };
  InvitationRemovedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitationRemovedNotification_descriptor_,
      InvitationRemovedNotification::default_instance_,
      InvitationRemovedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRemovedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRemovedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitationRemovedNotification));
  SuggestionAddedNotification_descriptor_ = file->message_type(10);
  static const int SuggestionAddedNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestionAddedNotification, suggestion_),
  };
  SuggestionAddedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuggestionAddedNotification_descriptor_,
      SuggestionAddedNotification::default_instance_,
      SuggestionAddedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestionAddedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestionAddedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuggestionAddedNotification));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptInvitationRequest_descriptor_, &AcceptInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptInvitationResponse_descriptor_, &AcceptInvitationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeResponse_descriptor_, &SubscribeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeRequest_descriptor_, &UnsubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuggestInvitationRequest_descriptor_, &SuggestInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevokeInvitationRequest_descriptor_, &RevokeInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HasRoomForInvitationRequest_descriptor_, &HasRoomForInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitationAddedNotification_descriptor_, &InvitationAddedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitationRemovedNotification_descriptor_, &InvitationRemovedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuggestionAddedNotification_descriptor_, &SuggestionAddedNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto() {
  delete AcceptInvitationRequest::default_instance_;
  delete AcceptInvitationRequest_reflection_;
  delete AcceptInvitationResponse::default_instance_;
  delete AcceptInvitationResponse_reflection_;
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeResponse::default_instance_;
  delete SubscribeResponse_reflection_;
  delete UnsubscribeRequest::default_instance_;
  delete UnsubscribeRequest_reflection_;
  delete SuggestInvitationRequest::default_instance_;
  delete SuggestInvitationRequest_reflection_;
  delete RevokeInvitationRequest::default_instance_;
  delete RevokeInvitationRequest_reflection_;
  delete HasRoomForInvitationRequest::default_instance_;
  delete HasRoomForInvitationRequest_reflection_;
  delete InvitationAddedNotification::default_instance_;
  delete InvitationAddedNotification_reflection_;
  delete InvitationRemovedNotification::default_instance_;
  delete InvitationRemovedNotification_reflection_;
  delete SuggestionAddedNotification::default_instance_;
  delete SuggestionAddedNotification_reflection_;
}

void protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::invitation::protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::bnet::protocol::channel::protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  ::bnet::protocol::channel_invitation::protobuf_AddDesc_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n>service/channel_invitation/definition/"
    "channel_invitation.proto\022 bnet.protocol."
    "channel_invitation\032\031lib/protocol/entity."
    "proto\032\035lib/protocol/invitation.proto\032\021li"
    "b/rpc/rpc.proto\032(service/channel/definit"
    "ion/channel.proto\0329service/channel_invit"
    "ation/channel_invitation_types.proto\"n\n\027"
    "AcceptInvitationRequest\022)\n\010agent_id\030\001 \001("
    "\0132\027.bnet.protocol.EntityId\022\025\n\rinvitation"
    "_id\030\002 \002(\006\022\021\n\tobject_id\030\003 \002(\004\"-\n\030AcceptIn"
    "vitationResponse\022\021\n\tobject_id\030\001 \002(\004\"P\n\020S"
    "ubscribeRequest\022)\n\010agent_id\030\001 \001(\0132\027.bnet"
    ".protocol.EntityId\022\021\n\tobject_id\030\002 \002(\004\"\242\001"
    "\n\021SubscribeResponse\022J\n\ncollection\030\001 \003(\0132"
    "6.bnet.protocol.channel_invitation.Invit"
    "ationCollection\022A\n\023received_invitation\030\002"
    " \003(\0132$.bnet.protocol.invitation.Invitati"
    "on\"\?\n\022UnsubscribeRequest\022)\n\010agent_id\030\001 \001"
    "(\0132\027.bnet.protocol.EntityId\"\314\001\n\030SuggestI"
    "nvitationRequest\022)\n\010agent_id\030\001 \001(\0132\027.bne"
    "t.protocol.EntityId\022+\n\nchannel_id\030\002 \002(\0132"
    "\027.bnet.protocol.EntityId\022*\n\ttarget_id\030\003 "
    "\002(\0132\027.bnet.protocol.EntityId\022,\n\013approval"
    "_id\030\004 \001(\0132\027.bnet.protocol.EntityId\"\264\001\n\027R"
    "evokeInvitationRequest\022)\n\010agent_id\030\001 \001(\013"
    "2\027.bnet.protocol.EntityId\022*\n\ttarget_id\030\002"
    " \001(\0132\027.bnet.protocol.EntityId\022\025\n\rinvitat"
    "ion_id\030\003 \002(\006\022+\n\nchannel_id\030\004 \002(\0132\027.bnet."
    "protocol.EntityId\"3\n\033HasRoomForInvitatio"
    "nRequest\022\024\n\014service_type\030\001 \002(\r\"W\n\033Invita"
    "tionAddedNotification\0228\n\ninvitation\030\001 \002("
    "\0132$.bnet.protocol.invitation.Invitation\""
    "i\n\035InvitationRemovedNotification\0228\n\ninvi"
    "tation\030\001 \002(\0132$.bnet.protocol.invitation."
    "Invitation\022\016\n\006reason\030\002 \001(\r\"W\n\033Suggestion"
    "AddedNotification\0228\n\nsuggestion\030\001 \002(\0132$."
    "bnet.protocol.invitation.Suggestion", 1475);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/channel_invitation/definition/channel_invitation.proto", &protobuf_RegisterTypes);
  AcceptInvitationRequest::default_instance_ = new AcceptInvitationRequest();
  AcceptInvitationResponse::default_instance_ = new AcceptInvitationResponse();
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeResponse::default_instance_ = new SubscribeResponse();
  UnsubscribeRequest::default_instance_ = new UnsubscribeRequest();
  SuggestInvitationRequest::default_instance_ = new SuggestInvitationRequest();
  RevokeInvitationRequest::default_instance_ = new RevokeInvitationRequest();
  HasRoomForInvitationRequest::default_instance_ = new HasRoomForInvitationRequest();
  InvitationAddedNotification::default_instance_ = new InvitationAddedNotification();
  InvitationRemovedNotification::default_instance_ = new InvitationRemovedNotification();
  SuggestionAddedNotification::default_instance_ = new SuggestionAddedNotification();
  AcceptInvitationRequest::default_instance_->InitAsDefaultInstance();
  AcceptInvitationResponse::default_instance_->InitAsDefaultInstance();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeResponse::default_instance_->InitAsDefaultInstance();
  UnsubscribeRequest::default_instance_->InitAsDefaultInstance();
  SuggestInvitationRequest::default_instance_->InitAsDefaultInstance();
  RevokeInvitationRequest::default_instance_->InitAsDefaultInstance();
  HasRoomForInvitationRequest::default_instance_->InitAsDefaultInstance();
  InvitationAddedNotification::default_instance_->InitAsDefaultInstance();
  InvitationRemovedNotification::default_instance_->InitAsDefaultInstance();
  SuggestionAddedNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto {
  StaticDescriptorInitializer_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto() {
    protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();
  }
} static_descriptor_initializer_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AcceptInvitationRequest::kAgentIdFieldNumber;
const int AcceptInvitationRequest::kInvitationIdFieldNumber;
const int AcceptInvitationRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

AcceptInvitationRequest::AcceptInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptInvitationRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

AcceptInvitationRequest::AcceptInvitationRequest(const AcceptInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  invitation_id_ = GOOGLE_ULONGLONG(0);
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptInvitationRequest::~AcceptInvitationRequest() {
  SharedDtor();
}

void AcceptInvitationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void AcceptInvitationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptInvitationRequest_descriptor_;
}

const AcceptInvitationRequest& AcceptInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

AcceptInvitationRequest* AcceptInvitationRequest::default_instance_ = NULL;

AcceptInvitationRequest* AcceptInvitationRequest::New() const {
  return new AcceptInvitationRequest;
}

void AcceptInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    invitation_id_ = GOOGLE_ULONGLONG(0);
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_invitation_id;
        break;
      }
      
      // required fixed64 invitation_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_invitation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invitation_id_)));
          set_has_invitation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_object_id;
        break;
      }
      
      // required uint64 object_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required fixed64 invitation_id = 2;
  if (has_invitation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->invitation_id(), output);
  }
  
  // required uint64 object_id = 3;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required fixed64 invitation_id = 2;
  if (has_invitation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->invitation_id(), target);
  }
  
  // required uint64 object_id = 3;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptInvitationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required fixed64 invitation_id = 2;
    if (has_invitation_id()) {
      total_size += 1 + 8;
    }
    
    // required uint64 object_id = 3;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptInvitationRequest::MergeFrom(const AcceptInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_invitation_id()) {
      set_invitation_id(from.invitation_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptInvitationRequest::CopyFrom(const AcceptInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void AcceptInvitationRequest::Swap(AcceptInvitationRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(invitation_id_, other->invitation_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptInvitationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptInvitationRequest_descriptor_;
  metadata.reflection = AcceptInvitationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptInvitationResponse::kObjectIdFieldNumber;
#endif  // !_MSC_VER

AcceptInvitationResponse::AcceptInvitationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptInvitationResponse::InitAsDefaultInstance() {
}

AcceptInvitationResponse::AcceptInvitationResponse(const AcceptInvitationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptInvitationResponse::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptInvitationResponse::~AcceptInvitationResponse() {
  SharedDtor();
}

void AcceptInvitationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptInvitationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptInvitationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptInvitationResponse_descriptor_;
}

const AcceptInvitationResponse& AcceptInvitationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

AcceptInvitationResponse* AcceptInvitationResponse::default_instance_ = NULL;

AcceptInvitationResponse* AcceptInvitationResponse::New() const {
  return new AcceptInvitationResponse;
}

void AcceptInvitationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptInvitationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptInvitationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptInvitationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptInvitationResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptInvitationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptInvitationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptInvitationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptInvitationResponse::MergeFrom(const AcceptInvitationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptInvitationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptInvitationResponse::CopyFrom(const AcceptInvitationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptInvitationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AcceptInvitationResponse::Swap(AcceptInvitationResponse* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptInvitationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptInvitationResponse_descriptor_;
  metadata.reflection = AcceptInvitationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeRequest::kAgentIdFieldNumber;
const int SubscribeRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_id;
        break;
      }
      
      // required uint64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required uint64 object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required uint64 object_id = 2;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required uint64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeResponse::kCollectionFieldNumber;
const int SubscribeResponse::kReceivedInvitationFieldNumber;
#endif  // !_MSC_VER

SubscribeResponse::SubscribeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeResponse::InitAsDefaultInstance() {
}

SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeResponse::~SubscribeResponse() {
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeResponse_descriptor_;
}

const SubscribeResponse& SubscribeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

SubscribeResponse* SubscribeResponse::default_instance_ = NULL;

SubscribeResponse* SubscribeResponse::New() const {
  return new SubscribeResponse;
}

void SubscribeResponse::Clear() {
  collection_.Clear();
  received_invitation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.channel_invitation.InvitationCollection collection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_collection;
        if (input->ExpectTag(18)) goto parse_received_invitation;
        break;
      }
      
      // repeated .bnet.protocol.invitation.Invitation received_invitation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_received_invitation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_received_invitation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_received_invitation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.channel_invitation.InvitationCollection collection = 1;
  for (int i = 0; i < this->collection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->collection(i), output);
  }
  
  // repeated .bnet.protocol.invitation.Invitation received_invitation = 2;
  for (int i = 0; i < this->received_invitation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->received_invitation(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.channel_invitation.InvitationCollection collection = 1;
  for (int i = 0; i < this->collection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->collection(i), target);
  }
  
  // repeated .bnet.protocol.invitation.Invitation received_invitation = 2;
  for (int i = 0; i < this->received_invitation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->received_invitation(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.channel_invitation.InvitationCollection collection = 1;
  total_size += 1 * this->collection_size();
  for (int i = 0; i < this->collection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collection(i));
  }
  
  // repeated .bnet.protocol.invitation.Invitation received_invitation = 2;
  total_size += 1 * this->received_invitation_size();
  for (int i = 0; i < this->received_invitation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->received_invitation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  collection_.MergeFrom(from.collection_);
  received_invitation_.MergeFrom(from.received_invitation_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  
  for (int i = 0; i < collection_size(); i++) {
    if (!this->collection(i).IsInitialized()) return false;
  }
  for (int i = 0; i < received_invitation_size(); i++) {
    if (!this->received_invitation(i).IsInitialized()) return false;
  }
  return true;
}

void SubscribeResponse::Swap(SubscribeResponse* other) {
  if (other != this) {
    collection_.Swap(&other->collection_);
    received_invitation_.Swap(&other->received_invitation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeResponse_descriptor_;
  metadata.reflection = SubscribeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsubscribeRequest::kAgentIdFieldNumber;
#endif  // !_MSC_VER

UnsubscribeRequest::UnsubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnsubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnsubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeRequest_descriptor_;
}

const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

UnsubscribeRequest* UnsubscribeRequest::default_instance_ = NULL;

UnsubscribeRequest* UnsubscribeRequest::New() const {
  return new UnsubscribeRequest;
}

void UnsubscribeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnsubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnsubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnsubscribeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsubscribeRequest::MergeFrom(const UnsubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeRequest::Swap(UnsubscribeRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeRequest_descriptor_;
  metadata.reflection = UnsubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuggestInvitationRequest::kAgentIdFieldNumber;
const int SuggestInvitationRequest::kChannelIdFieldNumber;
const int SuggestInvitationRequest::kTargetIdFieldNumber;
const int SuggestInvitationRequest::kApprovalIdFieldNumber;
#endif  // !_MSC_VER

SuggestInvitationRequest::SuggestInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuggestInvitationRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  approval_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

SuggestInvitationRequest::SuggestInvitationRequest(const SuggestInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuggestInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  channel_id_ = NULL;
  target_id_ = NULL;
  approval_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuggestInvitationRequest::~SuggestInvitationRequest() {
  SharedDtor();
}

void SuggestInvitationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete channel_id_;
    delete target_id_;
    delete approval_id_;
  }
}

void SuggestInvitationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggestInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuggestInvitationRequest_descriptor_;
}

const SuggestInvitationRequest& SuggestInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

SuggestInvitationRequest* SuggestInvitationRequest::default_instance_ = NULL;

SuggestInvitationRequest* SuggestInvitationRequest::New() const {
  return new SuggestInvitationRequest;
}

void SuggestInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_approval_id()) {
      if (approval_id_ != NULL) approval_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuggestInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }
      
      // required .bnet.protocol.EntityId channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_id;
        break;
      }
      
      // required .bnet.protocol.EntityId target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_approval_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId approval_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_approval_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_approval_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuggestInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channel_id(), output);
  }
  
  // required .bnet.protocol.EntityId target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target_id(), output);
  }
  
  // optional .bnet.protocol.EntityId approval_id = 4;
  if (has_approval_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->approval_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuggestInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->channel_id(), target);
  }
  
  // required .bnet.protocol.EntityId target_id = 3;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target_id(), target);
  }
  
  // optional .bnet.protocol.EntityId approval_id = 4;
  if (has_approval_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->approval_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuggestInvitationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
    // required .bnet.protocol.EntityId target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
    // optional .bnet.protocol.EntityId approval_id = 4;
    if (has_approval_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->approval_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggestInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuggestInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuggestInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuggestInvitationRequest::MergeFrom(const SuggestInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
    if (from.has_approval_id()) {
      mutable_approval_id()->::bnet::protocol::EntityId::MergeFrom(from.approval_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuggestInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggestInvitationRequest::CopyFrom(const SuggestInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  if (has_approval_id()) {
    if (!this->approval_id().IsInitialized()) return false;
  }
  return true;
}

void SuggestInvitationRequest::Swap(SuggestInvitationRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(approval_id_, other->approval_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuggestInvitationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuggestInvitationRequest_descriptor_;
  metadata.reflection = SuggestInvitationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevokeInvitationRequest::kAgentIdFieldNumber;
const int RevokeInvitationRequest::kTargetIdFieldNumber;
const int RevokeInvitationRequest::kInvitationIdFieldNumber;
const int RevokeInvitationRequest::kChannelIdFieldNumber;
#endif  // !_MSC_VER

RevokeInvitationRequest::RevokeInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RevokeInvitationRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

RevokeInvitationRequest::RevokeInvitationRequest(const RevokeInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RevokeInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  invitation_id_ = GOOGLE_ULONGLONG(0);
  channel_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevokeInvitationRequest::~RevokeInvitationRequest() {
  SharedDtor();
}

void RevokeInvitationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
    delete channel_id_;
  }
}

void RevokeInvitationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevokeInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevokeInvitationRequest_descriptor_;
}

const RevokeInvitationRequest& RevokeInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

RevokeInvitationRequest* RevokeInvitationRequest::default_instance_ = NULL;

RevokeInvitationRequest* RevokeInvitationRequest::New() const {
  return new RevokeInvitationRequest;
}

void RevokeInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
    invitation_id_ = GOOGLE_ULONGLONG(0);
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevokeInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_invitation_id;
        break;
      }
      
      // required fixed64 invitation_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_invitation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invitation_id_)));
          set_has_invitation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel_id;
        break;
      }
      
      // required .bnet.protocol.EntityId channel_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RevokeInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // optional .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  // required fixed64 invitation_id = 3;
  if (has_invitation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->invitation_id(), output);
  }
  
  // required .bnet.protocol.EntityId channel_id = 4;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RevokeInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // optional .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  // required fixed64 invitation_id = 3;
  if (has_invitation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->invitation_id(), target);
  }
  
  // required .bnet.protocol.EntityId channel_id = 4;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RevokeInvitationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // optional .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
    // required fixed64 invitation_id = 3;
    if (has_invitation_id()) {
      total_size += 1 + 8;
    }
    
    // required .bnet.protocol.EntityId channel_id = 4;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevokeInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevokeInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevokeInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevokeInvitationRequest::MergeFrom(const RevokeInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
    if (from.has_invitation_id()) {
      set_invitation_id(from.invitation_id());
    }
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevokeInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeInvitationRequest::CopyFrom(const RevokeInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  return true;
}

void RevokeInvitationRequest::Swap(RevokeInvitationRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(invitation_id_, other->invitation_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevokeInvitationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevokeInvitationRequest_descriptor_;
  metadata.reflection = RevokeInvitationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HasRoomForInvitationRequest::kServiceTypeFieldNumber;
#endif  // !_MSC_VER

HasRoomForInvitationRequest::HasRoomForInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HasRoomForInvitationRequest::InitAsDefaultInstance() {
}

HasRoomForInvitationRequest::HasRoomForInvitationRequest(const HasRoomForInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HasRoomForInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  service_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HasRoomForInvitationRequest::~HasRoomForInvitationRequest() {
  SharedDtor();
}

void HasRoomForInvitationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HasRoomForInvitationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HasRoomForInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HasRoomForInvitationRequest_descriptor_;
}

const HasRoomForInvitationRequest& HasRoomForInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

HasRoomForInvitationRequest* HasRoomForInvitationRequest::default_instance_ = NULL;

HasRoomForInvitationRequest* HasRoomForInvitationRequest::New() const {
  return new HasRoomForInvitationRequest;
}

void HasRoomForInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    service_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HasRoomForInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 service_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_type_)));
          set_has_service_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HasRoomForInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HasRoomForInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 service_type = 1;
  if (has_service_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HasRoomForInvitationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 service_type = 1;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HasRoomForInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HasRoomForInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HasRoomForInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HasRoomForInvitationRequest::MergeFrom(const HasRoomForInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HasRoomForInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HasRoomForInvitationRequest::CopyFrom(const HasRoomForInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasRoomForInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HasRoomForInvitationRequest::Swap(HasRoomForInvitationRequest* other) {
  if (other != this) {
    std::swap(service_type_, other->service_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HasRoomForInvitationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HasRoomForInvitationRequest_descriptor_;
  metadata.reflection = HasRoomForInvitationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationAddedNotification::kInvitationFieldNumber;
#endif  // !_MSC_VER

InvitationAddedNotification::InvitationAddedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvitationAddedNotification::InitAsDefaultInstance() {
  invitation_ = const_cast< ::bnet::protocol::invitation::Invitation*>(&::bnet::protocol::invitation::Invitation::default_instance());
}

InvitationAddedNotification::InvitationAddedNotification(const InvitationAddedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvitationAddedNotification::SharedCtor() {
  _cached_size_ = 0;
  invitation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationAddedNotification::~InvitationAddedNotification() {
  SharedDtor();
}

void InvitationAddedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete invitation_;
  }
}

void InvitationAddedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationAddedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationAddedNotification_descriptor_;
}

const InvitationAddedNotification& InvitationAddedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

InvitationAddedNotification* InvitationAddedNotification::default_instance_ = NULL;

InvitationAddedNotification* InvitationAddedNotification::New() const {
  return new InvitationAddedNotification;
}

void InvitationAddedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_invitation()) {
      if (invitation_ != NULL) invitation_->::bnet::protocol::invitation::Invitation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitationAddedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.invitation.Invitation invitation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitationAddedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.invitation.Invitation invitation = 1;
  if (has_invitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->invitation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvitationAddedNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.invitation.Invitation invitation = 1;
  if (has_invitation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->invitation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvitationAddedNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.invitation.Invitation invitation = 1;
    if (has_invitation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationAddedNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitationAddedNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitationAddedNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitationAddedNotification::MergeFrom(const InvitationAddedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitation()) {
      mutable_invitation()->::bnet::protocol::invitation::Invitation::MergeFrom(from.invitation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitationAddedNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationAddedNotification::CopyFrom(const InvitationAddedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationAddedNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_invitation()) {
    if (!this->invitation().IsInitialized()) return false;
  }
  return true;
}

void InvitationAddedNotification::Swap(InvitationAddedNotification* other) {
  if (other != this) {
    std::swap(invitation_, other->invitation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitationAddedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitationAddedNotification_descriptor_;
  metadata.reflection = InvitationAddedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationRemovedNotification::kInvitationFieldNumber;
const int InvitationRemovedNotification::kReasonFieldNumber;
#endif  // !_MSC_VER

InvitationRemovedNotification::InvitationRemovedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvitationRemovedNotification::InitAsDefaultInstance() {
  invitation_ = const_cast< ::bnet::protocol::invitation::Invitation*>(&::bnet::protocol::invitation::Invitation::default_instance());
}

InvitationRemovedNotification::InvitationRemovedNotification(const InvitationRemovedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvitationRemovedNotification::SharedCtor() {
  _cached_size_ = 0;
  invitation_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationRemovedNotification::~InvitationRemovedNotification() {
  SharedDtor();
}

void InvitationRemovedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete invitation_;
  }
}

void InvitationRemovedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationRemovedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationRemovedNotification_descriptor_;
}

const InvitationRemovedNotification& InvitationRemovedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

InvitationRemovedNotification* InvitationRemovedNotification::default_instance_ = NULL;

InvitationRemovedNotification* InvitationRemovedNotification::New() const {
  return new InvitationRemovedNotification;
}

void InvitationRemovedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_invitation()) {
      if (invitation_ != NULL) invitation_->::bnet::protocol::invitation::Invitation::Clear();
    }
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitationRemovedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.invitation.Invitation invitation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitationRemovedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.invitation.Invitation invitation = 1;
  if (has_invitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->invitation(), output);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvitationRemovedNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.invitation.Invitation invitation = 1;
  if (has_invitation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->invitation(), target);
  }
  
  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvitationRemovedNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.invitation.Invitation invitation = 1;
    if (has_invitation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitation());
    }
    
    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationRemovedNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitationRemovedNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitationRemovedNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitationRemovedNotification::MergeFrom(const InvitationRemovedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitation()) {
      mutable_invitation()->::bnet::protocol::invitation::Invitation::MergeFrom(from.invitation());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitationRemovedNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationRemovedNotification::CopyFrom(const InvitationRemovedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationRemovedNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_invitation()) {
    if (!this->invitation().IsInitialized()) return false;
  }
  return true;
}

void InvitationRemovedNotification::Swap(InvitationRemovedNotification* other) {
  if (other != this) {
    std::swap(invitation_, other->invitation_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitationRemovedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitationRemovedNotification_descriptor_;
  metadata.reflection = InvitationRemovedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuggestionAddedNotification::kSuggestionFieldNumber;
#endif  // !_MSC_VER

SuggestionAddedNotification::SuggestionAddedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuggestionAddedNotification::InitAsDefaultInstance() {
  suggestion_ = const_cast< ::bnet::protocol::invitation::Suggestion*>(&::bnet::protocol::invitation::Suggestion::default_instance());
}

SuggestionAddedNotification::SuggestionAddedNotification(const SuggestionAddedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuggestionAddedNotification::SharedCtor() {
  _cached_size_ = 0;
  suggestion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuggestionAddedNotification::~SuggestionAddedNotification() {
  SharedDtor();
}

void SuggestionAddedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete suggestion_;
  }
}

void SuggestionAddedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuggestionAddedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuggestionAddedNotification_descriptor_;
}

const SuggestionAddedNotification& SuggestionAddedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fdefinition_2fchannel_5finvitation_2eproto();  return *default_instance_;
}

SuggestionAddedNotification* SuggestionAddedNotification::default_instance_ = NULL;

SuggestionAddedNotification* SuggestionAddedNotification::New() const {
  return new SuggestionAddedNotification;
}

void SuggestionAddedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_suggestion()) {
      if (suggestion_ != NULL) suggestion_->::bnet::protocol::invitation::Suggestion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuggestionAddedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.invitation.Suggestion suggestion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggestion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuggestionAddedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.invitation.Suggestion suggestion = 1;
  if (has_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->suggestion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuggestionAddedNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.invitation.Suggestion suggestion = 1;
  if (has_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->suggestion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuggestionAddedNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.invitation.Suggestion suggestion = 1;
    if (has_suggestion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggestion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuggestionAddedNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuggestionAddedNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuggestionAddedNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuggestionAddedNotification::MergeFrom(const SuggestionAddedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suggestion()) {
      mutable_suggestion()->::bnet::protocol::invitation::Suggestion::MergeFrom(from.suggestion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuggestionAddedNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuggestionAddedNotification::CopyFrom(const SuggestionAddedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestionAddedNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_suggestion()) {
    if (!this->suggestion().IsInitialized()) return false;
  }
  return true;
}

void SuggestionAddedNotification::Swap(SuggestionAddedNotification* other) {
  if (other != this) {
    std::swap(suggestion_, other->suggestion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuggestionAddedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuggestionAddedNotification_descriptor_;
  metadata.reflection = SuggestionAddedNotification_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_invitation
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
