// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/channel_invitation/channel_invitation_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace channel_invitation {

namespace {

const ::google::protobuf::Descriptor* Invitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitationCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitationCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto() {
  protobuf_AddDesc_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/channel_invitation/channel_invitation_types.proto");
  GOOGLE_CHECK(file != NULL);
  Invitation_descriptor_ = file->message_type(0);
  static const int Invitation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, channel_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, rejoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, service_type_),
  };
  Invitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invitation_descriptor_,
      Invitation::default_instance_,
      Invitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invitation));
  SendInvitationRequest_descriptor_ = file->message_type(1);
  static const int SendInvitationRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, rejoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, service_type_),
  };
  SendInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendInvitationRequest_descriptor_,
      SendInvitationRequest::default_instance_,
      SendInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendInvitationRequest));
  InvitationCollection_descriptor_ = file->message_type(2);
  static const int InvitationCollection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationCollection, service_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationCollection, max_received_invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationCollection, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationCollection, received_invitation_),
  };
  InvitationCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitationCollection_descriptor_,
      InvitationCollection::default_instance_,
      InvitationCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitationCollection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invitation_descriptor_, &Invitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendInvitationRequest_descriptor_, &SendInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitationCollection_descriptor_, &InvitationCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto() {
  delete Invitation::default_instance_;
  delete Invitation_reflection_;
  delete SendInvitationRequest::default_instance_;
  delete SendInvitationRequest_reflection_;
  delete InvitationCollection::default_instance_;
  delete InvitationCollection_reflection_;
}

void protobuf_AddDesc_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::invitation::protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::channel::protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n9service/channel_invitation/channel_inv"
    "itation_types.proto\022 bnet.protocol.chann"
    "el_invitation\032\035lib/protocol/invitation.p"
    "roto\032\031lib/protocol/entity.proto\032#service"
    "/channel/channel_types.proto\"\214\001\n\nInvitat"
    "ion\022F\n\023channel_description\030\001 \002(\0132).bnet."
    "protocol.channel.ChannelDescription\022\020\n\010r"
    "eserved\030\002 \001(\010\022\016\n\006rejoin\030\003 \001(\010\022\024\n\014service"
    "_type\030\004 \001(\r\"|\n\025SendInvitationRequest\022+\n\n"
    "channel_id\030\001 \001(\0132\027.bnet.protocol.EntityI"
    "d\022\020\n\010reserved\030\002 \001(\010\022\016\n\006rejoin\030\003 \001(\010\022\024\n\014s"
    "ervice_type\030\004 \001(\r\"\244\001\n\024InvitationCollecti"
    "on\022\024\n\014service_type\030\001 \001(\r\022 \n\030max_received"
    "_invitations\030\002 \001(\r\022\021\n\tobject_id\030\003 \001(\004\022A\n"
    "\023received_invitation\030\004 \003(\0132$.bnet.protoc"
    "ol.invitation.Invitation", 624);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/channel_invitation/channel_invitation_types.proto", &protobuf_RegisterTypes);
  Invitation::default_instance_ = new Invitation();
  SendInvitationRequest::default_instance_ = new SendInvitationRequest();
  InvitationCollection::default_instance_ = new InvitationCollection();
  Invitation::default_instance_->InitAsDefaultInstance();
  SendInvitationRequest::default_instance_->InitAsDefaultInstance();
  InvitationCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto {
  StaticDescriptorInitializer_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto() {
    protobuf_AddDesc_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto();
  }
} static_descriptor_initializer_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Invitation::kChannelDescriptionFieldNumber;
const int Invitation::kReservedFieldNumber;
const int Invitation::kRejoinFieldNumber;
const int Invitation::kServiceTypeFieldNumber;
#endif  // !_MSC_VER

Invitation::Invitation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Invitation::InitAsDefaultInstance() {
  channel_description_ = const_cast< ::bnet::protocol::channel::ChannelDescription*>(&::bnet::protocol::channel::ChannelDescription::default_instance());
}

Invitation::Invitation(const Invitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Invitation::SharedCtor() {
  _cached_size_ = 0;
  channel_description_ = NULL;
  reserved_ = false;
  rejoin_ = false;
  service_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invitation::~Invitation() {
  SharedDtor();
}

void Invitation::SharedDtor() {
  if (this != default_instance_) {
    delete channel_description_;
  }
}

void Invitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invitation_descriptor_;
}

const Invitation& Invitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto();  return *default_instance_;
}

Invitation* Invitation::default_instance_ = NULL;

Invitation* Invitation::New() const {
  return new Invitation;
}

void Invitation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_description()) {
      if (channel_description_ != NULL) channel_description_->::bnet::protocol::channel::ChannelDescription::Clear();
    }
    reserved_ = false;
    rejoin_ = false;
    service_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.channel.ChannelDescription channel_description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reserved;
        break;
      }
      
      // optional bool reserved = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rejoin;
        break;
      }
      
      // optional bool rejoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rejoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rejoin_)));
          set_has_rejoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_service_type;
        break;
      }
      
      // optional uint32 service_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_type_)));
          set_has_service_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Invitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.channel.ChannelDescription channel_description = 1;
  if (has_channel_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_description(), output);
  }
  
  // optional bool reserved = 2;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reserved(), output);
  }
  
  // optional bool rejoin = 3;
  if (has_rejoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rejoin(), output);
  }
  
  // optional uint32 service_type = 4;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->service_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Invitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.channel.ChannelDescription channel_description = 1;
  if (has_channel_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_description(), target);
  }
  
  // optional bool reserved = 2;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reserved(), target);
  }
  
  // optional bool rejoin = 3;
  if (has_rejoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rejoin(), target);
  }
  
  // optional uint32 service_type = 4;
  if (has_service_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->service_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Invitation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.channel.ChannelDescription channel_description = 1;
    if (has_channel_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_description());
    }
    
    // optional bool reserved = 2;
    if (has_reserved()) {
      total_size += 1 + 1;
    }
    
    // optional bool rejoin = 3;
    if (has_rejoin()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 service_type = 4;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invitation::MergeFrom(const Invitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_description()) {
      mutable_channel_description()->::bnet::protocol::channel::ChannelDescription::MergeFrom(from.channel_description());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_rejoin()) {
      set_rejoin(from.rejoin());
    }
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invitation::CopyFrom(const Invitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invitation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_channel_description()) {
    if (!this->channel_description().IsInitialized()) return false;
  }
  return true;
}

void Invitation::Swap(Invitation* other) {
  if (other != this) {
    std::swap(channel_description_, other->channel_description_);
    std::swap(reserved_, other->reserved_);
    std::swap(rejoin_, other->rejoin_);
    std::swap(service_type_, other->service_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invitation_descriptor_;
  metadata.reflection = Invitation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendInvitationRequest::kChannelIdFieldNumber;
const int SendInvitationRequest::kReservedFieldNumber;
const int SendInvitationRequest::kRejoinFieldNumber;
const int SendInvitationRequest::kServiceTypeFieldNumber;
#endif  // !_MSC_VER

SendInvitationRequest::SendInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendInvitationRequest::InitAsDefaultInstance() {
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

SendInvitationRequest::SendInvitationRequest(const SendInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = NULL;
  reserved_ = false;
  rejoin_ = false;
  service_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendInvitationRequest::~SendInvitationRequest() {
  SharedDtor();
}

void SendInvitationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete channel_id_;
  }
}

void SendInvitationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendInvitationRequest_descriptor_;
}

const SendInvitationRequest& SendInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto();  return *default_instance_;
}

SendInvitationRequest* SendInvitationRequest::default_instance_ = NULL;

SendInvitationRequest* SendInvitationRequest::New() const {
  return new SendInvitationRequest;
}

void SendInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
    reserved_ = false;
    rejoin_ = false;
    service_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reserved;
        break;
      }
      
      // optional bool reserved = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rejoin;
        break;
      }
      
      // optional bool rejoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rejoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rejoin_)));
          set_has_rejoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_service_type;
        break;
      }
      
      // optional uint32 service_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_type_)));
          set_has_service_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_id(), output);
  }
  
  // optional bool reserved = 2;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reserved(), output);
  }
  
  // optional bool rejoin = 3;
  if (has_rejoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rejoin(), output);
  }
  
  // optional uint32 service_type = 4;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->service_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_id(), target);
  }
  
  // optional bool reserved = 2;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reserved(), target);
  }
  
  // optional bool rejoin = 3;
  if (has_rejoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rejoin(), target);
  }
  
  // optional uint32 service_type = 4;
  if (has_service_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->service_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendInvitationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
    // optional bool reserved = 2;
    if (has_reserved()) {
      total_size += 1 + 1;
    }
    
    // optional bool rejoin = 3;
    if (has_rejoin()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 service_type = 4;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendInvitationRequest::MergeFrom(const SendInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_rejoin()) {
      set_rejoin(from.rejoin());
    }
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendInvitationRequest::CopyFrom(const SendInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationRequest::IsInitialized() const {
  
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  return true;
}

void SendInvitationRequest::Swap(SendInvitationRequest* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(reserved_, other->reserved_);
    std::swap(rejoin_, other->rejoin_);
    std::swap(service_type_, other->service_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendInvitationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendInvitationRequest_descriptor_;
  metadata.reflection = SendInvitationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationCollection::kServiceTypeFieldNumber;
const int InvitationCollection::kMaxReceivedInvitationsFieldNumber;
const int InvitationCollection::kObjectIdFieldNumber;
const int InvitationCollection::kReceivedInvitationFieldNumber;
#endif  // !_MSC_VER

InvitationCollection::InvitationCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvitationCollection::InitAsDefaultInstance() {
}

InvitationCollection::InvitationCollection(const InvitationCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvitationCollection::SharedCtor() {
  _cached_size_ = 0;
  service_type_ = 0u;
  max_received_invitations_ = 0u;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationCollection::~InvitationCollection() {
  SharedDtor();
}

void InvitationCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvitationCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationCollection_descriptor_;
}

const InvitationCollection& InvitationCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_5finvitation_2fchannel_5finvitation_5ftypes_2eproto();  return *default_instance_;
}

InvitationCollection* InvitationCollection::default_instance_ = NULL;

InvitationCollection* InvitationCollection::New() const {
  return new InvitationCollection;
}

void InvitationCollection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    service_type_ = 0u;
    max_received_invitations_ = 0u;
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  received_invitation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitationCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 service_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_type_)));
          set_has_service_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_received_invitations;
        break;
      }
      
      // optional uint32 max_received_invitations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_received_invitations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_received_invitations_)));
          set_has_max_received_invitations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_object_id;
        break;
      }
      
      // optional uint64 object_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_received_invitation;
        break;
      }
      
      // repeated .bnet.protocol.invitation.Invitation received_invitation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_received_invitation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_received_invitation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_received_invitation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitationCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_type(), output);
  }
  
  // optional uint32 max_received_invitations = 2;
  if (has_max_received_invitations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_received_invitations(), output);
  }
  
  // optional uint64 object_id = 3;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->object_id(), output);
  }
  
  // repeated .bnet.protocol.invitation.Invitation received_invitation = 4;
  for (int i = 0; i < this->received_invitation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->received_invitation(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvitationCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 service_type = 1;
  if (has_service_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_type(), target);
  }
  
  // optional uint32 max_received_invitations = 2;
  if (has_max_received_invitations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_received_invitations(), target);
  }
  
  // optional uint64 object_id = 3;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->object_id(), target);
  }
  
  // repeated .bnet.protocol.invitation.Invitation received_invitation = 4;
  for (int i = 0; i < this->received_invitation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->received_invitation(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvitationCollection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 service_type = 1;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_type());
    }
    
    // optional uint32 max_received_invitations = 2;
    if (has_max_received_invitations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_received_invitations());
    }
    
    // optional uint64 object_id = 3;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  // repeated .bnet.protocol.invitation.Invitation received_invitation = 4;
  total_size += 1 * this->received_invitation_size();
  for (int i = 0; i < this->received_invitation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->received_invitation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitationCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitationCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitationCollection::MergeFrom(const InvitationCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  received_invitation_.MergeFrom(from.received_invitation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_max_received_invitations()) {
      set_max_received_invitations(from.max_received_invitations());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitationCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationCollection::CopyFrom(const InvitationCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationCollection::IsInitialized() const {
  
  for (int i = 0; i < received_invitation_size(); i++) {
    if (!this->received_invitation(i).IsInitialized()) return false;
  }
  return true;
}

void InvitationCollection::Swap(InvitationCollection* other) {
  if (other != this) {
    std::swap(service_type_, other->service_type_);
    std::swap(max_received_invitations_, other->max_received_invitations_);
    std::swap(object_id_, other->object_id_);
    received_invitation_.Swap(&other->received_invitation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitationCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitationCollection_descriptor_;
  metadata.reflection = InvitationCollection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_invitation
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
