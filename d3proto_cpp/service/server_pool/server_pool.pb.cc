// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/server_pool/server_pool.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace server_pool {

namespace {

const ::google::protobuf::Descriptor* GetLoadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLoadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolStateResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto() {
  protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/server_pool/server_pool.proto");
  GOOGLE_CHECK(file != NULL);
  GetLoadRequest_descriptor_ = file->message_type(0);
  static const int GetLoadRequest_offsets_[1] = {
  };
  GetLoadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLoadRequest_descriptor_,
      GetLoadRequest::default_instance_,
      GetLoadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLoadRequest));
  ServerState_descriptor_ = file->message_type(1);
  static const int ServerState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, current_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, player_count_),
  };
  ServerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerState_descriptor_,
      ServerState::default_instance_,
      ServerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerState));
  ServerInfo_descriptor_ = file->message_type(2);
  static const int ServerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, program_id_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  PoolStateRequest_descriptor_ = file->message_type(3);
  static const int PoolStateRequest_offsets_[1] = {
  };
  PoolStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoolStateRequest_descriptor_,
      PoolStateRequest::default_instance_,
      PoolStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoolStateRequest));
  PoolStateResponse_descriptor_ = file->message_type(4);
  static const int PoolStateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStateResponse, info_),
  };
  PoolStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoolStateResponse_descriptor_,
      PoolStateResponse::default_instance_,
      PoolStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoolStateResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLoadRequest_descriptor_, &GetLoadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerState_descriptor_, &ServerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoolStateRequest_descriptor_, &PoolStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoolStateResponse_descriptor_, &PoolStateResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fserver_5fpool_2fserver_5fpool_2eproto() {
  delete GetLoadRequest::default_instance_;
  delete GetLoadRequest_reflection_;
  delete ServerState::default_instance_;
  delete ServerState_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete PoolStateRequest::default_instance_;
  delete PoolStateRequest_reflection_;
  delete PoolStateResponse::default_instance_;
  delete PoolStateResponse_reflection_;
}

void protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%service/server_pool/server_pool.proto\022"
    "\031bnet.protocol.server_pool\032\034lib/protocol"
    "/attribute.proto\032\021lib/rpc/rpc.proto\"\020\n\016G"
    "etLoadRequest\"M\n\013ServerState\022\024\n\014current_"
    "load\030\001 \001(\002\022\022\n\ngame_count\030\002 \001(\005\022\024\n\014player"
    "_count\030\003 \001(\005\"\307\001\n\nServerInfo\022&\n\004host\030\001 \002("
    "\0132\030.bnet.protocol.ProcessId\022\017\n\007replace\030\002"
    " \001(\010\0225\n\005state\030\003 \001(\0132&.bnet.protocol.serv"
    "er_pool.ServerState\0225\n\tattribute\030\004 \003(\0132\""
    ".bnet.protocol.attribute.Attribute\022\022\n\npr"
    "ogram_id\030\005 \001(\007\"\022\n\020PoolStateRequest\"H\n\021Po"
    "olStateResponse\0223\n\004info\030\001 \003(\0132%.bnet.pro"
    "tocol.server_pool.ServerInfo", 508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/server_pool/server_pool.proto", &protobuf_RegisterTypes);
  GetLoadRequest::default_instance_ = new GetLoadRequest();
  ServerState::default_instance_ = new ServerState();
  ServerInfo::default_instance_ = new ServerInfo();
  PoolStateRequest::default_instance_ = new PoolStateRequest();
  PoolStateResponse::default_instance_ = new PoolStateResponse();
  GetLoadRequest::default_instance_->InitAsDefaultInstance();
  ServerState::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  PoolStateRequest::default_instance_->InitAsDefaultInstance();
  PoolStateResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fserver_5fpool_2fserver_5fpool_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fserver_5fpool_2fserver_5fpool_2eproto {
  StaticDescriptorInitializer_service_2fserver_5fpool_2fserver_5fpool_2eproto() {
    protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto();
  }
} static_descriptor_initializer_service_2fserver_5fpool_2fserver_5fpool_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetLoadRequest::GetLoadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLoadRequest::InitAsDefaultInstance() {
}

GetLoadRequest::GetLoadRequest(const GetLoadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLoadRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLoadRequest::~GetLoadRequest() {
  SharedDtor();
}

void GetLoadRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLoadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLoadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLoadRequest_descriptor_;
}

const GetLoadRequest& GetLoadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto();  return *default_instance_;
}

GetLoadRequest* GetLoadRequest::default_instance_ = NULL;

GetLoadRequest* GetLoadRequest::New() const {
  return new GetLoadRequest;
}

void GetLoadRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLoadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetLoadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLoadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLoadRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLoadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLoadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLoadRequest::MergeFrom(const GetLoadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLoadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoadRequest::CopyFrom(const GetLoadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoadRequest::IsInitialized() const {
  
  return true;
}

void GetLoadRequest::Swap(GetLoadRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLoadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLoadRequest_descriptor_;
  metadata.reflection = GetLoadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerState::kCurrentLoadFieldNumber;
const int ServerState::kGameCountFieldNumber;
const int ServerState::kPlayerCountFieldNumber;
#endif  // !_MSC_VER

ServerState::ServerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerState::InitAsDefaultInstance() {
}

ServerState::ServerState(const ServerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerState::SharedCtor() {
  _cached_size_ = 0;
  current_load_ = 0;
  game_count_ = 0;
  player_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerState::~ServerState() {
  SharedDtor();
}

void ServerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerState_descriptor_;
}

const ServerState& ServerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto();  return *default_instance_;
}

ServerState* ServerState::default_instance_ = NULL;

ServerState* ServerState::New() const {
  return new ServerState;
}

void ServerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_load_ = 0;
    game_count_ = 0;
    player_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float current_load = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_load_)));
          set_has_current_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_count;
        break;
      }
      
      // optional int32 game_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_count_)));
          set_has_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_count;
        break;
      }
      
      // optional int32 player_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float current_load = 1;
  if (has_current_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current_load(), output);
  }
  
  // optional int32 game_count = 2;
  if (has_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_count(), output);
  }
  
  // optional int32 player_count = 3;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float current_load = 1;
  if (has_current_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current_load(), target);
  }
  
  // optional int32 game_count = 2;
  if (has_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_count(), target);
  }
  
  // optional int32 player_count = 3;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float current_load = 1;
    if (has_current_load()) {
      total_size += 1 + 4;
    }
    
    // optional int32 game_count = 2;
    if (has_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_count());
    }
    
    // optional int32 player_count = 3;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerState::MergeFrom(const ServerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_load()) {
      set_current_load(from.current_load());
    }
    if (from.has_game_count()) {
      set_game_count(from.game_count());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerState::CopyFrom(const ServerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerState::IsInitialized() const {
  
  return true;
}

void ServerState::Swap(ServerState* other) {
  if (other != this) {
    std::swap(current_load_, other->current_load_);
    std::swap(game_count_, other->game_count_);
    std::swap(player_count_, other->player_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerState_descriptor_;
  metadata.reflection = ServerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kHostFieldNumber;
const int ServerInfo::kReplaceFieldNumber;
const int ServerInfo::kStateFieldNumber;
const int ServerInfo::kAttributeFieldNumber;
const int ServerInfo::kProgramIdFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo::InitAsDefaultInstance() {
  host_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
  state_ = const_cast< ::bnet::protocol::server_pool::ServerState*>(&::bnet::protocol::server_pool::ServerState::default_instance());
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  host_ = NULL;
  replace_ = false;
  state_ = NULL;
  program_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete host_;
    delete state_;
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto();  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
    }
    replace_ = false;
    if (has_state()) {
      if (state_ != NULL) state_->::bnet::protocol::server_pool::ServerState::Clear();
    }
    program_id_ = 0u;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.ProcessId host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replace;
        break;
      }
      
      // optional bool replace = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replace_)));
          set_has_replace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_state;
        break;
      }
      
      // optional .bnet.protocol.server_pool.ServerState state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectTag(45)) goto parse_program_id;
        break;
      }
      
      // optional fixed32 program_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_program_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_id_)));
          set_has_program_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.ProcessId host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->host(), output);
  }
  
  // optional bool replace = 2;
  if (has_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->replace(), output);
  }
  
  // optional .bnet.protocol.server_pool.ServerState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->state(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }
  
  // optional fixed32 program_id = 5;
  if (has_program_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->program_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.ProcessId host = 1;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->host(), target);
  }
  
  // optional bool replace = 2;
  if (has_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->replace(), target);
  }
  
  // optional .bnet.protocol.server_pool.ServerState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->state(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }
  
  // optional fixed32 program_id = 5;
  if (has_program_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->program_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.ProcessId host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }
    
    // optional bool replace = 2;
    if (has_replace()) {
      total_size += 1 + 1;
    }
    
    // optional .bnet.protocol.server_pool.ServerState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // optional fixed32 program_id = 5;
    if (has_program_id()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      mutable_host()->::bnet::protocol::ProcessId::MergeFrom(from.host());
    }
    if (from.has_replace()) {
      set_replace(from.replace());
    }
    if (from.has_state()) {
      mutable_state()->::bnet::protocol::server_pool::ServerState::MergeFrom(from.state());
    }
    if (from.has_program_id()) {
      set_program_id(from.program_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(replace_, other->replace_);
    std::swap(state_, other->state_);
    attribute_.Swap(&other->attribute_);
    std::swap(program_id_, other->program_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PoolStateRequest::PoolStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoolStateRequest::InitAsDefaultInstance() {
}

PoolStateRequest::PoolStateRequest(const PoolStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoolStateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolStateRequest::~PoolStateRequest() {
  SharedDtor();
}

void PoolStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoolStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolStateRequest_descriptor_;
}

const PoolStateRequest& PoolStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto();  return *default_instance_;
}

PoolStateRequest* PoolStateRequest::default_instance_ = NULL;

PoolStateRequest* PoolStateRequest::New() const {
  return new PoolStateRequest;
}

void PoolStateRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoolStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PoolStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoolStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoolStateRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoolStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoolStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoolStateRequest::MergeFrom(const PoolStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoolStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolStateRequest::CopyFrom(const PoolStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolStateRequest::IsInitialized() const {
  
  return true;
}

void PoolStateRequest::Swap(PoolStateRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoolStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolStateRequest_descriptor_;
  metadata.reflection = PoolStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PoolStateResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

PoolStateResponse::PoolStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoolStateResponse::InitAsDefaultInstance() {
}

PoolStateResponse::PoolStateResponse(const PoolStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoolStateResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolStateResponse::~PoolStateResponse() {
  SharedDtor();
}

void PoolStateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoolStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolStateResponse_descriptor_;
}

const PoolStateResponse& PoolStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto();  return *default_instance_;
}

PoolStateResponse* PoolStateResponse::default_instance_ = NULL;

PoolStateResponse* PoolStateResponse::New() const {
  return new PoolStateResponse;
}

void PoolStateResponse::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoolStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.server_pool.ServerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoolStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.server_pool.ServerInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoolStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.server_pool.ServerInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoolStateResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.server_pool.ServerInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoolStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoolStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoolStateResponse::MergeFrom(const PoolStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoolStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolStateResponse::CopyFrom(const PoolStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolStateResponse::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void PoolStateResponse::Swap(PoolStateResponse* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoolStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolStateResponse_descriptor_;
  metadata.reflection = PoolStateResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_pool
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
