// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/followers/definition/followers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace followers {

namespace {

const ::google::protobuf::Descriptor* FollowedUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowedUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeToFollowersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeToFollowersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeToFollowersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeToFollowersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartFollowingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartFollowingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartFollowingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartFollowingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopFollowingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopFollowingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopFollowingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopFollowingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFollowerStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFollowerStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFollowerStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFollowerStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowerNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowerNotification_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* FollowersService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* FollowersNotify_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto() {
  protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/followers/definition/followers.proto");
  GOOGLE_CHECK(file != NULL);
  FollowedUser_descriptor_ = file->message_type(0);
  static const int FollowedUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowedUser, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowedUser, attribute_),
  };
  FollowedUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowedUser_descriptor_,
      FollowedUser::default_instance_,
      FollowedUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowedUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowedUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowedUser));
  SubscribeToFollowersRequest_descriptor_ = file->message_type(1);
  static const int SubscribeToFollowersRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFollowersRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFollowersRequest, object_id_),
  };
  SubscribeToFollowersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeToFollowersRequest_descriptor_,
      SubscribeToFollowersRequest::default_instance_,
      SubscribeToFollowersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFollowersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFollowersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeToFollowersRequest));
  SubscribeToFollowersResponse_descriptor_ = file->message_type(2);
  static const int SubscribeToFollowersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFollowersResponse, followed_users_),
  };
  SubscribeToFollowersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeToFollowersResponse_descriptor_,
      SubscribeToFollowersResponse::default_instance_,
      SubscribeToFollowersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFollowersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFollowersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeToFollowersResponse));
  StartFollowingRequest_descriptor_ = file->message_type(3);
  static const int StartFollowingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFollowingRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFollowingRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFollowingRequest, follower_name_),
  };
  StartFollowingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartFollowingRequest_descriptor_,
      StartFollowingRequest::default_instance_,
      StartFollowingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFollowingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFollowingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartFollowingRequest));
  StartFollowingResponse_descriptor_ = file->message_type(4);
  static const int StartFollowingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFollowingResponse, followed_user_),
  };
  StartFollowingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartFollowingResponse_descriptor_,
      StartFollowingResponse::default_instance_,
      StartFollowingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFollowingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFollowingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartFollowingResponse));
  StopFollowingRequest_descriptor_ = file->message_type(5);
  static const int StopFollowingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopFollowingRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopFollowingRequest, target_id_),
  };
  StopFollowingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopFollowingRequest_descriptor_,
      StopFollowingRequest::default_instance_,
      StopFollowingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopFollowingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopFollowingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopFollowingRequest));
  StopFollowingResponse_descriptor_ = file->message_type(6);
  static const int StopFollowingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopFollowingResponse, followed_user_),
  };
  StopFollowingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopFollowingResponse_descriptor_,
      StopFollowingResponse::default_instance_,
      StopFollowingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopFollowingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopFollowingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopFollowingResponse));
  UpdateFollowerStateRequest_descriptor_ = file->message_type(7);
  static const int UpdateFollowerStateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowerStateRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowerStateRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowerStateRequest, attribute_),
  };
  UpdateFollowerStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFollowerStateRequest_descriptor_,
      UpdateFollowerStateRequest::default_instance_,
      UpdateFollowerStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowerStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowerStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFollowerStateRequest));
  UpdateFollowerStateResponse_descriptor_ = file->message_type(8);
  static const int UpdateFollowerStateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowerStateResponse, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowerStateResponse, attribute_),
  };
  UpdateFollowerStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFollowerStateResponse_descriptor_,
      UpdateFollowerStateResponse::default_instance_,
      UpdateFollowerStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowerStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowerStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFollowerStateResponse));
  FollowerNotification_descriptor_ = file->message_type(9);
  static const int FollowerNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerNotification, followed_user_),
  };
  FollowerNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowerNotification_descriptor_,
      FollowerNotification::default_instance_,
      FollowerNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowerNotification));
  FollowersService_descriptor_ = file->service(0);
  FollowersNotify_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowedUser_descriptor_, &FollowedUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeToFollowersRequest_descriptor_, &SubscribeToFollowersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeToFollowersResponse_descriptor_, &SubscribeToFollowersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartFollowingRequest_descriptor_, &StartFollowingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartFollowingResponse_descriptor_, &StartFollowingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopFollowingRequest_descriptor_, &StopFollowingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopFollowingResponse_descriptor_, &StopFollowingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFollowerStateRequest_descriptor_, &UpdateFollowerStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFollowerStateResponse_descriptor_, &UpdateFollowerStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowerNotification_descriptor_, &FollowerNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2ffollowers_2fdefinition_2ffollowers_2eproto() {
  delete FollowedUser::default_instance_;
  delete FollowedUser_reflection_;
  delete SubscribeToFollowersRequest::default_instance_;
  delete SubscribeToFollowersRequest_reflection_;
  delete SubscribeToFollowersResponse::default_instance_;
  delete SubscribeToFollowersResponse_reflection_;
  delete StartFollowingRequest::default_instance_;
  delete StartFollowingRequest_reflection_;
  delete StartFollowingResponse::default_instance_;
  delete StartFollowingResponse_reflection_;
  delete StopFollowingRequest::default_instance_;
  delete StopFollowingRequest_reflection_;
  delete StopFollowingResponse::default_instance_;
  delete StopFollowingResponse_reflection_;
  delete UpdateFollowerStateRequest::default_instance_;
  delete UpdateFollowerStateRequest_reflection_;
  delete UpdateFollowerStateResponse::default_instance_;
  delete UpdateFollowerStateResponse_reflection_;
  delete FollowerNotification::default_instance_;
  delete FollowerNotification_reflection_;
}

void protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n,service/followers/definition/followers"
    ".proto\022\027bnet.protocol.followers\032\034lib/pro"
    "tocol/attribute.proto\032\031lib/protocol/enti"
    "ty.proto\032\021lib/rpc/rpc.proto\"j\n\014FollowedU"
    "ser\022#\n\002id\030\001 \002(\0132\027.bnet.protocol.EntityId"
    "\0225\n\tattribute\030\002 \003(\0132\".bnet.protocol.attr"
    "ibute.Attribute\"[\n\033SubscribeToFollowersR"
    "equest\022)\n\010agent_id\030\001 \001(\0132\027.bnet.protocol"
    ".EntityId\022\021\n\tobject_id\030\002 \002(\004\"]\n\034Subscrib"
    "eToFollowersResponse\022=\n\016followed_users\030\002"
    " \003(\0132%.bnet.protocol.followers.FollowedU"
    "ser\"\205\001\n\025StartFollowingRequest\022)\n\010agent_i"
    "d\030\001 \001(\0132\027.bnet.protocol.EntityId\022*\n\ttarg"
    "et_id\030\002 \001(\0132\027.bnet.protocol.EntityId\022\025\n\r"
    "follower_name\030\003 \001(\t\"V\n\026StartFollowingRes"
    "ponse\022<\n\rfollowed_user\030\002 \001(\0132%.bnet.prot"
    "ocol.followers.FollowedUser\"m\n\024StopFollo"
    "wingRequest\022)\n\010agent_id\030\001 \001(\0132\027.bnet.pro"
    "tocol.EntityId\022*\n\ttarget_id\030\002 \002(\0132\027.bnet"
    ".protocol.EntityId\"U\n\025StopFollowingRespo"
    "nse\022<\n\rfollowed_user\030\002 \001(\0132%.bnet.protoc"
    "ol.followers.FollowedUser\"\252\001\n\032UpdateFoll"
    "owerStateRequest\022)\n\010agent_id\030\001 \001(\0132\027.bne"
    "t.protocol.EntityId\022*\n\ttarget_id\030\002 \002(\0132\027"
    ".bnet.protocol.EntityId\0225\n\tattribute\030\003 \003"
    "(\0132\".bnet.protocol.attribute.Attribute\"\200"
    "\001\n\033UpdateFollowerStateResponse\022*\n\ttarget"
    "_id\030\002 \002(\0132\027.bnet.protocol.EntityId\0225\n\tat"
    "tribute\030\003 \003(\0132\".bnet.protocol.attribute."
    "Attribute\"T\n\024FollowerNotification\022<\n\rfol"
    "lowed_user\030\001 \002(\0132%.bnet.protocol.followe"
    "rs.FollowedUser2\376\003\n\020FollowersService\022\203\001\n"
    "\024SubscribeToFollowers\0224.bnet.protocol.fo"
    "llowers.SubscribeToFollowersRequest\0325.bn"
    "et.protocol.followers.SubscribeToFollowe"
    "rsResponse\022q\n\016StartFollowing\022..bnet.prot"
    "ocol.followers.StartFollowingRequest\032/.b"
    "net.protocol.followers.StartFollowingRes"
    "ponse\022n\n\rStopFollowing\022-.bnet.protocol.f"
    "ollowers.StopFollowingRequest\032..bnet.pro"
    "tocol.followers.StopFollowingResponse\022\200\001"
    "\n\023UpdateFollowerState\0223.bnet.protocol.fo"
    "llowers.UpdateFollowerStateRequest\0324.bne"
    "t.protocol.followers.UpdateFollowerState"
    "Response2u\n\017FollowersNotify\022b\n\025NotifyFol"
    "lowerRemoved\022-.bnet.protocol.followers.F"
    "ollowerNotification\032\032.bnet.protocol.NO_R"
    "ESPONSEB\003\200\001\001", 1892);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/followers/definition/followers.proto", &protobuf_RegisterTypes);
  FollowedUser::default_instance_ = new FollowedUser();
  SubscribeToFollowersRequest::default_instance_ = new SubscribeToFollowersRequest();
  SubscribeToFollowersResponse::default_instance_ = new SubscribeToFollowersResponse();
  StartFollowingRequest::default_instance_ = new StartFollowingRequest();
  StartFollowingResponse::default_instance_ = new StartFollowingResponse();
  StopFollowingRequest::default_instance_ = new StopFollowingRequest();
  StopFollowingResponse::default_instance_ = new StopFollowingResponse();
  UpdateFollowerStateRequest::default_instance_ = new UpdateFollowerStateRequest();
  UpdateFollowerStateResponse::default_instance_ = new UpdateFollowerStateResponse();
  FollowerNotification::default_instance_ = new FollowerNotification();
  FollowedUser::default_instance_->InitAsDefaultInstance();
  SubscribeToFollowersRequest::default_instance_->InitAsDefaultInstance();
  SubscribeToFollowersResponse::default_instance_->InitAsDefaultInstance();
  StartFollowingRequest::default_instance_->InitAsDefaultInstance();
  StartFollowingResponse::default_instance_->InitAsDefaultInstance();
  StopFollowingRequest::default_instance_->InitAsDefaultInstance();
  StopFollowingResponse::default_instance_->InitAsDefaultInstance();
  UpdateFollowerStateRequest::default_instance_->InitAsDefaultInstance();
  UpdateFollowerStateResponse::default_instance_->InitAsDefaultInstance();
  FollowerNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2ffollowers_2fdefinition_2ffollowers_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2ffollowers_2fdefinition_2ffollowers_2eproto {
  StaticDescriptorInitializer_service_2ffollowers_2fdefinition_2ffollowers_2eproto() {
    protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();
  }
} static_descriptor_initializer_service_2ffollowers_2fdefinition_2ffollowers_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FollowedUser::kIdFieldNumber;
const int FollowedUser::kAttributeFieldNumber;
#endif  // !_MSC_VER

FollowedUser::FollowedUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FollowedUser::InitAsDefaultInstance() {
  id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

FollowedUser::FollowedUser(const FollowedUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FollowedUser::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowedUser::~FollowedUser() {
  SharedDtor();
}

void FollowedUser::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void FollowedUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowedUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowedUser_descriptor_;
}

const FollowedUser& FollowedUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

FollowedUser* FollowedUser::default_instance_ = NULL;

FollowedUser* FollowedUser::New() const {
  return new FollowedUser;
}

void FollowedUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::bnet::protocol::EntityId::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowedUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FollowedUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FollowedUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FollowedUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowedUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowedUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowedUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowedUser::MergeFrom(const FollowedUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::bnet::protocol::EntityId::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowedUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowedUser::CopyFrom(const FollowedUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowedUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void FollowedUser::Swap(FollowedUser* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowedUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowedUser_descriptor_;
  metadata.reflection = FollowedUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeToFollowersRequest::kAgentIdFieldNumber;
const int SubscribeToFollowersRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

SubscribeToFollowersRequest::SubscribeToFollowersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeToFollowersRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

SubscribeToFollowersRequest::SubscribeToFollowersRequest(const SubscribeToFollowersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeToFollowersRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeToFollowersRequest::~SubscribeToFollowersRequest() {
  SharedDtor();
}

void SubscribeToFollowersRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void SubscribeToFollowersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeToFollowersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeToFollowersRequest_descriptor_;
}

const SubscribeToFollowersRequest& SubscribeToFollowersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

SubscribeToFollowersRequest* SubscribeToFollowersRequest::default_instance_ = NULL;

SubscribeToFollowersRequest* SubscribeToFollowersRequest::New() const {
  return new SubscribeToFollowersRequest;
}

void SubscribeToFollowersRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeToFollowersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_id;
        break;
      }
      
      // required uint64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeToFollowersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required uint64 object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeToFollowersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required uint64 object_id = 2;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeToFollowersRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required uint64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeToFollowersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeToFollowersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeToFollowersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeToFollowersRequest::MergeFrom(const SubscribeToFollowersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeToFollowersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeToFollowersRequest::CopyFrom(const SubscribeToFollowersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeToFollowersRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void SubscribeToFollowersRequest::Swap(SubscribeToFollowersRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeToFollowersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeToFollowersRequest_descriptor_;
  metadata.reflection = SubscribeToFollowersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeToFollowersResponse::kFollowedUsersFieldNumber;
#endif  // !_MSC_VER

SubscribeToFollowersResponse::SubscribeToFollowersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeToFollowersResponse::InitAsDefaultInstance() {
}

SubscribeToFollowersResponse::SubscribeToFollowersResponse(const SubscribeToFollowersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeToFollowersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeToFollowersResponse::~SubscribeToFollowersResponse() {
  SharedDtor();
}

void SubscribeToFollowersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeToFollowersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeToFollowersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeToFollowersResponse_descriptor_;
}

const SubscribeToFollowersResponse& SubscribeToFollowersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

SubscribeToFollowersResponse* SubscribeToFollowersResponse::default_instance_ = NULL;

SubscribeToFollowersResponse* SubscribeToFollowersResponse::New() const {
  return new SubscribeToFollowersResponse;
}

void SubscribeToFollowersResponse::Clear() {
  followed_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeToFollowersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.followers.FollowedUser followed_users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_followed_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_followed_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_followed_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeToFollowersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.followers.FollowedUser followed_users = 2;
  for (int i = 0; i < this->followed_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->followed_users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeToFollowersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.followers.FollowedUser followed_users = 2;
  for (int i = 0; i < this->followed_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->followed_users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeToFollowersResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.followers.FollowedUser followed_users = 2;
  total_size += 1 * this->followed_users_size();
  for (int i = 0; i < this->followed_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->followed_users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeToFollowersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeToFollowersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeToFollowersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeToFollowersResponse::MergeFrom(const SubscribeToFollowersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  followed_users_.MergeFrom(from.followed_users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeToFollowersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeToFollowersResponse::CopyFrom(const SubscribeToFollowersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeToFollowersResponse::IsInitialized() const {
  
  for (int i = 0; i < followed_users_size(); i++) {
    if (!this->followed_users(i).IsInitialized()) return false;
  }
  return true;
}

void SubscribeToFollowersResponse::Swap(SubscribeToFollowersResponse* other) {
  if (other != this) {
    followed_users_.Swap(&other->followed_users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeToFollowersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeToFollowersResponse_descriptor_;
  metadata.reflection = SubscribeToFollowersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartFollowingRequest::kAgentIdFieldNumber;
const int StartFollowingRequest::kTargetIdFieldNumber;
const int StartFollowingRequest::kFollowerNameFieldNumber;
#endif  // !_MSC_VER

StartFollowingRequest::StartFollowingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartFollowingRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

StartFollowingRequest::StartFollowingRequest(const StartFollowingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartFollowingRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  follower_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartFollowingRequest::~StartFollowingRequest() {
  SharedDtor();
}

void StartFollowingRequest::SharedDtor() {
  if (follower_name_ != &::google::protobuf::internal::kEmptyString) {
    delete follower_name_;
  }
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void StartFollowingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartFollowingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartFollowingRequest_descriptor_;
}

const StartFollowingRequest& StartFollowingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

StartFollowingRequest* StartFollowingRequest::default_instance_ = NULL;

StartFollowingRequest* StartFollowingRequest::New() const {
  return new StartFollowingRequest;
}

void StartFollowingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_follower_name()) {
      if (follower_name_ != &::google::protobuf::internal::kEmptyString) {
        follower_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartFollowingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_follower_name;
        break;
      }
      
      // optional string follower_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_follower_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_follower_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->follower_name().data(), this->follower_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartFollowingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // optional .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  // optional string follower_name = 3;
  if (has_follower_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->follower_name().data(), this->follower_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->follower_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartFollowingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // optional .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  // optional string follower_name = 3;
  if (has_follower_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->follower_name().data(), this->follower_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->follower_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartFollowingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // optional .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
    // optional string follower_name = 3;
    if (has_follower_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->follower_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartFollowingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartFollowingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartFollowingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartFollowingRequest::MergeFrom(const StartFollowingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
    if (from.has_follower_name()) {
      set_follower_name(from.follower_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartFollowingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartFollowingRequest::CopyFrom(const StartFollowingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartFollowingRequest::IsInitialized() const {
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void StartFollowingRequest::Swap(StartFollowingRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(follower_name_, other->follower_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartFollowingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartFollowingRequest_descriptor_;
  metadata.reflection = StartFollowingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartFollowingResponse::kFollowedUserFieldNumber;
#endif  // !_MSC_VER

StartFollowingResponse::StartFollowingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartFollowingResponse::InitAsDefaultInstance() {
  followed_user_ = const_cast< ::bnet::protocol::followers::FollowedUser*>(&::bnet::protocol::followers::FollowedUser::default_instance());
}

StartFollowingResponse::StartFollowingResponse(const StartFollowingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartFollowingResponse::SharedCtor() {
  _cached_size_ = 0;
  followed_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartFollowingResponse::~StartFollowingResponse() {
  SharedDtor();
}

void StartFollowingResponse::SharedDtor() {
  if (this != default_instance_) {
    delete followed_user_;
  }
}

void StartFollowingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartFollowingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartFollowingResponse_descriptor_;
}

const StartFollowingResponse& StartFollowingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

StartFollowingResponse* StartFollowingResponse::default_instance_ = NULL;

StartFollowingResponse* StartFollowingResponse::New() const {
  return new StartFollowingResponse;
}

void StartFollowingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_followed_user()) {
      if (followed_user_ != NULL) followed_user_->::bnet::protocol::followers::FollowedUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartFollowingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.followers.FollowedUser followed_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_followed_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartFollowingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.followers.FollowedUser followed_user = 2;
  if (has_followed_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->followed_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartFollowingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.followers.FollowedUser followed_user = 2;
  if (has_followed_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->followed_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartFollowingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.followers.FollowedUser followed_user = 2;
    if (has_followed_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->followed_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartFollowingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartFollowingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartFollowingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartFollowingResponse::MergeFrom(const StartFollowingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_followed_user()) {
      mutable_followed_user()->::bnet::protocol::followers::FollowedUser::MergeFrom(from.followed_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartFollowingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartFollowingResponse::CopyFrom(const StartFollowingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartFollowingResponse::IsInitialized() const {
  
  if (has_followed_user()) {
    if (!this->followed_user().IsInitialized()) return false;
  }
  return true;
}

void StartFollowingResponse::Swap(StartFollowingResponse* other) {
  if (other != this) {
    std::swap(followed_user_, other->followed_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartFollowingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartFollowingResponse_descriptor_;
  metadata.reflection = StartFollowingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopFollowingRequest::kAgentIdFieldNumber;
const int StopFollowingRequest::kTargetIdFieldNumber;
#endif  // !_MSC_VER

StopFollowingRequest::StopFollowingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopFollowingRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

StopFollowingRequest::StopFollowingRequest(const StopFollowingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopFollowingRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopFollowingRequest::~StopFollowingRequest() {
  SharedDtor();
}

void StopFollowingRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void StopFollowingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopFollowingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopFollowingRequest_descriptor_;
}

const StopFollowingRequest& StopFollowingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

StopFollowingRequest* StopFollowingRequest::default_instance_ = NULL;

StopFollowingRequest* StopFollowingRequest::New() const {
  return new StopFollowingRequest;
}

void StopFollowingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopFollowingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }
      
      // required .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopFollowingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopFollowingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopFollowingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopFollowingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopFollowingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopFollowingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopFollowingRequest::MergeFrom(const StopFollowingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopFollowingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopFollowingRequest::CopyFrom(const StopFollowingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopFollowingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void StopFollowingRequest::Swap(StopFollowingRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopFollowingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopFollowingRequest_descriptor_;
  metadata.reflection = StopFollowingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopFollowingResponse::kFollowedUserFieldNumber;
#endif  // !_MSC_VER

StopFollowingResponse::StopFollowingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopFollowingResponse::InitAsDefaultInstance() {
  followed_user_ = const_cast< ::bnet::protocol::followers::FollowedUser*>(&::bnet::protocol::followers::FollowedUser::default_instance());
}

StopFollowingResponse::StopFollowingResponse(const StopFollowingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopFollowingResponse::SharedCtor() {
  _cached_size_ = 0;
  followed_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopFollowingResponse::~StopFollowingResponse() {
  SharedDtor();
}

void StopFollowingResponse::SharedDtor() {
  if (this != default_instance_) {
    delete followed_user_;
  }
}

void StopFollowingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopFollowingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopFollowingResponse_descriptor_;
}

const StopFollowingResponse& StopFollowingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

StopFollowingResponse* StopFollowingResponse::default_instance_ = NULL;

StopFollowingResponse* StopFollowingResponse::New() const {
  return new StopFollowingResponse;
}

void StopFollowingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_followed_user()) {
      if (followed_user_ != NULL) followed_user_->::bnet::protocol::followers::FollowedUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopFollowingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.followers.FollowedUser followed_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_followed_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopFollowingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.followers.FollowedUser followed_user = 2;
  if (has_followed_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->followed_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopFollowingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.followers.FollowedUser followed_user = 2;
  if (has_followed_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->followed_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopFollowingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.followers.FollowedUser followed_user = 2;
    if (has_followed_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->followed_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopFollowingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopFollowingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopFollowingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopFollowingResponse::MergeFrom(const StopFollowingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_followed_user()) {
      mutable_followed_user()->::bnet::protocol::followers::FollowedUser::MergeFrom(from.followed_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopFollowingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopFollowingResponse::CopyFrom(const StopFollowingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopFollowingResponse::IsInitialized() const {
  
  if (has_followed_user()) {
    if (!this->followed_user().IsInitialized()) return false;
  }
  return true;
}

void StopFollowingResponse::Swap(StopFollowingResponse* other) {
  if (other != this) {
    std::swap(followed_user_, other->followed_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopFollowingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopFollowingResponse_descriptor_;
  metadata.reflection = StopFollowingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFollowerStateRequest::kAgentIdFieldNumber;
const int UpdateFollowerStateRequest::kTargetIdFieldNumber;
const int UpdateFollowerStateRequest::kAttributeFieldNumber;
#endif  // !_MSC_VER

UpdateFollowerStateRequest::UpdateFollowerStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFollowerStateRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

UpdateFollowerStateRequest::UpdateFollowerStateRequest(const UpdateFollowerStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFollowerStateRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFollowerStateRequest::~UpdateFollowerStateRequest() {
  SharedDtor();
}

void UpdateFollowerStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void UpdateFollowerStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFollowerStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFollowerStateRequest_descriptor_;
}

const UpdateFollowerStateRequest& UpdateFollowerStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

UpdateFollowerStateRequest* UpdateFollowerStateRequest::default_instance_ = NULL;

UpdateFollowerStateRequest* UpdateFollowerStateRequest::New() const {
  return new UpdateFollowerStateRequest;
}

void UpdateFollowerStateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFollowerStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }
      
      // required .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFollowerStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFollowerStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFollowerStateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFollowerStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFollowerStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFollowerStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFollowerStateRequest::MergeFrom(const UpdateFollowerStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFollowerStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFollowerStateRequest::CopyFrom(const UpdateFollowerStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFollowerStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateFollowerStateRequest::Swap(UpdateFollowerStateRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(target_id_, other->target_id_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFollowerStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFollowerStateRequest_descriptor_;
  metadata.reflection = UpdateFollowerStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFollowerStateResponse::kTargetIdFieldNumber;
const int UpdateFollowerStateResponse::kAttributeFieldNumber;
#endif  // !_MSC_VER

UpdateFollowerStateResponse::UpdateFollowerStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFollowerStateResponse::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

UpdateFollowerStateResponse::UpdateFollowerStateResponse(const UpdateFollowerStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFollowerStateResponse::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFollowerStateResponse::~UpdateFollowerStateResponse() {
  SharedDtor();
}

void UpdateFollowerStateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
  }
}

void UpdateFollowerStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFollowerStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFollowerStateResponse_descriptor_;
}

const UpdateFollowerStateResponse& UpdateFollowerStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

UpdateFollowerStateResponse* UpdateFollowerStateResponse::default_instance_ = NULL;

UpdateFollowerStateResponse* UpdateFollowerStateResponse::New() const {
  return new UpdateFollowerStateResponse;
}

void UpdateFollowerStateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFollowerStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFollowerStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFollowerStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFollowerStateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFollowerStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFollowerStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFollowerStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFollowerStateResponse::MergeFrom(const UpdateFollowerStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFollowerStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFollowerStateResponse::CopyFrom(const UpdateFollowerStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFollowerStateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateFollowerStateResponse::Swap(UpdateFollowerStateResponse* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFollowerStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFollowerStateResponse_descriptor_;
  metadata.reflection = UpdateFollowerStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowerNotification::kFollowedUserFieldNumber;
#endif  // !_MSC_VER

FollowerNotification::FollowerNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FollowerNotification::InitAsDefaultInstance() {
  followed_user_ = const_cast< ::bnet::protocol::followers::FollowedUser*>(&::bnet::protocol::followers::FollowedUser::default_instance());
}

FollowerNotification::FollowerNotification(const FollowerNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FollowerNotification::SharedCtor() {
  _cached_size_ = 0;
  followed_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowerNotification::~FollowerNotification() {
  SharedDtor();
}

void FollowerNotification::SharedDtor() {
  if (this != default_instance_) {
    delete followed_user_;
  }
}

void FollowerNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowerNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowerNotification_descriptor_;
}

const FollowerNotification& FollowerNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffollowers_2fdefinition_2ffollowers_2eproto();  return *default_instance_;
}

FollowerNotification* FollowerNotification::default_instance_ = NULL;

FollowerNotification* FollowerNotification::New() const {
  return new FollowerNotification;
}

void FollowerNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_followed_user()) {
      if (followed_user_ != NULL) followed_user_->::bnet::protocol::followers::FollowedUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowerNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.followers.FollowedUser followed_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_followed_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FollowerNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.followers.FollowedUser followed_user = 1;
  if (has_followed_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->followed_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FollowerNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.followers.FollowedUser followed_user = 1;
  if (has_followed_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->followed_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FollowerNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.followers.FollowedUser followed_user = 1;
    if (has_followed_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->followed_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowerNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowerNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowerNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowerNotification::MergeFrom(const FollowerNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_followed_user()) {
      mutable_followed_user()->::bnet::protocol::followers::FollowedUser::MergeFrom(from.followed_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowerNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowerNotification::CopyFrom(const FollowerNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowerNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_followed_user()) {
    if (!this->followed_user().IsInitialized()) return false;
  }
  return true;
}

void FollowerNotification::Swap(FollowerNotification* other) {
  if (other != this) {
    std::swap(followed_user_, other->followed_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowerNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowerNotification_descriptor_;
  metadata.reflection = FollowerNotification_reflection_;
  return metadata;
}


// ===================================================================

FollowersService::~FollowersService() {}

const ::google::protobuf::ServiceDescriptor* FollowersService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowersService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FollowersService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowersService_descriptor_;
}

void FollowersService::SubscribeToFollowers(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::followers::SubscribeToFollowersRequest*,
                         ::bnet::protocol::followers::SubscribeToFollowersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SubscribeToFollowers() not implemented.");
  done->Run();
}

void FollowersService::StartFollowing(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::followers::StartFollowingRequest*,
                         ::bnet::protocol::followers::StartFollowingResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartFollowing() not implemented.");
  done->Run();
}

void FollowersService::StopFollowing(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::followers::StopFollowingRequest*,
                         ::bnet::protocol::followers::StopFollowingResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopFollowing() not implemented.");
  done->Run();
}

void FollowersService::UpdateFollowerState(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::followers::UpdateFollowerStateRequest*,
                         ::bnet::protocol::followers::UpdateFollowerStateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateFollowerState() not implemented.");
  done->Run();
}

void FollowersService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FollowersService_descriptor_);
  switch(method->index()) {
    case 0:
      SubscribeToFollowers(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::followers::SubscribeToFollowersRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::followers::SubscribeToFollowersResponse*>(response),
             done);
      break;
    case 1:
      StartFollowing(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::followers::StartFollowingRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::followers::StartFollowingResponse*>(response),
             done);
      break;
    case 2:
      StopFollowing(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::followers::StopFollowingRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::followers::StopFollowingResponse*>(response),
             done);
      break;
    case 3:
      UpdateFollowerState(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::followers::UpdateFollowerStateRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::followers::UpdateFollowerStateResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FollowersService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::followers::SubscribeToFollowersRequest::default_instance();
    case 1:
      return ::bnet::protocol::followers::StartFollowingRequest::default_instance();
    case 2:
      return ::bnet::protocol::followers::StopFollowingRequest::default_instance();
    case 3:
      return ::bnet::protocol::followers::UpdateFollowerStateRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& FollowersService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::followers::SubscribeToFollowersResponse::default_instance();
    case 1:
      return ::bnet::protocol::followers::StartFollowingResponse::default_instance();
    case 2:
      return ::bnet::protocol::followers::StopFollowingResponse::default_instance();
    case 3:
      return ::bnet::protocol::followers::UpdateFollowerStateResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

FollowersService_Stub::FollowersService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FollowersService_Stub::FollowersService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FollowersService_Stub::~FollowersService_Stub() {
  if (owns_channel_) delete channel_;
}

void FollowersService_Stub::SubscribeToFollowers(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::followers::SubscribeToFollowersRequest* request,
                              ::bnet::protocol::followers::SubscribeToFollowersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FollowersService_Stub::StartFollowing(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::followers::StartFollowingRequest* request,
                              ::bnet::protocol::followers::StartFollowingResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FollowersService_Stub::StopFollowing(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::followers::StopFollowingRequest* request,
                              ::bnet::protocol::followers::StopFollowingResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FollowersService_Stub::UpdateFollowerState(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::followers::UpdateFollowerStateRequest* request,
                              ::bnet::protocol::followers::UpdateFollowerStateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

FollowersNotify::~FollowersNotify() {}

const ::google::protobuf::ServiceDescriptor* FollowersNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowersNotify_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FollowersNotify::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowersNotify_descriptor_;
}

void FollowersNotify::NotifyFollowerRemoved(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::followers::FollowerNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyFollowerRemoved() not implemented.");
  done->Run();
}

void FollowersNotify::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FollowersNotify_descriptor_);
  switch(method->index()) {
    case 0:
      NotifyFollowerRemoved(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::followers::FollowerNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FollowersNotify::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::followers::FollowerNotification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& FollowersNotify::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

FollowersNotify_Stub::FollowersNotify_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FollowersNotify_Stub::FollowersNotify_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FollowersNotify_Stub::~FollowersNotify_Stub() {
  if (owns_channel_) delete channel_;
}

void FollowersNotify_Stub::NotifyFollowerRemoved(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::followers::FollowerNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace followers
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
