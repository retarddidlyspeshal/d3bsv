// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/channel/definition/channel.proto

#ifndef PROTOBUF_service_2fchannel_2fdefinition_2fchannel_2eproto__INCLUDED
#define PROTOBUF_service_2fchannel_2fdefinition_2fchannel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/protocol/attribute.pb.h"
#include "lib/protocol/entity.pb.h"
#include "lib/rpc/rpc.pb.h"
#include "service/channel/channel_types.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace channel {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();

class AddMemberRequest;
class RemoveMemberRequest;
class SendMessageRequest;
class UpdateChannelStateRequest;
class UpdateMemberStateRequest;
class DissolveRequest;
class SetRolesRequest;
class AddNotification;
class JoinNotification;
class RemoveNotification;
class LeaveNotification;
class SendMessageNotification;
class UpdateChannelStateNotification;
class UpdateMemberStateNotification;

// ===================================================================

class AddMemberRequest : public ::google::protobuf::Message {
 public:
  AddMemberRequest();
  virtual ~AddMemberRequest();
  
  AddMemberRequest(const AddMemberRequest& from);
  
  inline AddMemberRequest& operator=(const AddMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMemberRequest& default_instance();
  
  void Swap(AddMemberRequest* other);
  
  // implements Message ----------------------------------------------
  
  AddMemberRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMemberRequest& from);
  void MergeFrom(const AddMemberRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // required .bnet.protocol.Identity member_identity = 2;
  inline bool has_member_identity() const;
  inline void clear_member_identity();
  static const int kMemberIdentityFieldNumber = 2;
  inline const ::bnet::protocol::Identity& member_identity() const;
  inline ::bnet::protocol::Identity* mutable_member_identity();
  inline ::bnet::protocol::Identity* release_member_identity();
  
  // required .bnet.protocol.channel.MemberState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline const ::bnet::protocol::channel::MemberState& state() const;
  inline ::bnet::protocol::channel::MemberState* mutable_state();
  inline ::bnet::protocol::channel::MemberState* release_state();
  
  // required uint64 object_id = 4;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 4;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.AddMemberRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_member_identity();
  inline void clear_has_member_identity();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::Identity* member_identity_;
  ::bnet::protocol::channel::MemberState* state_;
  ::google::protobuf::uint64 object_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static AddMemberRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveMemberRequest : public ::google::protobuf::Message {
 public:
  RemoveMemberRequest();
  virtual ~RemoveMemberRequest();
  
  RemoveMemberRequest(const RemoveMemberRequest& from);
  
  inline RemoveMemberRequest& operator=(const RemoveMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveMemberRequest& default_instance();
  
  void Swap(RemoveMemberRequest* other);
  
  // implements Message ----------------------------------------------
  
  RemoveMemberRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveMemberRequest& from);
  void MergeFrom(const RemoveMemberRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // required .bnet.protocol.EntityId member_id = 2;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& member_id() const;
  inline ::bnet::protocol::EntityId* mutable_member_id();
  inline ::bnet::protocol::EntityId* release_member_id();
  
  // optional uint32 reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.RemoveMemberRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::EntityId* member_id_;
  ::google::protobuf::uint32 reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static RemoveMemberRequest* default_instance_;
};
// -------------------------------------------------------------------

class SendMessageRequest : public ::google::protobuf::Message {
 public:
  SendMessageRequest();
  virtual ~SendMessageRequest();
  
  SendMessageRequest(const SendMessageRequest& from);
  
  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageRequest& default_instance();
  
  void Swap(SendMessageRequest* other);
  
  // implements Message ----------------------------------------------
  
  SendMessageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // required .bnet.protocol.channel.Message message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::bnet::protocol::channel::Message& message() const;
  inline ::bnet::protocol::channel::Message* mutable_message();
  inline ::bnet::protocol::channel::Message* release_message();
  
  // optional uint64 required_privileges = 3;
  inline bool has_required_privileges() const;
  inline void clear_required_privileges();
  static const int kRequiredPrivilegesFieldNumber = 3;
  inline ::google::protobuf::uint64 required_privileges() const;
  inline void set_required_privileges(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.SendMessageRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_required_privileges();
  inline void clear_has_required_privileges();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::channel::Message* message_;
  ::google::protobuf::uint64 required_privileges_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static SendMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateChannelStateRequest : public ::google::protobuf::Message {
 public:
  UpdateChannelStateRequest();
  virtual ~UpdateChannelStateRequest();
  
  UpdateChannelStateRequest(const UpdateChannelStateRequest& from);
  
  inline UpdateChannelStateRequest& operator=(const UpdateChannelStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateChannelStateRequest& default_instance();
  
  void Swap(UpdateChannelStateRequest* other);
  
  // implements Message ----------------------------------------------
  
  UpdateChannelStateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateChannelStateRequest& from);
  void MergeFrom(const UpdateChannelStateRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // required .bnet.protocol.channel.ChannelState state_change = 2;
  inline bool has_state_change() const;
  inline void clear_state_change();
  static const int kStateChangeFieldNumber = 2;
  inline const ::bnet::protocol::channel::ChannelState& state_change() const;
  inline ::bnet::protocol::channel::ChannelState* mutable_state_change();
  inline ::bnet::protocol::channel::ChannelState* release_state_change();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.UpdateChannelStateRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_state_change();
  inline void clear_has_state_change();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::channel::ChannelState* state_change_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateChannelStateRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateMemberStateRequest : public ::google::protobuf::Message {
 public:
  UpdateMemberStateRequest();
  virtual ~UpdateMemberStateRequest();
  
  UpdateMemberStateRequest(const UpdateMemberStateRequest& from);
  
  inline UpdateMemberStateRequest& operator=(const UpdateMemberStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateMemberStateRequest& default_instance();
  
  void Swap(UpdateMemberStateRequest* other);
  
  // implements Message ----------------------------------------------
  
  UpdateMemberStateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateMemberStateRequest& from);
  void MergeFrom(const UpdateMemberStateRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // repeated .bnet.protocol.channel.Member state_change = 2;
  inline int state_change_size() const;
  inline void clear_state_change();
  static const int kStateChangeFieldNumber = 2;
  inline const ::bnet::protocol::channel::Member& state_change(int index) const;
  inline ::bnet::protocol::channel::Member* mutable_state_change(int index);
  inline ::bnet::protocol::channel::Member* add_state_change();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >&
      state_change() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >*
      mutable_state_change();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.UpdateMemberStateRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member > state_change_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateMemberStateRequest* default_instance_;
};
// -------------------------------------------------------------------

class DissolveRequest : public ::google::protobuf::Message {
 public:
  DissolveRequest();
  virtual ~DissolveRequest();
  
  DissolveRequest(const DissolveRequest& from);
  
  inline DissolveRequest& operator=(const DissolveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DissolveRequest& default_instance();
  
  void Swap(DissolveRequest* other);
  
  // implements Message ----------------------------------------------
  
  DissolveRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DissolveRequest& from);
  void MergeFrom(const DissolveRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // optional uint32 reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.DissolveRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::google::protobuf::uint32 reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static DissolveRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetRolesRequest : public ::google::protobuf::Message {
 public:
  SetRolesRequest();
  virtual ~SetRolesRequest();
  
  SetRolesRequest(const SetRolesRequest& from);
  
  inline SetRolesRequest& operator=(const SetRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRolesRequest& default_instance();
  
  void Swap(SetRolesRequest* other);
  
  // implements Message ----------------------------------------------
  
  SetRolesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetRolesRequest& from);
  void MergeFrom(const SetRolesRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // repeated uint32 role = 2;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline ::google::protobuf::uint32 role(int index) const;
  inline void set_role(int index, ::google::protobuf::uint32 value);
  inline void add_role(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role();
  
  // repeated .bnet.protocol.EntityId member_id = 3;
  inline int member_id_size() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& member_id(int index) const;
  inline ::bnet::protocol::EntityId* mutable_member_id(int index);
  inline ::bnet::protocol::EntityId* add_member_id();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
      member_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
      mutable_member_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.SetRolesRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId > member_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static SetRolesRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddNotification : public ::google::protobuf::Message {
 public:
  AddNotification();
  virtual ~AddNotification();
  
  AddNotification(const AddNotification& from);
  
  inline AddNotification& operator=(const AddNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNotification& default_instance();
  
  void Swap(AddNotification* other);
  
  // implements Message ----------------------------------------------
  
  AddNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddNotification& from);
  void MergeFrom(const AddNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.channel.Member self = 1;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 1;
  inline const ::bnet::protocol::channel::Member& self() const;
  inline ::bnet::protocol::channel::Member* mutable_self();
  inline ::bnet::protocol::channel::Member* release_self();
  
  // repeated .bnet.protocol.channel.Member member = 2;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::bnet::protocol::channel::Member& member(int index) const;
  inline ::bnet::protocol::channel::Member* mutable_member(int index);
  inline ::bnet::protocol::channel::Member* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >*
      mutable_member();
  
  // required .bnet.protocol.channel.ChannelState channel_state = 3;
  inline bool has_channel_state() const;
  inline void clear_channel_state();
  static const int kChannelStateFieldNumber = 3;
  inline const ::bnet::protocol::channel::ChannelState& channel_state() const;
  inline ::bnet::protocol::channel::ChannelState* mutable_channel_state();
  inline ::bnet::protocol::channel::ChannelState* release_channel_state();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.AddNotification)
 private:
  inline void set_has_self();
  inline void clear_has_self();
  inline void set_has_channel_state();
  inline void clear_has_channel_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::channel::Member* self_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member > member_;
  ::bnet::protocol::channel::ChannelState* channel_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static AddNotification* default_instance_;
};
// -------------------------------------------------------------------

class JoinNotification : public ::google::protobuf::Message {
 public:
  JoinNotification();
  virtual ~JoinNotification();
  
  JoinNotification(const JoinNotification& from);
  
  inline JoinNotification& operator=(const JoinNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinNotification& default_instance();
  
  void Swap(JoinNotification* other);
  
  // implements Message ----------------------------------------------
  
  JoinNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinNotification& from);
  void MergeFrom(const JoinNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.channel.Member member = 1;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 1;
  inline const ::bnet::protocol::channel::Member& member() const;
  inline ::bnet::protocol::channel::Member* mutable_member();
  inline ::bnet::protocol::channel::Member* release_member();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.JoinNotification)
 private:
  inline void set_has_member();
  inline void clear_has_member();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::channel::Member* member_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static JoinNotification* default_instance_;
};
// -------------------------------------------------------------------

class RemoveNotification : public ::google::protobuf::Message {
 public:
  RemoveNotification();
  virtual ~RemoveNotification();
  
  RemoveNotification(const RemoveNotification& from);
  
  inline RemoveNotification& operator=(const RemoveNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveNotification& default_instance();
  
  void Swap(RemoveNotification* other);
  
  // implements Message ----------------------------------------------
  
  RemoveNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveNotification& from);
  void MergeFrom(const RemoveNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // required .bnet.protocol.EntityId member_id = 2;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& member_id() const;
  inline ::bnet::protocol::EntityId* mutable_member_id();
  inline ::bnet::protocol::EntityId* release_member_id();
  
  // optional uint32 reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.RemoveNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::EntityId* member_id_;
  ::google::protobuf::uint32 reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static RemoveNotification* default_instance_;
};
// -------------------------------------------------------------------

class LeaveNotification : public ::google::protobuf::Message {
 public:
  LeaveNotification();
  virtual ~LeaveNotification();
  
  LeaveNotification(const LeaveNotification& from);
  
  inline LeaveNotification& operator=(const LeaveNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveNotification& default_instance();
  
  void Swap(LeaveNotification* other);
  
  // implements Message ----------------------------------------------
  
  LeaveNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveNotification& from);
  void MergeFrom(const LeaveNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // required .bnet.protocol.EntityId member_id = 2;
  inline bool has_member_id() const;
  inline void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& member_id() const;
  inline ::bnet::protocol::EntityId* mutable_member_id();
  inline ::bnet::protocol::EntityId* release_member_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.LeaveNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::EntityId* member_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static LeaveNotification* default_instance_;
};
// -------------------------------------------------------------------

class SendMessageNotification : public ::google::protobuf::Message {
 public:
  SendMessageNotification();
  virtual ~SendMessageNotification();
  
  SendMessageNotification(const SendMessageNotification& from);
  
  inline SendMessageNotification& operator=(const SendMessageNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageNotification& default_instance();
  
  void Swap(SendMessageNotification* other);
  
  // implements Message ----------------------------------------------
  
  SendMessageNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageNotification& from);
  void MergeFrom(const SendMessageNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // required .bnet.protocol.channel.Message message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::bnet::protocol::channel::Message& message() const;
  inline ::bnet::protocol::channel::Message* mutable_message();
  inline ::bnet::protocol::channel::Message* release_message();
  
  // optional uint64 required_privileges = 3;
  inline bool has_required_privileges() const;
  inline void clear_required_privileges();
  static const int kRequiredPrivilegesFieldNumber = 3;
  inline ::google::protobuf::uint64 required_privileges() const;
  inline void set_required_privileges(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.SendMessageNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_required_privileges();
  inline void clear_has_required_privileges();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::channel::Message* message_;
  ::google::protobuf::uint64 required_privileges_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static SendMessageNotification* default_instance_;
};
// -------------------------------------------------------------------

class UpdateChannelStateNotification : public ::google::protobuf::Message {
 public:
  UpdateChannelStateNotification();
  virtual ~UpdateChannelStateNotification();
  
  UpdateChannelStateNotification(const UpdateChannelStateNotification& from);
  
  inline UpdateChannelStateNotification& operator=(const UpdateChannelStateNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateChannelStateNotification& default_instance();
  
  void Swap(UpdateChannelStateNotification* other);
  
  // implements Message ----------------------------------------------
  
  UpdateChannelStateNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateChannelStateNotification& from);
  void MergeFrom(const UpdateChannelStateNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // required .bnet.protocol.channel.ChannelState state_change = 2;
  inline bool has_state_change() const;
  inline void clear_state_change();
  static const int kStateChangeFieldNumber = 2;
  inline const ::bnet::protocol::channel::ChannelState& state_change() const;
  inline ::bnet::protocol::channel::ChannelState* mutable_state_change();
  inline ::bnet::protocol::channel::ChannelState* release_state_change();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.UpdateChannelStateNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_state_change();
  inline void clear_has_state_change();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::channel::ChannelState* state_change_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateChannelStateNotification* default_instance_;
};
// -------------------------------------------------------------------

class UpdateMemberStateNotification : public ::google::protobuf::Message {
 public:
  UpdateMemberStateNotification();
  virtual ~UpdateMemberStateNotification();
  
  UpdateMemberStateNotification(const UpdateMemberStateNotification& from);
  
  inline UpdateMemberStateNotification& operator=(const UpdateMemberStateNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateMemberStateNotification& default_instance();
  
  void Swap(UpdateMemberStateNotification* other);
  
  // implements Message ----------------------------------------------
  
  UpdateMemberStateNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateMemberStateNotification& from);
  void MergeFrom(const UpdateMemberStateNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // repeated .bnet.protocol.channel.Member state_change = 2;
  inline int state_change_size() const;
  inline void clear_state_change();
  static const int kStateChangeFieldNumber = 2;
  inline const ::bnet::protocol::channel::Member& state_change(int index) const;
  inline ::bnet::protocol::channel::Member* mutable_state_change(int index);
  inline ::bnet::protocol::channel::Member* add_state_change();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >&
      state_change() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >*
      mutable_state_change();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.UpdateMemberStateNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member > state_change_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateMemberStateNotification* default_instance_;
};
// ===================================================================


// ===================================================================

// AddMemberRequest

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool AddMemberRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMemberRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMemberRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMemberRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& AddMemberRequest::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* AddMemberRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* AddMemberRequest::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// required .bnet.protocol.Identity member_identity = 2;
inline bool AddMemberRequest::has_member_identity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMemberRequest::set_has_member_identity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMemberRequest::clear_has_member_identity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMemberRequest::clear_member_identity() {
  if (member_identity_ != NULL) member_identity_->::bnet::protocol::Identity::Clear();
  clear_has_member_identity();
}
inline const ::bnet::protocol::Identity& AddMemberRequest::member_identity() const {
  return member_identity_ != NULL ? *member_identity_ : *default_instance_->member_identity_;
}
inline ::bnet::protocol::Identity* AddMemberRequest::mutable_member_identity() {
  set_has_member_identity();
  if (member_identity_ == NULL) member_identity_ = new ::bnet::protocol::Identity;
  return member_identity_;
}
inline ::bnet::protocol::Identity* AddMemberRequest::release_member_identity() {
  clear_has_member_identity();
  ::bnet::protocol::Identity* temp = member_identity_;
  member_identity_ = NULL;
  return temp;
}

// required .bnet.protocol.channel.MemberState state = 3;
inline bool AddMemberRequest::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddMemberRequest::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddMemberRequest::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddMemberRequest::clear_state() {
  if (state_ != NULL) state_->::bnet::protocol::channel::MemberState::Clear();
  clear_has_state();
}
inline const ::bnet::protocol::channel::MemberState& AddMemberRequest::state() const {
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::bnet::protocol::channel::MemberState* AddMemberRequest::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::bnet::protocol::channel::MemberState;
  return state_;
}
inline ::bnet::protocol::channel::MemberState* AddMemberRequest::release_state() {
  clear_has_state();
  ::bnet::protocol::channel::MemberState* temp = state_;
  state_ = NULL;
  return temp;
}

// required uint64 object_id = 4;
inline bool AddMemberRequest::has_object_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddMemberRequest::set_has_object_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddMemberRequest::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddMemberRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 AddMemberRequest::object_id() const {
  return object_id_;
}
inline void AddMemberRequest::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
}

// -------------------------------------------------------------------

// RemoveMemberRequest

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool RemoveMemberRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveMemberRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveMemberRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveMemberRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& RemoveMemberRequest::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* RemoveMemberRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* RemoveMemberRequest::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId member_id = 2;
inline bool RemoveMemberRequest::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveMemberRequest::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveMemberRequest::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveMemberRequest::clear_member_id() {
  if (member_id_ != NULL) member_id_->::bnet::protocol::EntityId::Clear();
  clear_has_member_id();
}
inline const ::bnet::protocol::EntityId& RemoveMemberRequest::member_id() const {
  return member_id_ != NULL ? *member_id_ : *default_instance_->member_id_;
}
inline ::bnet::protocol::EntityId* RemoveMemberRequest::mutable_member_id() {
  set_has_member_id();
  if (member_id_ == NULL) member_id_ = new ::bnet::protocol::EntityId;
  return member_id_;
}
inline ::bnet::protocol::EntityId* RemoveMemberRequest::release_member_id() {
  clear_has_member_id();
  ::bnet::protocol::EntityId* temp = member_id_;
  member_id_ = NULL;
  return temp;
}

// optional uint32 reason = 3;
inline bool RemoveMemberRequest::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoveMemberRequest::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoveMemberRequest::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoveMemberRequest::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 RemoveMemberRequest::reason() const {
  return reason_;
}
inline void RemoveMemberRequest::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// SendMessageRequest

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool SendMessageRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMessageRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMessageRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMessageRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& SendMessageRequest::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* SendMessageRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* SendMessageRequest::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// required .bnet.protocol.channel.Message message = 2;
inline bool SendMessageRequest::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMessageRequest::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMessageRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMessageRequest::clear_message() {
  if (message_ != NULL) message_->::bnet::protocol::channel::Message::Clear();
  clear_has_message();
}
inline const ::bnet::protocol::channel::Message& SendMessageRequest::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::bnet::protocol::channel::Message* SendMessageRequest::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::bnet::protocol::channel::Message;
  return message_;
}
inline ::bnet::protocol::channel::Message* SendMessageRequest::release_message() {
  clear_has_message();
  ::bnet::protocol::channel::Message* temp = message_;
  message_ = NULL;
  return temp;
}

// optional uint64 required_privileges = 3;
inline bool SendMessageRequest::has_required_privileges() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMessageRequest::set_has_required_privileges() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMessageRequest::clear_has_required_privileges() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMessageRequest::clear_required_privileges() {
  required_privileges_ = GOOGLE_ULONGLONG(0);
  clear_has_required_privileges();
}
inline ::google::protobuf::uint64 SendMessageRequest::required_privileges() const {
  return required_privileges_;
}
inline void SendMessageRequest::set_required_privileges(::google::protobuf::uint64 value) {
  set_has_required_privileges();
  required_privileges_ = value;
}

// -------------------------------------------------------------------

// UpdateChannelStateRequest

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool UpdateChannelStateRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateChannelStateRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateChannelStateRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateChannelStateRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& UpdateChannelStateRequest::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* UpdateChannelStateRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* UpdateChannelStateRequest::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// required .bnet.protocol.channel.ChannelState state_change = 2;
inline bool UpdateChannelStateRequest::has_state_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateChannelStateRequest::set_has_state_change() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateChannelStateRequest::clear_has_state_change() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateChannelStateRequest::clear_state_change() {
  if (state_change_ != NULL) state_change_->::bnet::protocol::channel::ChannelState::Clear();
  clear_has_state_change();
}
inline const ::bnet::protocol::channel::ChannelState& UpdateChannelStateRequest::state_change() const {
  return state_change_ != NULL ? *state_change_ : *default_instance_->state_change_;
}
inline ::bnet::protocol::channel::ChannelState* UpdateChannelStateRequest::mutable_state_change() {
  set_has_state_change();
  if (state_change_ == NULL) state_change_ = new ::bnet::protocol::channel::ChannelState;
  return state_change_;
}
inline ::bnet::protocol::channel::ChannelState* UpdateChannelStateRequest::release_state_change() {
  clear_has_state_change();
  ::bnet::protocol::channel::ChannelState* temp = state_change_;
  state_change_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UpdateMemberStateRequest

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool UpdateMemberStateRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateMemberStateRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateMemberStateRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateMemberStateRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& UpdateMemberStateRequest::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* UpdateMemberStateRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* UpdateMemberStateRequest::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// repeated .bnet.protocol.channel.Member state_change = 2;
inline int UpdateMemberStateRequest::state_change_size() const {
  return state_change_.size();
}
inline void UpdateMemberStateRequest::clear_state_change() {
  state_change_.Clear();
}
inline const ::bnet::protocol::channel::Member& UpdateMemberStateRequest::state_change(int index) const {
  return state_change_.Get(index);
}
inline ::bnet::protocol::channel::Member* UpdateMemberStateRequest::mutable_state_change(int index) {
  return state_change_.Mutable(index);
}
inline ::bnet::protocol::channel::Member* UpdateMemberStateRequest::add_state_change() {
  return state_change_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >&
UpdateMemberStateRequest::state_change() const {
  return state_change_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >*
UpdateMemberStateRequest::mutable_state_change() {
  return &state_change_;
}

// -------------------------------------------------------------------

// DissolveRequest

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool DissolveRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DissolveRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DissolveRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DissolveRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& DissolveRequest::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* DissolveRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* DissolveRequest::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// optional uint32 reason = 2;
inline bool DissolveRequest::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DissolveRequest::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DissolveRequest::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DissolveRequest::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 DissolveRequest::reason() const {
  return reason_;
}
inline void DissolveRequest::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// SetRolesRequest

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool SetRolesRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetRolesRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetRolesRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetRolesRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& SetRolesRequest::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* SetRolesRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* SetRolesRequest::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// repeated uint32 role = 2;
inline int SetRolesRequest::role_size() const {
  return role_.size();
}
inline void SetRolesRequest::clear_role() {
  role_.Clear();
}
inline ::google::protobuf::uint32 SetRolesRequest::role(int index) const {
  return role_.Get(index);
}
inline void SetRolesRequest::set_role(int index, ::google::protobuf::uint32 value) {
  role_.Set(index, value);
}
inline void SetRolesRequest::add_role(::google::protobuf::uint32 value) {
  role_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SetRolesRequest::role() const {
  return role_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SetRolesRequest::mutable_role() {
  return &role_;
}

// repeated .bnet.protocol.EntityId member_id = 3;
inline int SetRolesRequest::member_id_size() const {
  return member_id_.size();
}
inline void SetRolesRequest::clear_member_id() {
  member_id_.Clear();
}
inline const ::bnet::protocol::EntityId& SetRolesRequest::member_id(int index) const {
  return member_id_.Get(index);
}
inline ::bnet::protocol::EntityId* SetRolesRequest::mutable_member_id(int index) {
  return member_id_.Mutable(index);
}
inline ::bnet::protocol::EntityId* SetRolesRequest::add_member_id() {
  return member_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
SetRolesRequest::member_id() const {
  return member_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
SetRolesRequest::mutable_member_id() {
  return &member_id_;
}

// -------------------------------------------------------------------

// AddNotification

// optional .bnet.protocol.channel.Member self = 1;
inline bool AddNotification::has_self() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddNotification::set_has_self() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddNotification::clear_has_self() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddNotification::clear_self() {
  if (self_ != NULL) self_->::bnet::protocol::channel::Member::Clear();
  clear_has_self();
}
inline const ::bnet::protocol::channel::Member& AddNotification::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::bnet::protocol::channel::Member* AddNotification::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::bnet::protocol::channel::Member;
  return self_;
}
inline ::bnet::protocol::channel::Member* AddNotification::release_self() {
  clear_has_self();
  ::bnet::protocol::channel::Member* temp = self_;
  self_ = NULL;
  return temp;
}

// repeated .bnet.protocol.channel.Member member = 2;
inline int AddNotification::member_size() const {
  return member_.size();
}
inline void AddNotification::clear_member() {
  member_.Clear();
}
inline const ::bnet::protocol::channel::Member& AddNotification::member(int index) const {
  return member_.Get(index);
}
inline ::bnet::protocol::channel::Member* AddNotification::mutable_member(int index) {
  return member_.Mutable(index);
}
inline ::bnet::protocol::channel::Member* AddNotification::add_member() {
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >&
AddNotification::member() const {
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >*
AddNotification::mutable_member() {
  return &member_;
}

// required .bnet.protocol.channel.ChannelState channel_state = 3;
inline bool AddNotification::has_channel_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddNotification::set_has_channel_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddNotification::clear_has_channel_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddNotification::clear_channel_state() {
  if (channel_state_ != NULL) channel_state_->::bnet::protocol::channel::ChannelState::Clear();
  clear_has_channel_state();
}
inline const ::bnet::protocol::channel::ChannelState& AddNotification::channel_state() const {
  return channel_state_ != NULL ? *channel_state_ : *default_instance_->channel_state_;
}
inline ::bnet::protocol::channel::ChannelState* AddNotification::mutable_channel_state() {
  set_has_channel_state();
  if (channel_state_ == NULL) channel_state_ = new ::bnet::protocol::channel::ChannelState;
  return channel_state_;
}
inline ::bnet::protocol::channel::ChannelState* AddNotification::release_channel_state() {
  clear_has_channel_state();
  ::bnet::protocol::channel::ChannelState* temp = channel_state_;
  channel_state_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// JoinNotification

// required .bnet.protocol.channel.Member member = 1;
inline bool JoinNotification::has_member() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinNotification::set_has_member() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinNotification::clear_has_member() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinNotification::clear_member() {
  if (member_ != NULL) member_->::bnet::protocol::channel::Member::Clear();
  clear_has_member();
}
inline const ::bnet::protocol::channel::Member& JoinNotification::member() const {
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::bnet::protocol::channel::Member* JoinNotification::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::bnet::protocol::channel::Member;
  return member_;
}
inline ::bnet::protocol::channel::Member* JoinNotification::release_member() {
  clear_has_member();
  ::bnet::protocol::channel::Member* temp = member_;
  member_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RemoveNotification

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool RemoveNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& RemoveNotification::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* RemoveNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* RemoveNotification::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId member_id = 2;
inline bool RemoveNotification::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveNotification::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveNotification::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveNotification::clear_member_id() {
  if (member_id_ != NULL) member_id_->::bnet::protocol::EntityId::Clear();
  clear_has_member_id();
}
inline const ::bnet::protocol::EntityId& RemoveNotification::member_id() const {
  return member_id_ != NULL ? *member_id_ : *default_instance_->member_id_;
}
inline ::bnet::protocol::EntityId* RemoveNotification::mutable_member_id() {
  set_has_member_id();
  if (member_id_ == NULL) member_id_ = new ::bnet::protocol::EntityId;
  return member_id_;
}
inline ::bnet::protocol::EntityId* RemoveNotification::release_member_id() {
  clear_has_member_id();
  ::bnet::protocol::EntityId* temp = member_id_;
  member_id_ = NULL;
  return temp;
}

// optional uint32 reason = 3;
inline bool RemoveNotification::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoveNotification::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoveNotification::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoveNotification::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 RemoveNotification::reason() const {
  return reason_;
}
inline void RemoveNotification::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// LeaveNotification

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool LeaveNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& LeaveNotification::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* LeaveNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* LeaveNotification::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId member_id = 2;
inline bool LeaveNotification::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaveNotification::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaveNotification::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaveNotification::clear_member_id() {
  if (member_id_ != NULL) member_id_->::bnet::protocol::EntityId::Clear();
  clear_has_member_id();
}
inline const ::bnet::protocol::EntityId& LeaveNotification::member_id() const {
  return member_id_ != NULL ? *member_id_ : *default_instance_->member_id_;
}
inline ::bnet::protocol::EntityId* LeaveNotification::mutable_member_id() {
  set_has_member_id();
  if (member_id_ == NULL) member_id_ = new ::bnet::protocol::EntityId;
  return member_id_;
}
inline ::bnet::protocol::EntityId* LeaveNotification::release_member_id() {
  clear_has_member_id();
  ::bnet::protocol::EntityId* temp = member_id_;
  member_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SendMessageNotification

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool SendMessageNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMessageNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMessageNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMessageNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& SendMessageNotification::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* SendMessageNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* SendMessageNotification::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// required .bnet.protocol.channel.Message message = 2;
inline bool SendMessageNotification::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMessageNotification::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMessageNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMessageNotification::clear_message() {
  if (message_ != NULL) message_->::bnet::protocol::channel::Message::Clear();
  clear_has_message();
}
inline const ::bnet::protocol::channel::Message& SendMessageNotification::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::bnet::protocol::channel::Message* SendMessageNotification::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::bnet::protocol::channel::Message;
  return message_;
}
inline ::bnet::protocol::channel::Message* SendMessageNotification::release_message() {
  clear_has_message();
  ::bnet::protocol::channel::Message* temp = message_;
  message_ = NULL;
  return temp;
}

// optional uint64 required_privileges = 3;
inline bool SendMessageNotification::has_required_privileges() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMessageNotification::set_has_required_privileges() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMessageNotification::clear_has_required_privileges() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMessageNotification::clear_required_privileges() {
  required_privileges_ = GOOGLE_ULONGLONG(0);
  clear_has_required_privileges();
}
inline ::google::protobuf::uint64 SendMessageNotification::required_privileges() const {
  return required_privileges_;
}
inline void SendMessageNotification::set_required_privileges(::google::protobuf::uint64 value) {
  set_has_required_privileges();
  required_privileges_ = value;
}

// -------------------------------------------------------------------

// UpdateChannelStateNotification

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool UpdateChannelStateNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateChannelStateNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateChannelStateNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateChannelStateNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& UpdateChannelStateNotification::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* UpdateChannelStateNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* UpdateChannelStateNotification::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// required .bnet.protocol.channel.ChannelState state_change = 2;
inline bool UpdateChannelStateNotification::has_state_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateChannelStateNotification::set_has_state_change() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateChannelStateNotification::clear_has_state_change() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateChannelStateNotification::clear_state_change() {
  if (state_change_ != NULL) state_change_->::bnet::protocol::channel::ChannelState::Clear();
  clear_has_state_change();
}
inline const ::bnet::protocol::channel::ChannelState& UpdateChannelStateNotification::state_change() const {
  return state_change_ != NULL ? *state_change_ : *default_instance_->state_change_;
}
inline ::bnet::protocol::channel::ChannelState* UpdateChannelStateNotification::mutable_state_change() {
  set_has_state_change();
  if (state_change_ == NULL) state_change_ = new ::bnet::protocol::channel::ChannelState;
  return state_change_;
}
inline ::bnet::protocol::channel::ChannelState* UpdateChannelStateNotification::release_state_change() {
  clear_has_state_change();
  ::bnet::protocol::channel::ChannelState* temp = state_change_;
  state_change_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UpdateMemberStateNotification

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool UpdateMemberStateNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateMemberStateNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateMemberStateNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateMemberStateNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& UpdateMemberStateNotification::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* UpdateMemberStateNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* UpdateMemberStateNotification::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// repeated .bnet.protocol.channel.Member state_change = 2;
inline int UpdateMemberStateNotification::state_change_size() const {
  return state_change_.size();
}
inline void UpdateMemberStateNotification::clear_state_change() {
  state_change_.Clear();
}
inline const ::bnet::protocol::channel::Member& UpdateMemberStateNotification::state_change(int index) const {
  return state_change_.Get(index);
}
inline ::bnet::protocol::channel::Member* UpdateMemberStateNotification::mutable_state_change(int index) {
  return state_change_.Mutable(index);
}
inline ::bnet::protocol::channel::Member* UpdateMemberStateNotification::add_state_change() {
  return state_change_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >&
UpdateMemberStateNotification::state_change() const {
  return state_change_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >*
UpdateMemberStateNotification::mutable_state_change() {
  return &state_change_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fchannel_2fdefinition_2fchannel_2eproto__INCLUDED
