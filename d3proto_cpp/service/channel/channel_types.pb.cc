// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/channel/channel_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace channel {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChannelInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChannelInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChannelInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChannelInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChannelIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChannelIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChannelIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChannelIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChannelState_PrivacyLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemberState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Member_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto() {
  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/channel/channel_types.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, role_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  ChannelDescription_descriptor_ = file->message_type(1);
  static const int ChannelDescription_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, current_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, state_),
  };
  ChannelDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelDescription_descriptor_,
      ChannelDescription::default_instance_,
      ChannelDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelDescription));
  ChannelInfo_descriptor_ = file->message_type(2);
  static const int ChannelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, member_),
  };
  ChannelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelInfo_descriptor_,
      ChannelInfo::default_instance_,
      ChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelInfo));
  GetChannelInfoRequest_descriptor_ = file->message_type(3);
  static const int GetChannelInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelInfoRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelInfoRequest, channel_id_),
  };
  GetChannelInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChannelInfoRequest_descriptor_,
      GetChannelInfoRequest::default_instance_,
      GetChannelInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChannelInfoRequest));
  GetChannelInfoResponse_descriptor_ = file->message_type(4);
  static const int GetChannelInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelInfoResponse, channel_info_),
  };
  GetChannelInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChannelInfoResponse_descriptor_,
      GetChannelInfoResponse::default_instance_,
      GetChannelInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChannelInfoResponse));
  GetChannelIdRequest_descriptor_ = file->message_type(5);
  static const int GetChannelIdRequest_offsets_[1] = {
  };
  GetChannelIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChannelIdRequest_descriptor_,
      GetChannelIdRequest::default_instance_,
      GetChannelIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChannelIdRequest));
  GetChannelIdResponse_descriptor_ = file->message_type(6);
  static const int GetChannelIdResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelIdResponse, channel_id_),
  };
  GetChannelIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChannelIdResponse_descriptor_,
      GetChannelIdResponse::default_instance_,
      GetChannelIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChannelIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChannelIdResponse));
  CreateChannelRequest_descriptor_ = file->message_type(7);
  static const int CreateChannelRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, agent_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, object_id_),
  };
  CreateChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateChannelRequest_descriptor_,
      CreateChannelRequest::default_instance_,
      CreateChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateChannelRequest));
  CreateChannelResponse_descriptor_ = file->message_type(8);
  static const int CreateChannelResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelResponse, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelResponse, channel_id_),
  };
  CreateChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateChannelResponse_descriptor_,
      CreateChannelResponse::default_instance_,
      CreateChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateChannelResponse));
  JoinChannelRequest_descriptor_ = file->message_type(9);
  static const int JoinChannelRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelRequest, agent_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelRequest, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelRequest, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelRequest, friend_account_id_),
  };
  JoinChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinChannelRequest_descriptor_,
      JoinChannelRequest::default_instance_,
      JoinChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinChannelRequest));
  JoinChannelResponse_descriptor_ = file->message_type(10);
  static const int JoinChannelResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelResponse, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelResponse, require_friend_validation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelResponse, privileged_account_),
  };
  JoinChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinChannelResponse_descriptor_,
      JoinChannelResponse::default_instance_,
      JoinChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinChannelResponse));
  FindChannelRequest_descriptor_ = file->message_type(11);
  static const int FindChannelRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindChannelRequest, filter_),
  };
  FindChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindChannelRequest_descriptor_,
      FindChannelRequest::default_instance_,
      FindChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindChannelRequest));
  FindChannelResponse_descriptor_ = file->message_type(12);
  static const int FindChannelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindChannelResponse, channel_),
  };
  FindChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindChannelResponse_descriptor_,
      FindChannelResponse::default_instance_,
      FindChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindChannelResponse));
  ChannelState_descriptor_ = file->message_type(13);
  static const int ChannelState_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, max_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, min_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, max_invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, public__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, delegate_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, channel_type_),
  };
  ChannelState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelState_descriptor_,
      ChannelState::default_instance_,
      ChannelState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelState));
  ChannelState_PrivacyLevel_descriptor_ = ChannelState_descriptor_->enum_type(0);
  MemberState_descriptor_ = file->message_type(14);
  static const int MemberState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, privileges_),
  };
  MemberState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberState_descriptor_,
      MemberState::default_instance_,
      MemberState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberState));
  Member_descriptor_ = file->message_type(15);
  static const int Member_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, state_),
  };
  Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Member_descriptor_,
      Member::default_instance_,
      Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Member));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelDescription_descriptor_, &ChannelDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelInfo_descriptor_, &ChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChannelInfoRequest_descriptor_, &GetChannelInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChannelInfoResponse_descriptor_, &GetChannelInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChannelIdRequest_descriptor_, &GetChannelIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChannelIdResponse_descriptor_, &GetChannelIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateChannelRequest_descriptor_, &CreateChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateChannelResponse_descriptor_, &CreateChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinChannelRequest_descriptor_, &JoinChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinChannelResponse_descriptor_, &JoinChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindChannelRequest_descriptor_, &FindChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindChannelResponse_descriptor_, &FindChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelState_descriptor_, &ChannelState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberState_descriptor_, &MemberState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Member_descriptor_, &Member::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete ChannelDescription::default_instance_;
  delete ChannelDescription_reflection_;
  delete ChannelInfo::default_instance_;
  delete ChannelInfo_reflection_;
  delete GetChannelInfoRequest::default_instance_;
  delete GetChannelInfoRequest_reflection_;
  delete GetChannelInfoResponse::default_instance_;
  delete GetChannelInfoResponse_reflection_;
  delete GetChannelIdRequest::default_instance_;
  delete GetChannelIdRequest_reflection_;
  delete GetChannelIdResponse::default_instance_;
  delete GetChannelIdResponse_reflection_;
  delete CreateChannelRequest::default_instance_;
  delete CreateChannelRequest_reflection_;
  delete CreateChannelResponse::default_instance_;
  delete CreateChannelResponse_reflection_;
  delete JoinChannelRequest::default_instance_;
  delete JoinChannelRequest_reflection_;
  delete JoinChannelResponse::default_instance_;
  delete JoinChannelResponse_reflection_;
  delete FindChannelRequest::default_instance_;
  delete FindChannelRequest_reflection_;
  delete FindChannelResponse::default_instance_;
  delete FindChannelResponse_reflection_;
  delete ChannelState::default_instance_;
  delete ChannelState_reflection_;
  delete MemberState::default_instance_;
  delete MemberState_reflection_;
  delete Member::default_instance_;
  delete Member_reflection_;
}

void protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::invitation::protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#service/channel/channel_types.proto\022\025b"
    "net.protocol.channel\032\034lib/protocol/attri"
    "bute.proto\032\031lib/protocol/entity.proto\032\035l"
    "ib/protocol/invitation.proto\"N\n\007Message\022"
    "5\n\tattribute\030\001 \003(\0132\".bnet.protocol.attri"
    "bute.Attribute\022\014\n\004role\030\002 \001(\r\"\216\001\n\022Channel"
    "Description\022+\n\nchannel_id\030\001 \002(\0132\027.bnet.p"
    "rotocol.EntityId\022\027\n\017current_members\030\002 \001("
    "\r\0222\n\005state\030\003 \001(\0132#.bnet.protocol.channel"
    ".ChannelState\"|\n\013ChannelInfo\022>\n\013descript"
    "ion\030\001 \002(\0132).bnet.protocol.channel.Channe"
    "lDescription\022-\n\006member\030\002 \003(\0132\035.bnet.prot"
    "ocol.channel.Member\"o\n\025GetChannelInfoReq"
    "uest\022)\n\010agent_id\030\001 \001(\0132\027.bnet.protocol.E"
    "ntityId\022+\n\nchannel_id\030\002 \002(\0132\027.bnet.proto"
    "col.EntityId\"R\n\026GetChannelInfoResponse\0228"
    "\n\014channel_info\030\001 \001(\0132\".bnet.protocol.cha"
    "nnel.ChannelInfo\"\025\n\023GetChannelIdRequest\""
    "C\n\024GetChannelIdResponse\022+\n\nchannel_id\030\001 "
    "\001(\0132\027.bnet.protocol.EntityId\"\273\001\n\024CreateC"
    "hannelRequest\022/\n\016agent_identity\030\001 \001(\0132\027."
    "bnet.protocol.Identity\0222\n\005state\030\002 \001(\0132#."
    "bnet.protocol.channel.ChannelState\022+\n\nch"
    "annel_id\030\003 \001(\0132\027.bnet.protocol.EntityId\022"
    "\021\n\tobject_id\030\004 \001(\004\"W\n\025CreateChannelRespo"
    "nse\022\021\n\tobject_id\030\001 \002(\004\022+\n\nchannel_id\030\002 \001"
    "(\0132\027.bnet.protocol.EntityId\"\271\001\n\022JoinChan"
    "nelRequest\022/\n\016agent_identity\030\001 \001(\0132\027.bne"
    "t.protocol.Identity\022+\n\nchannel_id\030\002 \002(\0132"
    "\027.bnet.protocol.EntityId\022\021\n\tobject_id\030\003 "
    "\002(\004\0222\n\021friend_account_id\030\004 \003(\0132\027.bnet.pr"
    "otocol.EntityId\"\200\001\n\023JoinChannelResponse\022"
    "\021\n\tobject_id\030\001 \001(\004\022!\n\031require_friend_val"
    "idation\030\002 \001(\010\0223\n\022privileged_account\030\003 \003("
    "\0132\027.bnet.protocol.EntityId\"N\n\022FindChanne"
    "lRequest\0228\n\006filter\030\001 \002(\0132(.bnet.protocol"
    ".attribute.AttributeFilter\"Q\n\023FindChanne"
    "lResponse\022:\n\007channel\030\001 \003(\0132).bnet.protoc"
    "ol.channel.ChannelDescription\"\372\003\n\014Channe"
    "lState\022\023\n\013max_members\030\001 \001(\r\022\023\n\013min_membe"
    "rs\030\002 \001(\r\0225\n\tattribute\030\003 \003(\0132\".bnet.proto"
    "col.attribute.Attribute\0228\n\ninvitation\030\004 "
    "\003(\0132$.bnet.protocol.invitation.Invitatio"
    "n\022\027\n\017max_invitations\030\005 \001(\r\022\016\n\006reason\030\006 \001"
    "(\r\022G\n\rprivacy_level\030\007 \001(\01620.bnet.protoco"
    "l.channel.ChannelState.PrivacyLevel\022\016\n\006p"
    "ublic\030\010 \001(\010\022\014\n\004name\030\t \001(\t\022\025\n\rdelegate_na"
    "me\030\n \001(\t\022\024\n\014channel_type\030\013 \001(\t\"\221\001\n\014Priva"
    "cyLevel\022\026\n\022PRIVACY_LEVEL_OPEN\020\001\022,\n(PRIVA"
    "CY_LEVEL_OPEN_INVITATION_AND_FRIEND\020\002\022!\n"
    "\035PRIVACY_LEVEL_OPEN_INVITATION\020\003\022\030\n\024PRIV"
    "ACY_LEVEL_CLOSED\020\004\"f\n\013MemberState\0225\n\tatt"
    "ribute\030\001 \003(\0132\".bnet.protocol.attribute.A"
    "ttribute\022\014\n\004role\030\002 \003(\r\022\022\n\nprivileges\030\003 \001"
    "(\004\"f\n\006Member\022)\n\010identity\030\001 \002(\0132\027.bnet.pr"
    "otocol.Identity\0221\n\005state\030\002 \002(\0132\".bnet.pr"
    "otocol.channel.MemberState", 2266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/channel/channel_types.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  ChannelDescription::default_instance_ = new ChannelDescription();
  ChannelInfo::default_instance_ = new ChannelInfo();
  GetChannelInfoRequest::default_instance_ = new GetChannelInfoRequest();
  GetChannelInfoResponse::default_instance_ = new GetChannelInfoResponse();
  GetChannelIdRequest::default_instance_ = new GetChannelIdRequest();
  GetChannelIdResponse::default_instance_ = new GetChannelIdResponse();
  CreateChannelRequest::default_instance_ = new CreateChannelRequest();
  CreateChannelResponse::default_instance_ = new CreateChannelResponse();
  JoinChannelRequest::default_instance_ = new JoinChannelRequest();
  JoinChannelResponse::default_instance_ = new JoinChannelResponse();
  FindChannelRequest::default_instance_ = new FindChannelRequest();
  FindChannelResponse::default_instance_ = new FindChannelResponse();
  ChannelState::default_instance_ = new ChannelState();
  MemberState::default_instance_ = new MemberState();
  Member::default_instance_ = new Member();
  Message::default_instance_->InitAsDefaultInstance();
  ChannelDescription::default_instance_->InitAsDefaultInstance();
  ChannelInfo::default_instance_->InitAsDefaultInstance();
  GetChannelInfoRequest::default_instance_->InitAsDefaultInstance();
  GetChannelInfoResponse::default_instance_->InitAsDefaultInstance();
  GetChannelIdRequest::default_instance_->InitAsDefaultInstance();
  GetChannelIdResponse::default_instance_->InitAsDefaultInstance();
  CreateChannelRequest::default_instance_->InitAsDefaultInstance();
  CreateChannelResponse::default_instance_->InitAsDefaultInstance();
  JoinChannelRequest::default_instance_->InitAsDefaultInstance();
  JoinChannelResponse::default_instance_->InitAsDefaultInstance();
  FindChannelRequest::default_instance_->InitAsDefaultInstance();
  FindChannelResponse::default_instance_->InitAsDefaultInstance();
  ChannelState::default_instance_->InitAsDefaultInstance();
  MemberState::default_instance_->InitAsDefaultInstance();
  Member::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fchannel_2fchannel_5ftypes_2eproto {
  StaticDescriptorInitializer_service_2fchannel_2fchannel_5ftypes_2eproto() {
    protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  }
} static_descriptor_initializer_service_2fchannel_2fchannel_5ftypes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Message::kAttributeFieldNumber;
const int Message::kRoleFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  role_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    role_ = 0u;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.attribute.Attribute attribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }
      
      // optional uint32 role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }
  
  // optional uint32 role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }
  
  // optional uint32 role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelDescription::kChannelIdFieldNumber;
const int ChannelDescription::kCurrentMembersFieldNumber;
const int ChannelDescription::kStateFieldNumber;
#endif  // !_MSC_VER

ChannelDescription::ChannelDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChannelDescription::InitAsDefaultInstance() {
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  state_ = const_cast< ::bnet::protocol::channel::ChannelState*>(&::bnet::protocol::channel::ChannelState::default_instance());
}

ChannelDescription::ChannelDescription(const ChannelDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChannelDescription::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = NULL;
  current_members_ = 0u;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelDescription::~ChannelDescription() {
  SharedDtor();
}

void ChannelDescription::SharedDtor() {
  if (this != default_instance_) {
    delete channel_id_;
    delete state_;
  }
}

void ChannelDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelDescription_descriptor_;
}

const ChannelDescription& ChannelDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

ChannelDescription* ChannelDescription::default_instance_ = NULL;

ChannelDescription* ChannelDescription::New() const {
  return new ChannelDescription;
}

void ChannelDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
    current_members_ = 0u;
    if (has_state()) {
      if (state_ != NULL) state_->::bnet::protocol::channel::ChannelState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_members;
        break;
      }
      
      // optional uint32 current_members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_members_)));
          set_has_current_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_state;
        break;
      }
      
      // optional .bnet.protocol.channel.ChannelState state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChannelDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_id(), output);
  }
  
  // optional uint32 current_members = 2;
  if (has_current_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->current_members(), output);
  }
  
  // optional .bnet.protocol.channel.ChannelState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChannelDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_id(), target);
  }
  
  // optional uint32 current_members = 2;
  if (has_current_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->current_members(), target);
  }
  
  // optional .bnet.protocol.channel.ChannelState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChannelDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
    // optional uint32 current_members = 2;
    if (has_current_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_members());
    }
    
    // optional .bnet.protocol.channel.ChannelState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelDescription::MergeFrom(const ChannelDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
    if (from.has_current_members()) {
      set_current_members(from.current_members());
    }
    if (from.has_state()) {
      mutable_state()->::bnet::protocol::channel::ChannelState::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescription::CopyFrom(const ChannelDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void ChannelDescription::Swap(ChannelDescription* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(current_members_, other->current_members_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelDescription_descriptor_;
  metadata.reflection = ChannelDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelInfo::kDescriptionFieldNumber;
const int ChannelInfo::kMemberFieldNumber;
#endif  // !_MSC_VER

ChannelInfo::ChannelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChannelInfo::InitAsDefaultInstance() {
  description_ = const_cast< ::bnet::protocol::channel::ChannelDescription*>(&::bnet::protocol::channel::ChannelDescription::default_instance());
}

ChannelInfo::ChannelInfo(const ChannelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChannelInfo::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelInfo::~ChannelInfo() {
  SharedDtor();
}

void ChannelInfo::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

void ChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelInfo_descriptor_;
}

const ChannelInfo& ChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

ChannelInfo* ChannelInfo::default_instance_ = NULL;

ChannelInfo* ChannelInfo::New() const {
  return new ChannelInfo;
}

void ChannelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != NULL) description_->::bnet::protocol::channel::ChannelDescription::Clear();
    }
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.channel.ChannelDescription description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }
      
      // repeated .bnet.protocol.channel.Member member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.channel.ChannelDescription description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->description(), output);
  }
  
  // repeated .bnet.protocol.channel.Member member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChannelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.channel.ChannelDescription description = 1;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->description(), target);
  }
  
  // repeated .bnet.protocol.channel.Member member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChannelInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.channel.ChannelDescription description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }
    
  }
  // repeated .bnet.protocol.channel.Member member = 2;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelInfo::MergeFrom(const ChannelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      mutable_description()->::bnet::protocol::channel::ChannelDescription::MergeFrom(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelInfo::CopyFrom(const ChannelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  for (int i = 0; i < member_size(); i++) {
    if (!this->member(i).IsInitialized()) return false;
  }
  return true;
}

void ChannelInfo::Swap(ChannelInfo* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelInfo_descriptor_;
  metadata.reflection = ChannelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChannelInfoRequest::kAgentIdFieldNumber;
const int GetChannelInfoRequest::kChannelIdFieldNumber;
#endif  // !_MSC_VER

GetChannelInfoRequest::GetChannelInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChannelInfoRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

GetChannelInfoRequest::GetChannelInfoRequest(const GetChannelInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChannelInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  channel_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChannelInfoRequest::~GetChannelInfoRequest() {
  SharedDtor();
}

void GetChannelInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete channel_id_;
  }
}

void GetChannelInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChannelInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChannelInfoRequest_descriptor_;
}

const GetChannelInfoRequest& GetChannelInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

GetChannelInfoRequest* GetChannelInfoRequest::default_instance_ = NULL;

GetChannelInfoRequest* GetChannelInfoRequest::New() const {
  return new GetChannelInfoRequest;
}

void GetChannelInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChannelInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }
      
      // required .bnet.protocol.EntityId channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChannelInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChannelInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChannelInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChannelInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChannelInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChannelInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChannelInfoRequest::MergeFrom(const GetChannelInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChannelInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelInfoRequest::CopyFrom(const GetChannelInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  return true;
}

void GetChannelInfoRequest::Swap(GetChannelInfoRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChannelInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChannelInfoRequest_descriptor_;
  metadata.reflection = GetChannelInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChannelInfoResponse::kChannelInfoFieldNumber;
#endif  // !_MSC_VER

GetChannelInfoResponse::GetChannelInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChannelInfoResponse::InitAsDefaultInstance() {
  channel_info_ = const_cast< ::bnet::protocol::channel::ChannelInfo*>(&::bnet::protocol::channel::ChannelInfo::default_instance());
}

GetChannelInfoResponse::GetChannelInfoResponse(const GetChannelInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChannelInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  channel_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChannelInfoResponse::~GetChannelInfoResponse() {
  SharedDtor();
}

void GetChannelInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete channel_info_;
  }
}

void GetChannelInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChannelInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChannelInfoResponse_descriptor_;
}

const GetChannelInfoResponse& GetChannelInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

GetChannelInfoResponse* GetChannelInfoResponse::default_instance_ = NULL;

GetChannelInfoResponse* GetChannelInfoResponse::New() const {
  return new GetChannelInfoResponse;
}

void GetChannelInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_info()) {
      if (channel_info_ != NULL) channel_info_->::bnet::protocol::channel::ChannelInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChannelInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.channel.ChannelInfo channel_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChannelInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.channel.ChannelInfo channel_info = 1;
  if (has_channel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChannelInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.channel.ChannelInfo channel_info = 1;
  if (has_channel_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChannelInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.channel.ChannelInfo channel_info = 1;
    if (has_channel_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChannelInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChannelInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChannelInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChannelInfoResponse::MergeFrom(const GetChannelInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_info()) {
      mutable_channel_info()->::bnet::protocol::channel::ChannelInfo::MergeFrom(from.channel_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChannelInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelInfoResponse::CopyFrom(const GetChannelInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelInfoResponse::IsInitialized() const {
  
  if (has_channel_info()) {
    if (!this->channel_info().IsInitialized()) return false;
  }
  return true;
}

void GetChannelInfoResponse::Swap(GetChannelInfoResponse* other) {
  if (other != this) {
    std::swap(channel_info_, other->channel_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChannelInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChannelInfoResponse_descriptor_;
  metadata.reflection = GetChannelInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetChannelIdRequest::GetChannelIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChannelIdRequest::InitAsDefaultInstance() {
}

GetChannelIdRequest::GetChannelIdRequest(const GetChannelIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChannelIdRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChannelIdRequest::~GetChannelIdRequest() {
  SharedDtor();
}

void GetChannelIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetChannelIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChannelIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChannelIdRequest_descriptor_;
}

const GetChannelIdRequest& GetChannelIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

GetChannelIdRequest* GetChannelIdRequest::default_instance_ = NULL;

GetChannelIdRequest* GetChannelIdRequest::New() const {
  return new GetChannelIdRequest;
}

void GetChannelIdRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChannelIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetChannelIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChannelIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChannelIdRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChannelIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChannelIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChannelIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChannelIdRequest::MergeFrom(const GetChannelIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChannelIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelIdRequest::CopyFrom(const GetChannelIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelIdRequest::IsInitialized() const {
  
  return true;
}

void GetChannelIdRequest::Swap(GetChannelIdRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChannelIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChannelIdRequest_descriptor_;
  metadata.reflection = GetChannelIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChannelIdResponse::kChannelIdFieldNumber;
#endif  // !_MSC_VER

GetChannelIdResponse::GetChannelIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChannelIdResponse::InitAsDefaultInstance() {
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

GetChannelIdResponse::GetChannelIdResponse(const GetChannelIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChannelIdResponse::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChannelIdResponse::~GetChannelIdResponse() {
  SharedDtor();
}

void GetChannelIdResponse::SharedDtor() {
  if (this != default_instance_) {
    delete channel_id_;
  }
}

void GetChannelIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChannelIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChannelIdResponse_descriptor_;
}

const GetChannelIdResponse& GetChannelIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

GetChannelIdResponse* GetChannelIdResponse::default_instance_ = NULL;

GetChannelIdResponse* GetChannelIdResponse::New() const {
  return new GetChannelIdResponse;
}

void GetChannelIdResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChannelIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChannelIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChannelIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChannelIdResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChannelIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChannelIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChannelIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChannelIdResponse::MergeFrom(const GetChannelIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChannelIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelIdResponse::CopyFrom(const GetChannelIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelIdResponse::IsInitialized() const {
  
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  return true;
}

void GetChannelIdResponse::Swap(GetChannelIdResponse* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChannelIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChannelIdResponse_descriptor_;
  metadata.reflection = GetChannelIdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateChannelRequest::kAgentIdentityFieldNumber;
const int CreateChannelRequest::kStateFieldNumber;
const int CreateChannelRequest::kChannelIdFieldNumber;
const int CreateChannelRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

CreateChannelRequest::CreateChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateChannelRequest::InitAsDefaultInstance() {
  agent_identity_ = const_cast< ::bnet::protocol::Identity*>(&::bnet::protocol::Identity::default_instance());
  state_ = const_cast< ::bnet::protocol::channel::ChannelState*>(&::bnet::protocol::channel::ChannelState::default_instance());
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

CreateChannelRequest::CreateChannelRequest(const CreateChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateChannelRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_identity_ = NULL;
  state_ = NULL;
  channel_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateChannelRequest::~CreateChannelRequest() {
  SharedDtor();
}

void CreateChannelRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_identity_;
    delete state_;
    delete channel_id_;
  }
}

void CreateChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChannelRequest_descriptor_;
}

const CreateChannelRequest& CreateChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

CreateChannelRequest* CreateChannelRequest::default_instance_ = NULL;

CreateChannelRequest* CreateChannelRequest::New() const {
  return new CreateChannelRequest;
}

void CreateChannelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_identity()) {
      if (agent_identity_ != NULL) agent_identity_->::bnet::protocol::Identity::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::bnet::protocol::channel::ChannelState::Clear();
    }
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.Identity agent_identity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .bnet.protocol.channel.ChannelState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_object_id;
        break;
      }
      
      // optional uint64 object_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.Identity agent_identity = 1;
  if (has_agent_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_identity(), output);
  }
  
  // optional .bnet.protocol.channel.ChannelState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // optional .bnet.protocol.EntityId channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->channel_id(), output);
  }
  
  // optional uint64 object_id = 4;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.Identity agent_identity = 1;
  if (has_agent_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_identity(), target);
  }
  
  // optional .bnet.protocol.channel.ChannelState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // optional .bnet.protocol.EntityId channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->channel_id(), target);
  }
  
  // optional uint64 object_id = 4;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateChannelRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.Identity agent_identity = 1;
    if (has_agent_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_identity());
    }
    
    // optional .bnet.protocol.channel.ChannelState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // optional .bnet.protocol.EntityId channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
    // optional uint64 object_id = 4;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateChannelRequest::MergeFrom(const CreateChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_identity()) {
      mutable_agent_identity()->::bnet::protocol::Identity::MergeFrom(from.agent_identity());
    }
    if (from.has_state()) {
      mutable_state()->::bnet::protocol::channel::ChannelState::MergeFrom(from.state());
    }
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelRequest::CopyFrom(const CreateChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelRequest::IsInitialized() const {
  
  if (has_agent_identity()) {
    if (!this->agent_identity().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  return true;
}

void CreateChannelRequest::Swap(CreateChannelRequest* other) {
  if (other != this) {
    std::swap(agent_identity_, other->agent_identity_);
    std::swap(state_, other->state_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChannelRequest_descriptor_;
  metadata.reflection = CreateChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateChannelResponse::kObjectIdFieldNumber;
const int CreateChannelResponse::kChannelIdFieldNumber;
#endif  // !_MSC_VER

CreateChannelResponse::CreateChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateChannelResponse::InitAsDefaultInstance() {
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

CreateChannelResponse::CreateChannelResponse(const CreateChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  channel_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateChannelResponse::~CreateChannelResponse() {
  SharedDtor();
}

void CreateChannelResponse::SharedDtor() {
  if (this != default_instance_) {
    delete channel_id_;
  }
}

void CreateChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChannelResponse_descriptor_;
}

const CreateChannelResponse& CreateChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

CreateChannelResponse* CreateChannelResponse::default_instance_ = NULL;

CreateChannelResponse* CreateChannelResponse::New() const {
  return new CreateChannelResponse;
}

void CreateChannelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }
  
  // optional .bnet.protocol.EntityId channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }
  
  // optional .bnet.protocol.EntityId channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateChannelResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
    // optional .bnet.protocol.EntityId channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateChannelResponse::MergeFrom(const CreateChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelResponse::CopyFrom(const CreateChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  return true;
}

void CreateChannelResponse::Swap(CreateChannelResponse* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChannelResponse_descriptor_;
  metadata.reflection = CreateChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinChannelRequest::kAgentIdentityFieldNumber;
const int JoinChannelRequest::kChannelIdFieldNumber;
const int JoinChannelRequest::kObjectIdFieldNumber;
const int JoinChannelRequest::kFriendAccountIdFieldNumber;
#endif  // !_MSC_VER

JoinChannelRequest::JoinChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinChannelRequest::InitAsDefaultInstance() {
  agent_identity_ = const_cast< ::bnet::protocol::Identity*>(&::bnet::protocol::Identity::default_instance());
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

JoinChannelRequest::JoinChannelRequest(const JoinChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinChannelRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_identity_ = NULL;
  channel_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinChannelRequest::~JoinChannelRequest() {
  SharedDtor();
}

void JoinChannelRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_identity_;
    delete channel_id_;
  }
}

void JoinChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinChannelRequest_descriptor_;
}

const JoinChannelRequest& JoinChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

JoinChannelRequest* JoinChannelRequest::default_instance_ = NULL;

JoinChannelRequest* JoinChannelRequest::New() const {
  return new JoinChannelRequest;
}

void JoinChannelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_identity()) {
      if (agent_identity_ != NULL) agent_identity_->::bnet::protocol::Identity::Clear();
    }
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  friend_account_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.Identity agent_identity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }
      
      // required .bnet.protocol.EntityId channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_object_id;
        break;
      }
      
      // required uint64 object_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friend_account_id;
        break;
      }
      
      // repeated .bnet.protocol.EntityId friend_account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friend_account_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.Identity agent_identity = 1;
  if (has_agent_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_identity(), output);
  }
  
  // required .bnet.protocol.EntityId channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channel_id(), output);
  }
  
  // required uint64 object_id = 3;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->object_id(), output);
  }
  
  // repeated .bnet.protocol.EntityId friend_account_id = 4;
  for (int i = 0; i < this->friend_account_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friend_account_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.Identity agent_identity = 1;
  if (has_agent_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_identity(), target);
  }
  
  // required .bnet.protocol.EntityId channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->channel_id(), target);
  }
  
  // required uint64 object_id = 3;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->object_id(), target);
  }
  
  // repeated .bnet.protocol.EntityId friend_account_id = 4;
  for (int i = 0; i < this->friend_account_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friend_account_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinChannelRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.Identity agent_identity = 1;
    if (has_agent_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_identity());
    }
    
    // required .bnet.protocol.EntityId channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
    // required uint64 object_id = 3;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  // repeated .bnet.protocol.EntityId friend_account_id = 4;
  total_size += 1 * this->friend_account_id_size();
  for (int i = 0; i < this->friend_account_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_account_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinChannelRequest::MergeFrom(const JoinChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_account_id_.MergeFrom(from.friend_account_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_identity()) {
      mutable_agent_identity()->::bnet::protocol::Identity::MergeFrom(from.agent_identity());
    }
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinChannelRequest::CopyFrom(const JoinChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  if (has_agent_identity()) {
    if (!this->agent_identity().IsInitialized()) return false;
  }
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  for (int i = 0; i < friend_account_id_size(); i++) {
    if (!this->friend_account_id(i).IsInitialized()) return false;
  }
  return true;
}

void JoinChannelRequest::Swap(JoinChannelRequest* other) {
  if (other != this) {
    std::swap(agent_identity_, other->agent_identity_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(object_id_, other->object_id_);
    friend_account_id_.Swap(&other->friend_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinChannelRequest_descriptor_;
  metadata.reflection = JoinChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinChannelResponse::kObjectIdFieldNumber;
const int JoinChannelResponse::kRequireFriendValidationFieldNumber;
const int JoinChannelResponse::kPrivilegedAccountFieldNumber;
#endif  // !_MSC_VER

JoinChannelResponse::JoinChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinChannelResponse::InitAsDefaultInstance() {
}

JoinChannelResponse::JoinChannelResponse(const JoinChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  require_friend_validation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinChannelResponse::~JoinChannelResponse() {
  SharedDtor();
}

void JoinChannelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinChannelResponse_descriptor_;
}

const JoinChannelResponse& JoinChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

JoinChannelResponse* JoinChannelResponse::default_instance_ = NULL;

JoinChannelResponse* JoinChannelResponse::New() const {
  return new JoinChannelResponse;
}

void JoinChannelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    require_friend_validation_ = false;
  }
  privileged_account_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_require_friend_validation;
        break;
      }
      
      // optional bool require_friend_validation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_require_friend_validation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_friend_validation_)));
          set_has_require_friend_validation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_privileged_account;
        break;
      }
      
      // repeated .bnet.protocol.EntityId privileged_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privileged_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privileged_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_privileged_account;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }
  
  // optional bool require_friend_validation = 2;
  if (has_require_friend_validation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->require_friend_validation(), output);
  }
  
  // repeated .bnet.protocol.EntityId privileged_account = 3;
  for (int i = 0; i < this->privileged_account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->privileged_account(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }
  
  // optional bool require_friend_validation = 2;
  if (has_require_friend_validation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->require_friend_validation(), target);
  }
  
  // repeated .bnet.protocol.EntityId privileged_account = 3;
  for (int i = 0; i < this->privileged_account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->privileged_account(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinChannelResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
    // optional bool require_friend_validation = 2;
    if (has_require_friend_validation()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .bnet.protocol.EntityId privileged_account = 3;
  total_size += 1 * this->privileged_account_size();
  for (int i = 0; i < this->privileged_account_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->privileged_account(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinChannelResponse::MergeFrom(const JoinChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  privileged_account_.MergeFrom(from.privileged_account_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_require_friend_validation()) {
      set_require_friend_validation(from.require_friend_validation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinChannelResponse::CopyFrom(const JoinChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinChannelResponse::IsInitialized() const {
  
  for (int i = 0; i < privileged_account_size(); i++) {
    if (!this->privileged_account(i).IsInitialized()) return false;
  }
  return true;
}

void JoinChannelResponse::Swap(JoinChannelResponse* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(require_friend_validation_, other->require_friend_validation_);
    privileged_account_.Swap(&other->privileged_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinChannelResponse_descriptor_;
  metadata.reflection = JoinChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindChannelRequest::kFilterFieldNumber;
#endif  // !_MSC_VER

FindChannelRequest::FindChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindChannelRequest::InitAsDefaultInstance() {
  filter_ = const_cast< ::bnet::protocol::attribute::AttributeFilter*>(&::bnet::protocol::attribute::AttributeFilter::default_instance());
}

FindChannelRequest::FindChannelRequest(const FindChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindChannelRequest::SharedCtor() {
  _cached_size_ = 0;
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindChannelRequest::~FindChannelRequest() {
  SharedDtor();
}

void FindChannelRequest::SharedDtor() {
  if (this != default_instance_) {
    delete filter_;
  }
}

void FindChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindChannelRequest_descriptor_;
}

const FindChannelRequest& FindChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

FindChannelRequest* FindChannelRequest::default_instance_ = NULL;

FindChannelRequest* FindChannelRequest::New() const {
  return new FindChannelRequest;
}

void FindChannelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filter()) {
      if (filter_ != NULL) filter_->::bnet::protocol::attribute::AttributeFilter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.attribute.AttributeFilter filter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.attribute.AttributeFilter filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.attribute.AttributeFilter filter = 1;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindChannelRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.attribute.AttributeFilter filter = 1;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindChannelRequest::MergeFrom(const FindChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      mutable_filter()->::bnet::protocol::attribute::AttributeFilter::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindChannelRequest::CopyFrom(const FindChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void FindChannelRequest::Swap(FindChannelRequest* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindChannelRequest_descriptor_;
  metadata.reflection = FindChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindChannelResponse::kChannelFieldNumber;
#endif  // !_MSC_VER

FindChannelResponse::FindChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindChannelResponse::InitAsDefaultInstance() {
}

FindChannelResponse::FindChannelResponse(const FindChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindChannelResponse::~FindChannelResponse() {
  SharedDtor();
}

void FindChannelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindChannelResponse_descriptor_;
}

const FindChannelResponse& FindChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

FindChannelResponse* FindChannelResponse::default_instance_ = NULL;

FindChannelResponse* FindChannelResponse::New() const {
  return new FindChannelResponse;
}

void FindChannelResponse::Clear() {
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.channel.ChannelDescription channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_channel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.channel.ChannelDescription channel = 1;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.channel.ChannelDescription channel = 1;
  for (int i = 0; i < this->channel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindChannelResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.channel.ChannelDescription channel = 1;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channel(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindChannelResponse::MergeFrom(const FindChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_.MergeFrom(from.channel_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindChannelResponse::CopyFrom(const FindChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindChannelResponse::IsInitialized() const {
  
  for (int i = 0; i < channel_size(); i++) {
    if (!this->channel(i).IsInitialized()) return false;
  }
  return true;
}

void FindChannelResponse::Swap(FindChannelResponse* other) {
  if (other != this) {
    channel_.Swap(&other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindChannelResponse_descriptor_;
  metadata.reflection = FindChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChannelState_PrivacyLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelState_PrivacyLevel_descriptor_;
}
bool ChannelState_PrivacyLevel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_OPEN;
const ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND;
const ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_OPEN_INVITATION;
const ChannelState_PrivacyLevel ChannelState::PRIVACY_LEVEL_CLOSED;
const ChannelState_PrivacyLevel ChannelState::PrivacyLevel_MIN;
const ChannelState_PrivacyLevel ChannelState::PrivacyLevel_MAX;
const int ChannelState::PrivacyLevel_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChannelState::kMaxMembersFieldNumber;
const int ChannelState::kMinMembersFieldNumber;
const int ChannelState::kAttributeFieldNumber;
const int ChannelState::kInvitationFieldNumber;
const int ChannelState::kMaxInvitationsFieldNumber;
const int ChannelState::kReasonFieldNumber;
const int ChannelState::kPrivacyLevelFieldNumber;
const int ChannelState::kPublicFieldNumber;
const int ChannelState::kNameFieldNumber;
const int ChannelState::kDelegateNameFieldNumber;
const int ChannelState::kChannelTypeFieldNumber;
#endif  // !_MSC_VER

ChannelState::ChannelState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChannelState::InitAsDefaultInstance() {
}

ChannelState::ChannelState(const ChannelState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChannelState::SharedCtor() {
  _cached_size_ = 0;
  max_members_ = 0u;
  min_members_ = 0u;
  max_invitations_ = 0u;
  reason_ = 0u;
  privacy_level_ = 1;
  public__ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delegate_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelState::~ChannelState() {
  SharedDtor();
}

void ChannelState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (delegate_name_ != &::google::protobuf::internal::kEmptyString) {
    delete delegate_name_;
  }
  if (channel_type_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_type_;
  }
  if (this != default_instance_) {
  }
}

void ChannelState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelState_descriptor_;
}

const ChannelState& ChannelState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

ChannelState* ChannelState::default_instance_ = NULL;

ChannelState* ChannelState::New() const {
  return new ChannelState;
}

void ChannelState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_members_ = 0u;
    min_members_ = 0u;
    max_invitations_ = 0u;
    reason_ = 0u;
    privacy_level_ = 1;
    public__ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_delegate_name()) {
      if (delegate_name_ != &::google::protobuf::internal::kEmptyString) {
        delegate_name_->clear();
      }
    }
    if (has_channel_type()) {
      if (channel_type_ != &::google::protobuf::internal::kEmptyString) {
        channel_type_->clear();
      }
    }
  }
  attribute_.Clear();
  invitation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_members_)));
          set_has_max_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_members;
        break;
      }
      
      // optional uint32 min_members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_members_)));
          set_has_min_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectTag(34)) goto parse_invitation;
        break;
      }
      
      // repeated .bnet.protocol.invitation.Invitation invitation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_invitation;
        if (input->ExpectTag(40)) goto parse_max_invitations;
        break;
      }
      
      // optional uint32 max_invitations = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_invitations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_invitations_)));
          set_has_max_invitations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_privacy_level;
        break;
      }
      
      // optional .bnet.protocol.channel.ChannelState.PrivacyLevel privacy_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privacy_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bnet::protocol::channel::ChannelState_PrivacyLevel_IsValid(value)) {
            set_privacy_level(static_cast< ::bnet::protocol::channel::ChannelState_PrivacyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_public;
        break;
      }
      
      // optional bool public = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &public__)));
          set_has_public_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }
      
      // optional string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_delegate_name;
        break;
      }
      
      // optional string delegate_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delegate_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delegate_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delegate_name().data(), this->delegate_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_channel_type;
        break;
      }
      
      // optional string channel_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_type().data(), this->channel_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChannelState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 max_members = 1;
  if (has_max_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_members(), output);
  }
  
  // optional uint32 min_members = 2;
  if (has_min_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_members(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }
  
  // repeated .bnet.protocol.invitation.Invitation invitation = 4;
  for (int i = 0; i < this->invitation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->invitation(i), output);
  }
  
  // optional uint32 max_invitations = 5;
  if (has_max_invitations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_invitations(), output);
  }
  
  // optional uint32 reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reason(), output);
  }
  
  // optional .bnet.protocol.channel.ChannelState.PrivacyLevel privacy_level = 7;
  if (has_privacy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->privacy_level(), output);
  }
  
  // optional bool public = 8;
  if (has_public_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->public_(), output);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }
  
  // optional string delegate_name = 10;
  if (has_delegate_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delegate_name().data(), this->delegate_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->delegate_name(), output);
  }
  
  // optional string channel_type = 11;
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_type().data(), this->channel_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->channel_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChannelState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 max_members = 1;
  if (has_max_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_members(), target);
  }
  
  // optional uint32 min_members = 2;
  if (has_min_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_members(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }
  
  // repeated .bnet.protocol.invitation.Invitation invitation = 4;
  for (int i = 0; i < this->invitation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->invitation(i), target);
  }
  
  // optional uint32 max_invitations = 5;
  if (has_max_invitations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_invitations(), target);
  }
  
  // optional uint32 reason = 6;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reason(), target);
  }
  
  // optional .bnet.protocol.channel.ChannelState.PrivacyLevel privacy_level = 7;
  if (has_privacy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->privacy_level(), target);
  }
  
  // optional bool public = 8;
  if (has_public_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->public_(), target);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }
  
  // optional string delegate_name = 10;
  if (has_delegate_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delegate_name().data(), this->delegate_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->delegate_name(), target);
  }
  
  // optional string channel_type = 11;
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_type().data(), this->channel_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->channel_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChannelState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_members = 1;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_members());
    }
    
    // optional uint32 min_members = 2;
    if (has_min_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_members());
    }
    
    // optional uint32 max_invitations = 5;
    if (has_max_invitations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_invitations());
    }
    
    // optional uint32 reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional .bnet.protocol.channel.ChannelState.PrivacyLevel privacy_level = 7;
    if (has_privacy_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->privacy_level());
    }
    
    // optional bool public = 8;
    if (has_public_()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string delegate_name = 10;
    if (has_delegate_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->delegate_name());
    }
    
    // optional string channel_type = 11;
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_type());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  // repeated .bnet.protocol.invitation.Invitation invitation = 4;
  total_size += 1 * this->invitation_size();
  for (int i = 0; i < this->invitation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelState::MergeFrom(const ChannelState& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  invitation_.MergeFrom(from.invitation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_members()) {
      set_max_members(from.max_members());
    }
    if (from.has_min_members()) {
      set_min_members(from.min_members());
    }
    if (from.has_max_invitations()) {
      set_max_invitations(from.max_invitations());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_privacy_level()) {
      set_privacy_level(from.privacy_level());
    }
    if (from.has_public_()) {
      set_public_(from.public_());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_delegate_name()) {
      set_delegate_name(from.delegate_name());
    }
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelState::CopyFrom(const ChannelState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelState::IsInitialized() const {
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  for (int i = 0; i < invitation_size(); i++) {
    if (!this->invitation(i).IsInitialized()) return false;
  }
  return true;
}

void ChannelState::Swap(ChannelState* other) {
  if (other != this) {
    std::swap(max_members_, other->max_members_);
    std::swap(min_members_, other->min_members_);
    attribute_.Swap(&other->attribute_);
    invitation_.Swap(&other->invitation_);
    std::swap(max_invitations_, other->max_invitations_);
    std::swap(reason_, other->reason_);
    std::swap(privacy_level_, other->privacy_level_);
    std::swap(public__, other->public__);
    std::swap(name_, other->name_);
    std::swap(delegate_name_, other->delegate_name_);
    std::swap(channel_type_, other->channel_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelState_descriptor_;
  metadata.reflection = ChannelState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberState::kAttributeFieldNumber;
const int MemberState::kRoleFieldNumber;
const int MemberState::kPrivilegesFieldNumber;
#endif  // !_MSC_VER

MemberState::MemberState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberState::InitAsDefaultInstance() {
}

MemberState::MemberState(const MemberState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberState::SharedCtor() {
  _cached_size_ = 0;
  privileges_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberState::~MemberState() {
  SharedDtor();
}

void MemberState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemberState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberState_descriptor_;
}

const MemberState& MemberState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

MemberState* MemberState::default_instance_ = NULL;

MemberState* MemberState::New() const {
  return new MemberState;
}

void MemberState::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    privileges_ = GOOGLE_ULONGLONG(0);
  }
  attribute_.Clear();
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.attribute.Attribute attribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }
      
      // repeated uint32 role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_role())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role;
        if (input->ExpectTag(24)) goto parse_privileges;
        break;
      }
      
      // optional uint64 privileges = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privileges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &privileges_)));
          set_has_privileges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }
  
  // repeated uint32 role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->role(i), output);
  }
  
  // optional uint64 privileges = 3;
  if (has_privileges()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->privileges(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }
  
  // repeated uint32 role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->role(i), target);
  }
  
  // optional uint64 privileges = 3;
  if (has_privileges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->privileges(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 privileges = 3;
    if (has_privileges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->privileges());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  // repeated uint32 role = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role(i));
    }
    total_size += 1 * this->role_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberState::MergeFrom(const MemberState& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_privileges()) {
      set_privileges(from.privileges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberState::CopyFrom(const MemberState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberState::IsInitialized() const {
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void MemberState::Swap(MemberState* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    role_.Swap(&other->role_);
    std::swap(privileges_, other->privileges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberState_descriptor_;
  metadata.reflection = MemberState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Member::kIdentityFieldNumber;
const int Member::kStateFieldNumber;
#endif  // !_MSC_VER

Member::Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Member::InitAsDefaultInstance() {
  identity_ = const_cast< ::bnet::protocol::Identity*>(&::bnet::protocol::Identity::default_instance());
  state_ = const_cast< ::bnet::protocol::channel::MemberState*>(&::bnet::protocol::channel::MemberState::default_instance());
}

Member::Member(const Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Member::SharedCtor() {
  _cached_size_ = 0;
  identity_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Member::~Member() {
  SharedDtor();
}

void Member::SharedDtor() {
  if (this != default_instance_) {
    delete identity_;
    delete state_;
  }
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_descriptor_;
}

const Member& Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();  return *default_instance_;
}

Member* Member::default_instance_ = NULL;

Member* Member::New() const {
  return new Member;
}

void Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identity()) {
      if (identity_ != NULL) identity_->::bnet::protocol::Identity::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::bnet::protocol::channel::MemberState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.Identity identity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // required .bnet.protocol.channel.MemberState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.Identity identity = 1;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->identity(), output);
  }
  
  // required .bnet.protocol.channel.MemberState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.Identity identity = 1;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->identity(), target);
  }
  
  // required .bnet.protocol.channel.MemberState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Member::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.Identity identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identity());
    }
    
    // required .bnet.protocol.channel.MemberState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity()) {
      mutable_identity()->::bnet::protocol::Identity::MergeFrom(from.identity());
    }
    if (from.has_state()) {
      mutable_state()->::bnet::protocol::channel::MemberState::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_identity()) {
    if (!this->identity().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void Member::Swap(Member* other) {
  if (other != this) {
    std::swap(identity_, other->identity_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Member_descriptor_;
  metadata.reflection = Member_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
