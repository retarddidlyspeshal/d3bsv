// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/search/search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace search {

namespace {

const ::google::protobuf::Descriptor* FindMatchesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindMatchesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindMatchesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindMatchesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetObjectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetObjectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveObjectsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveObjectsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fsearch_2fsearch_2eproto() {
  protobuf_AddDesc_service_2fsearch_2fsearch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/search/search.proto");
  GOOGLE_CHECK(file != NULL);
  FindMatchesRequest_descriptor_ = file->message_type(0);
  static const int FindMatchesRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesRequest, universe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesRequest, filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesRequest, starting_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesRequest, count_),
  };
  FindMatchesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindMatchesRequest_descriptor_,
      FindMatchesRequest::default_instance_,
      FindMatchesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindMatchesRequest));
  FindMatchesResponse_descriptor_ = file->message_type(1);
  static const int FindMatchesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesResponse, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesResponse, objects_),
  };
  FindMatchesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindMatchesResponse_descriptor_,
      FindMatchesResponse::default_instance_,
      FindMatchesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindMatchesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindMatchesResponse));
  SetObjectRequest_descriptor_ = file->message_type(2);
  static const int SetObjectRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetObjectRequest, objects_),
  };
  SetObjectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetObjectRequest_descriptor_,
      SetObjectRequest::default_instance_,
      SetObjectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetObjectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetObjectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetObjectRequest));
  RemoveObjectsRequest_descriptor_ = file->message_type(3);
  static const int RemoveObjectsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObjectsRequest, start_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObjectsRequest, end_id_),
  };
  RemoveObjectsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveObjectsRequest_descriptor_,
      RemoveObjectsRequest::default_instance_,
      RemoveObjectsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObjectsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObjectsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveObjectsRequest));
  SearchConfig_descriptor_ = file->message_type(4);
  static const int SearchConfig_offsets_[1] = {
  };
  SearchConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchConfig_descriptor_,
      SearchConfig::default_instance_,
      SearchConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fsearch_2fsearch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindMatchesRequest_descriptor_, &FindMatchesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindMatchesResponse_descriptor_, &FindMatchesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetObjectRequest_descriptor_, &SetObjectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveObjectsRequest_descriptor_, &RemoveObjectsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchConfig_descriptor_, &SearchConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fsearch_2fsearch_2eproto() {
  delete FindMatchesRequest::default_instance_;
  delete FindMatchesRequest_reflection_;
  delete FindMatchesResponse::default_instance_;
  delete FindMatchesResponse_reflection_;
  delete SetObjectRequest::default_instance_;
  delete SetObjectRequest_reflection_;
  delete RemoveObjectsRequest::default_instance_;
  delete RemoveObjectsRequest_reflection_;
  delete SearchConfig::default_instance_;
  delete SearchConfig_reflection_;
}

void protobuf_AddDesc_service_2fsearch_2fsearch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::bnet::protocol::search::protobuf_AddDesc_service_2fsearch_2fsearch_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033service/search/search.proto\022\024bnet.prot"
    "ocol.search\032\021lib/rpc/rpc.proto\032!service/"
    "search/search_types.proto\"|\n\022FindMatches"
    "Request\022\020\n\010universe\030\001 \002(\t\022-\n\007filters\030\002 \003"
    "(\0132\034.bnet.protocol.search.Filter\022\026\n\016star"
    "ting_index\030\003 \001(\r\022\r\n\005count\030\004 \001(\r\"Y\n\023FindM"
    "atchesResponse\022\023\n\013total_count\030\001 \002(\r\022-\n\007o"
    "bjects\030\002 \003(\0132\034.bnet.protocol.search.Obje"
    "ct\"A\n\020SetObjectRequest\022-\n\007objects\030\001 \003(\0132"
    "\034.bnet.protocol.search.Object\"8\n\024RemoveO"
    "bjectsRequest\022\020\n\010start_id\030\001 \002(\014\022\016\n\006end_i"
    "d\030\002 \002(\014\"\016\n\014SearchConfig", 463);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/search/search.proto", &protobuf_RegisterTypes);
  FindMatchesRequest::default_instance_ = new FindMatchesRequest();
  FindMatchesResponse::default_instance_ = new FindMatchesResponse();
  SetObjectRequest::default_instance_ = new SetObjectRequest();
  RemoveObjectsRequest::default_instance_ = new RemoveObjectsRequest();
  SearchConfig::default_instance_ = new SearchConfig();
  FindMatchesRequest::default_instance_->InitAsDefaultInstance();
  FindMatchesResponse::default_instance_->InitAsDefaultInstance();
  SetObjectRequest::default_instance_->InitAsDefaultInstance();
  RemoveObjectsRequest::default_instance_->InitAsDefaultInstance();
  SearchConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fsearch_2fsearch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fsearch_2fsearch_2eproto {
  StaticDescriptorInitializer_service_2fsearch_2fsearch_2eproto() {
    protobuf_AddDesc_service_2fsearch_2fsearch_2eproto();
  }
} static_descriptor_initializer_service_2fsearch_2fsearch_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FindMatchesRequest::kUniverseFieldNumber;
const int FindMatchesRequest::kFiltersFieldNumber;
const int FindMatchesRequest::kStartingIndexFieldNumber;
const int FindMatchesRequest::kCountFieldNumber;
#endif  // !_MSC_VER

FindMatchesRequest::FindMatchesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindMatchesRequest::InitAsDefaultInstance() {
}

FindMatchesRequest::FindMatchesRequest(const FindMatchesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindMatchesRequest::SharedCtor() {
  _cached_size_ = 0;
  universe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starting_index_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindMatchesRequest::~FindMatchesRequest() {
  SharedDtor();
}

void FindMatchesRequest::SharedDtor() {
  if (universe_ != &::google::protobuf::internal::kEmptyString) {
    delete universe_;
  }
  if (this != default_instance_) {
  }
}

void FindMatchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindMatchesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindMatchesRequest_descriptor_;
}

const FindMatchesRequest& FindMatchesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fsearch_2fsearch_2eproto();  return *default_instance_;
}

FindMatchesRequest* FindMatchesRequest::default_instance_ = NULL;

FindMatchesRequest* FindMatchesRequest::New() const {
  return new FindMatchesRequest;
}

void FindMatchesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_universe()) {
      if (universe_ != &::google::protobuf::internal::kEmptyString) {
        universe_->clear();
      }
    }
    starting_index_ = 0u;
    count_ = 0u;
  }
  filters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string universe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_universe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->universe().data(), this->universe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filters;
        break;
      }
      
      // repeated .bnet.protocol.search.Filter filters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filters;
        if (input->ExpectTag(24)) goto parse_starting_index;
        break;
      }
      
      // optional uint32 starting_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starting_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starting_index_)));
          set_has_starting_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->universe().data(), this->universe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->universe(), output);
  }
  
  // repeated .bnet.protocol.search.Filter filters = 2;
  for (int i = 0; i < this->filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filters(i), output);
  }
  
  // optional uint32 starting_index = 3;
  if (has_starting_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starting_index(), output);
  }
  
  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindMatchesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string universe = 1;
  if (has_universe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->universe().data(), this->universe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->universe(), target);
  }
  
  // repeated .bnet.protocol.search.Filter filters = 2;
  for (int i = 0; i < this->filters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filters(i), target);
  }
  
  // optional uint32 starting_index = 3;
  if (has_starting_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starting_index(), target);
  }
  
  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindMatchesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string universe = 1;
    if (has_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->universe());
    }
    
    // optional uint32 starting_index = 3;
    if (has_starting_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starting_index());
    }
    
    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  // repeated .bnet.protocol.search.Filter filters = 2;
  total_size += 1 * this->filters_size();
  for (int i = 0; i < this->filters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindMatchesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindMatchesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindMatchesRequest::MergeFrom(const FindMatchesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  filters_.MergeFrom(from.filters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_universe()) {
      set_universe(from.universe());
    }
    if (from.has_starting_index()) {
      set_starting_index(from.starting_index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindMatchesRequest::CopyFrom(const FindMatchesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindMatchesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < filters_size(); i++) {
    if (!this->filters(i).IsInitialized()) return false;
  }
  return true;
}

void FindMatchesRequest::Swap(FindMatchesRequest* other) {
  if (other != this) {
    std::swap(universe_, other->universe_);
    filters_.Swap(&other->filters_);
    std::swap(starting_index_, other->starting_index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindMatchesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindMatchesRequest_descriptor_;
  metadata.reflection = FindMatchesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindMatchesResponse::kTotalCountFieldNumber;
const int FindMatchesResponse::kObjectsFieldNumber;
#endif  // !_MSC_VER

FindMatchesResponse::FindMatchesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindMatchesResponse::InitAsDefaultInstance() {
}

FindMatchesResponse::FindMatchesResponse(const FindMatchesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindMatchesResponse::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindMatchesResponse::~FindMatchesResponse() {
  SharedDtor();
}

void FindMatchesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindMatchesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindMatchesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindMatchesResponse_descriptor_;
}

const FindMatchesResponse& FindMatchesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fsearch_2fsearch_2eproto();  return *default_instance_;
}

FindMatchesResponse* FindMatchesResponse::default_instance_ = NULL;

FindMatchesResponse* FindMatchesResponse::New() const {
  return new FindMatchesResponse;
}

void FindMatchesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_count_ = 0u;
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 total_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        break;
      }
      
      // repeated .bnet.protocol.search.Object objects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 total_count = 1;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_count(), output);
  }
  
  // repeated .bnet.protocol.search.Object objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindMatchesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 total_count = 1;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_count(), target);
  }
  
  // repeated .bnet.protocol.search.Object objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindMatchesResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 total_count = 1;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }
    
  }
  // repeated .bnet.protocol.search.Object objects = 2;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindMatchesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindMatchesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindMatchesResponse::MergeFrom(const FindMatchesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindMatchesResponse::CopyFrom(const FindMatchesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindMatchesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < objects_size(); i++) {
    if (!this->objects(i).IsInitialized()) return false;
  }
  return true;
}

void FindMatchesResponse::Swap(FindMatchesResponse* other) {
  if (other != this) {
    std::swap(total_count_, other->total_count_);
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindMatchesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindMatchesResponse_descriptor_;
  metadata.reflection = FindMatchesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetObjectRequest::kObjectsFieldNumber;
#endif  // !_MSC_VER

SetObjectRequest::SetObjectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetObjectRequest::InitAsDefaultInstance() {
}

SetObjectRequest::SetObjectRequest(const SetObjectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetObjectRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetObjectRequest::~SetObjectRequest() {
  SharedDtor();
}

void SetObjectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetObjectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetObjectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetObjectRequest_descriptor_;
}

const SetObjectRequest& SetObjectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fsearch_2fsearch_2eproto();  return *default_instance_;
}

SetObjectRequest* SetObjectRequest::default_instance_ = NULL;

SetObjectRequest* SetObjectRequest::New() const {
  return new SetObjectRequest;
}

void SetObjectRequest::Clear() {
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetObjectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.search.Object objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetObjectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.search.Object objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetObjectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.search.Object objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetObjectRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.search.Object objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetObjectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetObjectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetObjectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetObjectRequest::MergeFrom(const SetObjectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetObjectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetObjectRequest::CopyFrom(const SetObjectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetObjectRequest::IsInitialized() const {
  
  for (int i = 0; i < objects_size(); i++) {
    if (!this->objects(i).IsInitialized()) return false;
  }
  return true;
}

void SetObjectRequest::Swap(SetObjectRequest* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetObjectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetObjectRequest_descriptor_;
  metadata.reflection = SetObjectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveObjectsRequest::kStartIdFieldNumber;
const int RemoveObjectsRequest::kEndIdFieldNumber;
#endif  // !_MSC_VER

RemoveObjectsRequest::RemoveObjectsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveObjectsRequest::InitAsDefaultInstance() {
}

RemoveObjectsRequest::RemoveObjectsRequest(const RemoveObjectsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveObjectsRequest::SharedCtor() {
  _cached_size_ = 0;
  start_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveObjectsRequest::~RemoveObjectsRequest() {
  SharedDtor();
}

void RemoveObjectsRequest::SharedDtor() {
  if (start_id_ != &::google::protobuf::internal::kEmptyString) {
    delete start_id_;
  }
  if (end_id_ != &::google::protobuf::internal::kEmptyString) {
    delete end_id_;
  }
  if (this != default_instance_) {
  }
}

void RemoveObjectsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveObjectsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveObjectsRequest_descriptor_;
}

const RemoveObjectsRequest& RemoveObjectsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fsearch_2fsearch_2eproto();  return *default_instance_;
}

RemoveObjectsRequest* RemoveObjectsRequest::default_instance_ = NULL;

RemoveObjectsRequest* RemoveObjectsRequest::New() const {
  return new RemoveObjectsRequest;
}

void RemoveObjectsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start_id()) {
      if (start_id_ != &::google::protobuf::internal::kEmptyString) {
        start_id_->clear();
      }
    }
    if (has_end_id()) {
      if (end_id_ != &::google::protobuf::internal::kEmptyString) {
        end_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveObjectsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes start_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end_id;
        break;
      }
      
      // required bytes end_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveObjectsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes start_id = 1;
  if (has_start_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->start_id(), output);
  }
  
  // required bytes end_id = 2;
  if (has_end_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->end_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveObjectsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes start_id = 1;
  if (has_start_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_id(), target);
  }
  
  // required bytes end_id = 2;
  if (has_end_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveObjectsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes start_id = 1;
    if (has_start_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_id());
    }
    
    // required bytes end_id = 2;
    if (has_end_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveObjectsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveObjectsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveObjectsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveObjectsRequest::MergeFrom(const RemoveObjectsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_id()) {
      set_start_id(from.start_id());
    }
    if (from.has_end_id()) {
      set_end_id(from.end_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveObjectsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveObjectsRequest::CopyFrom(const RemoveObjectsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveObjectsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RemoveObjectsRequest::Swap(RemoveObjectsRequest* other) {
  if (other != this) {
    std::swap(start_id_, other->start_id_);
    std::swap(end_id_, other->end_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveObjectsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveObjectsRequest_descriptor_;
  metadata.reflection = RemoveObjectsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SearchConfig::SearchConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchConfig::InitAsDefaultInstance() {
}

SearchConfig::SearchConfig(const SearchConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchConfig::~SearchConfig() {
  SharedDtor();
}

void SearchConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchConfig_descriptor_;
}

const SearchConfig& SearchConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fsearch_2fsearch_2eproto();  return *default_instance_;
}

SearchConfig* SearchConfig::default_instance_ = NULL;

SearchConfig* SearchConfig::New() const {
  return new SearchConfig;
}

void SearchConfig::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SearchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchConfig::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchConfig::MergeFrom(const SearchConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConfig::CopyFrom(const SearchConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConfig::IsInitialized() const {
  
  return true;
}

void SearchConfig::Swap(SearchConfig* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchConfig_descriptor_;
  metadata.reflection = SearchConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace search
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
