// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/search/search_types.proto

#ifndef PROTOBUF_service_2fsearch_2fsearch_5ftypes_2eproto__INCLUDED
#define PROTOBUF_service_2fsearch_2fsearch_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace search {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fsearch_2fsearch_5ftypes_2eproto();
void protobuf_AssignDesc_service_2fsearch_2fsearch_5ftypes_2eproto();
void protobuf_ShutdownFile_service_2fsearch_2fsearch_5ftypes_2eproto();

class Statistic;
class Filter;
class Object;

enum Filter_Comparand {
  Filter_Comparand_EQUALS = 0,
  Filter_Comparand_LESS_THAN = 1,
  Filter_Comparand_LESS_THAN_OR_EQUALS = 2,
  Filter_Comparand_GREATER_THAN = 3,
  Filter_Comparand_GREATER_THAN_OR_EQUALS = 4
};
bool Filter_Comparand_IsValid(int value);
const Filter_Comparand Filter_Comparand_Comparand_MIN = Filter_Comparand_EQUALS;
const Filter_Comparand Filter_Comparand_Comparand_MAX = Filter_Comparand_GREATER_THAN_OR_EQUALS;
const int Filter_Comparand_Comparand_ARRAYSIZE = Filter_Comparand_Comparand_MAX + 1;

const ::google::protobuf::EnumDescriptor* Filter_Comparand_descriptor();
inline const ::std::string& Filter_Comparand_Name(Filter_Comparand value) {
  return ::google::protobuf::internal::NameOfEnum(
    Filter_Comparand_descriptor(), value);
}
inline bool Filter_Comparand_Parse(
    const ::std::string& name, Filter_Comparand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Filter_Comparand>(
    Filter_Comparand_descriptor(), name, value);
}
enum Filter_SortDirection {
  Filter_SortDirection_ASC = 0,
  Filter_SortDirection_DESC = 1
};
bool Filter_SortDirection_IsValid(int value);
const Filter_SortDirection Filter_SortDirection_SortDirection_MIN = Filter_SortDirection_ASC;
const Filter_SortDirection Filter_SortDirection_SortDirection_MAX = Filter_SortDirection_DESC;
const int Filter_SortDirection_SortDirection_ARRAYSIZE = Filter_SortDirection_SortDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* Filter_SortDirection_descriptor();
inline const ::std::string& Filter_SortDirection_Name(Filter_SortDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    Filter_SortDirection_descriptor(), value);
}
inline bool Filter_SortDirection_Parse(
    const ::std::string& name, Filter_SortDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Filter_SortDirection>(
    Filter_SortDirection_descriptor(), name, value);
}
// ===================================================================

class Statistic : public ::google::protobuf::Message {
 public:
  Statistic();
  virtual ~Statistic();
  
  Statistic(const Statistic& from);
  
  inline Statistic& operator=(const Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Statistic& default_instance();
  
  void Swap(Statistic* other);
  
  // implements Message ----------------------------------------------
  
  Statistic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Statistic& from);
  void MergeFrom(const Statistic& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.search.Statistic)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fsearch_2fsearch_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fsearch_2fsearch_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fsearch_2fsearch_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Statistic* default_instance_;
};
// -------------------------------------------------------------------

class Filter : public ::google::protobuf::Message {
 public:
  Filter();
  virtual ~Filter();
  
  Filter(const Filter& from);
  
  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Filter& default_instance();
  
  void Swap(Filter* other);
  
  // implements Message ----------------------------------------------
  
  Filter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Filter_Comparand Comparand;
  static const Comparand EQUALS = Filter_Comparand_EQUALS;
  static const Comparand LESS_THAN = Filter_Comparand_LESS_THAN;
  static const Comparand LESS_THAN_OR_EQUALS = Filter_Comparand_LESS_THAN_OR_EQUALS;
  static const Comparand GREATER_THAN = Filter_Comparand_GREATER_THAN;
  static const Comparand GREATER_THAN_OR_EQUALS = Filter_Comparand_GREATER_THAN_OR_EQUALS;
  static inline bool Comparand_IsValid(int value) {
    return Filter_Comparand_IsValid(value);
  }
  static const Comparand Comparand_MIN =
    Filter_Comparand_Comparand_MIN;
  static const Comparand Comparand_MAX =
    Filter_Comparand_Comparand_MAX;
  static const int Comparand_ARRAYSIZE =
    Filter_Comparand_Comparand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Comparand_descriptor() {
    return Filter_Comparand_descriptor();
  }
  static inline const ::std::string& Comparand_Name(Comparand value) {
    return Filter_Comparand_Name(value);
  }
  static inline bool Comparand_Parse(const ::std::string& name,
      Comparand* value) {
    return Filter_Comparand_Parse(name, value);
  }
  
  typedef Filter_SortDirection SortDirection;
  static const SortDirection ASC = Filter_SortDirection_ASC;
  static const SortDirection DESC = Filter_SortDirection_DESC;
  static inline bool SortDirection_IsValid(int value) {
    return Filter_SortDirection_IsValid(value);
  }
  static const SortDirection SortDirection_MIN =
    Filter_SortDirection_SortDirection_MIN;
  static const SortDirection SortDirection_MAX =
    Filter_SortDirection_SortDirection_MAX;
  static const int SortDirection_ARRAYSIZE =
    Filter_SortDirection_SortDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SortDirection_descriptor() {
    return Filter_SortDirection_descriptor();
  }
  static inline const ::std::string& SortDirection_Name(SortDirection value) {
    return Filter_SortDirection_Name(value);
  }
  static inline bool SortDirection_Parse(const ::std::string& name,
      SortDirection* value) {
    return Filter_SortDirection_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.search.Statistic statistic = 1;
  inline bool has_statistic() const;
  inline void clear_statistic();
  static const int kStatisticFieldNumber = 1;
  inline const ::bnet::protocol::search::Statistic& statistic() const;
  inline ::bnet::protocol::search::Statistic* mutable_statistic();
  inline ::bnet::protocol::search::Statistic* release_statistic();
  
  // required .bnet.protocol.search.Filter.Comparand comparand = 2;
  inline bool has_comparand() const;
  inline void clear_comparand();
  static const int kComparandFieldNumber = 2;
  inline ::bnet::protocol::search::Filter_Comparand comparand() const;
  inline void set_comparand(::bnet::protocol::search::Filter_Comparand value);
  
  // optional .bnet.protocol.search.Filter.SortDirection sort_direction = 3;
  inline bool has_sort_direction() const;
  inline void clear_sort_direction();
  static const int kSortDirectionFieldNumber = 3;
  inline ::bnet::protocol::search::Filter_SortDirection sort_direction() const;
  inline void set_sort_direction(::bnet::protocol::search::Filter_SortDirection value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.search.Filter)
 private:
  inline void set_has_statistic();
  inline void clear_has_statistic();
  inline void set_has_comparand();
  inline void clear_has_comparand();
  inline void set_has_sort_direction();
  inline void clear_has_sort_direction();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::search::Statistic* statistic_;
  int comparand_;
  int sort_direction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fsearch_2fsearch_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fsearch_2fsearch_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fsearch_2fsearch_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Filter* default_instance_;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message {
 public:
  Object();
  virtual ~Object();
  
  Object(const Object& from);
  
  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();
  
  void Swap(Object* other);
  
  // implements Message ----------------------------------------------
  
  Object* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // repeated .bnet.protocol.search.Statistic statistics = 3;
  inline int statistics_size() const;
  inline void clear_statistics();
  static const int kStatisticsFieldNumber = 3;
  inline const ::bnet::protocol::search::Statistic& statistics(int index) const;
  inline ::bnet::protocol::search::Statistic* mutable_statistics(int index);
  inline ::bnet::protocol::search::Statistic* add_statistics();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::search::Statistic >&
      statistics() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::search::Statistic >*
      mutable_statistics();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.search.Object)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* data_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::search::Statistic > statistics_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fsearch_2fsearch_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fsearch_2fsearch_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fsearch_2fsearch_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// ===================================================================


// ===================================================================

// Statistic

// optional uint32 id = 1;
inline bool Statistic::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Statistic::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Statistic::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Statistic::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Statistic::id() const {
  return id_;
}
inline void Statistic::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required int32 value = 2;
inline bool Statistic::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Statistic::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Statistic::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Statistic::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Statistic::value() const {
  return value_;
}
inline void Statistic::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// Filter

// required .bnet.protocol.search.Statistic statistic = 1;
inline bool Filter::has_statistic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Filter::set_has_statistic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Filter::clear_has_statistic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Filter::clear_statistic() {
  if (statistic_ != NULL) statistic_->::bnet::protocol::search::Statistic::Clear();
  clear_has_statistic();
}
inline const ::bnet::protocol::search::Statistic& Filter::statistic() const {
  return statistic_ != NULL ? *statistic_ : *default_instance_->statistic_;
}
inline ::bnet::protocol::search::Statistic* Filter::mutable_statistic() {
  set_has_statistic();
  if (statistic_ == NULL) statistic_ = new ::bnet::protocol::search::Statistic;
  return statistic_;
}
inline ::bnet::protocol::search::Statistic* Filter::release_statistic() {
  clear_has_statistic();
  ::bnet::protocol::search::Statistic* temp = statistic_;
  statistic_ = NULL;
  return temp;
}

// required .bnet.protocol.search.Filter.Comparand comparand = 2;
inline bool Filter::has_comparand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Filter::set_has_comparand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Filter::clear_has_comparand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Filter::clear_comparand() {
  comparand_ = 0;
  clear_has_comparand();
}
inline ::bnet::protocol::search::Filter_Comparand Filter::comparand() const {
  return static_cast< ::bnet::protocol::search::Filter_Comparand >(comparand_);
}
inline void Filter::set_comparand(::bnet::protocol::search::Filter_Comparand value) {
  GOOGLE_DCHECK(::bnet::protocol::search::Filter_Comparand_IsValid(value));
  set_has_comparand();
  comparand_ = value;
}

// optional .bnet.protocol.search.Filter.SortDirection sort_direction = 3;
inline bool Filter::has_sort_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Filter::set_has_sort_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Filter::clear_has_sort_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Filter::clear_sort_direction() {
  sort_direction_ = 0;
  clear_has_sort_direction();
}
inline ::bnet::protocol::search::Filter_SortDirection Filter::sort_direction() const {
  return static_cast< ::bnet::protocol::search::Filter_SortDirection >(sort_direction_);
}
inline void Filter::set_sort_direction(::bnet::protocol::search::Filter_SortDirection value) {
  GOOGLE_DCHECK(::bnet::protocol::search::Filter_SortDirection_IsValid(value));
  set_has_sort_direction();
  sort_direction_ = value;
}

// -------------------------------------------------------------------

// Object

// required bytes id = 1;
inline bool Object::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Object::id() const {
  return *id_;
}
inline void Object::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Object::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Object::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Object::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Object::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes data = 2;
inline bool Object::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Object::data() const {
  return *data_;
}
inline void Object::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Object::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Object::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Object::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Object::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bnet.protocol.search.Statistic statistics = 3;
inline int Object::statistics_size() const {
  return statistics_.size();
}
inline void Object::clear_statistics() {
  statistics_.Clear();
}
inline const ::bnet::protocol::search::Statistic& Object::statistics(int index) const {
  return statistics_.Get(index);
}
inline ::bnet::protocol::search::Statistic* Object::mutable_statistics(int index) {
  return statistics_.Mutable(index);
}
inline ::bnet::protocol::search::Statistic* Object::add_statistics() {
  return statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::search::Statistic >&
Object::statistics() const {
  return statistics_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::search::Statistic >*
Object::mutable_statistics() {
  return &statistics_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace search
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bnet::protocol::search::Filter_Comparand>() {
  return ::bnet::protocol::search::Filter_Comparand_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bnet::protocol::search::Filter_SortDirection>() {
  return ::bnet::protocol::search::Filter_SortDirection_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fsearch_2fsearch_5ftypes_2eproto__INCLUDED
