// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/game_master/game_master_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace game_master {

namespace {

const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Player_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConnectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStatsBucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStatsBucket_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameFactoryDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameFactoryDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameHandle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameHandle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto() {
  protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/game_master/game_master_types.proto");
  GOOGLE_CHECK(file != NULL);
  Player_descriptor_ = file->message_type(0);
  static const int Player_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bnet_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, attribute_),
  };
  Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player));
  Player_Type_descriptor_ = Player_descriptor_->enum_type(0);
  ConnectInfo_descriptor_ = file->message_type(1);
  static const int ConnectInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, attribute_),
  };
  ConnectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectInfo_descriptor_,
      ConnectInfo::default_instance_,
      ConnectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectInfo));
  GameStatsBucket_descriptor_ = file->message_type(2);
  static const int GameStatsBucket_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, bucket_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, bucket_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, wait_milliseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, games_per_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, active_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, active_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, forming_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, waiting_players_),
  };
  GameStatsBucket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStatsBucket_descriptor_,
      GameStatsBucket::default_instance_,
      GameStatsBucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatsBucket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStatsBucket));
  GameFactoryDescription_descriptor_ = file->message_type(3);
  static const int GameFactoryDescription_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFactoryDescription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFactoryDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFactoryDescription, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFactoryDescription, stats_bucket_),
  };
  GameFactoryDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameFactoryDescription_descriptor_,
      GameFactoryDescription::default_instance_,
      GameFactoryDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFactoryDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFactoryDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameFactoryDescription));
  GameHandle_descriptor_ = file->message_type(4);
  static const int GameHandle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHandle, factory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHandle, game_id_),
  };
  GameHandle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameHandle_descriptor_,
      GameHandle::default_instance_,
      GameHandle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHandle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHandle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameHandle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectInfo_descriptor_, &ConnectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStatsBucket_descriptor_, &GameStatsBucket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameFactoryDescription_descriptor_, &GameFactoryDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameHandle_descriptor_, &GameHandle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto() {
  delete Player::default_instance_;
  delete Player_reflection_;
  delete ConnectInfo::default_instance_;
  delete ConnectInfo_reflection_;
  delete GameStatsBucket::default_instance_;
  delete GameStatsBucket_reflection_;
  delete GameFactoryDescription::default_instance_;
  delete GameFactoryDescription_reflection_;
  delete GameHandle::default_instance_;
  delete GameHandle_reflection_;
}

void protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+service/game_master/game_master_types."
    "proto\022\031bnet.protocol.game_master\032\034lib/pr"
    "otocol/attribute.proto\032\031lib/protocol/ent"
    "ity.proto\"\243\002\n\006Player\0224\n\004type\030\001 \001(\0162&.bne"
    "t.protocol.game_master.Player.Type\022(\n\007to"
    "on_id\030\002 \001(\0132\027.bnet.protocol.EntityId\0220\n\017"
    "game_account_id\030\003 \001(\0132\027.bnet.protocol.En"
    "tityId\0220\n\017bnet_account_id\030\004 \001(\0132\027.bnet.p"
    "rotocol.EntityId\0225\n\tattribute\030\005 \003(\0132\".bn"
    "et.protocol.attribute.Attribute\"\036\n\004Type\022"
    "\010\n\004TOON\020\000\022\014\n\010COMPUTER\020\001\"\231\001\n\013ConnectInfo\022"
    "(\n\007toon_id\030\001 \002(\0132\027.bnet.protocol.EntityI"
    "d\022\014\n\004host\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\022\r\n\005token\030\004"
    " \001(\014\0225\n\tattribute\030\005 \003(\0132\".bnet.protocol."
    "attribute.Attribute\"\312\001\n\017GameStatsBucket\022"
    "\022\n\nbucket_min\030\001 \001(\002\022\022\n\nbucket_max\030\002 \001(\002\022"
    "\031\n\021wait_milliseconds\030\003 \001(\r\022\026\n\016games_per_"
    "hour\030\004 \001(\r\022\024\n\014active_games\030\005 \001(\r\022\026\n\016acti"
    "ve_players\030\006 \001(\r\022\025\n\rforming_games\030\007 \001(\r\022"
    "\027\n\017waiting_players\030\010 \001(\r\"\253\001\n\026GameFactory"
    "Description\022\n\n\002id\030\001 \002(\006\022\014\n\004name\030\002 \001(\t\0225\n"
    "\tattribute\030\003 \003(\0132\".bnet.protocol.attribu"
    "te.Attribute\022@\n\014stats_bucket\030\004 \003(\0132*.bne"
    "t.protocol.game_master.GameStatsBucket\"J"
    "\n\nGameHandle\022\022\n\nfactory_id\030\001 \002(\006\022(\n\007game"
    "_id\030\002 \002(\0132\027.bnet.protocol.EntityId", 1034);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/game_master/game_master_types.proto", &protobuf_RegisterTypes);
  Player::default_instance_ = new Player();
  ConnectInfo::default_instance_ = new ConnectInfo();
  GameStatsBucket::default_instance_ = new GameStatsBucket();
  GameFactoryDescription::default_instance_ = new GameFactoryDescription();
  GameHandle::default_instance_ = new GameHandle();
  Player::default_instance_->InitAsDefaultInstance();
  ConnectInfo::default_instance_->InitAsDefaultInstance();
  GameStatsBucket::default_instance_->InitAsDefaultInstance();
  GameFactoryDescription::default_instance_->InitAsDefaultInstance();
  GameHandle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto {
  StaticDescriptorInitializer_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto() {
    protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  }
} static_descriptor_initializer_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Player_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_Type_descriptor_;
}
bool Player_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Player_Type Player::TOON;
const Player_Type Player::COMPUTER;
const Player_Type Player::Type_MIN;
const Player_Type Player::Type_MAX;
const int Player::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Player::kTypeFieldNumber;
const int Player::kToonIdFieldNumber;
const int Player::kGameAccountIdFieldNumber;
const int Player::kBnetAccountIdFieldNumber;
const int Player::kAttributeFieldNumber;
#endif  // !_MSC_VER

Player::Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Player::InitAsDefaultInstance() {
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  bnet_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

Player::Player(const Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Player::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  toon_id_ = NULL;
  game_account_id_ = NULL;
  bnet_account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player::~Player() {
  SharedDtor();
}

void Player::SharedDtor() {
  if (this != default_instance_) {
    delete toon_id_;
    delete game_account_id_;
    delete bnet_account_id_;
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New() const {
  return new Player;
}

void Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_bnet_account_id()) {
      if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.game_master.Player.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bnet::protocol::game_master::Player_Type_IsValid(value)) {
            set_type(static_cast< ::bnet::protocol::game_master::Player_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toon_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId toon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_account_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId game_account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bnet_account_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId bnet_account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.game_master.Player.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .bnet.protocol.EntityId toon_id = 2;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toon_id(), output);
  }
  
  // optional .bnet.protocol.EntityId game_account_id = 3;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->game_account_id(), output);
  }
  
  // optional .bnet.protocol.EntityId bnet_account_id = 4;
  if (has_bnet_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bnet_account_id(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.game_master.Player.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .bnet.protocol.EntityId toon_id = 2;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toon_id(), target);
  }
  
  // optional .bnet.protocol.EntityId game_account_id = 3;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->game_account_id(), target);
  }
  
  // optional .bnet.protocol.EntityId bnet_account_id = 4;
  if (has_bnet_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bnet_account_id(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Player::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.game_master.Player.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .bnet.protocol.EntityId toon_id = 2;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // optional .bnet.protocol.EntityId game_account_id = 3;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }
    
    // optional .bnet.protocol.EntityId bnet_account_id = 4;
    if (has_bnet_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account_id());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::bnet::protocol::EntityId::MergeFrom(from.game_account_id());
    }
    if (from.has_bnet_account_id()) {
      mutable_bnet_account_id()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  if (has_bnet_account_id()) {
    if (!this->bnet_account_id().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void Player::Swap(Player* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(toon_id_, other->toon_id_);
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(bnet_account_id_, other->bnet_account_id_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectInfo::kToonIdFieldNumber;
const int ConnectInfo::kHostFieldNumber;
const int ConnectInfo::kPortFieldNumber;
const int ConnectInfo::kTokenFieldNumber;
const int ConnectInfo::kAttributeFieldNumber;
#endif  // !_MSC_VER

ConnectInfo::ConnectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectInfo::InitAsDefaultInstance() {
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

ConnectInfo::ConnectInfo(const ConnectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectInfo::SharedCtor() {
  _cached_size_ = 0;
  toon_id_ = NULL;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectInfo::~ConnectInfo() {
  SharedDtor();
}

void ConnectInfo::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete toon_id_;
  }
}

void ConnectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectInfo_descriptor_;
}

const ConnectInfo& ConnectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();  return *default_instance_;
}

ConnectInfo* ConnectInfo::default_instance_ = NULL;

ConnectInfo* ConnectInfo::New() const {
  return new ConnectInfo;
}

void ConnectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId toon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }
      
      // required string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }
      
      // optional bytes token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId toon_id = 1;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->toon_id(), output);
  }
  
  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }
  
  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }
  
  // optional bytes token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->token(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId toon_id = 1;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->toon_id(), target);
  }
  
  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }
  
  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }
  
  // optional bytes token = 4;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->token(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId toon_id = 1;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // required string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // optional bytes token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectInfo::MergeFrom(const ConnectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectInfo::CopyFrom(const ConnectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void ConnectInfo::Swap(ConnectInfo* other) {
  if (other != this) {
    std::swap(toon_id_, other->toon_id_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectInfo_descriptor_;
  metadata.reflection = ConnectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStatsBucket::kBucketMinFieldNumber;
const int GameStatsBucket::kBucketMaxFieldNumber;
const int GameStatsBucket::kWaitMillisecondsFieldNumber;
const int GameStatsBucket::kGamesPerHourFieldNumber;
const int GameStatsBucket::kActiveGamesFieldNumber;
const int GameStatsBucket::kActivePlayersFieldNumber;
const int GameStatsBucket::kFormingGamesFieldNumber;
const int GameStatsBucket::kWaitingPlayersFieldNumber;
#endif  // !_MSC_VER

GameStatsBucket::GameStatsBucket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStatsBucket::InitAsDefaultInstance() {
}

GameStatsBucket::GameStatsBucket(const GameStatsBucket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStatsBucket::SharedCtor() {
  _cached_size_ = 0;
  bucket_min_ = 0;
  bucket_max_ = 0;
  wait_milliseconds_ = 0u;
  games_per_hour_ = 0u;
  active_games_ = 0u;
  active_players_ = 0u;
  forming_games_ = 0u;
  waiting_players_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStatsBucket::~GameStatsBucket() {
  SharedDtor();
}

void GameStatsBucket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStatsBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStatsBucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatsBucket_descriptor_;
}

const GameStatsBucket& GameStatsBucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();  return *default_instance_;
}

GameStatsBucket* GameStatsBucket::default_instance_ = NULL;

GameStatsBucket* GameStatsBucket::New() const {
  return new GameStatsBucket;
}

void GameStatsBucket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_min_ = 0;
    bucket_max_ = 0;
    wait_milliseconds_ = 0u;
    games_per_hour_ = 0u;
    active_games_ = 0u;
    active_players_ = 0u;
    forming_games_ = 0u;
    waiting_players_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStatsBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float bucket_min = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bucket_min_)));
          set_has_bucket_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_bucket_max;
        break;
      }
      
      // optional float bucket_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bucket_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bucket_max_)));
          set_has_bucket_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wait_milliseconds;
        break;
      }
      
      // optional uint32 wait_milliseconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_milliseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_milliseconds_)));
          set_has_wait_milliseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_games_per_hour;
        break;
      }
      
      // optional uint32 games_per_hour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_games_per_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &games_per_hour_)));
          set_has_games_per_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_active_games;
        break;
      }
      
      // optional uint32 active_games = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_games_)));
          set_has_active_games();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_active_players;
        break;
      }
      
      // optional uint32 active_players = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_players_)));
          set_has_active_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_forming_games;
        break;
      }
      
      // optional uint32 forming_games = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forming_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forming_games_)));
          set_has_forming_games();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_waiting_players;
        break;
      }
      
      // optional uint32 waiting_players = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waiting_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waiting_players_)));
          set_has_waiting_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStatsBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float bucket_min = 1;
  if (has_bucket_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bucket_min(), output);
  }
  
  // optional float bucket_max = 2;
  if (has_bucket_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bucket_max(), output);
  }
  
  // optional uint32 wait_milliseconds = 3;
  if (has_wait_milliseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wait_milliseconds(), output);
  }
  
  // optional uint32 games_per_hour = 4;
  if (has_games_per_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->games_per_hour(), output);
  }
  
  // optional uint32 active_games = 5;
  if (has_active_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->active_games(), output);
  }
  
  // optional uint32 active_players = 6;
  if (has_active_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->active_players(), output);
  }
  
  // optional uint32 forming_games = 7;
  if (has_forming_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->forming_games(), output);
  }
  
  // optional uint32 waiting_players = 8;
  if (has_waiting_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->waiting_players(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStatsBucket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float bucket_min = 1;
  if (has_bucket_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bucket_min(), target);
  }
  
  // optional float bucket_max = 2;
  if (has_bucket_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bucket_max(), target);
  }
  
  // optional uint32 wait_milliseconds = 3;
  if (has_wait_milliseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wait_milliseconds(), target);
  }
  
  // optional uint32 games_per_hour = 4;
  if (has_games_per_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->games_per_hour(), target);
  }
  
  // optional uint32 active_games = 5;
  if (has_active_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->active_games(), target);
  }
  
  // optional uint32 active_players = 6;
  if (has_active_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->active_players(), target);
  }
  
  // optional uint32 forming_games = 7;
  if (has_forming_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->forming_games(), target);
  }
  
  // optional uint32 waiting_players = 8;
  if (has_waiting_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->waiting_players(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStatsBucket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float bucket_min = 1;
    if (has_bucket_min()) {
      total_size += 1 + 4;
    }
    
    // optional float bucket_max = 2;
    if (has_bucket_max()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 wait_milliseconds = 3;
    if (has_wait_milliseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wait_milliseconds());
    }
    
    // optional uint32 games_per_hour = 4;
    if (has_games_per_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->games_per_hour());
    }
    
    // optional uint32 active_games = 5;
    if (has_active_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_games());
    }
    
    // optional uint32 active_players = 6;
    if (has_active_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_players());
    }
    
    // optional uint32 forming_games = 7;
    if (has_forming_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forming_games());
    }
    
    // optional uint32 waiting_players = 8;
    if (has_waiting_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waiting_players());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStatsBucket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStatsBucket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStatsBucket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStatsBucket::MergeFrom(const GameStatsBucket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_min()) {
      set_bucket_min(from.bucket_min());
    }
    if (from.has_bucket_max()) {
      set_bucket_max(from.bucket_max());
    }
    if (from.has_wait_milliseconds()) {
      set_wait_milliseconds(from.wait_milliseconds());
    }
    if (from.has_games_per_hour()) {
      set_games_per_hour(from.games_per_hour());
    }
    if (from.has_active_games()) {
      set_active_games(from.active_games());
    }
    if (from.has_active_players()) {
      set_active_players(from.active_players());
    }
    if (from.has_forming_games()) {
      set_forming_games(from.forming_games());
    }
    if (from.has_waiting_players()) {
      set_waiting_players(from.waiting_players());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStatsBucket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatsBucket::CopyFrom(const GameStatsBucket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatsBucket::IsInitialized() const {
  
  return true;
}

void GameStatsBucket::Swap(GameStatsBucket* other) {
  if (other != this) {
    std::swap(bucket_min_, other->bucket_min_);
    std::swap(bucket_max_, other->bucket_max_);
    std::swap(wait_milliseconds_, other->wait_milliseconds_);
    std::swap(games_per_hour_, other->games_per_hour_);
    std::swap(active_games_, other->active_games_);
    std::swap(active_players_, other->active_players_);
    std::swap(forming_games_, other->forming_games_);
    std::swap(waiting_players_, other->waiting_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStatsBucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStatsBucket_descriptor_;
  metadata.reflection = GameStatsBucket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameFactoryDescription::kIdFieldNumber;
const int GameFactoryDescription::kNameFieldNumber;
const int GameFactoryDescription::kAttributeFieldNumber;
const int GameFactoryDescription::kStatsBucketFieldNumber;
#endif  // !_MSC_VER

GameFactoryDescription::GameFactoryDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameFactoryDescription::InitAsDefaultInstance() {
}

GameFactoryDescription::GameFactoryDescription(const GameFactoryDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameFactoryDescription::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameFactoryDescription::~GameFactoryDescription() {
  SharedDtor();
}

void GameFactoryDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GameFactoryDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameFactoryDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameFactoryDescription_descriptor_;
}

const GameFactoryDescription& GameFactoryDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();  return *default_instance_;
}

GameFactoryDescription* GameFactoryDescription::default_instance_ = NULL;

GameFactoryDescription* GameFactoryDescription::New() const {
  return new GameFactoryDescription;
}

void GameFactoryDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  attribute_.Clear();
  stats_bucket_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameFactoryDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectTag(34)) goto parse_stats_bucket;
        break;
      }
      
      // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats_bucket;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameFactoryDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }
  
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 4;
  for (int i = 0; i < this->stats_bucket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stats_bucket(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameFactoryDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }
  
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 4;
  for (int i = 0; i < this->stats_bucket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stats_bucket(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameFactoryDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 4;
  total_size += 1 * this->stats_bucket_size();
  for (int i = 0; i < this->stats_bucket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_bucket(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameFactoryDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameFactoryDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameFactoryDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameFactoryDescription::MergeFrom(const GameFactoryDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  stats_bucket_.MergeFrom(from.stats_bucket_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameFactoryDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFactoryDescription::CopyFrom(const GameFactoryDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFactoryDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void GameFactoryDescription::Swap(GameFactoryDescription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    attribute_.Swap(&other->attribute_);
    stats_bucket_.Swap(&other->stats_bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameFactoryDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameFactoryDescription_descriptor_;
  metadata.reflection = GameFactoryDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameHandle::kFactoryIdFieldNumber;
const int GameHandle::kGameIdFieldNumber;
#endif  // !_MSC_VER

GameHandle::GameHandle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameHandle::InitAsDefaultInstance() {
  game_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

GameHandle::GameHandle(const GameHandle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameHandle::SharedCtor() {
  _cached_size_ = 0;
  factory_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameHandle::~GameHandle() {
  SharedDtor();
}

void GameHandle::SharedDtor() {
  if (this != default_instance_) {
    delete game_id_;
  }
}

void GameHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameHandle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameHandle_descriptor_;
}

const GameHandle& GameHandle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();  return *default_instance_;
}

GameHandle* GameHandle::default_instance_ = NULL;

GameHandle* GameHandle::New() const {
  return new GameHandle;
}

void GameHandle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factory_id_ = GOOGLE_ULONGLONG(0);
    if (has_game_id()) {
      if (game_id_ != NULL) game_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 factory_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &factory_id_)));
          set_has_factory_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_id;
        break;
      }
      
      // required .bnet.protocol.EntityId game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 factory_id = 1;
  if (has_factory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->factory_id(), output);
  }
  
  // required .bnet.protocol.EntityId game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameHandle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 factory_id = 1;
  if (has_factory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->factory_id(), target);
  }
  
  // required .bnet.protocol.EntityId game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameHandle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 factory_id = 1;
    if (has_factory_id()) {
      total_size += 1 + 8;
    }
    
    // required .bnet.protocol.EntityId game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameHandle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameHandle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameHandle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameHandle::MergeFrom(const GameHandle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factory_id()) {
      set_factory_id(from.factory_id());
    }
    if (from.has_game_id()) {
      mutable_game_id()->::bnet::protocol::EntityId::MergeFrom(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameHandle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameHandle::CopyFrom(const GameHandle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameHandle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_game_id()) {
    if (!this->game_id().IsInitialized()) return false;
  }
  return true;
}

void GameHandle::Swap(GameHandle* other) {
  if (other != this) {
    std::swap(factory_id_, other->factory_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameHandle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameHandle_descriptor_;
  metadata.reflection = GameHandle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_master
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
