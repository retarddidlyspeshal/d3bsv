// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/game_master/game_master.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace game_master {

namespace {

const ::google::protobuf::Descriptor* JoinGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListFactoriesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListFactoriesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListFactoriesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListFactoriesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindGameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindGameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindGameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelFindGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelFindGameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLeftNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLeftNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnregisterServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnregisterServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterUtilitiesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterUtilitiesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnregisterUtilitiesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnregisterUtilitiesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeGameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFactoryInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFactoryInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFactoryInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFactoryInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGameStatsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGameStatsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGameStatsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGameStatsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactoryUpdateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactoryUpdateNotification_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FactoryUpdateNotification_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameFoundNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameFoundNotification_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto() {
  protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/game_master/game_master.proto");
  GOOGLE_CHECK(file != NULL);
  JoinGameRequest_descriptor_ = file->message_type(0);
  static const int JoinGameRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameRequest, game_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameRequest, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameRequest, channel_request_),
  };
  JoinGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGameRequest_descriptor_,
      JoinGameRequest::default_instance_,
      JoinGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGameRequest));
  JoinGameResponse_descriptor_ = file->message_type(1);
  static const int JoinGameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameResponse, connect_info_),
  };
  JoinGameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGameResponse_descriptor_,
      JoinGameResponse::default_instance_,
      JoinGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGameResponse));
  ListFactoriesRequest_descriptor_ = file->message_type(2);
  static const int ListFactoriesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFactoriesRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFactoriesRequest, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFactoriesRequest, max_results_),
  };
  ListFactoriesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListFactoriesRequest_descriptor_,
      ListFactoriesRequest::default_instance_,
      ListFactoriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFactoriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFactoriesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListFactoriesRequest));
  ListFactoriesResponse_descriptor_ = file->message_type(3);
  static const int ListFactoriesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFactoriesResponse, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFactoriesResponse, total_results_),
  };
  ListFactoriesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListFactoriesResponse_descriptor_,
      ListFactoriesResponse::default_instance_,
      ListFactoriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFactoriesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListFactoriesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListFactoriesResponse));
  FindGameRequest_descriptor_ = file->message_type(4);
  static const int FindGameRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameRequest, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameRequest, factory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameRequest, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameRequest, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameRequest, channel_request_),
  };
  FindGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindGameRequest_descriptor_,
      FindGameRequest::default_instance_,
      FindGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindGameRequest));
  FindGameResponse_descriptor_ = file->message_type(5);
  static const int FindGameResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameResponse, factory_id_),
  };
  FindGameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindGameResponse_descriptor_,
      FindGameResponse::default_instance_,
      FindGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindGameResponse));
  CancelFindGameRequest_descriptor_ = file->message_type(6);
  static const int CancelFindGameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFindGameRequest, factory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFindGameRequest, request_id_),
  };
  CancelFindGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelFindGameRequest_descriptor_,
      CancelFindGameRequest::default_instance_,
      CancelFindGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFindGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelFindGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelFindGameRequest));
  GameEndedNotification_descriptor_ = file->message_type(7);
  static const int GameEndedNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndedNotification, game_handle_),
  };
  GameEndedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndedNotification_descriptor_,
      GameEndedNotification::default_instance_,
      GameEndedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndedNotification));
  PlayerLeftNotification_descriptor_ = file->message_type(8);
  static const int PlayerLeftNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeftNotification, game_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeftNotification, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeftNotification, reason_),
  };
  PlayerLeftNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLeftNotification_descriptor_,
      PlayerLeftNotification::default_instance_,
      PlayerLeftNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeftNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeftNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLeftNotification));
  RegisterServerRequest_descriptor_ = file->message_type(9);
  static const int RegisterServerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServerRequest, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServerRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServerRequest, program_id_),
  };
  RegisterServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterServerRequest_descriptor_,
      RegisterServerRequest::default_instance_,
      RegisterServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterServerRequest));
  UnregisterServerRequest_descriptor_ = file->message_type(10);
  static const int UnregisterServerRequest_offsets_[1] = {
  };
  UnregisterServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnregisterServerRequest_descriptor_,
      UnregisterServerRequest::default_instance_,
      UnregisterServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnregisterServerRequest));
  RegisterUtilitiesRequest_descriptor_ = file->message_type(11);
  static const int RegisterUtilitiesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterUtilitiesRequest, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterUtilitiesRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterUtilitiesRequest, program_id_),
  };
  RegisterUtilitiesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterUtilitiesRequest_descriptor_,
      RegisterUtilitiesRequest::default_instance_,
      RegisterUtilitiesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterUtilitiesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterUtilitiesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterUtilitiesRequest));
  UnregisterUtilitiesRequest_descriptor_ = file->message_type(12);
  static const int UnregisterUtilitiesRequest_offsets_[1] = {
  };
  UnregisterUtilitiesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnregisterUtilitiesRequest_descriptor_,
      UnregisterUtilitiesRequest::default_instance_,
      UnregisterUtilitiesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterUtilitiesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterUtilitiesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnregisterUtilitiesRequest));
  SubscribeRequest_descriptor_ = file->message_type(13);
  static const int SubscribeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, object_id_),
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeResponse_descriptor_ = file->message_type(14);
  static const int SubscribeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, subscription_id_),
  };
  SubscribeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeResponse_descriptor_,
      SubscribeResponse::default_instance_,
      SubscribeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeResponse));
  UnsubscribeRequest_descriptor_ = file->message_type(15);
  static const int UnsubscribeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, subscription_id_),
  };
  UnsubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeRequest_descriptor_,
      UnsubscribeRequest::default_instance_,
      UnsubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeRequest));
  ChangeGameRequest_descriptor_ = file->message_type(16);
  static const int ChangeGameRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeGameRequest, game_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeGameRequest, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeGameRequest, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeGameRequest, replace_),
  };
  ChangeGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeGameRequest_descriptor_,
      ChangeGameRequest::default_instance_,
      ChangeGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeGameRequest));
  GetFactoryInfoRequest_descriptor_ = file->message_type(17);
  static const int GetFactoryInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFactoryInfoRequest, factory_id_),
  };
  GetFactoryInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFactoryInfoRequest_descriptor_,
      GetFactoryInfoRequest::default_instance_,
      GetFactoryInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFactoryInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFactoryInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFactoryInfoRequest));
  GetFactoryInfoResponse_descriptor_ = file->message_type(18);
  static const int GetFactoryInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFactoryInfoResponse, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFactoryInfoResponse, stats_bucket_),
  };
  GetFactoryInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFactoryInfoResponse_descriptor_,
      GetFactoryInfoResponse::default_instance_,
      GetFactoryInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFactoryInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFactoryInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFactoryInfoResponse));
  GetGameStatsRequest_descriptor_ = file->message_type(19);
  static const int GetGameStatsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameStatsRequest, factory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameStatsRequest, filter_),
  };
  GetGameStatsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGameStatsRequest_descriptor_,
      GetGameStatsRequest::default_instance_,
      GetGameStatsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameStatsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameStatsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGameStatsRequest));
  GetGameStatsResponse_descriptor_ = file->message_type(20);
  static const int GetGameStatsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameStatsResponse, stats_bucket_),
  };
  GetGameStatsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGameStatsResponse_descriptor_,
      GetGameStatsResponse::default_instance_,
      GetGameStatsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameStatsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGameStatsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGameStatsResponse));
  FactoryUpdateNotification_descriptor_ = file->message_type(21);
  static const int FactoryUpdateNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryUpdateNotification, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryUpdateNotification, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryUpdateNotification, program_id_),
  };
  FactoryUpdateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactoryUpdateNotification_descriptor_,
      FactoryUpdateNotification::default_instance_,
      FactoryUpdateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryUpdateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryUpdateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactoryUpdateNotification));
  FactoryUpdateNotification_Operation_descriptor_ = FactoryUpdateNotification_descriptor_->enum_type(0);
  GameFoundNotification_descriptor_ = file->message_type(22);
  static const int GameFoundNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFoundNotification, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFoundNotification, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFoundNotification, game_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFoundNotification, connect_info_),
  };
  GameFoundNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameFoundNotification_descriptor_,
      GameFoundNotification::default_instance_,
      GameFoundNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFoundNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFoundNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameFoundNotification));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGameRequest_descriptor_, &JoinGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGameResponse_descriptor_, &JoinGameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListFactoriesRequest_descriptor_, &ListFactoriesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListFactoriesResponse_descriptor_, &ListFactoriesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindGameRequest_descriptor_, &FindGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindGameResponse_descriptor_, &FindGameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelFindGameRequest_descriptor_, &CancelFindGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndedNotification_descriptor_, &GameEndedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLeftNotification_descriptor_, &PlayerLeftNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterServerRequest_descriptor_, &RegisterServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnregisterServerRequest_descriptor_, &UnregisterServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterUtilitiesRequest_descriptor_, &RegisterUtilitiesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnregisterUtilitiesRequest_descriptor_, &UnregisterUtilitiesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeResponse_descriptor_, &SubscribeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeRequest_descriptor_, &UnsubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeGameRequest_descriptor_, &ChangeGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFactoryInfoRequest_descriptor_, &GetFactoryInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFactoryInfoResponse_descriptor_, &GetFactoryInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGameStatsRequest_descriptor_, &GetGameStatsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGameStatsResponse_descriptor_, &GetGameStatsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactoryUpdateNotification_descriptor_, &FactoryUpdateNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameFoundNotification_descriptor_, &GameFoundNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_2eproto() {
  delete JoinGameRequest::default_instance_;
  delete JoinGameRequest_reflection_;
  delete JoinGameResponse::default_instance_;
  delete JoinGameResponse_reflection_;
  delete ListFactoriesRequest::default_instance_;
  delete ListFactoriesRequest_reflection_;
  delete ListFactoriesResponse::default_instance_;
  delete ListFactoriesResponse_reflection_;
  delete FindGameRequest::default_instance_;
  delete FindGameRequest_reflection_;
  delete FindGameResponse::default_instance_;
  delete FindGameResponse_reflection_;
  delete CancelFindGameRequest::default_instance_;
  delete CancelFindGameRequest_reflection_;
  delete GameEndedNotification::default_instance_;
  delete GameEndedNotification_reflection_;
  delete PlayerLeftNotification::default_instance_;
  delete PlayerLeftNotification_reflection_;
  delete RegisterServerRequest::default_instance_;
  delete RegisterServerRequest_reflection_;
  delete UnregisterServerRequest::default_instance_;
  delete UnregisterServerRequest_reflection_;
  delete RegisterUtilitiesRequest::default_instance_;
  delete RegisterUtilitiesRequest_reflection_;
  delete UnregisterUtilitiesRequest::default_instance_;
  delete UnregisterUtilitiesRequest_reflection_;
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeResponse::default_instance_;
  delete SubscribeResponse_reflection_;
  delete UnsubscribeRequest::default_instance_;
  delete UnsubscribeRequest_reflection_;
  delete ChangeGameRequest::default_instance_;
  delete ChangeGameRequest_reflection_;
  delete GetFactoryInfoRequest::default_instance_;
  delete GetFactoryInfoRequest_reflection_;
  delete GetFactoryInfoResponse::default_instance_;
  delete GetFactoryInfoResponse_reflection_;
  delete GetGameStatsRequest::default_instance_;
  delete GetGameStatsRequest_reflection_;
  delete GetGameStatsResponse::default_instance_;
  delete GetGameStatsResponse_reflection_;
  delete FactoryUpdateNotification::default_instance_;
  delete FactoryUpdateNotification_reflection_;
  delete GameFoundNotification::default_instance_;
  delete GameFoundNotification_reflection_;
}

void protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::game_master::protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5ffactory_2eproto();
  ::bnet::protocol::server_pool::protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto();
  ::bnet::protocol::channel::protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::bnet::protocol::game_master::protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%service/game_master/game_master.proto\022"
    "\031bnet.protocol.game_master\032&service/game"
    "_master/game_factory.proto\032%service/serv"
    "er_pool/server_pool.proto\032#service/chann"
    "el/channel_types.proto\032\034lib/protocol/att"
    "ribute.proto\032\031lib/protocol/entity.proto\032"
    "\021lib/rpc/rpc.proto\032+service/game_master/"
    "game_master_types.proto\"\304\001\n\017JoinGameRequ"
    "est\022:\n\013game_handle\030\001 \002(\0132%.bnet.protocol"
    ".game_master.GameHandle\0221\n\006player\030\002 \003(\0132"
    "!.bnet.protocol.game_master.Player\022B\n\017ch"
    "annel_request\030\003 \001(\0132).bnet.protocol.chan"
    "nel.JoinChannelRequest\"P\n\020JoinGameRespon"
    "se\022<\n\014connect_info\030\001 \003(\0132&.bnet.protocol"
    ".game_master.ConnectInfo\"z\n\024ListFactorie"
    "sRequest\0228\n\006filter\030\001 \002(\0132(.bnet.protocol"
    ".attribute.AttributeFilter\022\023\n\013start_inde"
    "x\030\002 \001(\r\022\023\n\013max_results\030\003 \001(\r\"v\n\025ListFact"
    "oriesResponse\022F\n\013description\030\001 \003(\01321.bne"
    "t.protocol.game_master.GameFactoryDescri"
    "ption\022\025\n\rtotal_results\030\002 \001(\r\"\360\001\n\017FindGam"
    "eRequest\0221\n\006player\030\001 \003(\0132!.bnet.protocol"
    ".game_master.Player\022\022\n\nfactory_id\030\002 \001(\006\022"
    "=\n\nproperties\030\003 \001(\0132).bnet.protocol.game"
    "_master.GameProperties\022\021\n\tobject_id\030\004 \002("
    "\004\022D\n\017channel_request\030\005 \001(\0132+.bnet.protoc"
    "ol.channel.CreateChannelRequest\":\n\020FindG"
    "ameResponse\022\022\n\nrequest_id\030\001 \001(\004\022\022\n\nfacto"
    "ry_id\030\002 \001(\006\"\?\n\025CancelFindGameRequest\022\022\n\n"
    "factory_id\030\001 \002(\006\022\022\n\nrequest_id\030\002 \002(\004\"S\n\025"
    "GameEndedNotification\022:\n\013game_handle\030\001 \002"
    "(\0132%.bnet.protocol.game_master.GameHandl"
    "e\"\216\001\n\026PlayerLeftNotification\022:\n\013game_han"
    "dle\030\001 \002(\0132%.bnet.protocol.game_master.Ga"
    "meHandle\022(\n\007toon_id\030\002 \002(\0132\027.bnet.protoco"
    "l.EntityId\022\016\n\006reason\030\003 \001(\r\"\231\001\n\025RegisterS"
    "erverRequest\0225\n\tattribute\030\001 \003(\0132\".bnet.p"
    "rotocol.attribute.Attribute\0225\n\005state\030\002 \001"
    "(\0132&.bnet.protocol.server_pool.ServerSta"
    "te\022\022\n\nprogram_id\030\003 \002(\007\"\031\n\027UnregisterServ"
    "erRequest\"\234\001\n\030RegisterUtilitiesRequest\0225"
    "\n\tattribute\030\001 \003(\0132\".bnet.protocol.attrib"
    "ute.Attribute\0225\n\005state\030\002 \001(\0132&.bnet.prot"
    "ocol.server_pool.ServerState\022\022\n\nprogram_"
    "id\030\003 \002(\007\"\034\n\032UnregisterUtilitiesRequest\"%"
    "\n\020SubscribeRequest\022\021\n\tobject_id\030\001 \002(\004\",\n"
    "\021SubscribeResponse\022\027\n\017subscription_id\030\001 "
    "\001(\004\"-\n\022UnsubscribeRequest\022\027\n\017subscriptio"
    "n_id\030\001 \002(\004\"\245\001\n\021ChangeGameRequest\022:\n\013game"
    "_handle\030\001 \002(\0132%.bnet.protocol.game_maste"
    "r.GameHandle\022\014\n\004open\030\002 \001(\010\0225\n\tattribute\030"
    "\003 \003(\0132\".bnet.protocol.attribute.Attribut"
    "e\022\017\n\007replace\030\004 \001(\010\"+\n\025GetFactoryInfoRequ"
    "est\022\022\n\nfactory_id\030\001 \002(\006\"\221\001\n\026GetFactoryIn"
    "foResponse\0225\n\tattribute\030\001 \003(\0132\".bnet.pro"
    "tocol.attribute.Attribute\022@\n\014stats_bucke"
    "t\030\002 \003(\0132*.bnet.protocol.game_master.Game"
    "StatsBucket\"c\n\023GetGameStatsRequest\022\022\n\nfa"
    "ctory_id\030\001 \002(\006\0228\n\006filter\030\002 \002(\0132(.bnet.pr"
    "otocol.attribute.AttributeFilter\"X\n\024GetG"
    "ameStatsResponse\022@\n\014stats_bucket\030\001 \003(\0132*"
    ".bnet.protocol.game_master.GameStatsBuck"
    "et\"\361\001\n\031FactoryUpdateNotification\022J\n\002op\030\001"
    " \002(\0162>.bnet.protocol.game_master.Factory"
    "UpdateNotification.Operation\022F\n\013descript"
    "ion\030\002 \002(\01321.bnet.protocol.game_master.Ga"
    "meFactoryDescription\022\022\n\nprogram_id\030\003 \001(\007"
    "\",\n\tOperation\022\007\n\003ADD\020\001\022\n\n\006REMOVE\020\002\022\n\n\006CH"
    "ANGE\020\003\"\271\001\n\025GameFoundNotification\022\022\n\nrequ"
    "est_id\030\001 \002(\004\022\022\n\nerror_code\030\002 \001(\r\022:\n\013game"
    "_handle\030\003 \001(\0132%.bnet.protocol.game_maste"
    "r.GameHandle\022<\n\014connect_info\030\004 \003(\0132&.bne"
    "t.protocol.game_master.ConnectInfo", 2914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/game_master/game_master.proto", &protobuf_RegisterTypes);
  JoinGameRequest::default_instance_ = new JoinGameRequest();
  JoinGameResponse::default_instance_ = new JoinGameResponse();
  ListFactoriesRequest::default_instance_ = new ListFactoriesRequest();
  ListFactoriesResponse::default_instance_ = new ListFactoriesResponse();
  FindGameRequest::default_instance_ = new FindGameRequest();
  FindGameResponse::default_instance_ = new FindGameResponse();
  CancelFindGameRequest::default_instance_ = new CancelFindGameRequest();
  GameEndedNotification::default_instance_ = new GameEndedNotification();
  PlayerLeftNotification::default_instance_ = new PlayerLeftNotification();
  RegisterServerRequest::default_instance_ = new RegisterServerRequest();
  UnregisterServerRequest::default_instance_ = new UnregisterServerRequest();
  RegisterUtilitiesRequest::default_instance_ = new RegisterUtilitiesRequest();
  UnregisterUtilitiesRequest::default_instance_ = new UnregisterUtilitiesRequest();
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeResponse::default_instance_ = new SubscribeResponse();
  UnsubscribeRequest::default_instance_ = new UnsubscribeRequest();
  ChangeGameRequest::default_instance_ = new ChangeGameRequest();
  GetFactoryInfoRequest::default_instance_ = new GetFactoryInfoRequest();
  GetFactoryInfoResponse::default_instance_ = new GetFactoryInfoResponse();
  GetGameStatsRequest::default_instance_ = new GetGameStatsRequest();
  GetGameStatsResponse::default_instance_ = new GetGameStatsResponse();
  FactoryUpdateNotification::default_instance_ = new FactoryUpdateNotification();
  GameFoundNotification::default_instance_ = new GameFoundNotification();
  JoinGameRequest::default_instance_->InitAsDefaultInstance();
  JoinGameResponse::default_instance_->InitAsDefaultInstance();
  ListFactoriesRequest::default_instance_->InitAsDefaultInstance();
  ListFactoriesResponse::default_instance_->InitAsDefaultInstance();
  FindGameRequest::default_instance_->InitAsDefaultInstance();
  FindGameResponse::default_instance_->InitAsDefaultInstance();
  CancelFindGameRequest::default_instance_->InitAsDefaultInstance();
  GameEndedNotification::default_instance_->InitAsDefaultInstance();
  PlayerLeftNotification::default_instance_->InitAsDefaultInstance();
  RegisterServerRequest::default_instance_->InitAsDefaultInstance();
  UnregisterServerRequest::default_instance_->InitAsDefaultInstance();
  RegisterUtilitiesRequest::default_instance_->InitAsDefaultInstance();
  UnregisterUtilitiesRequest::default_instance_->InitAsDefaultInstance();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeResponse::default_instance_->InitAsDefaultInstance();
  UnsubscribeRequest::default_instance_->InitAsDefaultInstance();
  ChangeGameRequest::default_instance_->InitAsDefaultInstance();
  GetFactoryInfoRequest::default_instance_->InitAsDefaultInstance();
  GetFactoryInfoResponse::default_instance_->InitAsDefaultInstance();
  GetGameStatsRequest::default_instance_->InitAsDefaultInstance();
  GetGameStatsResponse::default_instance_->InitAsDefaultInstance();
  FactoryUpdateNotification::default_instance_->InitAsDefaultInstance();
  GameFoundNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fgame_5fmaster_2fgame_5fmaster_2eproto {
  StaticDescriptorInitializer_service_2fgame_5fmaster_2fgame_5fmaster_2eproto() {
    protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();
  }
} static_descriptor_initializer_service_2fgame_5fmaster_2fgame_5fmaster_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int JoinGameRequest::kGameHandleFieldNumber;
const int JoinGameRequest::kPlayerFieldNumber;
const int JoinGameRequest::kChannelRequestFieldNumber;
#endif  // !_MSC_VER

JoinGameRequest::JoinGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinGameRequest::InitAsDefaultInstance() {
  game_handle_ = const_cast< ::bnet::protocol::game_master::GameHandle*>(&::bnet::protocol::game_master::GameHandle::default_instance());
  channel_request_ = const_cast< ::bnet::protocol::channel::JoinChannelRequest*>(&::bnet::protocol::channel::JoinChannelRequest::default_instance());
}

JoinGameRequest::JoinGameRequest(const JoinGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinGameRequest::SharedCtor() {
  _cached_size_ = 0;
  game_handle_ = NULL;
  channel_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGameRequest::~JoinGameRequest() {
  SharedDtor();
}

void JoinGameRequest::SharedDtor() {
  if (this != default_instance_) {
    delete game_handle_;
    delete channel_request_;
  }
}

void JoinGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGameRequest_descriptor_;
}

const JoinGameRequest& JoinGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

JoinGameRequest* JoinGameRequest::default_instance_ = NULL;

JoinGameRequest* JoinGameRequest::New() const {
  return new JoinGameRequest;
}

void JoinGameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_handle()) {
      if (game_handle_ != NULL) game_handle_->::bnet::protocol::game_master::GameHandle::Clear();
    }
    if (has_channel_request()) {
      if (channel_request_ != NULL) channel_request_->::bnet::protocol::channel::JoinChannelRequest::Clear();
    }
  }
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.game_master.GameHandle game_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_handle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }
      
      // repeated .bnet.protocol.game_master.Player player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        if (input->ExpectTag(26)) goto parse_channel_request;
        break;
      }
      
      // optional .bnet.protocol.channel.JoinChannelRequest channel_request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.game_master.GameHandle game_handle = 1;
  if (has_game_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_handle(), output);
  }
  
  // repeated .bnet.protocol.game_master.Player player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(i), output);
  }
  
  // optional .bnet.protocol.channel.JoinChannelRequest channel_request = 3;
  if (has_channel_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->channel_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.game_master.GameHandle game_handle = 1;
  if (has_game_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_handle(), target);
  }
  
  // repeated .bnet.protocol.game_master.Player player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(i), target);
  }
  
  // optional .bnet.protocol.channel.JoinChannelRequest channel_request = 3;
  if (has_channel_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->channel_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinGameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.game_master.GameHandle game_handle = 1;
    if (has_game_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_handle());
    }
    
    // optional .bnet.protocol.channel.JoinChannelRequest channel_request = 3;
    if (has_channel_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_request());
    }
    
  }
  // repeated .bnet.protocol.game_master.Player player = 2;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGameRequest::MergeFrom(const JoinGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_handle()) {
      mutable_game_handle()->::bnet::protocol::game_master::GameHandle::MergeFrom(from.game_handle());
    }
    if (from.has_channel_request()) {
      mutable_channel_request()->::bnet::protocol::channel::JoinChannelRequest::MergeFrom(from.channel_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameRequest::CopyFrom(const JoinGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_game_handle()) {
    if (!this->game_handle().IsInitialized()) return false;
  }
  for (int i = 0; i < player_size(); i++) {
    if (!this->player(i).IsInitialized()) return false;
  }
  if (has_channel_request()) {
    if (!this->channel_request().IsInitialized()) return false;
  }
  return true;
}

void JoinGameRequest::Swap(JoinGameRequest* other) {
  if (other != this) {
    std::swap(game_handle_, other->game_handle_);
    player_.Swap(&other->player_);
    std::swap(channel_request_, other->channel_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGameRequest_descriptor_;
  metadata.reflection = JoinGameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGameResponse::kConnectInfoFieldNumber;
#endif  // !_MSC_VER

JoinGameResponse::JoinGameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinGameResponse::InitAsDefaultInstance() {
}

JoinGameResponse::JoinGameResponse(const JoinGameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinGameResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGameResponse::~JoinGameResponse() {
  SharedDtor();
}

void JoinGameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGameResponse_descriptor_;
}

const JoinGameResponse& JoinGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

JoinGameResponse* JoinGameResponse::default_instance_ = NULL;

JoinGameResponse* JoinGameResponse::New() const {
  return new JoinGameResponse;
}

void JoinGameResponse::Clear() {
  connect_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.game_master.ConnectInfo connect_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connect_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_connect_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.game_master.ConnectInfo connect_info = 1;
  for (int i = 0; i < this->connect_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connect_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinGameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.game_master.ConnectInfo connect_info = 1;
  for (int i = 0; i < this->connect_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->connect_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinGameResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.game_master.ConnectInfo connect_info = 1;
  total_size += 1 * this->connect_info_size();
  for (int i = 0; i < this->connect_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connect_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGameResponse::MergeFrom(const JoinGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  connect_info_.MergeFrom(from.connect_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameResponse::CopyFrom(const JoinGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameResponse::IsInitialized() const {
  
  for (int i = 0; i < connect_info_size(); i++) {
    if (!this->connect_info(i).IsInitialized()) return false;
  }
  return true;
}

void JoinGameResponse::Swap(JoinGameResponse* other) {
  if (other != this) {
    connect_info_.Swap(&other->connect_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGameResponse_descriptor_;
  metadata.reflection = JoinGameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListFactoriesRequest::kFilterFieldNumber;
const int ListFactoriesRequest::kStartIndexFieldNumber;
const int ListFactoriesRequest::kMaxResultsFieldNumber;
#endif  // !_MSC_VER

ListFactoriesRequest::ListFactoriesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListFactoriesRequest::InitAsDefaultInstance() {
  filter_ = const_cast< ::bnet::protocol::attribute::AttributeFilter*>(&::bnet::protocol::attribute::AttributeFilter::default_instance());
}

ListFactoriesRequest::ListFactoriesRequest(const ListFactoriesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListFactoriesRequest::SharedCtor() {
  _cached_size_ = 0;
  filter_ = NULL;
  start_index_ = 0u;
  max_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListFactoriesRequest::~ListFactoriesRequest() {
  SharedDtor();
}

void ListFactoriesRequest::SharedDtor() {
  if (this != default_instance_) {
    delete filter_;
  }
}

void ListFactoriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListFactoriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListFactoriesRequest_descriptor_;
}

const ListFactoriesRequest& ListFactoriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

ListFactoriesRequest* ListFactoriesRequest::default_instance_ = NULL;

ListFactoriesRequest* ListFactoriesRequest::New() const {
  return new ListFactoriesRequest;
}

void ListFactoriesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filter()) {
      if (filter_ != NULL) filter_->::bnet::protocol::attribute::AttributeFilter::Clear();
    }
    start_index_ = 0u;
    max_results_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListFactoriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.attribute.AttributeFilter filter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }
      
      // optional uint32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_results;
        break;
      }
      
      // optional uint32 max_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
          set_has_max_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListFactoriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.attribute.AttributeFilter filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filter(), output);
  }
  
  // optional uint32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }
  
  // optional uint32 max_results = 3;
  if (has_max_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_results(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListFactoriesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.attribute.AttributeFilter filter = 1;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filter(), target);
  }
  
  // optional uint32 start_index = 2;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_index(), target);
  }
  
  // optional uint32 max_results = 3;
  if (has_max_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_results(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListFactoriesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.attribute.AttributeFilter filter = 1;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
    // optional uint32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }
    
    // optional uint32 max_results = 3;
    if (has_max_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_results());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListFactoriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListFactoriesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListFactoriesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListFactoriesRequest::MergeFrom(const ListFactoriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      mutable_filter()->::bnet::protocol::attribute::AttributeFilter::MergeFrom(from.filter());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_max_results()) {
      set_max_results(from.max_results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListFactoriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFactoriesRequest::CopyFrom(const ListFactoriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFactoriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void ListFactoriesRequest::Swap(ListFactoriesRequest* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    std::swap(start_index_, other->start_index_);
    std::swap(max_results_, other->max_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListFactoriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListFactoriesRequest_descriptor_;
  metadata.reflection = ListFactoriesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListFactoriesResponse::kDescriptionFieldNumber;
const int ListFactoriesResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

ListFactoriesResponse::ListFactoriesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListFactoriesResponse::InitAsDefaultInstance() {
}

ListFactoriesResponse::ListFactoriesResponse(const ListFactoriesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListFactoriesResponse::SharedCtor() {
  _cached_size_ = 0;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListFactoriesResponse::~ListFactoriesResponse() {
  SharedDtor();
}

void ListFactoriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListFactoriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListFactoriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListFactoriesResponse_descriptor_;
}

const ListFactoriesResponse& ListFactoriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

ListFactoriesResponse* ListFactoriesResponse::default_instance_ = NULL;

ListFactoriesResponse* ListFactoriesResponse::New() const {
  return new ListFactoriesResponse;
}

void ListFactoriesResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_results_ = 0u;
  }
  description_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListFactoriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.game_master.GameFactoryDescription description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_description;
        if (input->ExpectTag(16)) goto parse_total_results;
        break;
      }
      
      // optional uint32 total_results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListFactoriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.game_master.GameFactoryDescription description = 1;
  for (int i = 0; i < this->description_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->description(i), output);
  }
  
  // optional uint32 total_results = 2;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_results(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListFactoriesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.game_master.GameFactoryDescription description = 1;
  for (int i = 0; i < this->description_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->description(i), target);
  }
  
  // optional uint32 total_results = 2;
  if (has_total_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_results(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListFactoriesResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 total_results = 2;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }
    
  }
  // repeated .bnet.protocol.game_master.GameFactoryDescription description = 1;
  total_size += 1 * this->description_size();
  for (int i = 0; i < this->description_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->description(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListFactoriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListFactoriesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListFactoriesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListFactoriesResponse::MergeFrom(const ListFactoriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  description_.MergeFrom(from.description_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListFactoriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFactoriesResponse::CopyFrom(const ListFactoriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFactoriesResponse::IsInitialized() const {
  
  for (int i = 0; i < description_size(); i++) {
    if (!this->description(i).IsInitialized()) return false;
  }
  return true;
}

void ListFactoriesResponse::Swap(ListFactoriesResponse* other) {
  if (other != this) {
    description_.Swap(&other->description_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListFactoriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListFactoriesResponse_descriptor_;
  metadata.reflection = ListFactoriesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindGameRequest::kPlayerFieldNumber;
const int FindGameRequest::kFactoryIdFieldNumber;
const int FindGameRequest::kPropertiesFieldNumber;
const int FindGameRequest::kObjectIdFieldNumber;
const int FindGameRequest::kChannelRequestFieldNumber;
#endif  // !_MSC_VER

FindGameRequest::FindGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindGameRequest::InitAsDefaultInstance() {
  properties_ = const_cast< ::bnet::protocol::game_master::GameProperties*>(&::bnet::protocol::game_master::GameProperties::default_instance());
  channel_request_ = const_cast< ::bnet::protocol::channel::CreateChannelRequest*>(&::bnet::protocol::channel::CreateChannelRequest::default_instance());
}

FindGameRequest::FindGameRequest(const FindGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindGameRequest::SharedCtor() {
  _cached_size_ = 0;
  factory_id_ = GOOGLE_ULONGLONG(0);
  properties_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  channel_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindGameRequest::~FindGameRequest() {
  SharedDtor();
}

void FindGameRequest::SharedDtor() {
  if (this != default_instance_) {
    delete properties_;
    delete channel_request_;
  }
}

void FindGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindGameRequest_descriptor_;
}

const FindGameRequest& FindGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

FindGameRequest* FindGameRequest::default_instance_ = NULL;

FindGameRequest* FindGameRequest::New() const {
  return new FindGameRequest;
}

void FindGameRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    factory_id_ = GOOGLE_ULONGLONG(0);
    if (has_properties()) {
      if (properties_ != NULL) properties_->::bnet::protocol::game_master::GameProperties::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
    if (has_channel_request()) {
      if (channel_request_ != NULL) channel_request_->::bnet::protocol::channel::CreateChannelRequest::Clear();
    }
  }
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.game_master.Player player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player;
        if (input->ExpectTag(17)) goto parse_factory_id;
        break;
      }
      
      // optional fixed64 factory_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_factory_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &factory_id_)));
          set_has_factory_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_properties;
        break;
      }
      
      // optional .bnet.protocol.game_master.GameProperties properties = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_object_id;
        break;
      }
      
      // required uint64 object_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel_request;
        break;
      }
      
      // optional .bnet.protocol.channel.CreateChannelRequest channel_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.game_master.Player player = 1;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(i), output);
  }
  
  // optional fixed64 factory_id = 2;
  if (has_factory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->factory_id(), output);
  }
  
  // optional .bnet.protocol.game_master.GameProperties properties = 3;
  if (has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->properties(), output);
  }
  
  // required uint64 object_id = 4;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->object_id(), output);
  }
  
  // optional .bnet.protocol.channel.CreateChannelRequest channel_request = 5;
  if (has_channel_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->channel_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.game_master.Player player = 1;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(i), target);
  }
  
  // optional fixed64 factory_id = 2;
  if (has_factory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->factory_id(), target);
  }
  
  // optional .bnet.protocol.game_master.GameProperties properties = 3;
  if (has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->properties(), target);
  }
  
  // required uint64 object_id = 4;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->object_id(), target);
  }
  
  // optional .bnet.protocol.channel.CreateChannelRequest channel_request = 5;
  if (has_channel_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->channel_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindGameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional fixed64 factory_id = 2;
    if (has_factory_id()) {
      total_size += 1 + 8;
    }
    
    // optional .bnet.protocol.game_master.GameProperties properties = 3;
    if (has_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties());
    }
    
    // required uint64 object_id = 4;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
    // optional .bnet.protocol.channel.CreateChannelRequest channel_request = 5;
    if (has_channel_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_request());
    }
    
  }
  // repeated .bnet.protocol.game_master.Player player = 1;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindGameRequest::MergeFrom(const FindGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_factory_id()) {
      set_factory_id(from.factory_id());
    }
    if (from.has_properties()) {
      mutable_properties()->::bnet::protocol::game_master::GameProperties::MergeFrom(from.properties());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_channel_request()) {
      mutable_channel_request()->::bnet::protocol::channel::CreateChannelRequest::MergeFrom(from.channel_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindGameRequest::CopyFrom(const FindGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindGameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  for (int i = 0; i < player_size(); i++) {
    if (!this->player(i).IsInitialized()) return false;
  }
  if (has_properties()) {
    if (!this->properties().IsInitialized()) return false;
  }
  if (has_channel_request()) {
    if (!this->channel_request().IsInitialized()) return false;
  }
  return true;
}

void FindGameRequest::Swap(FindGameRequest* other) {
  if (other != this) {
    player_.Swap(&other->player_);
    std::swap(factory_id_, other->factory_id_);
    std::swap(properties_, other->properties_);
    std::swap(object_id_, other->object_id_);
    std::swap(channel_request_, other->channel_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindGameRequest_descriptor_;
  metadata.reflection = FindGameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindGameResponse::kRequestIdFieldNumber;
const int FindGameResponse::kFactoryIdFieldNumber;
#endif  // !_MSC_VER

FindGameResponse::FindGameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindGameResponse::InitAsDefaultInstance() {
}

FindGameResponse::FindGameResponse(const FindGameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindGameResponse::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  factory_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindGameResponse::~FindGameResponse() {
  SharedDtor();
}

void FindGameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindGameResponse_descriptor_;
}

const FindGameResponse& FindGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

FindGameResponse* FindGameResponse::default_instance_ = NULL;

FindGameResponse* FindGameResponse::New() const {
  return new FindGameResponse;
}

void FindGameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    factory_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_factory_id;
        break;
      }
      
      // optional fixed64 factory_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_factory_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &factory_id_)));
          set_has_factory_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }
  
  // optional fixed64 factory_id = 2;
  if (has_factory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->factory_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindGameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }
  
  // optional fixed64 factory_id = 2;
  if (has_factory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->factory_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindGameResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }
    
    // optional fixed64 factory_id = 2;
    if (has_factory_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindGameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindGameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindGameResponse::MergeFrom(const FindGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_factory_id()) {
      set_factory_id(from.factory_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindGameResponse::CopyFrom(const FindGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindGameResponse::IsInitialized() const {
  
  return true;
}

void FindGameResponse::Swap(FindGameResponse* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(factory_id_, other->factory_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindGameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindGameResponse_descriptor_;
  metadata.reflection = FindGameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelFindGameRequest::kFactoryIdFieldNumber;
const int CancelFindGameRequest::kRequestIdFieldNumber;
#endif  // !_MSC_VER

CancelFindGameRequest::CancelFindGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelFindGameRequest::InitAsDefaultInstance() {
}

CancelFindGameRequest::CancelFindGameRequest(const CancelFindGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelFindGameRequest::SharedCtor() {
  _cached_size_ = 0;
  factory_id_ = GOOGLE_ULONGLONG(0);
  request_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelFindGameRequest::~CancelFindGameRequest() {
  SharedDtor();
}

void CancelFindGameRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelFindGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelFindGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelFindGameRequest_descriptor_;
}

const CancelFindGameRequest& CancelFindGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

CancelFindGameRequest* CancelFindGameRequest::default_instance_ = NULL;

CancelFindGameRequest* CancelFindGameRequest::New() const {
  return new CancelFindGameRequest;
}

void CancelFindGameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factory_id_ = GOOGLE_ULONGLONG(0);
    request_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelFindGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 factory_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &factory_id_)));
          set_has_factory_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request_id;
        break;
      }
      
      // required uint64 request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelFindGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 factory_id = 1;
  if (has_factory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->factory_id(), output);
  }
  
  // required uint64 request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelFindGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 factory_id = 1;
  if (has_factory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->factory_id(), target);
  }
  
  // required uint64 request_id = 2;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelFindGameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 factory_id = 1;
    if (has_factory_id()) {
      total_size += 1 + 8;
    }
    
    // required uint64 request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelFindGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelFindGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelFindGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelFindGameRequest::MergeFrom(const CancelFindGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factory_id()) {
      set_factory_id(from.factory_id());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelFindGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelFindGameRequest::CopyFrom(const CancelFindGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelFindGameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CancelFindGameRequest::Swap(CancelFindGameRequest* other) {
  if (other != this) {
    std::swap(factory_id_, other->factory_id_);
    std::swap(request_id_, other->request_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelFindGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelFindGameRequest_descriptor_;
  metadata.reflection = CancelFindGameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndedNotification::kGameHandleFieldNumber;
#endif  // !_MSC_VER

GameEndedNotification::GameEndedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndedNotification::InitAsDefaultInstance() {
  game_handle_ = const_cast< ::bnet::protocol::game_master::GameHandle*>(&::bnet::protocol::game_master::GameHandle::default_instance());
}

GameEndedNotification::GameEndedNotification(const GameEndedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndedNotification::SharedCtor() {
  _cached_size_ = 0;
  game_handle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndedNotification::~GameEndedNotification() {
  SharedDtor();
}

void GameEndedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete game_handle_;
  }
}

void GameEndedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndedNotification_descriptor_;
}

const GameEndedNotification& GameEndedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

GameEndedNotification* GameEndedNotification::default_instance_ = NULL;

GameEndedNotification* GameEndedNotification::New() const {
  return new GameEndedNotification;
}

void GameEndedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_handle()) {
      if (game_handle_ != NULL) game_handle_->::bnet::protocol::game_master::GameHandle::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.game_master.GameHandle game_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_handle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.game_master.GameHandle game_handle = 1;
  if (has_game_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndedNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.game_master.GameHandle game_handle = 1;
  if (has_game_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndedNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.game_master.GameHandle game_handle = 1;
    if (has_game_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndedNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndedNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndedNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndedNotification::MergeFrom(const GameEndedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_handle()) {
      mutable_game_handle()->::bnet::protocol::game_master::GameHandle::MergeFrom(from.game_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndedNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndedNotification::CopyFrom(const GameEndedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndedNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_game_handle()) {
    if (!this->game_handle().IsInitialized()) return false;
  }
  return true;
}

void GameEndedNotification::Swap(GameEndedNotification* other) {
  if (other != this) {
    std::swap(game_handle_, other->game_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndedNotification_descriptor_;
  metadata.reflection = GameEndedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLeftNotification::kGameHandleFieldNumber;
const int PlayerLeftNotification::kToonIdFieldNumber;
const int PlayerLeftNotification::kReasonFieldNumber;
#endif  // !_MSC_VER

PlayerLeftNotification::PlayerLeftNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLeftNotification::InitAsDefaultInstance() {
  game_handle_ = const_cast< ::bnet::protocol::game_master::GameHandle*>(&::bnet::protocol::game_master::GameHandle::default_instance());
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

PlayerLeftNotification::PlayerLeftNotification(const PlayerLeftNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLeftNotification::SharedCtor() {
  _cached_size_ = 0;
  game_handle_ = NULL;
  toon_id_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLeftNotification::~PlayerLeftNotification() {
  SharedDtor();
}

void PlayerLeftNotification::SharedDtor() {
  if (this != default_instance_) {
    delete game_handle_;
    delete toon_id_;
  }
}

void PlayerLeftNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeftNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLeftNotification_descriptor_;
}

const PlayerLeftNotification& PlayerLeftNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

PlayerLeftNotification* PlayerLeftNotification::default_instance_ = NULL;

PlayerLeftNotification* PlayerLeftNotification::New() const {
  return new PlayerLeftNotification;
}

void PlayerLeftNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_handle()) {
      if (game_handle_ != NULL) game_handle_->::bnet::protocol::game_master::GameHandle::Clear();
    }
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLeftNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.game_master.GameHandle game_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_handle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toon_id;
        break;
      }
      
      // required .bnet.protocol.EntityId toon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLeftNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.game_master.GameHandle game_handle = 1;
  if (has_game_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_handle(), output);
  }
  
  // required .bnet.protocol.EntityId toon_id = 2;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toon_id(), output);
  }
  
  // optional uint32 reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLeftNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.game_master.GameHandle game_handle = 1;
  if (has_game_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_handle(), target);
  }
  
  // required .bnet.protocol.EntityId toon_id = 2;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toon_id(), target);
  }
  
  // optional uint32 reason = 3;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLeftNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.game_master.GameHandle game_handle = 1;
    if (has_game_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_handle());
    }
    
    // required .bnet.protocol.EntityId toon_id = 2;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // optional uint32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeftNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLeftNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLeftNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLeftNotification::MergeFrom(const PlayerLeftNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_handle()) {
      mutable_game_handle()->::bnet::protocol::game_master::GameHandle::MergeFrom(from.game_handle());
    }
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLeftNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLeftNotification::CopyFrom(const PlayerLeftNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLeftNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_game_handle()) {
    if (!this->game_handle().IsInitialized()) return false;
  }
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  return true;
}

void PlayerLeftNotification::Swap(PlayerLeftNotification* other) {
  if (other != this) {
    std::swap(game_handle_, other->game_handle_);
    std::swap(toon_id_, other->toon_id_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLeftNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLeftNotification_descriptor_;
  metadata.reflection = PlayerLeftNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterServerRequest::kAttributeFieldNumber;
const int RegisterServerRequest::kStateFieldNumber;
const int RegisterServerRequest::kProgramIdFieldNumber;
#endif  // !_MSC_VER

RegisterServerRequest::RegisterServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterServerRequest::InitAsDefaultInstance() {
  state_ = const_cast< ::bnet::protocol::server_pool::ServerState*>(&::bnet::protocol::server_pool::ServerState::default_instance());
}

RegisterServerRequest::RegisterServerRequest(const RegisterServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterServerRequest::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  program_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterServerRequest::~RegisterServerRequest() {
  SharedDtor();
}

void RegisterServerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void RegisterServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterServerRequest_descriptor_;
}

const RegisterServerRequest& RegisterServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

RegisterServerRequest* RegisterServerRequest::default_instance_ = NULL;

RegisterServerRequest* RegisterServerRequest::New() const {
  return new RegisterServerRequest;
}

void RegisterServerRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::bnet::protocol::server_pool::ServerState::Clear();
    }
    program_id_ = 0u;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.attribute.Attribute attribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .bnet.protocol.server_pool.ServerState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_program_id;
        break;
      }
      
      // required fixed32 program_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_program_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_id_)));
          set_has_program_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }
  
  // optional .bnet.protocol.server_pool.ServerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // required fixed32 program_id = 3;
  if (has_program_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->program_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }
  
  // optional .bnet.protocol.server_pool.ServerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // required fixed32 program_id = 3;
  if (has_program_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->program_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterServerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .bnet.protocol.server_pool.ServerState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // required fixed32 program_id = 3;
    if (has_program_id()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterServerRequest::MergeFrom(const RegisterServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_state()) {
      mutable_state()->::bnet::protocol::server_pool::ServerState::MergeFrom(from.state());
    }
    if (from.has_program_id()) {
      set_program_id(from.program_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServerRequest::CopyFrom(const RegisterServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void RegisterServerRequest::Swap(RegisterServerRequest* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    std::swap(state_, other->state_);
    std::swap(program_id_, other->program_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterServerRequest_descriptor_;
  metadata.reflection = RegisterServerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UnregisterServerRequest::UnregisterServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnregisterServerRequest::InitAsDefaultInstance() {
}

UnregisterServerRequest::UnregisterServerRequest(const UnregisterServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnregisterServerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnregisterServerRequest::~UnregisterServerRequest() {
  SharedDtor();
}

void UnregisterServerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnregisterServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnregisterServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnregisterServerRequest_descriptor_;
}

const UnregisterServerRequest& UnregisterServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

UnregisterServerRequest* UnregisterServerRequest::default_instance_ = NULL;

UnregisterServerRequest* UnregisterServerRequest::New() const {
  return new UnregisterServerRequest;
}

void UnregisterServerRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnregisterServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UnregisterServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnregisterServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnregisterServerRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnregisterServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnregisterServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnregisterServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnregisterServerRequest::MergeFrom(const UnregisterServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnregisterServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterServerRequest::CopyFrom(const UnregisterServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterServerRequest::IsInitialized() const {
  
  return true;
}

void UnregisterServerRequest::Swap(UnregisterServerRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnregisterServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnregisterServerRequest_descriptor_;
  metadata.reflection = UnregisterServerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterUtilitiesRequest::kAttributeFieldNumber;
const int RegisterUtilitiesRequest::kStateFieldNumber;
const int RegisterUtilitiesRequest::kProgramIdFieldNumber;
#endif  // !_MSC_VER

RegisterUtilitiesRequest::RegisterUtilitiesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterUtilitiesRequest::InitAsDefaultInstance() {
  state_ = const_cast< ::bnet::protocol::server_pool::ServerState*>(&::bnet::protocol::server_pool::ServerState::default_instance());
}

RegisterUtilitiesRequest::RegisterUtilitiesRequest(const RegisterUtilitiesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterUtilitiesRequest::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  program_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterUtilitiesRequest::~RegisterUtilitiesRequest() {
  SharedDtor();
}

void RegisterUtilitiesRequest::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void RegisterUtilitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterUtilitiesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterUtilitiesRequest_descriptor_;
}

const RegisterUtilitiesRequest& RegisterUtilitiesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

RegisterUtilitiesRequest* RegisterUtilitiesRequest::default_instance_ = NULL;

RegisterUtilitiesRequest* RegisterUtilitiesRequest::New() const {
  return new RegisterUtilitiesRequest;
}

void RegisterUtilitiesRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::bnet::protocol::server_pool::ServerState::Clear();
    }
    program_id_ = 0u;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterUtilitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.attribute.Attribute attribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .bnet.protocol.server_pool.ServerState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_program_id;
        break;
      }
      
      // required fixed32 program_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_program_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_id_)));
          set_has_program_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterUtilitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }
  
  // optional .bnet.protocol.server_pool.ServerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // required fixed32 program_id = 3;
  if (has_program_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->program_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterUtilitiesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }
  
  // optional .bnet.protocol.server_pool.ServerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // required fixed32 program_id = 3;
  if (has_program_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->program_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterUtilitiesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .bnet.protocol.server_pool.ServerState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // required fixed32 program_id = 3;
    if (has_program_id()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterUtilitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterUtilitiesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterUtilitiesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterUtilitiesRequest::MergeFrom(const RegisterUtilitiesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_state()) {
      mutable_state()->::bnet::protocol::server_pool::ServerState::MergeFrom(from.state());
    }
    if (from.has_program_id()) {
      set_program_id(from.program_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterUtilitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterUtilitiesRequest::CopyFrom(const RegisterUtilitiesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUtilitiesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void RegisterUtilitiesRequest::Swap(RegisterUtilitiesRequest* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    std::swap(state_, other->state_);
    std::swap(program_id_, other->program_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterUtilitiesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterUtilitiesRequest_descriptor_;
  metadata.reflection = RegisterUtilitiesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UnregisterUtilitiesRequest::UnregisterUtilitiesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnregisterUtilitiesRequest::InitAsDefaultInstance() {
}

UnregisterUtilitiesRequest::UnregisterUtilitiesRequest(const UnregisterUtilitiesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnregisterUtilitiesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnregisterUtilitiesRequest::~UnregisterUtilitiesRequest() {
  SharedDtor();
}

void UnregisterUtilitiesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnregisterUtilitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnregisterUtilitiesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnregisterUtilitiesRequest_descriptor_;
}

const UnregisterUtilitiesRequest& UnregisterUtilitiesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

UnregisterUtilitiesRequest* UnregisterUtilitiesRequest::default_instance_ = NULL;

UnregisterUtilitiesRequest* UnregisterUtilitiesRequest::New() const {
  return new UnregisterUtilitiesRequest;
}

void UnregisterUtilitiesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnregisterUtilitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UnregisterUtilitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnregisterUtilitiesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnregisterUtilitiesRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnregisterUtilitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnregisterUtilitiesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnregisterUtilitiesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnregisterUtilitiesRequest::MergeFrom(const UnregisterUtilitiesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnregisterUtilitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterUtilitiesRequest::CopyFrom(const UnregisterUtilitiesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterUtilitiesRequest::IsInitialized() const {
  
  return true;
}

void UnregisterUtilitiesRequest::Swap(UnregisterUtilitiesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnregisterUtilitiesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnregisterUtilitiesRequest_descriptor_;
  metadata.reflection = UnregisterUtilitiesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeRequest::InitAsDefaultInstance() {
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeResponse::kSubscriptionIdFieldNumber;
#endif  // !_MSC_VER

SubscribeResponse::SubscribeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeResponse::InitAsDefaultInstance() {
}

SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeResponse::SharedCtor() {
  _cached_size_ = 0;
  subscription_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeResponse::~SubscribeResponse() {
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeResponse_descriptor_;
}

const SubscribeResponse& SubscribeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

SubscribeResponse* SubscribeResponse::default_instance_ = NULL;

SubscribeResponse* SubscribeResponse::New() const {
  return new SubscribeResponse;
}

void SubscribeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subscription_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 subscription_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscription_id_)));
          set_has_subscription_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 subscription_id = 1;
  if (has_subscription_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->subscription_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 subscription_id = 1;
  if (has_subscription_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->subscription_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 subscription_id = 1;
    if (has_subscription_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subscription_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscription_id()) {
      set_subscription_id(from.subscription_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  
  return true;
}

void SubscribeResponse::Swap(SubscribeResponse* other) {
  if (other != this) {
    std::swap(subscription_id_, other->subscription_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeResponse_descriptor_;
  metadata.reflection = SubscribeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsubscribeRequest::kSubscriptionIdFieldNumber;
#endif  // !_MSC_VER

UnsubscribeRequest::UnsubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnsubscribeRequest::InitAsDefaultInstance() {
}

UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnsubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  subscription_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeRequest_descriptor_;
}

const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

UnsubscribeRequest* UnsubscribeRequest::default_instance_ = NULL;

UnsubscribeRequest* UnsubscribeRequest::New() const {
  return new UnsubscribeRequest;
}

void UnsubscribeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subscription_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 subscription_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscription_id_)));
          set_has_subscription_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnsubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 subscription_id = 1;
  if (has_subscription_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->subscription_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnsubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 subscription_id = 1;
  if (has_subscription_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->subscription_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnsubscribeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 subscription_id = 1;
    if (has_subscription_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subscription_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsubscribeRequest::MergeFrom(const UnsubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscription_id()) {
      set_subscription_id(from.subscription_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnsubscribeRequest::Swap(UnsubscribeRequest* other) {
  if (other != this) {
    std::swap(subscription_id_, other->subscription_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeRequest_descriptor_;
  metadata.reflection = UnsubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeGameRequest::kGameHandleFieldNumber;
const int ChangeGameRequest::kOpenFieldNumber;
const int ChangeGameRequest::kAttributeFieldNumber;
const int ChangeGameRequest::kReplaceFieldNumber;
#endif  // !_MSC_VER

ChangeGameRequest::ChangeGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeGameRequest::InitAsDefaultInstance() {
  game_handle_ = const_cast< ::bnet::protocol::game_master::GameHandle*>(&::bnet::protocol::game_master::GameHandle::default_instance());
}

ChangeGameRequest::ChangeGameRequest(const ChangeGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeGameRequest::SharedCtor() {
  _cached_size_ = 0;
  game_handle_ = NULL;
  open_ = false;
  replace_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeGameRequest::~ChangeGameRequest() {
  SharedDtor();
}

void ChangeGameRequest::SharedDtor() {
  if (this != default_instance_) {
    delete game_handle_;
  }
}

void ChangeGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeGameRequest_descriptor_;
}

const ChangeGameRequest& ChangeGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

ChangeGameRequest* ChangeGameRequest::default_instance_ = NULL;

ChangeGameRequest* ChangeGameRequest::New() const {
  return new ChangeGameRequest;
}

void ChangeGameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_handle()) {
      if (game_handle_ != NULL) game_handle_->::bnet::protocol::game_master::GameHandle::Clear();
    }
    open_ = false;
    replace_ = false;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.game_master.GameHandle game_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_handle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open;
        break;
      }
      
      // optional bool open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectTag(32)) goto parse_replace;
        break;
      }
      
      // optional bool replace = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replace_)));
          set_has_replace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.game_master.GameHandle game_handle = 1;
  if (has_game_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_handle(), output);
  }
  
  // optional bool open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->open(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }
  
  // optional bool replace = 4;
  if (has_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->replace(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.game_master.GameHandle game_handle = 1;
  if (has_game_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_handle(), target);
  }
  
  // optional bool open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->open(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }
  
  // optional bool replace = 4;
  if (has_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->replace(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeGameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.game_master.GameHandle game_handle = 1;
    if (has_game_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_handle());
    }
    
    // optional bool open = 2;
    if (has_open()) {
      total_size += 1 + 1;
    }
    
    // optional bool replace = 4;
    if (has_replace()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeGameRequest::MergeFrom(const ChangeGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_handle()) {
      mutable_game_handle()->::bnet::protocol::game_master::GameHandle::MergeFrom(from.game_handle());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_replace()) {
      set_replace(from.replace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeGameRequest::CopyFrom(const ChangeGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeGameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_game_handle()) {
    if (!this->game_handle().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void ChangeGameRequest::Swap(ChangeGameRequest* other) {
  if (other != this) {
    std::swap(game_handle_, other->game_handle_);
    std::swap(open_, other->open_);
    attribute_.Swap(&other->attribute_);
    std::swap(replace_, other->replace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeGameRequest_descriptor_;
  metadata.reflection = ChangeGameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFactoryInfoRequest::kFactoryIdFieldNumber;
#endif  // !_MSC_VER

GetFactoryInfoRequest::GetFactoryInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFactoryInfoRequest::InitAsDefaultInstance() {
}

GetFactoryInfoRequest::GetFactoryInfoRequest(const GetFactoryInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFactoryInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  factory_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFactoryInfoRequest::~GetFactoryInfoRequest() {
  SharedDtor();
}

void GetFactoryInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFactoryInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFactoryInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFactoryInfoRequest_descriptor_;
}

const GetFactoryInfoRequest& GetFactoryInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

GetFactoryInfoRequest* GetFactoryInfoRequest::default_instance_ = NULL;

GetFactoryInfoRequest* GetFactoryInfoRequest::New() const {
  return new GetFactoryInfoRequest;
}

void GetFactoryInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factory_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFactoryInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 factory_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &factory_id_)));
          set_has_factory_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFactoryInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 factory_id = 1;
  if (has_factory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->factory_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFactoryInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 factory_id = 1;
  if (has_factory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->factory_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFactoryInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 factory_id = 1;
    if (has_factory_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFactoryInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFactoryInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFactoryInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFactoryInfoRequest::MergeFrom(const GetFactoryInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factory_id()) {
      set_factory_id(from.factory_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFactoryInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFactoryInfoRequest::CopyFrom(const GetFactoryInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFactoryInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFactoryInfoRequest::Swap(GetFactoryInfoRequest* other) {
  if (other != this) {
    std::swap(factory_id_, other->factory_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFactoryInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFactoryInfoRequest_descriptor_;
  metadata.reflection = GetFactoryInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFactoryInfoResponse::kAttributeFieldNumber;
const int GetFactoryInfoResponse::kStatsBucketFieldNumber;
#endif  // !_MSC_VER

GetFactoryInfoResponse::GetFactoryInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFactoryInfoResponse::InitAsDefaultInstance() {
}

GetFactoryInfoResponse::GetFactoryInfoResponse(const GetFactoryInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFactoryInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFactoryInfoResponse::~GetFactoryInfoResponse() {
  SharedDtor();
}

void GetFactoryInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFactoryInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFactoryInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFactoryInfoResponse_descriptor_;
}

const GetFactoryInfoResponse& GetFactoryInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

GetFactoryInfoResponse* GetFactoryInfoResponse::default_instance_ = NULL;

GetFactoryInfoResponse* GetFactoryInfoResponse::New() const {
  return new GetFactoryInfoResponse;
}

void GetFactoryInfoResponse::Clear() {
  attribute_.Clear();
  stats_bucket_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFactoryInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.attribute.Attribute attribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(18)) goto parse_stats_bucket;
        break;
      }
      
      // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats_bucket;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFactoryInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }
  
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 2;
  for (int i = 0; i < this->stats_bucket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats_bucket(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFactoryInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }
  
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 2;
  for (int i = 0; i < this->stats_bucket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stats_bucket(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFactoryInfoResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 2;
  total_size += 1 * this->stats_bucket_size();
  for (int i = 0; i < this->stats_bucket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_bucket(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFactoryInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFactoryInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFactoryInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFactoryInfoResponse::MergeFrom(const GetFactoryInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  stats_bucket_.MergeFrom(from.stats_bucket_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFactoryInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFactoryInfoResponse::CopyFrom(const GetFactoryInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFactoryInfoResponse::IsInitialized() const {
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void GetFactoryInfoResponse::Swap(GetFactoryInfoResponse* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    stats_bucket_.Swap(&other->stats_bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFactoryInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFactoryInfoResponse_descriptor_;
  metadata.reflection = GetFactoryInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGameStatsRequest::kFactoryIdFieldNumber;
const int GetGameStatsRequest::kFilterFieldNumber;
#endif  // !_MSC_VER

GetGameStatsRequest::GetGameStatsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGameStatsRequest::InitAsDefaultInstance() {
  filter_ = const_cast< ::bnet::protocol::attribute::AttributeFilter*>(&::bnet::protocol::attribute::AttributeFilter::default_instance());
}

GetGameStatsRequest::GetGameStatsRequest(const GetGameStatsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGameStatsRequest::SharedCtor() {
  _cached_size_ = 0;
  factory_id_ = GOOGLE_ULONGLONG(0);
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameStatsRequest::~GetGameStatsRequest() {
  SharedDtor();
}

void GetGameStatsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete filter_;
  }
}

void GetGameStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGameStatsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGameStatsRequest_descriptor_;
}

const GetGameStatsRequest& GetGameStatsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

GetGameStatsRequest* GetGameStatsRequest::default_instance_ = NULL;

GetGameStatsRequest* GetGameStatsRequest::New() const {
  return new GetGameStatsRequest;
}

void GetGameStatsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factory_id_ = GOOGLE_ULONGLONG(0);
    if (has_filter()) {
      if (filter_ != NULL) filter_->::bnet::protocol::attribute::AttributeFilter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGameStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 factory_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &factory_id_)));
          set_has_factory_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }
      
      // required .bnet.protocol.attribute.AttributeFilter filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGameStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 factory_id = 1;
  if (has_factory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->factory_id(), output);
  }
  
  // required .bnet.protocol.attribute.AttributeFilter filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGameStatsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 factory_id = 1;
  if (has_factory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->factory_id(), target);
  }
  
  // required .bnet.protocol.attribute.AttributeFilter filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGameStatsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 factory_id = 1;
    if (has_factory_id()) {
      total_size += 1 + 8;
    }
    
    // required .bnet.protocol.attribute.AttributeFilter filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGameStatsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGameStatsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGameStatsRequest::MergeFrom(const GetGameStatsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factory_id()) {
      set_factory_id(from.factory_id());
    }
    if (from.has_filter()) {
      mutable_filter()->::bnet::protocol::attribute::AttributeFilter::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGameStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameStatsRequest::CopyFrom(const GetGameStatsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameStatsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void GetGameStatsRequest::Swap(GetGameStatsRequest* other) {
  if (other != this) {
    std::swap(factory_id_, other->factory_id_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGameStatsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGameStatsRequest_descriptor_;
  metadata.reflection = GetGameStatsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGameStatsResponse::kStatsBucketFieldNumber;
#endif  // !_MSC_VER

GetGameStatsResponse::GetGameStatsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGameStatsResponse::InitAsDefaultInstance() {
}

GetGameStatsResponse::GetGameStatsResponse(const GetGameStatsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGameStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameStatsResponse::~GetGameStatsResponse() {
  SharedDtor();
}

void GetGameStatsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGameStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGameStatsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGameStatsResponse_descriptor_;
}

const GetGameStatsResponse& GetGameStatsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

GetGameStatsResponse* GetGameStatsResponse::default_instance_ = NULL;

GetGameStatsResponse* GetGameStatsResponse::New() const {
  return new GetGameStatsResponse;
}

void GetGameStatsResponse::Clear() {
  stats_bucket_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGameStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stats_bucket;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGameStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 1;
  for (int i = 0; i < this->stats_bucket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats_bucket(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGameStatsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 1;
  for (int i = 0; i < this->stats_bucket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stats_bucket(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGameStatsResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 1;
  total_size += 1 * this->stats_bucket_size();
  for (int i = 0; i < this->stats_bucket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_bucket(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGameStatsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGameStatsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGameStatsResponse::MergeFrom(const GetGameStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_bucket_.MergeFrom(from.stats_bucket_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGameStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGameStatsResponse::CopyFrom(const GetGameStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameStatsResponse::IsInitialized() const {
  
  return true;
}

void GetGameStatsResponse::Swap(GetGameStatsResponse* other) {
  if (other != this) {
    stats_bucket_.Swap(&other->stats_bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGameStatsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGameStatsResponse_descriptor_;
  metadata.reflection = GetGameStatsResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FactoryUpdateNotification_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryUpdateNotification_Operation_descriptor_;
}
bool FactoryUpdateNotification_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FactoryUpdateNotification_Operation FactoryUpdateNotification::ADD;
const FactoryUpdateNotification_Operation FactoryUpdateNotification::REMOVE;
const FactoryUpdateNotification_Operation FactoryUpdateNotification::CHANGE;
const FactoryUpdateNotification_Operation FactoryUpdateNotification::Operation_MIN;
const FactoryUpdateNotification_Operation FactoryUpdateNotification::Operation_MAX;
const int FactoryUpdateNotification::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FactoryUpdateNotification::kOpFieldNumber;
const int FactoryUpdateNotification::kDescriptionFieldNumber;
const int FactoryUpdateNotification::kProgramIdFieldNumber;
#endif  // !_MSC_VER

FactoryUpdateNotification::FactoryUpdateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactoryUpdateNotification::InitAsDefaultInstance() {
  description_ = const_cast< ::bnet::protocol::game_master::GameFactoryDescription*>(&::bnet::protocol::game_master::GameFactoryDescription::default_instance());
}

FactoryUpdateNotification::FactoryUpdateNotification(const FactoryUpdateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactoryUpdateNotification::SharedCtor() {
  _cached_size_ = 0;
  op_ = 1;
  description_ = NULL;
  program_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactoryUpdateNotification::~FactoryUpdateNotification() {
  SharedDtor();
}

void FactoryUpdateNotification::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

void FactoryUpdateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactoryUpdateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryUpdateNotification_descriptor_;
}

const FactoryUpdateNotification& FactoryUpdateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

FactoryUpdateNotification* FactoryUpdateNotification::default_instance_ = NULL;

FactoryUpdateNotification* FactoryUpdateNotification::New() const {
  return new FactoryUpdateNotification;
}

void FactoryUpdateNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 1;
    if (has_description()) {
      if (description_ != NULL) description_->::bnet::protocol::game_master::GameFactoryDescription::Clear();
    }
    program_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactoryUpdateNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.game_master.FactoryUpdateNotification.Operation op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bnet::protocol::game_master::FactoryUpdateNotification_Operation_IsValid(value)) {
            set_op(static_cast< ::bnet::protocol::game_master::FactoryUpdateNotification_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }
      
      // required .bnet.protocol.game_master.GameFactoryDescription description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_program_id;
        break;
      }
      
      // optional fixed32 program_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_program_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_id_)));
          set_has_program_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactoryUpdateNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.game_master.FactoryUpdateNotification.Operation op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }
  
  // required .bnet.protocol.game_master.GameFactoryDescription description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->description(), output);
  }
  
  // optional fixed32 program_id = 3;
  if (has_program_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->program_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactoryUpdateNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.game_master.FactoryUpdateNotification.Operation op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }
  
  // required .bnet.protocol.game_master.GameFactoryDescription description = 2;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->description(), target);
  }
  
  // optional fixed32 program_id = 3;
  if (has_program_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->program_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactoryUpdateNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.game_master.FactoryUpdateNotification.Operation op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }
    
    // required .bnet.protocol.game_master.GameFactoryDescription description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }
    
    // optional fixed32 program_id = 3;
    if (has_program_id()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactoryUpdateNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactoryUpdateNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactoryUpdateNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactoryUpdateNotification::MergeFrom(const FactoryUpdateNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_description()) {
      mutable_description()->::bnet::protocol::game_master::GameFactoryDescription::MergeFrom(from.description());
    }
    if (from.has_program_id()) {
      set_program_id(from.program_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactoryUpdateNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactoryUpdateNotification::CopyFrom(const FactoryUpdateNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactoryUpdateNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  return true;
}

void FactoryUpdateNotification::Swap(FactoryUpdateNotification* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(description_, other->description_);
    std::swap(program_id_, other->program_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactoryUpdateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactoryUpdateNotification_descriptor_;
  metadata.reflection = FactoryUpdateNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameFoundNotification::kRequestIdFieldNumber;
const int GameFoundNotification::kErrorCodeFieldNumber;
const int GameFoundNotification::kGameHandleFieldNumber;
const int GameFoundNotification::kConnectInfoFieldNumber;
#endif  // !_MSC_VER

GameFoundNotification::GameFoundNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameFoundNotification::InitAsDefaultInstance() {
  game_handle_ = const_cast< ::bnet::protocol::game_master::GameHandle*>(&::bnet::protocol::game_master::GameHandle::default_instance());
}

GameFoundNotification::GameFoundNotification(const GameFoundNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameFoundNotification::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  error_code_ = 0u;
  game_handle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameFoundNotification::~GameFoundNotification() {
  SharedDtor();
}

void GameFoundNotification::SharedDtor() {
  if (this != default_instance_) {
    delete game_handle_;
  }
}

void GameFoundNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameFoundNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameFoundNotification_descriptor_;
}

const GameFoundNotification& GameFoundNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();  return *default_instance_;
}

GameFoundNotification* GameFoundNotification::default_instance_ = NULL;

GameFoundNotification* GameFoundNotification::New() const {
  return new GameFoundNotification;
}

void GameFoundNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    error_code_ = 0u;
    if (has_game_handle()) {
      if (game_handle_ != NULL) game_handle_->::bnet::protocol::game_master::GameHandle::Clear();
    }
  }
  connect_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameFoundNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // optional uint32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_handle;
        break;
      }
      
      // optional .bnet.protocol.game_master.GameHandle game_handle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_handle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_connect_info;
        break;
      }
      
      // repeated .bnet.protocol.game_master.ConnectInfo connect_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connect_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_connect_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameFoundNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }
  
  // optional uint32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->error_code(), output);
  }
  
  // optional .bnet.protocol.game_master.GameHandle game_handle = 3;
  if (has_game_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->game_handle(), output);
  }
  
  // repeated .bnet.protocol.game_master.ConnectInfo connect_info = 4;
  for (int i = 0; i < this->connect_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->connect_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameFoundNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }
  
  // optional uint32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->error_code(), target);
  }
  
  // optional .bnet.protocol.game_master.GameHandle game_handle = 3;
  if (has_game_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->game_handle(), target);
  }
  
  // repeated .bnet.protocol.game_master.ConnectInfo connect_info = 4;
  for (int i = 0; i < this->connect_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->connect_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameFoundNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }
    
    // optional uint32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }
    
    // optional .bnet.protocol.game_master.GameHandle game_handle = 3;
    if (has_game_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_handle());
    }
    
  }
  // repeated .bnet.protocol.game_master.ConnectInfo connect_info = 4;
  total_size += 1 * this->connect_info_size();
  for (int i = 0; i < this->connect_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connect_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameFoundNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameFoundNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameFoundNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameFoundNotification::MergeFrom(const GameFoundNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  connect_info_.MergeFrom(from.connect_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_game_handle()) {
      mutable_game_handle()->::bnet::protocol::game_master::GameHandle::MergeFrom(from.game_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameFoundNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFoundNotification::CopyFrom(const GameFoundNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFoundNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_game_handle()) {
    if (!this->game_handle().IsInitialized()) return false;
  }
  for (int i = 0; i < connect_info_size(); i++) {
    if (!this->connect_info(i).IsInitialized()) return false;
  }
  return true;
}

void GameFoundNotification::Swap(GameFoundNotification* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(game_handle_, other->game_handle_);
    connect_info_.Swap(&other->connect_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameFoundNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameFoundNotification_descriptor_;
  metadata.reflection = GameFoundNotification_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_master
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
