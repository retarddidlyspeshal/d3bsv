// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/game_master/game_master_types.proto

#ifndef PROTOBUF_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto__INCLUDED
#define PROTOBUF_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/protocol/attribute.pb.h"
#include "lib/protocol/entity.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace game_master {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
void protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
void protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();

class Player;
class ConnectInfo;
class GameStatsBucket;
class GameFactoryDescription;
class GameHandle;

enum Player_Type {
  Player_Type_TOON = 0,
  Player_Type_COMPUTER = 1
};
bool Player_Type_IsValid(int value);
const Player_Type Player_Type_Type_MIN = Player_Type_TOON;
const Player_Type Player_Type_Type_MAX = Player_Type_COMPUTER;
const int Player_Type_Type_ARRAYSIZE = Player_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Player_Type_descriptor();
inline const ::std::string& Player_Type_Name(Player_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Player_Type_descriptor(), value);
}
inline bool Player_Type_Parse(
    const ::std::string& name, Player_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Player_Type>(
    Player_Type_descriptor(), name, value);
}
// ===================================================================

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();
  
  Player(const Player& from);
  
  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();
  
  void Swap(Player* other);
  
  // implements Message ----------------------------------------------
  
  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Player_Type Type;
  static const Type TOON = Player_Type_TOON;
  static const Type COMPUTER = Player_Type_COMPUTER;
  static inline bool Type_IsValid(int value) {
    return Player_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Player_Type_Type_MIN;
  static const Type Type_MAX =
    Player_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Player_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Player_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Player_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Player_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.game_master.Player.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::bnet::protocol::game_master::Player_Type type() const;
  inline void set_type(::bnet::protocol::game_master::Player_Type value);
  
  // optional .bnet.protocol.EntityId toon_id = 2;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& toon_id() const;
  inline ::bnet::protocol::EntityId* mutable_toon_id();
  inline ::bnet::protocol::EntityId* release_toon_id();
  
  // optional .bnet.protocol.EntityId game_account_id = 3;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& game_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_game_account_id();
  inline ::bnet::protocol::EntityId* release_game_account_id();
  
  // optional .bnet.protocol.EntityId bnet_account_id = 4;
  inline bool has_bnet_account_id() const;
  inline void clear_bnet_account_id();
  static const int kBnetAccountIdFieldNumber = 4;
  inline const ::bnet::protocol::EntityId& bnet_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account_id();
  inline ::bnet::protocol::EntityId* release_bnet_account_id();
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.Player)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_bnet_account_id();
  inline void clear_has_bnet_account_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* toon_id_;
  ::bnet::protocol::EntityId* game_account_id_;
  ::bnet::protocol::EntityId* bnet_account_id_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class ConnectInfo : public ::google::protobuf::Message {
 public:
  ConnectInfo();
  virtual ~ConnectInfo();
  
  ConnectInfo(const ConnectInfo& from);
  
  inline ConnectInfo& operator=(const ConnectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectInfo& default_instance();
  
  void Swap(ConnectInfo* other);
  
  // implements Message ----------------------------------------------
  
  ConnectInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectInfo& from);
  void MergeFrom(const ConnectInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId toon_id = 1;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& toon_id() const;
  inline ::bnet::protocol::EntityId* mutable_toon_id();
  inline ::bnet::protocol::EntityId* release_toon_id();
  
  // required string host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  
  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // optional bytes token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.ConnectInfo)
 private:
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_token();
  inline void clear_has_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* toon_id_;
  ::std::string* host_;
  ::std::string* token_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static ConnectInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameStatsBucket : public ::google::protobuf::Message {
 public:
  GameStatsBucket();
  virtual ~GameStatsBucket();
  
  GameStatsBucket(const GameStatsBucket& from);
  
  inline GameStatsBucket& operator=(const GameStatsBucket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStatsBucket& default_instance();
  
  void Swap(GameStatsBucket* other);
  
  // implements Message ----------------------------------------------
  
  GameStatsBucket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameStatsBucket& from);
  void MergeFrom(const GameStatsBucket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float bucket_min = 1;
  inline bool has_bucket_min() const;
  inline void clear_bucket_min();
  static const int kBucketMinFieldNumber = 1;
  inline float bucket_min() const;
  inline void set_bucket_min(float value);
  
  // optional float bucket_max = 2;
  inline bool has_bucket_max() const;
  inline void clear_bucket_max();
  static const int kBucketMaxFieldNumber = 2;
  inline float bucket_max() const;
  inline void set_bucket_max(float value);
  
  // optional uint32 wait_milliseconds = 3;
  inline bool has_wait_milliseconds() const;
  inline void clear_wait_milliseconds();
  static const int kWaitMillisecondsFieldNumber = 3;
  inline ::google::protobuf::uint32 wait_milliseconds() const;
  inline void set_wait_milliseconds(::google::protobuf::uint32 value);
  
  // optional uint32 games_per_hour = 4;
  inline bool has_games_per_hour() const;
  inline void clear_games_per_hour();
  static const int kGamesPerHourFieldNumber = 4;
  inline ::google::protobuf::uint32 games_per_hour() const;
  inline void set_games_per_hour(::google::protobuf::uint32 value);
  
  // optional uint32 active_games = 5;
  inline bool has_active_games() const;
  inline void clear_active_games();
  static const int kActiveGamesFieldNumber = 5;
  inline ::google::protobuf::uint32 active_games() const;
  inline void set_active_games(::google::protobuf::uint32 value);
  
  // optional uint32 active_players = 6;
  inline bool has_active_players() const;
  inline void clear_active_players();
  static const int kActivePlayersFieldNumber = 6;
  inline ::google::protobuf::uint32 active_players() const;
  inline void set_active_players(::google::protobuf::uint32 value);
  
  // optional uint32 forming_games = 7;
  inline bool has_forming_games() const;
  inline void clear_forming_games();
  static const int kFormingGamesFieldNumber = 7;
  inline ::google::protobuf::uint32 forming_games() const;
  inline void set_forming_games(::google::protobuf::uint32 value);
  
  // optional uint32 waiting_players = 8;
  inline bool has_waiting_players() const;
  inline void clear_waiting_players();
  static const int kWaitingPlayersFieldNumber = 8;
  inline ::google::protobuf::uint32 waiting_players() const;
  inline void set_waiting_players(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.GameStatsBucket)
 private:
  inline void set_has_bucket_min();
  inline void clear_has_bucket_min();
  inline void set_has_bucket_max();
  inline void clear_has_bucket_max();
  inline void set_has_wait_milliseconds();
  inline void clear_has_wait_milliseconds();
  inline void set_has_games_per_hour();
  inline void clear_has_games_per_hour();
  inline void set_has_active_games();
  inline void clear_has_active_games();
  inline void set_has_active_players();
  inline void clear_has_active_players();
  inline void set_has_forming_games();
  inline void clear_has_forming_games();
  inline void set_has_waiting_players();
  inline void clear_has_waiting_players();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float bucket_min_;
  float bucket_max_;
  ::google::protobuf::uint32 wait_milliseconds_;
  ::google::protobuf::uint32 games_per_hour_;
  ::google::protobuf::uint32 active_games_;
  ::google::protobuf::uint32 active_players_;
  ::google::protobuf::uint32 forming_games_;
  ::google::protobuf::uint32 waiting_players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GameStatsBucket* default_instance_;
};
// -------------------------------------------------------------------

class GameFactoryDescription : public ::google::protobuf::Message {
 public:
  GameFactoryDescription();
  virtual ~GameFactoryDescription();
  
  GameFactoryDescription(const GameFactoryDescription& from);
  
  inline GameFactoryDescription& operator=(const GameFactoryDescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameFactoryDescription& default_instance();
  
  void Swap(GameFactoryDescription* other);
  
  // implements Message ----------------------------------------------
  
  GameFactoryDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameFactoryDescription& from);
  void MergeFrom(const GameFactoryDescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 4;
  inline int stats_bucket_size() const;
  inline void clear_stats_bucket();
  static const int kStatsBucketFieldNumber = 4;
  inline const ::bnet::protocol::game_master::GameStatsBucket& stats_bucket(int index) const;
  inline ::bnet::protocol::game_master::GameStatsBucket* mutable_stats_bucket(int index);
  inline ::bnet::protocol::game_master::GameStatsBucket* add_stats_bucket();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::game_master::GameStatsBucket >&
      stats_bucket() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::game_master::GameStatsBucket >*
      mutable_stats_bucket();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.GameFactoryDescription)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::game_master::GameStatsBucket > stats_bucket_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GameFactoryDescription* default_instance_;
};
// -------------------------------------------------------------------

class GameHandle : public ::google::protobuf::Message {
 public:
  GameHandle();
  virtual ~GameHandle();
  
  GameHandle(const GameHandle& from);
  
  inline GameHandle& operator=(const GameHandle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameHandle& default_instance();
  
  void Swap(GameHandle* other);
  
  // implements Message ----------------------------------------------
  
  GameHandle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameHandle& from);
  void MergeFrom(const GameHandle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 factory_id = 1;
  inline bool has_factory_id() const;
  inline void clear_factory_id();
  static const int kFactoryIdFieldNumber = 1;
  inline ::google::protobuf::uint64 factory_id() const;
  inline void set_factory_id(::google::protobuf::uint64 value);
  
  // required .bnet.protocol.EntityId game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& game_id() const;
  inline ::bnet::protocol::EntityId* mutable_game_id();
  inline ::bnet::protocol::EntityId* release_game_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.GameHandle)
 private:
  inline void set_has_factory_id();
  inline void clear_has_factory_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 factory_id_;
  ::bnet::protocol::EntityId* game_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GameHandle* default_instance_;
};
// ===================================================================


// ===================================================================

// Player

// optional .bnet.protocol.game_master.Player.Type type = 1;
inline bool Player::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::bnet::protocol::game_master::Player_Type Player::type() const {
  return static_cast< ::bnet::protocol::game_master::Player_Type >(type_);
}
inline void Player::set_type(::bnet::protocol::game_master::Player_Type value) {
  GOOGLE_DCHECK(::bnet::protocol::game_master::Player_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .bnet.protocol.EntityId toon_id = 2;
inline bool Player::has_toon_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_toon_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::bnet::protocol::EntityId& Player::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::bnet::protocol::EntityId* Player::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::bnet::protocol::EntityId;
  return toon_id_;
}
inline ::bnet::protocol::EntityId* Player::release_toon_id() {
  clear_has_toon_id();
  ::bnet::protocol::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId game_account_id = 3;
inline bool Player::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::bnet::protocol::EntityId& Player::game_account_id() const {
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::bnet::protocol::EntityId* Player::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::bnet::protocol::EntityId;
  return game_account_id_;
}
inline ::bnet::protocol::EntityId* Player::release_game_account_id() {
  clear_has_game_account_id();
  ::bnet::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId bnet_account_id = 4;
inline bool Player::has_bnet_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_bnet_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_bnet_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_bnet_account_id() {
  if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account_id();
}
inline const ::bnet::protocol::EntityId& Player::bnet_account_id() const {
  return bnet_account_id_ != NULL ? *bnet_account_id_ : *default_instance_->bnet_account_id_;
}
inline ::bnet::protocol::EntityId* Player::mutable_bnet_account_id() {
  set_has_bnet_account_id();
  if (bnet_account_id_ == NULL) bnet_account_id_ = new ::bnet::protocol::EntityId;
  return bnet_account_id_;
}
inline ::bnet::protocol::EntityId* Player::release_bnet_account_id() {
  clear_has_bnet_account_id();
  ::bnet::protocol::EntityId* temp = bnet_account_id_;
  bnet_account_id_ = NULL;
  return temp;
}

// repeated .bnet.protocol.attribute.Attribute attribute = 5;
inline int Player::attribute_size() const {
  return attribute_.size();
}
inline void Player::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& Player::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* Player::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* Player::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
Player::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
Player::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// ConnectInfo

// required .bnet.protocol.EntityId toon_id = 1;
inline bool ConnectInfo::has_toon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectInfo::set_has_toon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectInfo::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectInfo::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::bnet::protocol::EntityId& ConnectInfo::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::bnet::protocol::EntityId* ConnectInfo::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::bnet::protocol::EntityId;
  return toon_id_;
}
inline ::bnet::protocol::EntityId* ConnectInfo::release_toon_id() {
  clear_has_toon_id();
  ::bnet::protocol::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// required string host = 2;
inline bool ConnectInfo::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectInfo::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectInfo::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectInfo::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& ConnectInfo::host() const {
  return *host_;
}
inline void ConnectInfo::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void ConnectInfo::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void ConnectInfo::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConnectInfo::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* ConnectInfo::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 port = 3;
inline bool ConnectInfo::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectInfo::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ConnectInfo::port() const {
  return port_;
}
inline void ConnectInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional bytes token = 4;
inline bool ConnectInfo::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectInfo::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ConnectInfo::token() const {
  return *token_;
}
inline void ConnectInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void ConnectInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void ConnectInfo::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConnectInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* ConnectInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bnet.protocol.attribute.Attribute attribute = 5;
inline int ConnectInfo::attribute_size() const {
  return attribute_.size();
}
inline void ConnectInfo::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& ConnectInfo::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* ConnectInfo::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* ConnectInfo::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
ConnectInfo::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
ConnectInfo::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// GameStatsBucket

// optional float bucket_min = 1;
inline bool GameStatsBucket::has_bucket_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStatsBucket::set_has_bucket_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStatsBucket::clear_has_bucket_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStatsBucket::clear_bucket_min() {
  bucket_min_ = 0;
  clear_has_bucket_min();
}
inline float GameStatsBucket::bucket_min() const {
  return bucket_min_;
}
inline void GameStatsBucket::set_bucket_min(float value) {
  set_has_bucket_min();
  bucket_min_ = value;
}

// optional float bucket_max = 2;
inline bool GameStatsBucket::has_bucket_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStatsBucket::set_has_bucket_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStatsBucket::clear_has_bucket_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStatsBucket::clear_bucket_max() {
  bucket_max_ = 0;
  clear_has_bucket_max();
}
inline float GameStatsBucket::bucket_max() const {
  return bucket_max_;
}
inline void GameStatsBucket::set_bucket_max(float value) {
  set_has_bucket_max();
  bucket_max_ = value;
}

// optional uint32 wait_milliseconds = 3;
inline bool GameStatsBucket::has_wait_milliseconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameStatsBucket::set_has_wait_milliseconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameStatsBucket::clear_has_wait_milliseconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameStatsBucket::clear_wait_milliseconds() {
  wait_milliseconds_ = 0u;
  clear_has_wait_milliseconds();
}
inline ::google::protobuf::uint32 GameStatsBucket::wait_milliseconds() const {
  return wait_milliseconds_;
}
inline void GameStatsBucket::set_wait_milliseconds(::google::protobuf::uint32 value) {
  set_has_wait_milliseconds();
  wait_milliseconds_ = value;
}

// optional uint32 games_per_hour = 4;
inline bool GameStatsBucket::has_games_per_hour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameStatsBucket::set_has_games_per_hour() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameStatsBucket::clear_has_games_per_hour() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameStatsBucket::clear_games_per_hour() {
  games_per_hour_ = 0u;
  clear_has_games_per_hour();
}
inline ::google::protobuf::uint32 GameStatsBucket::games_per_hour() const {
  return games_per_hour_;
}
inline void GameStatsBucket::set_games_per_hour(::google::protobuf::uint32 value) {
  set_has_games_per_hour();
  games_per_hour_ = value;
}

// optional uint32 active_games = 5;
inline bool GameStatsBucket::has_active_games() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameStatsBucket::set_has_active_games() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameStatsBucket::clear_has_active_games() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameStatsBucket::clear_active_games() {
  active_games_ = 0u;
  clear_has_active_games();
}
inline ::google::protobuf::uint32 GameStatsBucket::active_games() const {
  return active_games_;
}
inline void GameStatsBucket::set_active_games(::google::protobuf::uint32 value) {
  set_has_active_games();
  active_games_ = value;
}

// optional uint32 active_players = 6;
inline bool GameStatsBucket::has_active_players() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameStatsBucket::set_has_active_players() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameStatsBucket::clear_has_active_players() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameStatsBucket::clear_active_players() {
  active_players_ = 0u;
  clear_has_active_players();
}
inline ::google::protobuf::uint32 GameStatsBucket::active_players() const {
  return active_players_;
}
inline void GameStatsBucket::set_active_players(::google::protobuf::uint32 value) {
  set_has_active_players();
  active_players_ = value;
}

// optional uint32 forming_games = 7;
inline bool GameStatsBucket::has_forming_games() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameStatsBucket::set_has_forming_games() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameStatsBucket::clear_has_forming_games() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameStatsBucket::clear_forming_games() {
  forming_games_ = 0u;
  clear_has_forming_games();
}
inline ::google::protobuf::uint32 GameStatsBucket::forming_games() const {
  return forming_games_;
}
inline void GameStatsBucket::set_forming_games(::google::protobuf::uint32 value) {
  set_has_forming_games();
  forming_games_ = value;
}

// optional uint32 waiting_players = 8;
inline bool GameStatsBucket::has_waiting_players() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameStatsBucket::set_has_waiting_players() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameStatsBucket::clear_has_waiting_players() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameStatsBucket::clear_waiting_players() {
  waiting_players_ = 0u;
  clear_has_waiting_players();
}
inline ::google::protobuf::uint32 GameStatsBucket::waiting_players() const {
  return waiting_players_;
}
inline void GameStatsBucket::set_waiting_players(::google::protobuf::uint32 value) {
  set_has_waiting_players();
  waiting_players_ = value;
}

// -------------------------------------------------------------------

// GameFactoryDescription

// required fixed64 id = 1;
inline bool GameFactoryDescription::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameFactoryDescription::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameFactoryDescription::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameFactoryDescription::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 GameFactoryDescription::id() const {
  return id_;
}
inline void GameFactoryDescription::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool GameFactoryDescription::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameFactoryDescription::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameFactoryDescription::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameFactoryDescription::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GameFactoryDescription::name() const {
  return *name_;
}
inline void GameFactoryDescription::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameFactoryDescription::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameFactoryDescription::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameFactoryDescription::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GameFactoryDescription::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bnet.protocol.attribute.Attribute attribute = 3;
inline int GameFactoryDescription::attribute_size() const {
  return attribute_.size();
}
inline void GameFactoryDescription::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& GameFactoryDescription::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* GameFactoryDescription::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* GameFactoryDescription::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
GameFactoryDescription::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
GameFactoryDescription::mutable_attribute() {
  return &attribute_;
}

// repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 4;
inline int GameFactoryDescription::stats_bucket_size() const {
  return stats_bucket_.size();
}
inline void GameFactoryDescription::clear_stats_bucket() {
  stats_bucket_.Clear();
}
inline const ::bnet::protocol::game_master::GameStatsBucket& GameFactoryDescription::stats_bucket(int index) const {
  return stats_bucket_.Get(index);
}
inline ::bnet::protocol::game_master::GameStatsBucket* GameFactoryDescription::mutable_stats_bucket(int index) {
  return stats_bucket_.Mutable(index);
}
inline ::bnet::protocol::game_master::GameStatsBucket* GameFactoryDescription::add_stats_bucket() {
  return stats_bucket_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::game_master::GameStatsBucket >&
GameFactoryDescription::stats_bucket() const {
  return stats_bucket_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::game_master::GameStatsBucket >*
GameFactoryDescription::mutable_stats_bucket() {
  return &stats_bucket_;
}

// -------------------------------------------------------------------

// GameHandle

// required fixed64 factory_id = 1;
inline bool GameHandle::has_factory_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameHandle::set_has_factory_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameHandle::clear_has_factory_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameHandle::clear_factory_id() {
  factory_id_ = GOOGLE_ULONGLONG(0);
  clear_has_factory_id();
}
inline ::google::protobuf::uint64 GameHandle::factory_id() const {
  return factory_id_;
}
inline void GameHandle::set_factory_id(::google::protobuf::uint64 value) {
  set_has_factory_id();
  factory_id_ = value;
}

// required .bnet.protocol.EntityId game_id = 2;
inline bool GameHandle::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameHandle::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameHandle::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameHandle::clear_game_id() {
  if (game_id_ != NULL) game_id_->::bnet::protocol::EntityId::Clear();
  clear_has_game_id();
}
inline const ::bnet::protocol::EntityId& GameHandle::game_id() const {
  return game_id_ != NULL ? *game_id_ : *default_instance_->game_id_;
}
inline ::bnet::protocol::EntityId* GameHandle::mutable_game_id() {
  set_has_game_id();
  if (game_id_ == NULL) game_id_ = new ::bnet::protocol::EntityId;
  return game_id_;
}
inline ::bnet::protocol::EntityId* GameHandle::release_game_id() {
  clear_has_game_id();
  ::bnet::protocol::EntityId* temp = game_id_;
  game_id_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_master
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bnet::protocol::game_master::Player_Type>() {
  return ::bnet::protocol::game_master::Player_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fgame_5fmaster_2fgame_5fmaster_5ftypes_2eproto__INCLUDED
