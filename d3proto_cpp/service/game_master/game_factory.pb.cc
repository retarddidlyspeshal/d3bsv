// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/game_master/game_factory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace game_master {

namespace {

const ::google::protobuf::Descriptor* GameProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameProperties_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5ffactory_2eproto() {
  protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5ffactory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/game_master/game_factory.proto");
  GOOGLE_CHECK(file != NULL);
  GameProperties_descriptor_ = file->message_type(0);
  static const int GameProperties_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperties, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperties, create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperties, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperties, program_id_),
  };
  GameProperties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameProperties_descriptor_,
      GameProperties::default_instance_,
      GameProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameProperties));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fgame_5fmaster_2fgame_5ffactory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameProperties_descriptor_, &GameProperties::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5ffactory_2eproto() {
  delete GameProperties::default_instance_;
  delete GameProperties_reflection_;
}

void protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5ffactory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&service/game_master/game_factory.proto"
    "\022\031bnet.protocol.game_master\032\034lib/protoco"
    "l/attribute.proto\032\031lib/protocol/entity.p"
    "roto\"|\n\016GameProperties\0228\n\006filter\030\001 \001(\0132("
    ".bnet.protocol.attribute.AttributeFilter"
    "\022\016\n\006create\030\002 \001(\010\022\014\n\004open\030\003 \001(\010\022\022\n\nprogra"
    "m_id\030\004 \001(\007", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/game_master/game_factory.proto", &protobuf_RegisterTypes);
  GameProperties::default_instance_ = new GameProperties();
  GameProperties::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fgame_5fmaster_2fgame_5ffactory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fgame_5fmaster_2fgame_5ffactory_2eproto {
  StaticDescriptorInitializer_service_2fgame_5fmaster_2fgame_5ffactory_2eproto() {
    protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5ffactory_2eproto();
  }
} static_descriptor_initializer_service_2fgame_5fmaster_2fgame_5ffactory_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GameProperties::kFilterFieldNumber;
const int GameProperties::kCreateFieldNumber;
const int GameProperties::kOpenFieldNumber;
const int GameProperties::kProgramIdFieldNumber;
#endif  // !_MSC_VER

GameProperties::GameProperties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameProperties::InitAsDefaultInstance() {
  filter_ = const_cast< ::bnet::protocol::attribute::AttributeFilter*>(&::bnet::protocol::attribute::AttributeFilter::default_instance());
}

GameProperties::GameProperties(const GameProperties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameProperties::SharedCtor() {
  _cached_size_ = 0;
  filter_ = NULL;
  create_ = false;
  open_ = false;
  program_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameProperties::~GameProperties() {
  SharedDtor();
}

void GameProperties::SharedDtor() {
  if (this != default_instance_) {
    delete filter_;
  }
}

void GameProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameProperties_descriptor_;
}

const GameProperties& GameProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5ffactory_2eproto();  return *default_instance_;
}

GameProperties* GameProperties::default_instance_ = NULL;

GameProperties* GameProperties::New() const {
  return new GameProperties;
}

void GameProperties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filter()) {
      if (filter_ != NULL) filter_->::bnet::protocol::attribute::AttributeFilter::Clear();
    }
    create_ = false;
    open_ = false;
    program_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.attribute.AttributeFilter filter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create;
        break;
      }
      
      // optional bool create = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_)));
          set_has_create();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }
      
      // optional bool open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_program_id;
        break;
      }
      
      // optional fixed32 program_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_program_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_id_)));
          set_has_program_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.attribute.AttributeFilter filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filter(), output);
  }
  
  // optional bool create = 2;
  if (has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->create(), output);
  }
  
  // optional bool open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }
  
  // optional fixed32 program_id = 4;
  if (has_program_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->program_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.attribute.AttributeFilter filter = 1;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filter(), target);
  }
  
  // optional bool create = 2;
  if (has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->create(), target);
  }
  
  // optional bool open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }
  
  // optional fixed32 program_id = 4;
  if (has_program_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->program_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameProperties::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.attribute.AttributeFilter filter = 1;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
    // optional bool create = 2;
    if (has_create()) {
      total_size += 1 + 1;
    }
    
    // optional bool open = 3;
    if (has_open()) {
      total_size += 1 + 1;
    }
    
    // optional fixed32 program_id = 4;
    if (has_program_id()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameProperties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameProperties::MergeFrom(const GameProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      mutable_filter()->::bnet::protocol::attribute::AttributeFilter::MergeFrom(from.filter());
    }
    if (from.has_create()) {
      set_create(from.create());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_program_id()) {
      set_program_id(from.program_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameProperties::CopyFrom(const GameProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameProperties::IsInitialized() const {
  
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void GameProperties::Swap(GameProperties* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    std::swap(create_, other->create_);
    std::swap(open_, other->open_);
    std::swap(program_id_, other->program_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameProperties_descriptor_;
  metadata.reflection = GameProperties_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_master
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
