// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/game_utilities/game_utilities.proto

#ifndef PROTOBUF_service_2fgame_5futilities_2fgame_5futilities_2eproto__INCLUDED
#define PROTOBUF_service_2fgame_5futilities_2fgame_5futilities_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "service/game_master/game_master.pb.h"
#include "service/server_pool/server_pool.pb.h"
#include "lib/protocol/attribute.pb.h"
#include "lib/protocol/entity.pb.h"
#include "lib/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace game_utilities {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();

class ClientRequest;
class ClientResponse;
class CreateToonRequest;
class CreateToonResponse;
class DeleteToonRequest;
class TransferToonRequest;
class TransferToonRequest_Account;
class SelectToonRequest;
class PresenceChannelCreatedRequest;
class PlayerVariablesRequest;
class GameVariablesRequest;
class VariablesResponse;

// ===================================================================

class ClientRequest : public ::google::protobuf::Message {
 public:
  ClientRequest();
  virtual ~ClientRequest();
  
  ClientRequest(const ClientRequest& from);
  
  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();
  
  void Swap(ClientRequest* other);
  
  // implements Message ----------------------------------------------
  
  ClientRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // optional .bnet.protocol.ProcessId host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline const ::bnet::protocol::ProcessId& host() const;
  inline ::bnet::protocol::ProcessId* mutable_host();
  inline ::bnet::protocol::ProcessId* release_host();
  
  // optional .bnet.protocol.EntityId bnet_account_id = 3;
  inline bool has_bnet_account_id() const;
  inline void clear_bnet_account_id();
  static const int kBnetAccountIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& bnet_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account_id();
  inline ::bnet::protocol::EntityId* release_bnet_account_id();
  
  // optional .bnet.protocol.EntityId game_account_id = 4;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 4;
  inline const ::bnet::protocol::EntityId& game_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_game_account_id();
  inline ::bnet::protocol::EntityId* release_game_account_id();
  
  // optional .bnet.protocol.EntityId toon_id = 5;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 5;
  inline const ::bnet::protocol::EntityId& toon_id() const;
  inline ::bnet::protocol::EntityId* mutable_toon_id();
  inline ::bnet::protocol::EntityId* release_toon_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.ClientRequest)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_bnet_account_id();
  inline void clear_has_bnet_account_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  ::bnet::protocol::ProcessId* host_;
  ::bnet::protocol::EntityId* bnet_account_id_;
  ::bnet::protocol::EntityId* game_account_id_;
  ::bnet::protocol::EntityId* toon_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static ClientRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClientResponse : public ::google::protobuf::Message {
 public:
  ClientResponse();
  virtual ~ClientResponse();
  
  ClientResponse(const ClientResponse& from);
  
  inline ClientResponse& operator=(const ClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientResponse& default_instance();
  
  void Swap(ClientResponse* other);
  
  // implements Message ----------------------------------------------
  
  ClientResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientResponse& from);
  void MergeFrom(const ClientResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.ClientResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static ClientResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateToonRequest : public ::google::protobuf::Message {
 public:
  CreateToonRequest();
  virtual ~CreateToonRequest();
  
  CreateToonRequest(const CreateToonRequest& from);
  
  inline CreateToonRequest& operator=(const CreateToonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateToonRequest& default_instance();
  
  void Swap(CreateToonRequest* other);
  
  // implements Message ----------------------------------------------
  
  CreateToonRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateToonRequest& from);
  void MergeFrom(const CreateToonRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  inline bool has_bnet_account_id() const;
  inline void clear_bnet_account_id();
  static const int kBnetAccountIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& bnet_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account_id();
  inline ::bnet::protocol::EntityId* release_bnet_account_id();
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& game_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_game_account_id();
  inline ::bnet::protocol::EntityId* release_game_account_id();
  
  // required .bnet.protocol.EntityId toon_id = 3;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& toon_id() const;
  inline ::bnet::protocol::EntityId* mutable_toon_id();
  inline ::bnet::protocol::EntityId* release_toon_id();
  
  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // optional .bnet.protocol.ProcessId host = 6;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 6;
  inline const ::bnet::protocol::ProcessId& host() const;
  inline ::bnet::protocol::ProcessId* mutable_host();
  inline ::bnet::protocol::ProcessId* release_host();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.CreateToonRequest)
 private:
  inline void set_has_bnet_account_id();
  inline void clear_has_bnet_account_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_host();
  inline void clear_has_host();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* bnet_account_id_;
  ::bnet::protocol::EntityId* game_account_id_;
  ::bnet::protocol::EntityId* toon_id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  ::bnet::protocol::ProcessId* host_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static CreateToonRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateToonResponse : public ::google::protobuf::Message {
 public:
  CreateToonResponse();
  virtual ~CreateToonResponse();
  
  CreateToonResponse(const CreateToonResponse& from);
  
  inline CreateToonResponse& operator=(const CreateToonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateToonResponse& default_instance();
  
  void Swap(CreateToonResponse* other);
  
  // implements Message ----------------------------------------------
  
  CreateToonResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateToonResponse& from);
  void MergeFrom(const CreateToonResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.CreateToonResponse)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static CreateToonResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteToonRequest : public ::google::protobuf::Message {
 public:
  DeleteToonRequest();
  virtual ~DeleteToonRequest();
  
  DeleteToonRequest(const DeleteToonRequest& from);
  
  inline DeleteToonRequest& operator=(const DeleteToonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteToonRequest& default_instance();
  
  void Swap(DeleteToonRequest* other);
  
  // implements Message ----------------------------------------------
  
  DeleteToonRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteToonRequest& from);
  void MergeFrom(const DeleteToonRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId bnet_account_id = 1;
  inline bool has_bnet_account_id() const;
  inline void clear_bnet_account_id();
  static const int kBnetAccountIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& bnet_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account_id();
  inline ::bnet::protocol::EntityId* release_bnet_account_id();
  
  // optional .bnet.protocol.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& game_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_game_account_id();
  inline ::bnet::protocol::EntityId* release_game_account_id();
  
  // required .bnet.protocol.EntityId toon_id = 3;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& toon_id() const;
  inline ::bnet::protocol::EntityId* mutable_toon_id();
  inline ::bnet::protocol::EntityId* release_toon_id();
  
  // optional .bnet.protocol.ProcessId host = 4;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 4;
  inline const ::bnet::protocol::ProcessId& host() const;
  inline ::bnet::protocol::ProcessId* mutable_host();
  inline ::bnet::protocol::ProcessId* release_host();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.DeleteToonRequest)
 private:
  inline void set_has_bnet_account_id();
  inline void clear_has_bnet_account_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_host();
  inline void clear_has_host();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* bnet_account_id_;
  ::bnet::protocol::EntityId* game_account_id_;
  ::bnet::protocol::EntityId* toon_id_;
  ::bnet::protocol::ProcessId* host_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static DeleteToonRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransferToonRequest_Account : public ::google::protobuf::Message {
 public:
  TransferToonRequest_Account();
  virtual ~TransferToonRequest_Account();
  
  TransferToonRequest_Account(const TransferToonRequest_Account& from);
  
  inline TransferToonRequest_Account& operator=(const TransferToonRequest_Account& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferToonRequest_Account& default_instance();
  
  void Swap(TransferToonRequest_Account* other);
  
  // implements Message ----------------------------------------------
  
  TransferToonRequest_Account* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferToonRequest_Account& from);
  void MergeFrom(const TransferToonRequest_Account& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  inline bool has_bnet_account_id() const;
  inline void clear_bnet_account_id();
  static const int kBnetAccountIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& bnet_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account_id();
  inline ::bnet::protocol::EntityId* release_bnet_account_id();
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& game_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_game_account_id();
  inline ::bnet::protocol::EntityId* release_game_account_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.TransferToonRequest.Account)
 private:
  inline void set_has_bnet_account_id();
  inline void clear_has_bnet_account_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* bnet_account_id_;
  ::bnet::protocol::EntityId* game_account_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static TransferToonRequest_Account* default_instance_;
};
// -------------------------------------------------------------------

class TransferToonRequest : public ::google::protobuf::Message {
 public:
  TransferToonRequest();
  virtual ~TransferToonRequest();
  
  TransferToonRequest(const TransferToonRequest& from);
  
  inline TransferToonRequest& operator=(const TransferToonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferToonRequest& default_instance();
  
  void Swap(TransferToonRequest* other);
  
  // implements Message ----------------------------------------------
  
  TransferToonRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferToonRequest& from);
  void MergeFrom(const TransferToonRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TransferToonRequest_Account Account;
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId toon_id = 1;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& toon_id() const;
  inline ::bnet::protocol::EntityId* mutable_toon_id();
  inline ::bnet::protocol::EntityId* release_toon_id();
  
  // optional .bnet.protocol.game_utilities.TransferToonRequest.Account source = 2;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 2;
  inline const ::bnet::protocol::game_utilities::TransferToonRequest_Account& source() const;
  inline ::bnet::protocol::game_utilities::TransferToonRequest_Account* mutable_source();
  inline ::bnet::protocol::game_utilities::TransferToonRequest_Account* release_source();
  
  // optional .bnet.protocol.game_utilities.TransferToonRequest.Account target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::bnet::protocol::game_utilities::TransferToonRequest_Account& target() const;
  inline ::bnet::protocol::game_utilities::TransferToonRequest_Account* mutable_target();
  inline ::bnet::protocol::game_utilities::TransferToonRequest_Account* release_target();
  
  // optional .bnet.protocol.ProcessId host = 4;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 4;
  inline const ::bnet::protocol::ProcessId& host() const;
  inline ::bnet::protocol::ProcessId* mutable_host();
  inline ::bnet::protocol::ProcessId* release_host();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.TransferToonRequest)
 private:
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_host();
  inline void clear_has_host();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* toon_id_;
  ::bnet::protocol::game_utilities::TransferToonRequest_Account* source_;
  ::bnet::protocol::game_utilities::TransferToonRequest_Account* target_;
  ::bnet::protocol::ProcessId* host_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static TransferToonRequest* default_instance_;
};
// -------------------------------------------------------------------

class SelectToonRequest : public ::google::protobuf::Message {
 public:
  SelectToonRequest();
  virtual ~SelectToonRequest();
  
  SelectToonRequest(const SelectToonRequest& from);
  
  inline SelectToonRequest& operator=(const SelectToonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectToonRequest& default_instance();
  
  void Swap(SelectToonRequest* other);
  
  // implements Message ----------------------------------------------
  
  SelectToonRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectToonRequest& from);
  void MergeFrom(const SelectToonRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  inline bool has_bnet_account_id() const;
  inline void clear_bnet_account_id();
  static const int kBnetAccountIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& bnet_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account_id();
  inline ::bnet::protocol::EntityId* release_bnet_account_id();
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& game_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_game_account_id();
  inline ::bnet::protocol::EntityId* release_game_account_id();
  
  // required .bnet.protocol.EntityId toon_id = 3;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& toon_id() const;
  inline ::bnet::protocol::EntityId* mutable_toon_id();
  inline ::bnet::protocol::EntityId* release_toon_id();
  
  // optional .bnet.protocol.ProcessId host = 4;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 4;
  inline const ::bnet::protocol::ProcessId& host() const;
  inline ::bnet::protocol::ProcessId* mutable_host();
  inline ::bnet::protocol::ProcessId* release_host();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.SelectToonRequest)
 private:
  inline void set_has_bnet_account_id();
  inline void clear_has_bnet_account_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_host();
  inline void clear_has_host();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* bnet_account_id_;
  ::bnet::protocol::EntityId* game_account_id_;
  ::bnet::protocol::EntityId* toon_id_;
  ::bnet::protocol::ProcessId* host_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static SelectToonRequest* default_instance_;
};
// -------------------------------------------------------------------

class PresenceChannelCreatedRequest : public ::google::protobuf::Message {
 public:
  PresenceChannelCreatedRequest();
  virtual ~PresenceChannelCreatedRequest();
  
  PresenceChannelCreatedRequest(const PresenceChannelCreatedRequest& from);
  
  inline PresenceChannelCreatedRequest& operator=(const PresenceChannelCreatedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PresenceChannelCreatedRequest& default_instance();
  
  void Swap(PresenceChannelCreatedRequest* other);
  
  // implements Message ----------------------------------------------
  
  PresenceChannelCreatedRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PresenceChannelCreatedRequest& from);
  void MergeFrom(const PresenceChannelCreatedRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& id() const;
  inline ::bnet::protocol::EntityId* mutable_id();
  inline ::bnet::protocol::EntityId* release_id();
  
  // optional .bnet.protocol.EntityId toon_id = 2;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& toon_id() const;
  inline ::bnet::protocol::EntityId* mutable_toon_id();
  inline ::bnet::protocol::EntityId* release_toon_id();
  
  // optional .bnet.protocol.EntityId game_account_id = 3;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& game_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_game_account_id();
  inline ::bnet::protocol::EntityId* release_game_account_id();
  
  // optional .bnet.protocol.EntityId bnet_account_id = 4;
  inline bool has_bnet_account_id() const;
  inline void clear_bnet_account_id();
  static const int kBnetAccountIdFieldNumber = 4;
  inline const ::bnet::protocol::EntityId& bnet_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account_id();
  inline ::bnet::protocol::EntityId* release_bnet_account_id();
  
  // optional .bnet.protocol.ProcessId host = 5;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 5;
  inline const ::bnet::protocol::ProcessId& host() const;
  inline ::bnet::protocol::ProcessId* mutable_host();
  inline ::bnet::protocol::ProcessId* release_host();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.PresenceChannelCreatedRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_bnet_account_id();
  inline void clear_has_bnet_account_id();
  inline void set_has_host();
  inline void clear_has_host();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* id_;
  ::bnet::protocol::EntityId* toon_id_;
  ::bnet::protocol::EntityId* game_account_id_;
  ::bnet::protocol::EntityId* bnet_account_id_;
  ::bnet::protocol::ProcessId* host_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static PresenceChannelCreatedRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlayerVariablesRequest : public ::google::protobuf::Message {
 public:
  PlayerVariablesRequest();
  virtual ~PlayerVariablesRequest();
  
  PlayerVariablesRequest(const PlayerVariablesRequest& from);
  
  inline PlayerVariablesRequest& operator=(const PlayerVariablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerVariablesRequest& default_instance();
  
  void Swap(PlayerVariablesRequest* other);
  
  // implements Message ----------------------------------------------
  
  PlayerVariablesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerVariablesRequest& from);
  void MergeFrom(const PlayerVariablesRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  inline bool has_bnet_account_id() const;
  inline void clear_bnet_account_id();
  static const int kBnetAccountIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& bnet_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account_id();
  inline ::bnet::protocol::EntityId* release_bnet_account_id();
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  inline bool has_game_account_id() const;
  inline void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& game_account_id() const;
  inline ::bnet::protocol::EntityId* mutable_game_account_id();
  inline ::bnet::protocol::EntityId* release_game_account_id();
  
  // required .bnet.protocol.EntityId toon_id = 3;
  inline bool has_toon_id() const;
  inline void clear_toon_id();
  static const int kToonIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& toon_id() const;
  inline ::bnet::protocol::EntityId* mutable_toon_id();
  inline ::bnet::protocol::EntityId* release_toon_id();
  
  // repeated string variable = 4;
  inline int variable_size() const;
  inline void clear_variable();
  static const int kVariableFieldNumber = 4;
  inline const ::std::string& variable(int index) const;
  inline ::std::string* mutable_variable(int index);
  inline void set_variable(int index, const ::std::string& value);
  inline void set_variable(int index, const char* value);
  inline void set_variable(int index, const char* value, size_t size);
  inline ::std::string* add_variable();
  inline void add_variable(const ::std::string& value);
  inline void add_variable(const char* value);
  inline void add_variable(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& variable() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_variable();
  
  // optional .bnet.protocol.ProcessId host = 5;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 5;
  inline const ::bnet::protocol::ProcessId& host() const;
  inline ::bnet::protocol::ProcessId* mutable_host();
  inline ::bnet::protocol::ProcessId* release_host();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.PlayerVariablesRequest)
 private:
  inline void set_has_bnet_account_id();
  inline void clear_has_bnet_account_id();
  inline void set_has_game_account_id();
  inline void clear_has_game_account_id();
  inline void set_has_toon_id();
  inline void clear_has_toon_id();
  inline void set_has_host();
  inline void clear_has_host();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* bnet_account_id_;
  ::bnet::protocol::EntityId* game_account_id_;
  ::bnet::protocol::EntityId* toon_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> variable_;
  ::bnet::protocol::ProcessId* host_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerVariablesRequest* default_instance_;
};
// -------------------------------------------------------------------

class GameVariablesRequest : public ::google::protobuf::Message {
 public:
  GameVariablesRequest();
  virtual ~GameVariablesRequest();
  
  GameVariablesRequest(const GameVariablesRequest& from);
  
  inline GameVariablesRequest& operator=(const GameVariablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameVariablesRequest& default_instance();
  
  void Swap(GameVariablesRequest* other);
  
  // implements Message ----------------------------------------------
  
  GameVariablesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameVariablesRequest& from);
  void MergeFrom(const GameVariablesRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // repeated string variable = 2;
  inline int variable_size() const;
  inline void clear_variable();
  static const int kVariableFieldNumber = 2;
  inline const ::std::string& variable(int index) const;
  inline ::std::string* mutable_variable(int index);
  inline void set_variable(int index, const ::std::string& value);
  inline void set_variable(int index, const char* value);
  inline void set_variable(int index, const char* value, size_t size);
  inline ::std::string* add_variable();
  inline void add_variable(const ::std::string& value);
  inline void add_variable(const char* value);
  inline void add_variable(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& variable() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_variable();
  
  // optional .bnet.protocol.ProcessId host = 3;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 3;
  inline const ::bnet::protocol::ProcessId& host() const;
  inline ::bnet::protocol::ProcessId* mutable_host();
  inline ::bnet::protocol::ProcessId* release_host();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.GameVariablesRequest)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  ::google::protobuf::RepeatedPtrField< ::std::string> variable_;
  ::bnet::protocol::ProcessId* host_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static GameVariablesRequest* default_instance_;
};
// -------------------------------------------------------------------

class VariablesResponse : public ::google::protobuf::Message {
 public:
  VariablesResponse();
  virtual ~VariablesResponse();
  
  VariablesResponse(const VariablesResponse& from);
  
  inline VariablesResponse& operator=(const VariablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VariablesResponse& default_instance();
  
  void Swap(VariablesResponse* other);
  
  // implements Message ----------------------------------------------
  
  VariablesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VariablesResponse& from);
  void MergeFrom(const VariablesResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated float value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.game_utilities.VariablesResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< float > value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  friend void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  
  void InitAsDefaultInstance();
  static VariablesResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientRequest

// repeated .bnet.protocol.attribute.Attribute attribute = 1;
inline int ClientRequest::attribute_size() const {
  return attribute_.size();
}
inline void ClientRequest::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& ClientRequest::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* ClientRequest::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* ClientRequest::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
ClientRequest::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
ClientRequest::mutable_attribute() {
  return &attribute_;
}

// optional .bnet.protocol.ProcessId host = 2;
inline bool ClientRequest::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientRequest::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientRequest::clear_host() {
  if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
  clear_has_host();
}
inline const ::bnet::protocol::ProcessId& ClientRequest::host() const {
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::bnet::protocol::ProcessId* ClientRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::bnet::protocol::ProcessId;
  return host_;
}
inline ::bnet::protocol::ProcessId* ClientRequest::release_host() {
  clear_has_host();
  ::bnet::protocol::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId bnet_account_id = 3;
inline bool ClientRequest::has_bnet_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientRequest::set_has_bnet_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientRequest::clear_has_bnet_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientRequest::clear_bnet_account_id() {
  if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account_id();
}
inline const ::bnet::protocol::EntityId& ClientRequest::bnet_account_id() const {
  return bnet_account_id_ != NULL ? *bnet_account_id_ : *default_instance_->bnet_account_id_;
}
inline ::bnet::protocol::EntityId* ClientRequest::mutable_bnet_account_id() {
  set_has_bnet_account_id();
  if (bnet_account_id_ == NULL) bnet_account_id_ = new ::bnet::protocol::EntityId;
  return bnet_account_id_;
}
inline ::bnet::protocol::EntityId* ClientRequest::release_bnet_account_id() {
  clear_has_bnet_account_id();
  ::bnet::protocol::EntityId* temp = bnet_account_id_;
  bnet_account_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId game_account_id = 4;
inline bool ClientRequest::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientRequest::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientRequest::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientRequest::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::bnet::protocol::EntityId& ClientRequest::game_account_id() const {
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::bnet::protocol::EntityId* ClientRequest::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::bnet::protocol::EntityId;
  return game_account_id_;
}
inline ::bnet::protocol::EntityId* ClientRequest::release_game_account_id() {
  clear_has_game_account_id();
  ::bnet::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId toon_id = 5;
inline bool ClientRequest::has_toon_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientRequest::set_has_toon_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientRequest::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientRequest::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::bnet::protocol::EntityId& ClientRequest::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::bnet::protocol::EntityId* ClientRequest::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::bnet::protocol::EntityId;
  return toon_id_;
}
inline ::bnet::protocol::EntityId* ClientRequest::release_toon_id() {
  clear_has_toon_id();
  ::bnet::protocol::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ClientResponse

// repeated .bnet.protocol.attribute.Attribute attribute = 1;
inline int ClientResponse::attribute_size() const {
  return attribute_.size();
}
inline void ClientResponse::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& ClientResponse::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* ClientResponse::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* ClientResponse::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
ClientResponse::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
ClientResponse::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// CreateToonRequest

// required .bnet.protocol.EntityId bnet_account_id = 1;
inline bool CreateToonRequest::has_bnet_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateToonRequest::set_has_bnet_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateToonRequest::clear_has_bnet_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateToonRequest::clear_bnet_account_id() {
  if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account_id();
}
inline const ::bnet::protocol::EntityId& CreateToonRequest::bnet_account_id() const {
  return bnet_account_id_ != NULL ? *bnet_account_id_ : *default_instance_->bnet_account_id_;
}
inline ::bnet::protocol::EntityId* CreateToonRequest::mutable_bnet_account_id() {
  set_has_bnet_account_id();
  if (bnet_account_id_ == NULL) bnet_account_id_ = new ::bnet::protocol::EntityId;
  return bnet_account_id_;
}
inline ::bnet::protocol::EntityId* CreateToonRequest::release_bnet_account_id() {
  clear_has_bnet_account_id();
  ::bnet::protocol::EntityId* temp = bnet_account_id_;
  bnet_account_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId game_account_id = 2;
inline bool CreateToonRequest::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateToonRequest::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateToonRequest::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateToonRequest::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::bnet::protocol::EntityId& CreateToonRequest::game_account_id() const {
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::bnet::protocol::EntityId* CreateToonRequest::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::bnet::protocol::EntityId;
  return game_account_id_;
}
inline ::bnet::protocol::EntityId* CreateToonRequest::release_game_account_id() {
  clear_has_game_account_id();
  ::bnet::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId toon_id = 3;
inline bool CreateToonRequest::has_toon_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateToonRequest::set_has_toon_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateToonRequest::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateToonRequest::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::bnet::protocol::EntityId& CreateToonRequest::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::bnet::protocol::EntityId* CreateToonRequest::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::bnet::protocol::EntityId;
  return toon_id_;
}
inline ::bnet::protocol::EntityId* CreateToonRequest::release_toon_id() {
  clear_has_toon_id();
  ::bnet::protocol::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// required string name = 4;
inline bool CreateToonRequest::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateToonRequest::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateToonRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateToonRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreateToonRequest::name() const {
  return *name_;
}
inline void CreateToonRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateToonRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateToonRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateToonRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreateToonRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bnet.protocol.attribute.Attribute attribute = 5;
inline int CreateToonRequest::attribute_size() const {
  return attribute_.size();
}
inline void CreateToonRequest::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& CreateToonRequest::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* CreateToonRequest::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* CreateToonRequest::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
CreateToonRequest::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
CreateToonRequest::mutable_attribute() {
  return &attribute_;
}

// optional .bnet.protocol.ProcessId host = 6;
inline bool CreateToonRequest::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateToonRequest::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateToonRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateToonRequest::clear_host() {
  if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
  clear_has_host();
}
inline const ::bnet::protocol::ProcessId& CreateToonRequest::host() const {
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::bnet::protocol::ProcessId* CreateToonRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::bnet::protocol::ProcessId;
  return host_;
}
inline ::bnet::protocol::ProcessId* CreateToonRequest::release_host() {
  clear_has_host();
  ::bnet::protocol::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CreateToonResponse

// optional string name = 1;
inline bool CreateToonResponse::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateToonResponse::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateToonResponse::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateToonResponse::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreateToonResponse::name() const {
  return *name_;
}
inline void CreateToonResponse::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateToonResponse::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateToonResponse::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateToonResponse::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreateToonResponse::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DeleteToonRequest

// optional .bnet.protocol.EntityId bnet_account_id = 1;
inline bool DeleteToonRequest::has_bnet_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteToonRequest::set_has_bnet_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteToonRequest::clear_has_bnet_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteToonRequest::clear_bnet_account_id() {
  if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account_id();
}
inline const ::bnet::protocol::EntityId& DeleteToonRequest::bnet_account_id() const {
  return bnet_account_id_ != NULL ? *bnet_account_id_ : *default_instance_->bnet_account_id_;
}
inline ::bnet::protocol::EntityId* DeleteToonRequest::mutable_bnet_account_id() {
  set_has_bnet_account_id();
  if (bnet_account_id_ == NULL) bnet_account_id_ = new ::bnet::protocol::EntityId;
  return bnet_account_id_;
}
inline ::bnet::protocol::EntityId* DeleteToonRequest::release_bnet_account_id() {
  clear_has_bnet_account_id();
  ::bnet::protocol::EntityId* temp = bnet_account_id_;
  bnet_account_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId game_account_id = 2;
inline bool DeleteToonRequest::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteToonRequest::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteToonRequest::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteToonRequest::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::bnet::protocol::EntityId& DeleteToonRequest::game_account_id() const {
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::bnet::protocol::EntityId* DeleteToonRequest::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::bnet::protocol::EntityId;
  return game_account_id_;
}
inline ::bnet::protocol::EntityId* DeleteToonRequest::release_game_account_id() {
  clear_has_game_account_id();
  ::bnet::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId toon_id = 3;
inline bool DeleteToonRequest::has_toon_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteToonRequest::set_has_toon_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeleteToonRequest::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeleteToonRequest::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::bnet::protocol::EntityId& DeleteToonRequest::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::bnet::protocol::EntityId* DeleteToonRequest::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::bnet::protocol::EntityId;
  return toon_id_;
}
inline ::bnet::protocol::EntityId* DeleteToonRequest::release_toon_id() {
  clear_has_toon_id();
  ::bnet::protocol::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.ProcessId host = 4;
inline bool DeleteToonRequest::has_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeleteToonRequest::set_has_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeleteToonRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeleteToonRequest::clear_host() {
  if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
  clear_has_host();
}
inline const ::bnet::protocol::ProcessId& DeleteToonRequest::host() const {
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::bnet::protocol::ProcessId* DeleteToonRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::bnet::protocol::ProcessId;
  return host_;
}
inline ::bnet::protocol::ProcessId* DeleteToonRequest::release_host() {
  clear_has_host();
  ::bnet::protocol::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TransferToonRequest_Account

// required .bnet.protocol.EntityId bnet_account_id = 1;
inline bool TransferToonRequest_Account::has_bnet_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferToonRequest_Account::set_has_bnet_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferToonRequest_Account::clear_has_bnet_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferToonRequest_Account::clear_bnet_account_id() {
  if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account_id();
}
inline const ::bnet::protocol::EntityId& TransferToonRequest_Account::bnet_account_id() const {
  return bnet_account_id_ != NULL ? *bnet_account_id_ : *default_instance_->bnet_account_id_;
}
inline ::bnet::protocol::EntityId* TransferToonRequest_Account::mutable_bnet_account_id() {
  set_has_bnet_account_id();
  if (bnet_account_id_ == NULL) bnet_account_id_ = new ::bnet::protocol::EntityId;
  return bnet_account_id_;
}
inline ::bnet::protocol::EntityId* TransferToonRequest_Account::release_bnet_account_id() {
  clear_has_bnet_account_id();
  ::bnet::protocol::EntityId* temp = bnet_account_id_;
  bnet_account_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId game_account_id = 2;
inline bool TransferToonRequest_Account::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferToonRequest_Account::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferToonRequest_Account::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferToonRequest_Account::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::bnet::protocol::EntityId& TransferToonRequest_Account::game_account_id() const {
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::bnet::protocol::EntityId* TransferToonRequest_Account::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::bnet::protocol::EntityId;
  return game_account_id_;
}
inline ::bnet::protocol::EntityId* TransferToonRequest_Account::release_game_account_id() {
  clear_has_game_account_id();
  ::bnet::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TransferToonRequest

// required .bnet.protocol.EntityId toon_id = 1;
inline bool TransferToonRequest::has_toon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferToonRequest::set_has_toon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferToonRequest::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferToonRequest::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::bnet::protocol::EntityId& TransferToonRequest::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::bnet::protocol::EntityId* TransferToonRequest::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::bnet::protocol::EntityId;
  return toon_id_;
}
inline ::bnet::protocol::EntityId* TransferToonRequest::release_toon_id() {
  clear_has_toon_id();
  ::bnet::protocol::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.game_utilities.TransferToonRequest.Account source = 2;
inline bool TransferToonRequest::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferToonRequest::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferToonRequest::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferToonRequest::clear_source() {
  if (source_ != NULL) source_->::bnet::protocol::game_utilities::TransferToonRequest_Account::Clear();
  clear_has_source();
}
inline const ::bnet::protocol::game_utilities::TransferToonRequest_Account& TransferToonRequest::source() const {
  return source_ != NULL ? *source_ : *default_instance_->source_;
}
inline ::bnet::protocol::game_utilities::TransferToonRequest_Account* TransferToonRequest::mutable_source() {
  set_has_source();
  if (source_ == NULL) source_ = new ::bnet::protocol::game_utilities::TransferToonRequest_Account;
  return source_;
}
inline ::bnet::protocol::game_utilities::TransferToonRequest_Account* TransferToonRequest::release_source() {
  clear_has_source();
  ::bnet::protocol::game_utilities::TransferToonRequest_Account* temp = source_;
  source_ = NULL;
  return temp;
}

// optional .bnet.protocol.game_utilities.TransferToonRequest.Account target = 3;
inline bool TransferToonRequest::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferToonRequest::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferToonRequest::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferToonRequest::clear_target() {
  if (target_ != NULL) target_->::bnet::protocol::game_utilities::TransferToonRequest_Account::Clear();
  clear_has_target();
}
inline const ::bnet::protocol::game_utilities::TransferToonRequest_Account& TransferToonRequest::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::bnet::protocol::game_utilities::TransferToonRequest_Account* TransferToonRequest::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::bnet::protocol::game_utilities::TransferToonRequest_Account;
  return target_;
}
inline ::bnet::protocol::game_utilities::TransferToonRequest_Account* TransferToonRequest::release_target() {
  clear_has_target();
  ::bnet::protocol::game_utilities::TransferToonRequest_Account* temp = target_;
  target_ = NULL;
  return temp;
}

// optional .bnet.protocol.ProcessId host = 4;
inline bool TransferToonRequest::has_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransferToonRequest::set_has_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransferToonRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransferToonRequest::clear_host() {
  if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
  clear_has_host();
}
inline const ::bnet::protocol::ProcessId& TransferToonRequest::host() const {
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::bnet::protocol::ProcessId* TransferToonRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::bnet::protocol::ProcessId;
  return host_;
}
inline ::bnet::protocol::ProcessId* TransferToonRequest::release_host() {
  clear_has_host();
  ::bnet::protocol::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SelectToonRequest

// required .bnet.protocol.EntityId bnet_account_id = 1;
inline bool SelectToonRequest::has_bnet_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectToonRequest::set_has_bnet_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectToonRequest::clear_has_bnet_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectToonRequest::clear_bnet_account_id() {
  if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account_id();
}
inline const ::bnet::protocol::EntityId& SelectToonRequest::bnet_account_id() const {
  return bnet_account_id_ != NULL ? *bnet_account_id_ : *default_instance_->bnet_account_id_;
}
inline ::bnet::protocol::EntityId* SelectToonRequest::mutable_bnet_account_id() {
  set_has_bnet_account_id();
  if (bnet_account_id_ == NULL) bnet_account_id_ = new ::bnet::protocol::EntityId;
  return bnet_account_id_;
}
inline ::bnet::protocol::EntityId* SelectToonRequest::release_bnet_account_id() {
  clear_has_bnet_account_id();
  ::bnet::protocol::EntityId* temp = bnet_account_id_;
  bnet_account_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId game_account_id = 2;
inline bool SelectToonRequest::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectToonRequest::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectToonRequest::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectToonRequest::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::bnet::protocol::EntityId& SelectToonRequest::game_account_id() const {
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::bnet::protocol::EntityId* SelectToonRequest::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::bnet::protocol::EntityId;
  return game_account_id_;
}
inline ::bnet::protocol::EntityId* SelectToonRequest::release_game_account_id() {
  clear_has_game_account_id();
  ::bnet::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId toon_id = 3;
inline bool SelectToonRequest::has_toon_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectToonRequest::set_has_toon_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelectToonRequest::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelectToonRequest::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::bnet::protocol::EntityId& SelectToonRequest::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::bnet::protocol::EntityId* SelectToonRequest::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::bnet::protocol::EntityId;
  return toon_id_;
}
inline ::bnet::protocol::EntityId* SelectToonRequest::release_toon_id() {
  clear_has_toon_id();
  ::bnet::protocol::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.ProcessId host = 4;
inline bool SelectToonRequest::has_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelectToonRequest::set_has_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SelectToonRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SelectToonRequest::clear_host() {
  if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
  clear_has_host();
}
inline const ::bnet::protocol::ProcessId& SelectToonRequest::host() const {
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::bnet::protocol::ProcessId* SelectToonRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::bnet::protocol::ProcessId;
  return host_;
}
inline ::bnet::protocol::ProcessId* SelectToonRequest::release_host() {
  clear_has_host();
  ::bnet::protocol::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PresenceChannelCreatedRequest

// required .bnet.protocol.EntityId id = 1;
inline bool PresenceChannelCreatedRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PresenceChannelCreatedRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PresenceChannelCreatedRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PresenceChannelCreatedRequest::clear_id() {
  if (id_ != NULL) id_->::bnet::protocol::EntityId::Clear();
  clear_has_id();
}
inline const ::bnet::protocol::EntityId& PresenceChannelCreatedRequest::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::bnet::protocol::EntityId* PresenceChannelCreatedRequest::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::bnet::protocol::EntityId;
  return id_;
}
inline ::bnet::protocol::EntityId* PresenceChannelCreatedRequest::release_id() {
  clear_has_id();
  ::bnet::protocol::EntityId* temp = id_;
  id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId toon_id = 2;
inline bool PresenceChannelCreatedRequest::has_toon_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PresenceChannelCreatedRequest::set_has_toon_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PresenceChannelCreatedRequest::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PresenceChannelCreatedRequest::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::bnet::protocol::EntityId& PresenceChannelCreatedRequest::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::bnet::protocol::EntityId* PresenceChannelCreatedRequest::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::bnet::protocol::EntityId;
  return toon_id_;
}
inline ::bnet::protocol::EntityId* PresenceChannelCreatedRequest::release_toon_id() {
  clear_has_toon_id();
  ::bnet::protocol::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId game_account_id = 3;
inline bool PresenceChannelCreatedRequest::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PresenceChannelCreatedRequest::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PresenceChannelCreatedRequest::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PresenceChannelCreatedRequest::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::bnet::protocol::EntityId& PresenceChannelCreatedRequest::game_account_id() const {
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::bnet::protocol::EntityId* PresenceChannelCreatedRequest::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::bnet::protocol::EntityId;
  return game_account_id_;
}
inline ::bnet::protocol::EntityId* PresenceChannelCreatedRequest::release_game_account_id() {
  clear_has_game_account_id();
  ::bnet::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId bnet_account_id = 4;
inline bool PresenceChannelCreatedRequest::has_bnet_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PresenceChannelCreatedRequest::set_has_bnet_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PresenceChannelCreatedRequest::clear_has_bnet_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PresenceChannelCreatedRequest::clear_bnet_account_id() {
  if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account_id();
}
inline const ::bnet::protocol::EntityId& PresenceChannelCreatedRequest::bnet_account_id() const {
  return bnet_account_id_ != NULL ? *bnet_account_id_ : *default_instance_->bnet_account_id_;
}
inline ::bnet::protocol::EntityId* PresenceChannelCreatedRequest::mutable_bnet_account_id() {
  set_has_bnet_account_id();
  if (bnet_account_id_ == NULL) bnet_account_id_ = new ::bnet::protocol::EntityId;
  return bnet_account_id_;
}
inline ::bnet::protocol::EntityId* PresenceChannelCreatedRequest::release_bnet_account_id() {
  clear_has_bnet_account_id();
  ::bnet::protocol::EntityId* temp = bnet_account_id_;
  bnet_account_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.ProcessId host = 5;
inline bool PresenceChannelCreatedRequest::has_host() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PresenceChannelCreatedRequest::set_has_host() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PresenceChannelCreatedRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PresenceChannelCreatedRequest::clear_host() {
  if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
  clear_has_host();
}
inline const ::bnet::protocol::ProcessId& PresenceChannelCreatedRequest::host() const {
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::bnet::protocol::ProcessId* PresenceChannelCreatedRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::bnet::protocol::ProcessId;
  return host_;
}
inline ::bnet::protocol::ProcessId* PresenceChannelCreatedRequest::release_host() {
  clear_has_host();
  ::bnet::protocol::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PlayerVariablesRequest

// required .bnet.protocol.EntityId bnet_account_id = 1;
inline bool PlayerVariablesRequest::has_bnet_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerVariablesRequest::set_has_bnet_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerVariablesRequest::clear_has_bnet_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerVariablesRequest::clear_bnet_account_id() {
  if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account_id();
}
inline const ::bnet::protocol::EntityId& PlayerVariablesRequest::bnet_account_id() const {
  return bnet_account_id_ != NULL ? *bnet_account_id_ : *default_instance_->bnet_account_id_;
}
inline ::bnet::protocol::EntityId* PlayerVariablesRequest::mutable_bnet_account_id() {
  set_has_bnet_account_id();
  if (bnet_account_id_ == NULL) bnet_account_id_ = new ::bnet::protocol::EntityId;
  return bnet_account_id_;
}
inline ::bnet::protocol::EntityId* PlayerVariablesRequest::release_bnet_account_id() {
  clear_has_bnet_account_id();
  ::bnet::protocol::EntityId* temp = bnet_account_id_;
  bnet_account_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId game_account_id = 2;
inline bool PlayerVariablesRequest::has_game_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerVariablesRequest::set_has_game_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerVariablesRequest::clear_has_game_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerVariablesRequest::clear_game_account_id() {
  if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
  clear_has_game_account_id();
}
inline const ::bnet::protocol::EntityId& PlayerVariablesRequest::game_account_id() const {
  return game_account_id_ != NULL ? *game_account_id_ : *default_instance_->game_account_id_;
}
inline ::bnet::protocol::EntityId* PlayerVariablesRequest::mutable_game_account_id() {
  set_has_game_account_id();
  if (game_account_id_ == NULL) game_account_id_ = new ::bnet::protocol::EntityId;
  return game_account_id_;
}
inline ::bnet::protocol::EntityId* PlayerVariablesRequest::release_game_account_id() {
  clear_has_game_account_id();
  ::bnet::protocol::EntityId* temp = game_account_id_;
  game_account_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId toon_id = 3;
inline bool PlayerVariablesRequest::has_toon_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerVariablesRequest::set_has_toon_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerVariablesRequest::clear_has_toon_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerVariablesRequest::clear_toon_id() {
  if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
  clear_has_toon_id();
}
inline const ::bnet::protocol::EntityId& PlayerVariablesRequest::toon_id() const {
  return toon_id_ != NULL ? *toon_id_ : *default_instance_->toon_id_;
}
inline ::bnet::protocol::EntityId* PlayerVariablesRequest::mutable_toon_id() {
  set_has_toon_id();
  if (toon_id_ == NULL) toon_id_ = new ::bnet::protocol::EntityId;
  return toon_id_;
}
inline ::bnet::protocol::EntityId* PlayerVariablesRequest::release_toon_id() {
  clear_has_toon_id();
  ::bnet::protocol::EntityId* temp = toon_id_;
  toon_id_ = NULL;
  return temp;
}

// repeated string variable = 4;
inline int PlayerVariablesRequest::variable_size() const {
  return variable_.size();
}
inline void PlayerVariablesRequest::clear_variable() {
  variable_.Clear();
}
inline const ::std::string& PlayerVariablesRequest::variable(int index) const {
  return variable_.Get(index);
}
inline ::std::string* PlayerVariablesRequest::mutable_variable(int index) {
  return variable_.Mutable(index);
}
inline void PlayerVariablesRequest::set_variable(int index, const ::std::string& value) {
  variable_.Mutable(index)->assign(value);
}
inline void PlayerVariablesRequest::set_variable(int index, const char* value) {
  variable_.Mutable(index)->assign(value);
}
inline void PlayerVariablesRequest::set_variable(int index, const char* value, size_t size) {
  variable_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerVariablesRequest::add_variable() {
  return variable_.Add();
}
inline void PlayerVariablesRequest::add_variable(const ::std::string& value) {
  variable_.Add()->assign(value);
}
inline void PlayerVariablesRequest::add_variable(const char* value) {
  variable_.Add()->assign(value);
}
inline void PlayerVariablesRequest::add_variable(const char* value, size_t size) {
  variable_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlayerVariablesRequest::variable() const {
  return variable_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlayerVariablesRequest::mutable_variable() {
  return &variable_;
}

// optional .bnet.protocol.ProcessId host = 5;
inline bool PlayerVariablesRequest::has_host() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerVariablesRequest::set_has_host() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerVariablesRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerVariablesRequest::clear_host() {
  if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
  clear_has_host();
}
inline const ::bnet::protocol::ProcessId& PlayerVariablesRequest::host() const {
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::bnet::protocol::ProcessId* PlayerVariablesRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::bnet::protocol::ProcessId;
  return host_;
}
inline ::bnet::protocol::ProcessId* PlayerVariablesRequest::release_host() {
  clear_has_host();
  ::bnet::protocol::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GameVariablesRequest

// repeated .bnet.protocol.attribute.Attribute attribute = 1;
inline int GameVariablesRequest::attribute_size() const {
  return attribute_.size();
}
inline void GameVariablesRequest::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& GameVariablesRequest::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* GameVariablesRequest::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* GameVariablesRequest::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
GameVariablesRequest::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
GameVariablesRequest::mutable_attribute() {
  return &attribute_;
}

// repeated string variable = 2;
inline int GameVariablesRequest::variable_size() const {
  return variable_.size();
}
inline void GameVariablesRequest::clear_variable() {
  variable_.Clear();
}
inline const ::std::string& GameVariablesRequest::variable(int index) const {
  return variable_.Get(index);
}
inline ::std::string* GameVariablesRequest::mutable_variable(int index) {
  return variable_.Mutable(index);
}
inline void GameVariablesRequest::set_variable(int index, const ::std::string& value) {
  variable_.Mutable(index)->assign(value);
}
inline void GameVariablesRequest::set_variable(int index, const char* value) {
  variable_.Mutable(index)->assign(value);
}
inline void GameVariablesRequest::set_variable(int index, const char* value, size_t size) {
  variable_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameVariablesRequest::add_variable() {
  return variable_.Add();
}
inline void GameVariablesRequest::add_variable(const ::std::string& value) {
  variable_.Add()->assign(value);
}
inline void GameVariablesRequest::add_variable(const char* value) {
  variable_.Add()->assign(value);
}
inline void GameVariablesRequest::add_variable(const char* value, size_t size) {
  variable_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GameVariablesRequest::variable() const {
  return variable_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GameVariablesRequest::mutable_variable() {
  return &variable_;
}

// optional .bnet.protocol.ProcessId host = 3;
inline bool GameVariablesRequest::has_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameVariablesRequest::set_has_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameVariablesRequest::clear_has_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameVariablesRequest::clear_host() {
  if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
  clear_has_host();
}
inline const ::bnet::protocol::ProcessId& GameVariablesRequest::host() const {
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::bnet::protocol::ProcessId* GameVariablesRequest::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::bnet::protocol::ProcessId;
  return host_;
}
inline ::bnet::protocol::ProcessId* GameVariablesRequest::release_host() {
  clear_has_host();
  ::bnet::protocol::ProcessId* temp = host_;
  host_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// VariablesResponse

// repeated float value = 1;
inline int VariablesResponse::value_size() const {
  return value_.size();
}
inline void VariablesResponse::clear_value() {
  value_.Clear();
}
inline float VariablesResponse::value(int index) const {
  return value_.Get(index);
}
inline void VariablesResponse::set_value(int index, float value) {
  value_.Set(index, value);
}
inline void VariablesResponse::add_value(float value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
VariablesResponse::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
VariablesResponse::mutable_value() {
  return &value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_utilities
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fgame_5futilities_2fgame_5futilities_2eproto__INCLUDED
