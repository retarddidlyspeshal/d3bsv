// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/game_utilities/game_utilities.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace game_utilities {

namespace {

const ::google::protobuf::Descriptor* ClientRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateToonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateToonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateToonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateToonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteToonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteToonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferToonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferToonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferToonRequest_Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferToonRequest_Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectToonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectToonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PresenceChannelCreatedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PresenceChannelCreatedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerVariablesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerVariablesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameVariablesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameVariablesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VariablesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariablesResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto() {
  protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/game_utilities/game_utilities.proto");
  GOOGLE_CHECK(file != NULL);
  ClientRequest_descriptor_ = file->message_type(0);
  static const int ClientRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, bnet_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, toon_id_),
  };
  ClientRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_descriptor_,
      ClientRequest::default_instance_,
      ClientRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest));
  ClientResponse_descriptor_ = file->message_type(1);
  static const int ClientResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, attribute_),
  };
  ClientResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientResponse_descriptor_,
      ClientResponse::default_instance_,
      ClientResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientResponse));
  CreateToonRequest_descriptor_ = file->message_type(2);
  static const int CreateToonRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, bnet_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, host_),
  };
  CreateToonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateToonRequest_descriptor_,
      CreateToonRequest::default_instance_,
      CreateToonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateToonRequest));
  CreateToonResponse_descriptor_ = file->message_type(3);
  static const int CreateToonResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonResponse, name_),
  };
  CreateToonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateToonResponse_descriptor_,
      CreateToonResponse::default_instance_,
      CreateToonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateToonResponse));
  DeleteToonRequest_descriptor_ = file->message_type(4);
  static const int DeleteToonRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonRequest, bnet_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonRequest, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonRequest, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonRequest, host_),
  };
  DeleteToonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteToonRequest_descriptor_,
      DeleteToonRequest::default_instance_,
      DeleteToonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteToonRequest));
  TransferToonRequest_descriptor_ = file->message_type(5);
  static const int TransferToonRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest, host_),
  };
  TransferToonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferToonRequest_descriptor_,
      TransferToonRequest::default_instance_,
      TransferToonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferToonRequest));
  TransferToonRequest_Account_descriptor_ = TransferToonRequest_descriptor_->nested_type(0);
  static const int TransferToonRequest_Account_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest_Account, bnet_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest_Account, game_account_id_),
  };
  TransferToonRequest_Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferToonRequest_Account_descriptor_,
      TransferToonRequest_Account::default_instance_,
      TransferToonRequest_Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest_Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferToonRequest_Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferToonRequest_Account));
  SelectToonRequest_descriptor_ = file->message_type(6);
  static const int SelectToonRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonRequest, bnet_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonRequest, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonRequest, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonRequest, host_),
  };
  SelectToonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectToonRequest_descriptor_,
      SelectToonRequest::default_instance_,
      SelectToonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectToonRequest));
  PresenceChannelCreatedRequest_descriptor_ = file->message_type(7);
  static const int PresenceChannelCreatedRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceChannelCreatedRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceChannelCreatedRequest, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceChannelCreatedRequest, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceChannelCreatedRequest, bnet_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceChannelCreatedRequest, host_),
  };
  PresenceChannelCreatedRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PresenceChannelCreatedRequest_descriptor_,
      PresenceChannelCreatedRequest::default_instance_,
      PresenceChannelCreatedRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceChannelCreatedRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresenceChannelCreatedRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PresenceChannelCreatedRequest));
  PlayerVariablesRequest_descriptor_ = file->message_type(8);
  static const int PlayerVariablesRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVariablesRequest, bnet_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVariablesRequest, game_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVariablesRequest, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVariablesRequest, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVariablesRequest, host_),
  };
  PlayerVariablesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerVariablesRequest_descriptor_,
      PlayerVariablesRequest::default_instance_,
      PlayerVariablesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVariablesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVariablesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerVariablesRequest));
  GameVariablesRequest_descriptor_ = file->message_type(9);
  static const int GameVariablesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVariablesRequest, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVariablesRequest, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVariablesRequest, host_),
  };
  GameVariablesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameVariablesRequest_descriptor_,
      GameVariablesRequest::default_instance_,
      GameVariablesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVariablesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameVariablesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameVariablesRequest));
  VariablesResponse_descriptor_ = file->message_type(10);
  static const int VariablesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariablesResponse, value_),
  };
  VariablesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VariablesResponse_descriptor_,
      VariablesResponse::default_instance_,
      VariablesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariablesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariablesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VariablesResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_descriptor_, &ClientRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientResponse_descriptor_, &ClientResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateToonRequest_descriptor_, &CreateToonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateToonResponse_descriptor_, &CreateToonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteToonRequest_descriptor_, &DeleteToonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferToonRequest_descriptor_, &TransferToonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferToonRequest_Account_descriptor_, &TransferToonRequest_Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectToonRequest_descriptor_, &SelectToonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PresenceChannelCreatedRequest_descriptor_, &PresenceChannelCreatedRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerVariablesRequest_descriptor_, &PlayerVariablesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameVariablesRequest_descriptor_, &GameVariablesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VariablesResponse_descriptor_, &VariablesResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto() {
  delete ClientRequest::default_instance_;
  delete ClientRequest_reflection_;
  delete ClientResponse::default_instance_;
  delete ClientResponse_reflection_;
  delete CreateToonRequest::default_instance_;
  delete CreateToonRequest_reflection_;
  delete CreateToonResponse::default_instance_;
  delete CreateToonResponse_reflection_;
  delete DeleteToonRequest::default_instance_;
  delete DeleteToonRequest_reflection_;
  delete TransferToonRequest::default_instance_;
  delete TransferToonRequest_reflection_;
  delete TransferToonRequest_Account::default_instance_;
  delete TransferToonRequest_Account_reflection_;
  delete SelectToonRequest::default_instance_;
  delete SelectToonRequest_reflection_;
  delete PresenceChannelCreatedRequest::default_instance_;
  delete PresenceChannelCreatedRequest_reflection_;
  delete PlayerVariablesRequest::default_instance_;
  delete PlayerVariablesRequest_reflection_;
  delete GameVariablesRequest::default_instance_;
  delete GameVariablesRequest_reflection_;
  delete VariablesResponse::default_instance_;
  delete VariablesResponse_reflection_;
}

void protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::game_master::protobuf_AddDesc_service_2fgame_5fmaster_2fgame_5fmaster_2eproto();
  ::bnet::protocol::server_pool::protobuf_AddDesc_service_2fserver_5fpool_2fserver_5fpool_2eproto();
  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+service/game_utilities/game_utilities."
    "proto\022\034bnet.protocol.game_utilities\032%ser"
    "vice/game_master/game_master.proto\032%serv"
    "ice/server_pool/server_pool.proto\032\034lib/p"
    "rotocol/attribute.proto\032\031lib/protocol/en"
    "tity.proto\032\021lib/rpc/rpc.proto\"\374\001\n\rClient"
    "Request\0225\n\tattribute\030\001 \003(\0132\".bnet.protoc"
    "ol.attribute.Attribute\022&\n\004host\030\002 \001(\0132\030.b"
    "net.protocol.ProcessId\0220\n\017bnet_account_i"
    "d\030\003 \001(\0132\027.bnet.protocol.EntityId\0220\n\017game"
    "_account_id\030\004 \001(\0132\027.bnet.protocol.Entity"
    "Id\022(\n\007toon_id\030\005 \001(\0132\027.bnet.protocol.Enti"
    "tyId\"G\n\016ClientResponse\0225\n\tattribute\030\001 \003("
    "\0132\".bnet.protocol.attribute.Attribute\"\216\002"
    "\n\021CreateToonRequest\0220\n\017bnet_account_id\030\001"
    " \002(\0132\027.bnet.protocol.EntityId\0220\n\017game_ac"
    "count_id\030\002 \002(\0132\027.bnet.protocol.EntityId\022"
    "(\n\007toon_id\030\003 \002(\0132\027.bnet.protocol.EntityI"
    "d\022\014\n\004name\030\004 \002(\t\0225\n\tattribute\030\005 \003(\0132\".bne"
    "t.protocol.attribute.Attribute\022&\n\004host\030\006"
    " \001(\0132\030.bnet.protocol.ProcessId\"\"\n\022Create"
    "ToonResponse\022\014\n\004name\030\001 \001(\t\"\311\001\n\021DeleteToo"
    "nRequest\0220\n\017bnet_account_id\030\001 \001(\0132\027.bnet"
    ".protocol.EntityId\0220\n\017game_account_id\030\002 "
    "\001(\0132\027.bnet.protocol.EntityId\022(\n\007toon_id\030"
    "\003 \002(\0132\027.bnet.protocol.EntityId\022&\n\004host\030\004"
    " \001(\0132\030.bnet.protocol.ProcessId\"\354\002\n\023Trans"
    "ferToonRequest\022(\n\007toon_id\030\001 \002(\0132\027.bnet.p"
    "rotocol.EntityId\022I\n\006source\030\002 \001(\01329.bnet."
    "protocol.game_utilities.TransferToonRequ"
    "est.Account\022I\n\006target\030\003 \001(\01329.bnet.proto"
    "col.game_utilities.TransferToonRequest.A"
    "ccount\022&\n\004host\030\004 \001(\0132\030.bnet.protocol.Pro"
    "cessId\032m\n\007Account\0220\n\017bnet_account_id\030\001 \002"
    "(\0132\027.bnet.protocol.EntityId\0220\n\017game_acco"
    "unt_id\030\002 \002(\0132\027.bnet.protocol.EntityId\"\311\001"
    "\n\021SelectToonRequest\0220\n\017bnet_account_id\030\001"
    " \002(\0132\027.bnet.protocol.EntityId\0220\n\017game_ac"
    "count_id\030\002 \002(\0132\027.bnet.protocol.EntityId\022"
    "(\n\007toon_id\030\003 \002(\0132\027.bnet.protocol.EntityI"
    "d\022&\n\004host\030\004 \001(\0132\030.bnet.protocol.ProcessI"
    "d\"\372\001\n\035PresenceChannelCreatedRequest\022#\n\002i"
    "d\030\001 \002(\0132\027.bnet.protocol.EntityId\022(\n\007toon"
    "_id\030\002 \001(\0132\027.bnet.protocol.EntityId\0220\n\017ga"
    "me_account_id\030\003 \001(\0132\027.bnet.protocol.Enti"
    "tyId\0220\n\017bnet_account_id\030\004 \001(\0132\027.bnet.pro"
    "tocol.EntityId\022&\n\004host\030\005 \001(\0132\030.bnet.prot"
    "ocol.ProcessId\"\340\001\n\026PlayerVariablesReques"
    "t\0220\n\017bnet_account_id\030\001 \002(\0132\027.bnet.protoc"
    "ol.EntityId\0220\n\017game_account_id\030\002 \002(\0132\027.b"
    "net.protocol.EntityId\022(\n\007toon_id\030\003 \002(\0132\027"
    ".bnet.protocol.EntityId\022\020\n\010variable\030\004 \003("
    "\t\022&\n\004host\030\005 \001(\0132\030.bnet.protocol.ProcessI"
    "d\"\207\001\n\024GameVariablesRequest\0225\n\tattribute\030"
    "\001 \003(\0132\".bnet.protocol.attribute.Attribut"
    "e\022\020\n\010variable\030\002 \003(\t\022&\n\004host\030\003 \001(\0132\030.bnet"
    ".protocol.ProcessId\"\"\n\021VariablesResponse"
    "\022\r\n\005value\030\001 \003(\002", 2295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/game_utilities/game_utilities.proto", &protobuf_RegisterTypes);
  ClientRequest::default_instance_ = new ClientRequest();
  ClientResponse::default_instance_ = new ClientResponse();
  CreateToonRequest::default_instance_ = new CreateToonRequest();
  CreateToonResponse::default_instance_ = new CreateToonResponse();
  DeleteToonRequest::default_instance_ = new DeleteToonRequest();
  TransferToonRequest::default_instance_ = new TransferToonRequest();
  TransferToonRequest_Account::default_instance_ = new TransferToonRequest_Account();
  SelectToonRequest::default_instance_ = new SelectToonRequest();
  PresenceChannelCreatedRequest::default_instance_ = new PresenceChannelCreatedRequest();
  PlayerVariablesRequest::default_instance_ = new PlayerVariablesRequest();
  GameVariablesRequest::default_instance_ = new GameVariablesRequest();
  VariablesResponse::default_instance_ = new VariablesResponse();
  ClientRequest::default_instance_->InitAsDefaultInstance();
  ClientResponse::default_instance_->InitAsDefaultInstance();
  CreateToonRequest::default_instance_->InitAsDefaultInstance();
  CreateToonResponse::default_instance_->InitAsDefaultInstance();
  DeleteToonRequest::default_instance_->InitAsDefaultInstance();
  TransferToonRequest::default_instance_->InitAsDefaultInstance();
  TransferToonRequest_Account::default_instance_->InitAsDefaultInstance();
  SelectToonRequest::default_instance_->InitAsDefaultInstance();
  PresenceChannelCreatedRequest::default_instance_->InitAsDefaultInstance();
  PlayerVariablesRequest::default_instance_->InitAsDefaultInstance();
  GameVariablesRequest::default_instance_->InitAsDefaultInstance();
  VariablesResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fgame_5futilities_2fgame_5futilities_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fgame_5futilities_2fgame_5futilities_2eproto {
  StaticDescriptorInitializer_service_2fgame_5futilities_2fgame_5futilities_2eproto() {
    protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();
  }
} static_descriptor_initializer_service_2fgame_5futilities_2fgame_5futilities_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ClientRequest::kAttributeFieldNumber;
const int ClientRequest::kHostFieldNumber;
const int ClientRequest::kBnetAccountIdFieldNumber;
const int ClientRequest::kGameAccountIdFieldNumber;
const int ClientRequest::kToonIdFieldNumber;
#endif  // !_MSC_VER

ClientRequest::ClientRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest::InitAsDefaultInstance() {
  host_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
  bnet_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest::SharedCtor() {
  _cached_size_ = 0;
  host_ = NULL;
  bnet_account_id_ = NULL;
  game_account_id_ = NULL;
  toon_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest::~ClientRequest() {
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  if (this != default_instance_) {
    delete host_;
    delete bnet_account_id_;
    delete game_account_id_;
    delete toon_id_;
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_descriptor_;
}

const ClientRequest& ClientRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

ClientRequest* ClientRequest::default_instance_ = NULL;

ClientRequest* ClientRequest::New() const {
  return new ClientRequest;
}

void ClientRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_host()) {
      if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
    }
    if (has_bnet_account_id()) {
      if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.attribute.Attribute attribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }
      
      // optional .bnet.protocol.ProcessId host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bnet_account_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId bnet_account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_game_account_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId game_account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_toon_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId toon_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }
  
  // optional .bnet.protocol.ProcessId host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->host(), output);
  }
  
  // optional .bnet.protocol.EntityId bnet_account_id = 3;
  if (has_bnet_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bnet_account_id(), output);
  }
  
  // optional .bnet.protocol.EntityId game_account_id = 4;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->game_account_id(), output);
  }
  
  // optional .bnet.protocol.EntityId toon_id = 5;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->toon_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }
  
  // optional .bnet.protocol.ProcessId host = 2;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->host(), target);
  }
  
  // optional .bnet.protocol.EntityId bnet_account_id = 3;
  if (has_bnet_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bnet_account_id(), target);
  }
  
  // optional .bnet.protocol.EntityId game_account_id = 4;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->game_account_id(), target);
  }
  
  // optional .bnet.protocol.EntityId toon_id = 5;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->toon_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .bnet.protocol.ProcessId host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }
    
    // optional .bnet.protocol.EntityId bnet_account_id = 3;
    if (has_bnet_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account_id());
    }
    
    // optional .bnet.protocol.EntityId game_account_id = 4;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }
    
    // optional .bnet.protocol.EntityId toon_id = 5;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_host()) {
      mutable_host()->::bnet::protocol::ProcessId::MergeFrom(from.host());
    }
    if (from.has_bnet_account_id()) {
      mutable_bnet_account_id()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account_id());
    }
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::bnet::protocol::EntityId::MergeFrom(from.game_account_id());
    }
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  if (has_bnet_account_id()) {
    if (!this->bnet_account_id().IsInitialized()) return false;
  }
  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    std::swap(host_, other->host_);
    std::swap(bnet_account_id_, other->bnet_account_id_);
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(toon_id_, other->toon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_descriptor_;
  metadata.reflection = ClientRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientResponse::kAttributeFieldNumber;
#endif  // !_MSC_VER

ClientResponse::ClientResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientResponse::InitAsDefaultInstance() {
}

ClientResponse::ClientResponse(const ClientResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientResponse::~ClientResponse() {
  SharedDtor();
}

void ClientResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResponse_descriptor_;
}

const ClientResponse& ClientResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

ClientResponse* ClientResponse::default_instance_ = NULL;

ClientResponse* ClientResponse::New() const {
  return new ClientResponse;
}

void ClientResponse::Clear() {
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.attribute.Attribute attribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientResponse::MergeFrom(const ClientResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientResponse::CopyFrom(const ClientResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientResponse::IsInitialized() const {
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void ClientResponse::Swap(ClientResponse* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientResponse_descriptor_;
  metadata.reflection = ClientResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateToonRequest::kBnetAccountIdFieldNumber;
const int CreateToonRequest::kGameAccountIdFieldNumber;
const int CreateToonRequest::kToonIdFieldNumber;
const int CreateToonRequest::kNameFieldNumber;
const int CreateToonRequest::kAttributeFieldNumber;
const int CreateToonRequest::kHostFieldNumber;
#endif  // !_MSC_VER

CreateToonRequest::CreateToonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateToonRequest::InitAsDefaultInstance() {
  bnet_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  host_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
}

CreateToonRequest::CreateToonRequest(const CreateToonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateToonRequest::SharedCtor() {
  _cached_size_ = 0;
  bnet_account_id_ = NULL;
  game_account_id_ = NULL;
  toon_id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateToonRequest::~CreateToonRequest() {
  SharedDtor();
}

void CreateToonRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete bnet_account_id_;
    delete game_account_id_;
    delete toon_id_;
    delete host_;
  }
}

void CreateToonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateToonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateToonRequest_descriptor_;
}

const CreateToonRequest& CreateToonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

CreateToonRequest* CreateToonRequest::default_instance_ = NULL;

CreateToonRequest* CreateToonRequest::New() const {
  return new CreateToonRequest;
}

void CreateToonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bnet_account_id()) {
      if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_host()) {
      if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateToonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId bnet_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_account_id;
        break;
      }
      
      // required .bnet.protocol.EntityId game_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toon_id;
        break;
      }
      
      // required .bnet.protocol.EntityId toon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional .bnet.protocol.ProcessId host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateToonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bnet_account_id(), output);
  }
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_account_id(), output);
  }
  
  // required .bnet.protocol.EntityId toon_id = 3;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->toon_id(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attribute(i), output);
  }
  
  // optional .bnet.protocol.ProcessId host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->host(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateToonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bnet_account_id(), target);
  }
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_account_id(), target);
  }
  
  // required .bnet.protocol.EntityId toon_id = 3;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->toon_id(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attribute(i), target);
  }
  
  // optional .bnet.protocol.ProcessId host = 6;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->host(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateToonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId bnet_account_id = 1;
    if (has_bnet_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account_id());
    }
    
    // required .bnet.protocol.EntityId game_account_id = 2;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }
    
    // required .bnet.protocol.EntityId toon_id = 3;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .bnet.protocol.ProcessId host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateToonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateToonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateToonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateToonRequest::MergeFrom(const CreateToonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bnet_account_id()) {
      mutable_bnet_account_id()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account_id());
    }
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::bnet::protocol::EntityId::MergeFrom(from.game_account_id());
    }
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_host()) {
      mutable_host()->::bnet::protocol::ProcessId::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateToonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateToonRequest::CopyFrom(const CreateToonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateToonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_bnet_account_id()) {
    if (!this->bnet_account_id().IsInitialized()) return false;
  }
  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void CreateToonRequest::Swap(CreateToonRequest* other) {
  if (other != this) {
    std::swap(bnet_account_id_, other->bnet_account_id_);
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(toon_id_, other->toon_id_);
    std::swap(name_, other->name_);
    attribute_.Swap(&other->attribute_);
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateToonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateToonRequest_descriptor_;
  metadata.reflection = CreateToonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateToonResponse::kNameFieldNumber;
#endif  // !_MSC_VER

CreateToonResponse::CreateToonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateToonResponse::InitAsDefaultInstance() {
}

CreateToonResponse::CreateToonResponse(const CreateToonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateToonResponse::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateToonResponse::~CreateToonResponse() {
  SharedDtor();
}

void CreateToonResponse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreateToonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateToonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateToonResponse_descriptor_;
}

const CreateToonResponse& CreateToonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

CreateToonResponse* CreateToonResponse::default_instance_ = NULL;

CreateToonResponse* CreateToonResponse::New() const {
  return new CreateToonResponse;
}

void CreateToonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateToonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateToonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateToonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateToonResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateToonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateToonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateToonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateToonResponse::MergeFrom(const CreateToonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateToonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateToonResponse::CopyFrom(const CreateToonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateToonResponse::IsInitialized() const {
  
  return true;
}

void CreateToonResponse::Swap(CreateToonResponse* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateToonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateToonResponse_descriptor_;
  metadata.reflection = CreateToonResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteToonRequest::kBnetAccountIdFieldNumber;
const int DeleteToonRequest::kGameAccountIdFieldNumber;
const int DeleteToonRequest::kToonIdFieldNumber;
const int DeleteToonRequest::kHostFieldNumber;
#endif  // !_MSC_VER

DeleteToonRequest::DeleteToonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteToonRequest::InitAsDefaultInstance() {
  bnet_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  host_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
}

DeleteToonRequest::DeleteToonRequest(const DeleteToonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteToonRequest::SharedCtor() {
  _cached_size_ = 0;
  bnet_account_id_ = NULL;
  game_account_id_ = NULL;
  toon_id_ = NULL;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteToonRequest::~DeleteToonRequest() {
  SharedDtor();
}

void DeleteToonRequest::SharedDtor() {
  if (this != default_instance_) {
    delete bnet_account_id_;
    delete game_account_id_;
    delete toon_id_;
    delete host_;
  }
}

void DeleteToonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteToonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteToonRequest_descriptor_;
}

const DeleteToonRequest& DeleteToonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

DeleteToonRequest* DeleteToonRequest::default_instance_ = NULL;

DeleteToonRequest* DeleteToonRequest::New() const {
  return new DeleteToonRequest;
}

void DeleteToonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bnet_account_id()) {
      if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_host()) {
      if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteToonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId bnet_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_account_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId game_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toon_id;
        break;
      }
      
      // required .bnet.protocol.EntityId toon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_host;
        break;
      }
      
      // optional .bnet.protocol.ProcessId host = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteToonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bnet_account_id(), output);
  }
  
  // optional .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_account_id(), output);
  }
  
  // required .bnet.protocol.EntityId toon_id = 3;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->toon_id(), output);
  }
  
  // optional .bnet.protocol.ProcessId host = 4;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->host(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteToonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bnet_account_id(), target);
  }
  
  // optional .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_account_id(), target);
  }
  
  // required .bnet.protocol.EntityId toon_id = 3;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->toon_id(), target);
  }
  
  // optional .bnet.protocol.ProcessId host = 4;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->host(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteToonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId bnet_account_id = 1;
    if (has_bnet_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account_id());
    }
    
    // optional .bnet.protocol.EntityId game_account_id = 2;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }
    
    // required .bnet.protocol.EntityId toon_id = 3;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // optional .bnet.protocol.ProcessId host = 4;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteToonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteToonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteToonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteToonRequest::MergeFrom(const DeleteToonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bnet_account_id()) {
      mutable_bnet_account_id()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account_id());
    }
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::bnet::protocol::EntityId::MergeFrom(from.game_account_id());
    }
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_host()) {
      mutable_host()->::bnet::protocol::ProcessId::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteToonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteToonRequest::CopyFrom(const DeleteToonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteToonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_bnet_account_id()) {
    if (!this->bnet_account_id().IsInitialized()) return false;
  }
  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void DeleteToonRequest::Swap(DeleteToonRequest* other) {
  if (other != this) {
    std::swap(bnet_account_id_, other->bnet_account_id_);
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(toon_id_, other->toon_id_);
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteToonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteToonRequest_descriptor_;
  metadata.reflection = DeleteToonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferToonRequest_Account::kBnetAccountIdFieldNumber;
const int TransferToonRequest_Account::kGameAccountIdFieldNumber;
#endif  // !_MSC_VER

TransferToonRequest_Account::TransferToonRequest_Account()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferToonRequest_Account::InitAsDefaultInstance() {
  bnet_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

TransferToonRequest_Account::TransferToonRequest_Account(const TransferToonRequest_Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferToonRequest_Account::SharedCtor() {
  _cached_size_ = 0;
  bnet_account_id_ = NULL;
  game_account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferToonRequest_Account::~TransferToonRequest_Account() {
  SharedDtor();
}

void TransferToonRequest_Account::SharedDtor() {
  if (this != default_instance_) {
    delete bnet_account_id_;
    delete game_account_id_;
  }
}

void TransferToonRequest_Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToonRequest_Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferToonRequest_Account_descriptor_;
}

const TransferToonRequest_Account& TransferToonRequest_Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

TransferToonRequest_Account* TransferToonRequest_Account::default_instance_ = NULL;

TransferToonRequest_Account* TransferToonRequest_Account::New() const {
  return new TransferToonRequest_Account;
}

void TransferToonRequest_Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bnet_account_id()) {
      if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferToonRequest_Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId bnet_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_account_id;
        break;
      }
      
      // required .bnet.protocol.EntityId game_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferToonRequest_Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bnet_account_id(), output);
  }
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferToonRequest_Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bnet_account_id(), target);
  }
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferToonRequest_Account::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId bnet_account_id = 1;
    if (has_bnet_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account_id());
    }
    
    // required .bnet.protocol.EntityId game_account_id = 2;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToonRequest_Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferToonRequest_Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferToonRequest_Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferToonRequest_Account::MergeFrom(const TransferToonRequest_Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bnet_account_id()) {
      mutable_bnet_account_id()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account_id());
    }
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::bnet::protocol::EntityId::MergeFrom(from.game_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferToonRequest_Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToonRequest_Account::CopyFrom(const TransferToonRequest_Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToonRequest_Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_bnet_account_id()) {
    if (!this->bnet_account_id().IsInitialized()) return false;
  }
  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  return true;
}

void TransferToonRequest_Account::Swap(TransferToonRequest_Account* other) {
  if (other != this) {
    std::swap(bnet_account_id_, other->bnet_account_id_);
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferToonRequest_Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferToonRequest_Account_descriptor_;
  metadata.reflection = TransferToonRequest_Account_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TransferToonRequest::kToonIdFieldNumber;
const int TransferToonRequest::kSourceFieldNumber;
const int TransferToonRequest::kTargetFieldNumber;
const int TransferToonRequest::kHostFieldNumber;
#endif  // !_MSC_VER

TransferToonRequest::TransferToonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransferToonRequest::InitAsDefaultInstance() {
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  source_ = const_cast< ::bnet::protocol::game_utilities::TransferToonRequest_Account*>(&::bnet::protocol::game_utilities::TransferToonRequest_Account::default_instance());
  target_ = const_cast< ::bnet::protocol::game_utilities::TransferToonRequest_Account*>(&::bnet::protocol::game_utilities::TransferToonRequest_Account::default_instance());
  host_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
}

TransferToonRequest::TransferToonRequest(const TransferToonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransferToonRequest::SharedCtor() {
  _cached_size_ = 0;
  toon_id_ = NULL;
  source_ = NULL;
  target_ = NULL;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferToonRequest::~TransferToonRequest() {
  SharedDtor();
}

void TransferToonRequest::SharedDtor() {
  if (this != default_instance_) {
    delete toon_id_;
    delete source_;
    delete target_;
    delete host_;
  }
}

void TransferToonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferToonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferToonRequest_descriptor_;
}

const TransferToonRequest& TransferToonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

TransferToonRequest* TransferToonRequest::default_instance_ = NULL;

TransferToonRequest* TransferToonRequest::New() const {
  return new TransferToonRequest;
}

void TransferToonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_source()) {
      if (source_ != NULL) source_->::bnet::protocol::game_utilities::TransferToonRequest_Account::Clear();
    }
    if (has_target()) {
      if (target_ != NULL) target_->::bnet::protocol::game_utilities::TransferToonRequest_Account::Clear();
    }
    if (has_host()) {
      if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferToonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId toon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_source;
        break;
      }
      
      // optional .bnet.protocol.game_utilities.TransferToonRequest.Account source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }
      
      // optional .bnet.protocol.game_utilities.TransferToonRequest.Account target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_host;
        break;
      }
      
      // optional .bnet.protocol.ProcessId host = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransferToonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId toon_id = 1;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->toon_id(), output);
  }
  
  // optional .bnet.protocol.game_utilities.TransferToonRequest.Account source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->source(), output);
  }
  
  // optional .bnet.protocol.game_utilities.TransferToonRequest.Account target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }
  
  // optional .bnet.protocol.ProcessId host = 4;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->host(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransferToonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId toon_id = 1;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->toon_id(), target);
  }
  
  // optional .bnet.protocol.game_utilities.TransferToonRequest.Account source = 2;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->source(), target);
  }
  
  // optional .bnet.protocol.game_utilities.TransferToonRequest.Account target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }
  
  // optional .bnet.protocol.ProcessId host = 4;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->host(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransferToonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId toon_id = 1;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // optional .bnet.protocol.game_utilities.TransferToonRequest.Account source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }
    
    // optional .bnet.protocol.game_utilities.TransferToonRequest.Account target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // optional .bnet.protocol.ProcessId host = 4;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferToonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferToonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferToonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferToonRequest::MergeFrom(const TransferToonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_source()) {
      mutable_source()->::bnet::protocol::game_utilities::TransferToonRequest_Account::MergeFrom(from.source());
    }
    if (from.has_target()) {
      mutable_target()->::bnet::protocol::game_utilities::TransferToonRequest_Account::MergeFrom(from.target());
    }
    if (from.has_host()) {
      mutable_host()->::bnet::protocol::ProcessId::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferToonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferToonRequest::CopyFrom(const TransferToonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferToonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void TransferToonRequest::Swap(TransferToonRequest* other) {
  if (other != this) {
    std::swap(toon_id_, other->toon_id_);
    std::swap(source_, other->source_);
    std::swap(target_, other->target_);
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferToonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferToonRequest_descriptor_;
  metadata.reflection = TransferToonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectToonRequest::kBnetAccountIdFieldNumber;
const int SelectToonRequest::kGameAccountIdFieldNumber;
const int SelectToonRequest::kToonIdFieldNumber;
const int SelectToonRequest::kHostFieldNumber;
#endif  // !_MSC_VER

SelectToonRequest::SelectToonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectToonRequest::InitAsDefaultInstance() {
  bnet_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  host_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
}

SelectToonRequest::SelectToonRequest(const SelectToonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectToonRequest::SharedCtor() {
  _cached_size_ = 0;
  bnet_account_id_ = NULL;
  game_account_id_ = NULL;
  toon_id_ = NULL;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectToonRequest::~SelectToonRequest() {
  SharedDtor();
}

void SelectToonRequest::SharedDtor() {
  if (this != default_instance_) {
    delete bnet_account_id_;
    delete game_account_id_;
    delete toon_id_;
    delete host_;
  }
}

void SelectToonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectToonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectToonRequest_descriptor_;
}

const SelectToonRequest& SelectToonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

SelectToonRequest* SelectToonRequest::default_instance_ = NULL;

SelectToonRequest* SelectToonRequest::New() const {
  return new SelectToonRequest;
}

void SelectToonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bnet_account_id()) {
      if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_host()) {
      if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectToonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId bnet_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_account_id;
        break;
      }
      
      // required .bnet.protocol.EntityId game_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toon_id;
        break;
      }
      
      // required .bnet.protocol.EntityId toon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_host;
        break;
      }
      
      // optional .bnet.protocol.ProcessId host = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectToonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bnet_account_id(), output);
  }
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_account_id(), output);
  }
  
  // required .bnet.protocol.EntityId toon_id = 3;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->toon_id(), output);
  }
  
  // optional .bnet.protocol.ProcessId host = 4;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->host(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectToonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bnet_account_id(), target);
  }
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_account_id(), target);
  }
  
  // required .bnet.protocol.EntityId toon_id = 3;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->toon_id(), target);
  }
  
  // optional .bnet.protocol.ProcessId host = 4;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->host(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectToonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId bnet_account_id = 1;
    if (has_bnet_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account_id());
    }
    
    // required .bnet.protocol.EntityId game_account_id = 2;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }
    
    // required .bnet.protocol.EntityId toon_id = 3;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // optional .bnet.protocol.ProcessId host = 4;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectToonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectToonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectToonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectToonRequest::MergeFrom(const SelectToonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bnet_account_id()) {
      mutable_bnet_account_id()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account_id());
    }
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::bnet::protocol::EntityId::MergeFrom(from.game_account_id());
    }
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_host()) {
      mutable_host()->::bnet::protocol::ProcessId::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectToonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectToonRequest::CopyFrom(const SelectToonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectToonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_bnet_account_id()) {
    if (!this->bnet_account_id().IsInitialized()) return false;
  }
  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void SelectToonRequest::Swap(SelectToonRequest* other) {
  if (other != this) {
    std::swap(bnet_account_id_, other->bnet_account_id_);
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(toon_id_, other->toon_id_);
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectToonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectToonRequest_descriptor_;
  metadata.reflection = SelectToonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PresenceChannelCreatedRequest::kIdFieldNumber;
const int PresenceChannelCreatedRequest::kToonIdFieldNumber;
const int PresenceChannelCreatedRequest::kGameAccountIdFieldNumber;
const int PresenceChannelCreatedRequest::kBnetAccountIdFieldNumber;
const int PresenceChannelCreatedRequest::kHostFieldNumber;
#endif  // !_MSC_VER

PresenceChannelCreatedRequest::PresenceChannelCreatedRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PresenceChannelCreatedRequest::InitAsDefaultInstance() {
  id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  bnet_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  host_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
}

PresenceChannelCreatedRequest::PresenceChannelCreatedRequest(const PresenceChannelCreatedRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PresenceChannelCreatedRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  toon_id_ = NULL;
  game_account_id_ = NULL;
  bnet_account_id_ = NULL;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PresenceChannelCreatedRequest::~PresenceChannelCreatedRequest() {
  SharedDtor();
}

void PresenceChannelCreatedRequest::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete toon_id_;
    delete game_account_id_;
    delete bnet_account_id_;
    delete host_;
  }
}

void PresenceChannelCreatedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PresenceChannelCreatedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PresenceChannelCreatedRequest_descriptor_;
}

const PresenceChannelCreatedRequest& PresenceChannelCreatedRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

PresenceChannelCreatedRequest* PresenceChannelCreatedRequest::default_instance_ = NULL;

PresenceChannelCreatedRequest* PresenceChannelCreatedRequest::New() const {
  return new PresenceChannelCreatedRequest;
}

void PresenceChannelCreatedRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_bnet_account_id()) {
      if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_host()) {
      if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PresenceChannelCreatedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toon_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId toon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_account_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId game_account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bnet_account_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId bnet_account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_host;
        break;
      }
      
      // optional .bnet.protocol.ProcessId host = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PresenceChannelCreatedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .bnet.protocol.EntityId toon_id = 2;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toon_id(), output);
  }
  
  // optional .bnet.protocol.EntityId game_account_id = 3;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->game_account_id(), output);
  }
  
  // optional .bnet.protocol.EntityId bnet_account_id = 4;
  if (has_bnet_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bnet_account_id(), output);
  }
  
  // optional .bnet.protocol.ProcessId host = 5;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->host(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PresenceChannelCreatedRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .bnet.protocol.EntityId toon_id = 2;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toon_id(), target);
  }
  
  // optional .bnet.protocol.EntityId game_account_id = 3;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->game_account_id(), target);
  }
  
  // optional .bnet.protocol.EntityId bnet_account_id = 4;
  if (has_bnet_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bnet_account_id(), target);
  }
  
  // optional .bnet.protocol.ProcessId host = 5;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->host(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PresenceChannelCreatedRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .bnet.protocol.EntityId toon_id = 2;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // optional .bnet.protocol.EntityId game_account_id = 3;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }
    
    // optional .bnet.protocol.EntityId bnet_account_id = 4;
    if (has_bnet_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account_id());
    }
    
    // optional .bnet.protocol.ProcessId host = 5;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PresenceChannelCreatedRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PresenceChannelCreatedRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PresenceChannelCreatedRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PresenceChannelCreatedRequest::MergeFrom(const PresenceChannelCreatedRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::bnet::protocol::EntityId::MergeFrom(from.id());
    }
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::bnet::protocol::EntityId::MergeFrom(from.game_account_id());
    }
    if (from.has_bnet_account_id()) {
      mutable_bnet_account_id()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account_id());
    }
    if (from.has_host()) {
      mutable_host()->::bnet::protocol::ProcessId::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PresenceChannelCreatedRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresenceChannelCreatedRequest::CopyFrom(const PresenceChannelCreatedRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenceChannelCreatedRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  if (has_bnet_account_id()) {
    if (!this->bnet_account_id().IsInitialized()) return false;
  }
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void PresenceChannelCreatedRequest::Swap(PresenceChannelCreatedRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(toon_id_, other->toon_id_);
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(bnet_account_id_, other->bnet_account_id_);
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PresenceChannelCreatedRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PresenceChannelCreatedRequest_descriptor_;
  metadata.reflection = PresenceChannelCreatedRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerVariablesRequest::kBnetAccountIdFieldNumber;
const int PlayerVariablesRequest::kGameAccountIdFieldNumber;
const int PlayerVariablesRequest::kToonIdFieldNumber;
const int PlayerVariablesRequest::kVariableFieldNumber;
const int PlayerVariablesRequest::kHostFieldNumber;
#endif  // !_MSC_VER

PlayerVariablesRequest::PlayerVariablesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerVariablesRequest::InitAsDefaultInstance() {
  bnet_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  toon_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  host_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
}

PlayerVariablesRequest::PlayerVariablesRequest(const PlayerVariablesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerVariablesRequest::SharedCtor() {
  _cached_size_ = 0;
  bnet_account_id_ = NULL;
  game_account_id_ = NULL;
  toon_id_ = NULL;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerVariablesRequest::~PlayerVariablesRequest() {
  SharedDtor();
}

void PlayerVariablesRequest::SharedDtor() {
  if (this != default_instance_) {
    delete bnet_account_id_;
    delete game_account_id_;
    delete toon_id_;
    delete host_;
  }
}

void PlayerVariablesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerVariablesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerVariablesRequest_descriptor_;
}

const PlayerVariablesRequest& PlayerVariablesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

PlayerVariablesRequest* PlayerVariablesRequest::default_instance_ = NULL;

PlayerVariablesRequest* PlayerVariablesRequest::New() const {
  return new PlayerVariablesRequest;
}

void PlayerVariablesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bnet_account_id()) {
      if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account_id()) {
      if (game_account_id_ != NULL) game_account_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_host()) {
      if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
    }
  }
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerVariablesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId bnet_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_account_id;
        break;
      }
      
      // required .bnet.protocol.EntityId game_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toon_id;
        break;
      }
      
      // required .bnet.protocol.EntityId toon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_variable;
        break;
      }
      
      // repeated string variable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_variable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->variable(0).data(), this->variable(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_variable;
        if (input->ExpectTag(42)) goto parse_host;
        break;
      }
      
      // optional .bnet.protocol.ProcessId host = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerVariablesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bnet_account_id(), output);
  }
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_account_id(), output);
  }
  
  // required .bnet.protocol.EntityId toon_id = 3;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->toon_id(), output);
  }
  
  // repeated string variable = 4;
  for (int i = 0; i < this->variable_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->variable(i).data(), this->variable(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->variable(i), output);
  }
  
  // optional .bnet.protocol.ProcessId host = 5;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->host(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerVariablesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId bnet_account_id = 1;
  if (has_bnet_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bnet_account_id(), target);
  }
  
  // required .bnet.protocol.EntityId game_account_id = 2;
  if (has_game_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_account_id(), target);
  }
  
  // required .bnet.protocol.EntityId toon_id = 3;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->toon_id(), target);
  }
  
  // repeated string variable = 4;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->variable(i).data(), this->variable(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->variable(i), target);
  }
  
  // optional .bnet.protocol.ProcessId host = 5;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->host(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerVariablesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId bnet_account_id = 1;
    if (has_bnet_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account_id());
    }
    
    // required .bnet.protocol.EntityId game_account_id = 2;
    if (has_game_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account_id());
    }
    
    // required .bnet.protocol.EntityId toon_id = 3;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // optional .bnet.protocol.ProcessId host = 5;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }
    
  }
  // repeated string variable = 4;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->variable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerVariablesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerVariablesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerVariablesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerVariablesRequest::MergeFrom(const PlayerVariablesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bnet_account_id()) {
      mutable_bnet_account_id()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account_id());
    }
    if (from.has_game_account_id()) {
      mutable_game_account_id()->::bnet::protocol::EntityId::MergeFrom(from.game_account_id());
    }
    if (from.has_toon_id()) {
      mutable_toon_id()->::bnet::protocol::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_host()) {
      mutable_host()->::bnet::protocol::ProcessId::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerVariablesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerVariablesRequest::CopyFrom(const PlayerVariablesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerVariablesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_bnet_account_id()) {
    if (!this->bnet_account_id().IsInitialized()) return false;
  }
  if (has_game_account_id()) {
    if (!this->game_account_id().IsInitialized()) return false;
  }
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void PlayerVariablesRequest::Swap(PlayerVariablesRequest* other) {
  if (other != this) {
    std::swap(bnet_account_id_, other->bnet_account_id_);
    std::swap(game_account_id_, other->game_account_id_);
    std::swap(toon_id_, other->toon_id_);
    variable_.Swap(&other->variable_);
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerVariablesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerVariablesRequest_descriptor_;
  metadata.reflection = PlayerVariablesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameVariablesRequest::kAttributeFieldNumber;
const int GameVariablesRequest::kVariableFieldNumber;
const int GameVariablesRequest::kHostFieldNumber;
#endif  // !_MSC_VER

GameVariablesRequest::GameVariablesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameVariablesRequest::InitAsDefaultInstance() {
  host_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
}

GameVariablesRequest::GameVariablesRequest(const GameVariablesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameVariablesRequest::SharedCtor() {
  _cached_size_ = 0;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameVariablesRequest::~GameVariablesRequest() {
  SharedDtor();
}

void GameVariablesRequest::SharedDtor() {
  if (this != default_instance_) {
    delete host_;
  }
}

void GameVariablesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameVariablesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameVariablesRequest_descriptor_;
}

const GameVariablesRequest& GameVariablesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

GameVariablesRequest* GameVariablesRequest::default_instance_ = NULL;

GameVariablesRequest* GameVariablesRequest::New() const {
  return new GameVariablesRequest;
}

void GameVariablesRequest::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_host()) {
      if (host_ != NULL) host_->::bnet::protocol::ProcessId::Clear();
    }
  }
  attribute_.Clear();
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameVariablesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.attribute.Attribute attribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(18)) goto parse_variable;
        break;
      }
      
      // repeated string variable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_variable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->variable(0).data(), this->variable(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        if (input->ExpectTag(26)) goto parse_host;
        break;
      }
      
      // optional .bnet.protocol.ProcessId host = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameVariablesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }
  
  // repeated string variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->variable(i).data(), this->variable(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->variable(i), output);
  }
  
  // optional .bnet.protocol.ProcessId host = 3;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->host(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameVariablesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }
  
  // repeated string variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->variable(i).data(), this->variable(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->variable(i), target);
  }
  
  // optional .bnet.protocol.ProcessId host = 3;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->host(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameVariablesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .bnet.protocol.ProcessId host = 3;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  // repeated string variable = 2;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->variable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameVariablesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameVariablesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameVariablesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameVariablesRequest::MergeFrom(const GameVariablesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  variable_.MergeFrom(from.variable_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_host()) {
      mutable_host()->::bnet::protocol::ProcessId::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameVariablesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameVariablesRequest::CopyFrom(const GameVariablesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameVariablesRequest::IsInitialized() const {
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void GameVariablesRequest::Swap(GameVariablesRequest* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    variable_.Swap(&other->variable_);
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameVariablesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameVariablesRequest_descriptor_;
  metadata.reflection = GameVariablesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VariablesResponse::kValueFieldNumber;
#endif  // !_MSC_VER

VariablesResponse::VariablesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VariablesResponse::InitAsDefaultInstance() {
}

VariablesResponse::VariablesResponse(const VariablesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VariablesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VariablesResponse::~VariablesResponse() {
  SharedDtor();
}

void VariablesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VariablesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariablesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariablesResponse_descriptor_;
}

const VariablesResponse& VariablesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fgame_5futilities_2fgame_5futilities_2eproto();  return *default_instance_;
}

VariablesResponse* VariablesResponse::default_instance_ = NULL;

VariablesResponse* VariablesResponse::New() const {
  return new VariablesResponse;
}

void VariablesResponse::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VariablesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VariablesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VariablesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VariablesResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated float value = 1;
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariablesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VariablesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VariablesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VariablesResponse::MergeFrom(const VariablesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VariablesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariablesResponse::CopyFrom(const VariablesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariablesResponse::IsInitialized() const {
  
  return true;
}

void VariablesResponse::Swap(VariablesResponse* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VariablesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariablesResponse_descriptor_;
  metadata.reflection = VariablesResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_utilities
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
