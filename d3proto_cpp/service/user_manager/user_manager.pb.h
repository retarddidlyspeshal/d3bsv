// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/user_manager/user_manager.proto

#ifndef PROTOBUF_service_2fuser_5fmanager_2fuser_5fmanager_2eproto__INCLUDED
#define PROTOBUF_service_2fuser_5fmanager_2fuser_5fmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/protocol/attribute.pb.h"
#include "lib/protocol/entity.pb.h"
#include "lib/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace user_manager {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();

class PlayerReport;
class RecentPlayer;
class SubscribeToUserManagerRequest;
class SubscribeToUserManagerResponse;
class ReportPlayerRequest;
class ReportPlayerResponse;
class CheckPlayerBlockRequest;
class CheckPlayerBlockResponse;
class BlockPlayerRequest;
class BlockPlayerResponse;
class RemovePlayerBlockRequest;
class RemovePlayerBlockResponse;
class AddRecentPlayersRequest;
class AddRecentPlayersResponse;
class RemoveRecentPlayersRequest;
class RemoveRecentPlayersResponse;
class BlockedPlayerNotification;

enum PlayerReport_UserComplaintCode {
  PlayerReport_UserComplaintCode_USER_COMPLAINT_SPAM = 0,
  PlayerReport_UserComplaintCode_USER_COMPLAINT_HARASSMENT = 1,
  PlayerReport_UserComplaintCode_USER_COMPLAINT_REAL_LIFE_THREAT = 2,
  PlayerReport_UserComplaintCode_USER_COMPLAINT_INAPPROPRIATE_NAME = 3,
  PlayerReport_UserComplaintCode_USER_COMPLAINT_HACKING = 4,
  PlayerReport_UserComplaintCode_USER_COMPLAINT_ANY = 5
};
bool PlayerReport_UserComplaintCode_IsValid(int value);
const PlayerReport_UserComplaintCode PlayerReport_UserComplaintCode_UserComplaintCode_MIN = PlayerReport_UserComplaintCode_USER_COMPLAINT_SPAM;
const PlayerReport_UserComplaintCode PlayerReport_UserComplaintCode_UserComplaintCode_MAX = PlayerReport_UserComplaintCode_USER_COMPLAINT_ANY;
const int PlayerReport_UserComplaintCode_UserComplaintCode_ARRAYSIZE = PlayerReport_UserComplaintCode_UserComplaintCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerReport_UserComplaintCode_descriptor();
inline const ::std::string& PlayerReport_UserComplaintCode_Name(PlayerReport_UserComplaintCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerReport_UserComplaintCode_descriptor(), value);
}
inline bool PlayerReport_UserComplaintCode_Parse(
    const ::std::string& name, PlayerReport_UserComplaintCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerReport_UserComplaintCode>(
    PlayerReport_UserComplaintCode_descriptor(), name, value);
}
// ===================================================================

class PlayerReport : public ::google::protobuf::Message {
 public:
  PlayerReport();
  virtual ~PlayerReport();
  
  PlayerReport(const PlayerReport& from);
  
  inline PlayerReport& operator=(const PlayerReport& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerReport& default_instance();
  
  void Swap(PlayerReport* other);
  
  // implements Message ----------------------------------------------
  
  PlayerReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerReport& from);
  void MergeFrom(const PlayerReport& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PlayerReport_UserComplaintCode UserComplaintCode;
  static const UserComplaintCode USER_COMPLAINT_SPAM = PlayerReport_UserComplaintCode_USER_COMPLAINT_SPAM;
  static const UserComplaintCode USER_COMPLAINT_HARASSMENT = PlayerReport_UserComplaintCode_USER_COMPLAINT_HARASSMENT;
  static const UserComplaintCode USER_COMPLAINT_REAL_LIFE_THREAT = PlayerReport_UserComplaintCode_USER_COMPLAINT_REAL_LIFE_THREAT;
  static const UserComplaintCode USER_COMPLAINT_INAPPROPRIATE_NAME = PlayerReport_UserComplaintCode_USER_COMPLAINT_INAPPROPRIATE_NAME;
  static const UserComplaintCode USER_COMPLAINT_HACKING = PlayerReport_UserComplaintCode_USER_COMPLAINT_HACKING;
  static const UserComplaintCode USER_COMPLAINT_ANY = PlayerReport_UserComplaintCode_USER_COMPLAINT_ANY;
  static inline bool UserComplaintCode_IsValid(int value) {
    return PlayerReport_UserComplaintCode_IsValid(value);
  }
  static const UserComplaintCode UserComplaintCode_MIN =
    PlayerReport_UserComplaintCode_UserComplaintCode_MIN;
  static const UserComplaintCode UserComplaintCode_MAX =
    PlayerReport_UserComplaintCode_UserComplaintCode_MAX;
  static const int UserComplaintCode_ARRAYSIZE =
    PlayerReport_UserComplaintCode_UserComplaintCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UserComplaintCode_descriptor() {
    return PlayerReport_UserComplaintCode_descriptor();
  }
  static inline const ::std::string& UserComplaintCode_Name(UserComplaintCode value) {
    return PlayerReport_UserComplaintCode_Name(value);
  }
  static inline bool UserComplaintCode_Parse(const ::std::string& name,
      UserComplaintCode* value) {
    return PlayerReport_UserComplaintCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.user_manager.PlayerReport.UserComplaintCode complaint_code = 1;
  inline bool has_complaint_code() const;
  inline void clear_complaint_code();
  static const int kComplaintCodeFieldNumber = 1;
  inline ::bnet::protocol::user_manager::PlayerReport_UserComplaintCode complaint_code() const;
  inline void set_complaint_code(::bnet::protocol::user_manager::PlayerReport_UserComplaintCode value);
  
  // required string complaint_note = 2;
  inline bool has_complaint_note() const;
  inline void clear_complaint_note();
  static const int kComplaintNoteFieldNumber = 2;
  inline const ::std::string& complaint_note() const;
  inline void set_complaint_note(const ::std::string& value);
  inline void set_complaint_note(const char* value);
  inline void set_complaint_note(const char* value, size_t size);
  inline ::std::string* mutable_complaint_note();
  inline ::std::string* release_complaint_note();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.PlayerReport)
 private:
  inline void set_has_complaint_code();
  inline void clear_has_complaint_code();
  inline void set_has_complaint_note();
  inline void clear_has_complaint_note();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* complaint_note_;
  int complaint_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerReport* default_instance_;
};
// -------------------------------------------------------------------

class RecentPlayer : public ::google::protobuf::Message {
 public:
  RecentPlayer();
  virtual ~RecentPlayer();
  
  RecentPlayer(const RecentPlayer& from);
  
  inline RecentPlayer& operator=(const RecentPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecentPlayer& default_instance();
  
  void Swap(RecentPlayer* other);
  
  // implements Message ----------------------------------------------
  
  RecentPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecentPlayer& from);
  void MergeFrom(const RecentPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& player() const;
  inline ::bnet::protocol::EntityId* mutable_player();
  inline ::bnet::protocol::EntityId* release_player();
  
  // optional fixed64 timestamp_played = 2;
  inline bool has_timestamp_played() const;
  inline void clear_timestamp_played();
  static const int kTimestampPlayedFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp_played() const;
  inline void set_timestamp_played(::google::protobuf::uint64 value);
  
  // repeated .bnet.protocol.attribute.Attribute attributes = 3;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  inline const ::bnet::protocol::attribute::Attribute& attributes(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attributes(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attributes();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.RecentPlayer)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_timestamp_played();
  inline void clear_has_timestamp_played();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* player_;
  ::google::protobuf::uint64 timestamp_played_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attributes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static RecentPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeToUserManagerRequest : public ::google::protobuf::Message {
 public:
  SubscribeToUserManagerRequest();
  virtual ~SubscribeToUserManagerRequest();
  
  SubscribeToUserManagerRequest(const SubscribeToUserManagerRequest& from);
  
  inline SubscribeToUserManagerRequest& operator=(const SubscribeToUserManagerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeToUserManagerRequest& default_instance();
  
  void Swap(SubscribeToUserManagerRequest* other);
  
  // implements Message ----------------------------------------------
  
  SubscribeToUserManagerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeToUserManagerRequest& from);
  void MergeFrom(const SubscribeToUserManagerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 object_id = 1;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.SubscribeToUserManagerRequest)
 private:
  inline void set_has_object_id();
  inline void clear_has_object_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 object_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static SubscribeToUserManagerRequest* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeToUserManagerResponse : public ::google::protobuf::Message {
 public:
  SubscribeToUserManagerResponse();
  virtual ~SubscribeToUserManagerResponse();
  
  SubscribeToUserManagerResponse(const SubscribeToUserManagerResponse& from);
  
  inline SubscribeToUserManagerResponse& operator=(const SubscribeToUserManagerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeToUserManagerResponse& default_instance();
  
  void Swap(SubscribeToUserManagerResponse* other);
  
  // implements Message ----------------------------------------------
  
  SubscribeToUserManagerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeToUserManagerResponse& from);
  void MergeFrom(const SubscribeToUserManagerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.EntityId blocked_users = 1;
  inline int blocked_users_size() const;
  inline void clear_blocked_users();
  static const int kBlockedUsersFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& blocked_users(int index) const;
  inline ::bnet::protocol::EntityId* mutable_blocked_users(int index);
  inline ::bnet::protocol::EntityId* add_blocked_users();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
      blocked_users() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
      mutable_blocked_users();
  
  // repeated .bnet.protocol.user_manager.RecentPlayer recent_players = 2;
  inline int recent_players_size() const;
  inline void clear_recent_players();
  static const int kRecentPlayersFieldNumber = 2;
  inline const ::bnet::protocol::user_manager::RecentPlayer& recent_players(int index) const;
  inline ::bnet::protocol::user_manager::RecentPlayer* mutable_recent_players(int index);
  inline ::bnet::protocol::user_manager::RecentPlayer* add_recent_players();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
      recent_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
      mutable_recent_players();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.SubscribeToUserManagerResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId > blocked_users_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer > recent_players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static SubscribeToUserManagerResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReportPlayerRequest : public ::google::protobuf::Message {
 public:
  ReportPlayerRequest();
  virtual ~ReportPlayerRequest();
  
  ReportPlayerRequest(const ReportPlayerRequest& from);
  
  inline ReportPlayerRequest& operator=(const ReportPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportPlayerRequest& default_instance();
  
  void Swap(ReportPlayerRequest* other);
  
  // implements Message ----------------------------------------------
  
  ReportPlayerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportPlayerRequest& from);
  void MergeFrom(const ReportPlayerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& target_id() const;
  inline ::bnet::protocol::EntityId* mutable_target_id();
  inline ::bnet::protocol::EntityId* release_target_id();
  
  // required .bnet.protocol.user_manager.PlayerReport report = 2;
  inline bool has_report() const;
  inline void clear_report();
  static const int kReportFieldNumber = 2;
  inline const ::bnet::protocol::user_manager::PlayerReport& report() const;
  inline ::bnet::protocol::user_manager::PlayerReport* mutable_report();
  inline ::bnet::protocol::user_manager::PlayerReport* release_report();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.ReportPlayerRequest)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_report();
  inline void clear_has_report();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* target_id_;
  ::bnet::protocol::user_manager::PlayerReport* report_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static ReportPlayerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportPlayerResponse : public ::google::protobuf::Message {
 public:
  ReportPlayerResponse();
  virtual ~ReportPlayerResponse();
  
  ReportPlayerResponse(const ReportPlayerResponse& from);
  
  inline ReportPlayerResponse& operator=(const ReportPlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportPlayerResponse& default_instance();
  
  void Swap(ReportPlayerResponse* other);
  
  // implements Message ----------------------------------------------
  
  ReportPlayerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportPlayerResponse& from);
  void MergeFrom(const ReportPlayerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId reported_user = 1;
  inline bool has_reported_user() const;
  inline void clear_reported_user();
  static const int kReportedUserFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& reported_user() const;
  inline ::bnet::protocol::EntityId* mutable_reported_user();
  inline ::bnet::protocol::EntityId* release_reported_user();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.ReportPlayerResponse)
 private:
  inline void set_has_reported_user();
  inline void clear_has_reported_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* reported_user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static ReportPlayerResponse* default_instance_;
};
// -------------------------------------------------------------------

class CheckPlayerBlockRequest : public ::google::protobuf::Message {
 public:
  CheckPlayerBlockRequest();
  virtual ~CheckPlayerBlockRequest();
  
  CheckPlayerBlockRequest(const CheckPlayerBlockRequest& from);
  
  inline CheckPlayerBlockRequest& operator=(const CheckPlayerBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckPlayerBlockRequest& default_instance();
  
  void Swap(CheckPlayerBlockRequest* other);
  
  // implements Message ----------------------------------------------
  
  CheckPlayerBlockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckPlayerBlockRequest& from);
  void MergeFrom(const CheckPlayerBlockRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& target_id() const;
  inline ::bnet::protocol::EntityId* mutable_target_id();
  inline ::bnet::protocol::EntityId* release_target_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.CheckPlayerBlockRequest)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* target_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static CheckPlayerBlockRequest* default_instance_;
};
// -------------------------------------------------------------------

class CheckPlayerBlockResponse : public ::google::protobuf::Message {
 public:
  CheckPlayerBlockResponse();
  virtual ~CheckPlayerBlockResponse();
  
  CheckPlayerBlockResponse(const CheckPlayerBlockResponse& from);
  
  inline CheckPlayerBlockResponse& operator=(const CheckPlayerBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckPlayerBlockResponse& default_instance();
  
  void Swap(CheckPlayerBlockResponse* other);
  
  // implements Message ----------------------------------------------
  
  CheckPlayerBlockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckPlayerBlockResponse& from);
  void MergeFrom(const CheckPlayerBlockResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId blocked_user = 1;
  inline bool has_blocked_user() const;
  inline void clear_blocked_user();
  static const int kBlockedUserFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& blocked_user() const;
  inline ::bnet::protocol::EntityId* mutable_blocked_user();
  inline ::bnet::protocol::EntityId* release_blocked_user();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.CheckPlayerBlockResponse)
 private:
  inline void set_has_blocked_user();
  inline void clear_has_blocked_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* blocked_user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static CheckPlayerBlockResponse* default_instance_;
};
// -------------------------------------------------------------------

class BlockPlayerRequest : public ::google::protobuf::Message {
 public:
  BlockPlayerRequest();
  virtual ~BlockPlayerRequest();
  
  BlockPlayerRequest(const BlockPlayerRequest& from);
  
  inline BlockPlayerRequest& operator=(const BlockPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockPlayerRequest& default_instance();
  
  void Swap(BlockPlayerRequest* other);
  
  // implements Message ----------------------------------------------
  
  BlockPlayerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockPlayerRequest& from);
  void MergeFrom(const BlockPlayerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& target_id() const;
  inline ::bnet::protocol::EntityId* mutable_target_id();
  inline ::bnet::protocol::EntityId* release_target_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.BlockPlayerRequest)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* target_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static BlockPlayerRequest* default_instance_;
};
// -------------------------------------------------------------------

class BlockPlayerResponse : public ::google::protobuf::Message {
 public:
  BlockPlayerResponse();
  virtual ~BlockPlayerResponse();
  
  BlockPlayerResponse(const BlockPlayerResponse& from);
  
  inline BlockPlayerResponse& operator=(const BlockPlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockPlayerResponse& default_instance();
  
  void Swap(BlockPlayerResponse* other);
  
  // implements Message ----------------------------------------------
  
  BlockPlayerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockPlayerResponse& from);
  void MergeFrom(const BlockPlayerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId blocked_user = 1;
  inline bool has_blocked_user() const;
  inline void clear_blocked_user();
  static const int kBlockedUserFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& blocked_user() const;
  inline ::bnet::protocol::EntityId* mutable_blocked_user();
  inline ::bnet::protocol::EntityId* release_blocked_user();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.BlockPlayerResponse)
 private:
  inline void set_has_blocked_user();
  inline void clear_has_blocked_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* blocked_user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static BlockPlayerResponse* default_instance_;
};
// -------------------------------------------------------------------

class RemovePlayerBlockRequest : public ::google::protobuf::Message {
 public:
  RemovePlayerBlockRequest();
  virtual ~RemovePlayerBlockRequest();
  
  RemovePlayerBlockRequest(const RemovePlayerBlockRequest& from);
  
  inline RemovePlayerBlockRequest& operator=(const RemovePlayerBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePlayerBlockRequest& default_instance();
  
  void Swap(RemovePlayerBlockRequest* other);
  
  // implements Message ----------------------------------------------
  
  RemovePlayerBlockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemovePlayerBlockRequest& from);
  void MergeFrom(const RemovePlayerBlockRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& target_id() const;
  inline ::bnet::protocol::EntityId* mutable_target_id();
  inline ::bnet::protocol::EntityId* release_target_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.RemovePlayerBlockRequest)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* target_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static RemovePlayerBlockRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemovePlayerBlockResponse : public ::google::protobuf::Message {
 public:
  RemovePlayerBlockResponse();
  virtual ~RemovePlayerBlockResponse();
  
  RemovePlayerBlockResponse(const RemovePlayerBlockResponse& from);
  
  inline RemovePlayerBlockResponse& operator=(const RemovePlayerBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePlayerBlockResponse& default_instance();
  
  void Swap(RemovePlayerBlockResponse* other);
  
  // implements Message ----------------------------------------------
  
  RemovePlayerBlockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemovePlayerBlockResponse& from);
  void MergeFrom(const RemovePlayerBlockResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId blocked_user = 1;
  inline bool has_blocked_user() const;
  inline void clear_blocked_user();
  static const int kBlockedUserFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& blocked_user() const;
  inline ::bnet::protocol::EntityId* mutable_blocked_user();
  inline ::bnet::protocol::EntityId* release_blocked_user();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.RemovePlayerBlockResponse)
 private:
  inline void set_has_blocked_user();
  inline void clear_has_blocked_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* blocked_user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static RemovePlayerBlockResponse* default_instance_;
};
// -------------------------------------------------------------------

class AddRecentPlayersRequest : public ::google::protobuf::Message {
 public:
  AddRecentPlayersRequest();
  virtual ~AddRecentPlayersRequest();
  
  AddRecentPlayersRequest(const AddRecentPlayersRequest& from);
  
  inline AddRecentPlayersRequest& operator=(const AddRecentPlayersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRecentPlayersRequest& default_instance();
  
  void Swap(AddRecentPlayersRequest* other);
  
  // implements Message ----------------------------------------------
  
  AddRecentPlayersRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddRecentPlayersRequest& from);
  void MergeFrom(const AddRecentPlayersRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::bnet::protocol::user_manager::RecentPlayer& players(int index) const;
  inline ::bnet::protocol::user_manager::RecentPlayer* mutable_players(int index);
  inline ::bnet::protocol::user_manager::RecentPlayer* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.AddRecentPlayersRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static AddRecentPlayersRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddRecentPlayersResponse : public ::google::protobuf::Message {
 public:
  AddRecentPlayersResponse();
  virtual ~AddRecentPlayersResponse();
  
  AddRecentPlayersResponse(const AddRecentPlayersResponse& from);
  
  inline AddRecentPlayersResponse& operator=(const AddRecentPlayersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRecentPlayersResponse& default_instance();
  
  void Swap(AddRecentPlayersResponse* other);
  
  // implements Message ----------------------------------------------
  
  AddRecentPlayersResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddRecentPlayersResponse& from);
  void MergeFrom(const AddRecentPlayersResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players_added = 1;
  inline int players_added_size() const;
  inline void clear_players_added();
  static const int kPlayersAddedFieldNumber = 1;
  inline const ::bnet::protocol::user_manager::RecentPlayer& players_added(int index) const;
  inline ::bnet::protocol::user_manager::RecentPlayer* mutable_players_added(int index);
  inline ::bnet::protocol::user_manager::RecentPlayer* add_players_added();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
      players_added() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
      mutable_players_added();
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 3;
  inline int players_removed_size() const;
  inline void clear_players_removed();
  static const int kPlayersRemovedFieldNumber = 3;
  inline const ::bnet::protocol::user_manager::RecentPlayer& players_removed(int index) const;
  inline ::bnet::protocol::user_manager::RecentPlayer* mutable_players_removed(int index);
  inline ::bnet::protocol::user_manager::RecentPlayer* add_players_removed();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
      players_removed() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
      mutable_players_removed();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.AddRecentPlayersResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer > players_added_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer > players_removed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static AddRecentPlayersResponse* default_instance_;
};
// -------------------------------------------------------------------

class RemoveRecentPlayersRequest : public ::google::protobuf::Message {
 public:
  RemoveRecentPlayersRequest();
  virtual ~RemoveRecentPlayersRequest();
  
  RemoveRecentPlayersRequest(const RemoveRecentPlayersRequest& from);
  
  inline RemoveRecentPlayersRequest& operator=(const RemoveRecentPlayersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRecentPlayersRequest& default_instance();
  
  void Swap(RemoveRecentPlayersRequest* other);
  
  // implements Message ----------------------------------------------
  
  RemoveRecentPlayersRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveRecentPlayersRequest& from);
  void MergeFrom(const RemoveRecentPlayersRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::bnet::protocol::user_manager::RecentPlayer& players(int index) const;
  inline ::bnet::protocol::user_manager::RecentPlayer* mutable_players(int index);
  inline ::bnet::protocol::user_manager::RecentPlayer* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.RemoveRecentPlayersRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static RemoveRecentPlayersRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoveRecentPlayersResponse : public ::google::protobuf::Message {
 public:
  RemoveRecentPlayersResponse();
  virtual ~RemoveRecentPlayersResponse();
  
  RemoveRecentPlayersResponse(const RemoveRecentPlayersResponse& from);
  
  inline RemoveRecentPlayersResponse& operator=(const RemoveRecentPlayersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRecentPlayersResponse& default_instance();
  
  void Swap(RemoveRecentPlayersResponse* other);
  
  // implements Message ----------------------------------------------
  
  RemoveRecentPlayersResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveRecentPlayersResponse& from);
  void MergeFrom(const RemoveRecentPlayersResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 1;
  inline int players_removed_size() const;
  inline void clear_players_removed();
  static const int kPlayersRemovedFieldNumber = 1;
  inline const ::bnet::protocol::user_manager::RecentPlayer& players_removed(int index) const;
  inline ::bnet::protocol::user_manager::RecentPlayer* mutable_players_removed(int index);
  inline ::bnet::protocol::user_manager::RecentPlayer* add_players_removed();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
      players_removed() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
      mutable_players_removed();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.RemoveRecentPlayersResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer > players_removed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static RemoveRecentPlayersResponse* default_instance_;
};
// -------------------------------------------------------------------

class BlockedPlayerNotification : public ::google::protobuf::Message {
 public:
  BlockedPlayerNotification();
  virtual ~BlockedPlayerNotification();
  
  BlockedPlayerNotification(const BlockedPlayerNotification& from);
  
  inline BlockedPlayerNotification& operator=(const BlockedPlayerNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockedPlayerNotification& default_instance();
  
  void Swap(BlockedPlayerNotification* other);
  
  // implements Message ----------------------------------------------
  
  BlockedPlayerNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockedPlayerNotification& from);
  void MergeFrom(const BlockedPlayerNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.EntityId players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& players(int index) const;
  inline ::bnet::protocol::EntityId* mutable_players(int index);
  inline ::bnet::protocol::EntityId* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.user_manager.BlockedPlayerNotification)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  
  void InitAsDefaultInstance();
  static BlockedPlayerNotification* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerReport

// required .bnet.protocol.user_manager.PlayerReport.UserComplaintCode complaint_code = 1;
inline bool PlayerReport::has_complaint_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerReport::set_has_complaint_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerReport::clear_has_complaint_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerReport::clear_complaint_code() {
  complaint_code_ = 0;
  clear_has_complaint_code();
}
inline ::bnet::protocol::user_manager::PlayerReport_UserComplaintCode PlayerReport::complaint_code() const {
  return static_cast< ::bnet::protocol::user_manager::PlayerReport_UserComplaintCode >(complaint_code_);
}
inline void PlayerReport::set_complaint_code(::bnet::protocol::user_manager::PlayerReport_UserComplaintCode value) {
  GOOGLE_DCHECK(::bnet::protocol::user_manager::PlayerReport_UserComplaintCode_IsValid(value));
  set_has_complaint_code();
  complaint_code_ = value;
}

// required string complaint_note = 2;
inline bool PlayerReport::has_complaint_note() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerReport::set_has_complaint_note() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerReport::clear_has_complaint_note() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerReport::clear_complaint_note() {
  if (complaint_note_ != &::google::protobuf::internal::kEmptyString) {
    complaint_note_->clear();
  }
  clear_has_complaint_note();
}
inline const ::std::string& PlayerReport::complaint_note() const {
  return *complaint_note_;
}
inline void PlayerReport::set_complaint_note(const ::std::string& value) {
  set_has_complaint_note();
  if (complaint_note_ == &::google::protobuf::internal::kEmptyString) {
    complaint_note_ = new ::std::string;
  }
  complaint_note_->assign(value);
}
inline void PlayerReport::set_complaint_note(const char* value) {
  set_has_complaint_note();
  if (complaint_note_ == &::google::protobuf::internal::kEmptyString) {
    complaint_note_ = new ::std::string;
  }
  complaint_note_->assign(value);
}
inline void PlayerReport::set_complaint_note(const char* value, size_t size) {
  set_has_complaint_note();
  if (complaint_note_ == &::google::protobuf::internal::kEmptyString) {
    complaint_note_ = new ::std::string;
  }
  complaint_note_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerReport::mutable_complaint_note() {
  set_has_complaint_note();
  if (complaint_note_ == &::google::protobuf::internal::kEmptyString) {
    complaint_note_ = new ::std::string;
  }
  return complaint_note_;
}
inline ::std::string* PlayerReport::release_complaint_note() {
  clear_has_complaint_note();
  if (complaint_note_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = complaint_note_;
    complaint_note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RecentPlayer

// required .bnet.protocol.EntityId player = 1;
inline bool RecentPlayer::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecentPlayer::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecentPlayer::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecentPlayer::clear_player() {
  if (player_ != NULL) player_->::bnet::protocol::EntityId::Clear();
  clear_has_player();
}
inline const ::bnet::protocol::EntityId& RecentPlayer::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::bnet::protocol::EntityId* RecentPlayer::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::bnet::protocol::EntityId;
  return player_;
}
inline ::bnet::protocol::EntityId* RecentPlayer::release_player() {
  clear_has_player();
  ::bnet::protocol::EntityId* temp = player_;
  player_ = NULL;
  return temp;
}

// optional fixed64 timestamp_played = 2;
inline bool RecentPlayer::has_timestamp_played() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecentPlayer::set_has_timestamp_played() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecentPlayer::clear_has_timestamp_played() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecentPlayer::clear_timestamp_played() {
  timestamp_played_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_played();
}
inline ::google::protobuf::uint64 RecentPlayer::timestamp_played() const {
  return timestamp_played_;
}
inline void RecentPlayer::set_timestamp_played(::google::protobuf::uint64 value) {
  set_has_timestamp_played();
  timestamp_played_ = value;
}

// repeated .bnet.protocol.attribute.Attribute attributes = 3;
inline int RecentPlayer::attributes_size() const {
  return attributes_.size();
}
inline void RecentPlayer::clear_attributes() {
  attributes_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& RecentPlayer::attributes(int index) const {
  return attributes_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* RecentPlayer::mutable_attributes(int index) {
  return attributes_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* RecentPlayer::add_attributes() {
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
RecentPlayer::attributes() const {
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
RecentPlayer::mutable_attributes() {
  return &attributes_;
}

// -------------------------------------------------------------------

// SubscribeToUserManagerRequest

// required uint64 object_id = 1;
inline bool SubscribeToUserManagerRequest::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeToUserManagerRequest::set_has_object_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeToUserManagerRequest::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeToUserManagerRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 SubscribeToUserManagerRequest::object_id() const {
  return object_id_;
}
inline void SubscribeToUserManagerRequest::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
}

// -------------------------------------------------------------------

// SubscribeToUserManagerResponse

// repeated .bnet.protocol.EntityId blocked_users = 1;
inline int SubscribeToUserManagerResponse::blocked_users_size() const {
  return blocked_users_.size();
}
inline void SubscribeToUserManagerResponse::clear_blocked_users() {
  blocked_users_.Clear();
}
inline const ::bnet::protocol::EntityId& SubscribeToUserManagerResponse::blocked_users(int index) const {
  return blocked_users_.Get(index);
}
inline ::bnet::protocol::EntityId* SubscribeToUserManagerResponse::mutable_blocked_users(int index) {
  return blocked_users_.Mutable(index);
}
inline ::bnet::protocol::EntityId* SubscribeToUserManagerResponse::add_blocked_users() {
  return blocked_users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
SubscribeToUserManagerResponse::blocked_users() const {
  return blocked_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
SubscribeToUserManagerResponse::mutable_blocked_users() {
  return &blocked_users_;
}

// repeated .bnet.protocol.user_manager.RecentPlayer recent_players = 2;
inline int SubscribeToUserManagerResponse::recent_players_size() const {
  return recent_players_.size();
}
inline void SubscribeToUserManagerResponse::clear_recent_players() {
  recent_players_.Clear();
}
inline const ::bnet::protocol::user_manager::RecentPlayer& SubscribeToUserManagerResponse::recent_players(int index) const {
  return recent_players_.Get(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* SubscribeToUserManagerResponse::mutable_recent_players(int index) {
  return recent_players_.Mutable(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* SubscribeToUserManagerResponse::add_recent_players() {
  return recent_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
SubscribeToUserManagerResponse::recent_players() const {
  return recent_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
SubscribeToUserManagerResponse::mutable_recent_players() {
  return &recent_players_;
}

// -------------------------------------------------------------------

// ReportPlayerRequest

// required .bnet.protocol.EntityId target_id = 1;
inline bool ReportPlayerRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportPlayerRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportPlayerRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportPlayerRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
  clear_has_target_id();
}
inline const ::bnet::protocol::EntityId& ReportPlayerRequest::target_id() const {
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::bnet::protocol::EntityId* ReportPlayerRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::bnet::protocol::EntityId;
  return target_id_;
}
inline ::bnet::protocol::EntityId* ReportPlayerRequest::release_target_id() {
  clear_has_target_id();
  ::bnet::protocol::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}

// required .bnet.protocol.user_manager.PlayerReport report = 2;
inline bool ReportPlayerRequest::has_report() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportPlayerRequest::set_has_report() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportPlayerRequest::clear_has_report() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportPlayerRequest::clear_report() {
  if (report_ != NULL) report_->::bnet::protocol::user_manager::PlayerReport::Clear();
  clear_has_report();
}
inline const ::bnet::protocol::user_manager::PlayerReport& ReportPlayerRequest::report() const {
  return report_ != NULL ? *report_ : *default_instance_->report_;
}
inline ::bnet::protocol::user_manager::PlayerReport* ReportPlayerRequest::mutable_report() {
  set_has_report();
  if (report_ == NULL) report_ = new ::bnet::protocol::user_manager::PlayerReport;
  return report_;
}
inline ::bnet::protocol::user_manager::PlayerReport* ReportPlayerRequest::release_report() {
  clear_has_report();
  ::bnet::protocol::user_manager::PlayerReport* temp = report_;
  report_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ReportPlayerResponse

// optional .bnet.protocol.EntityId reported_user = 1;
inline bool ReportPlayerResponse::has_reported_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportPlayerResponse::set_has_reported_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportPlayerResponse::clear_has_reported_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportPlayerResponse::clear_reported_user() {
  if (reported_user_ != NULL) reported_user_->::bnet::protocol::EntityId::Clear();
  clear_has_reported_user();
}
inline const ::bnet::protocol::EntityId& ReportPlayerResponse::reported_user() const {
  return reported_user_ != NULL ? *reported_user_ : *default_instance_->reported_user_;
}
inline ::bnet::protocol::EntityId* ReportPlayerResponse::mutable_reported_user() {
  set_has_reported_user();
  if (reported_user_ == NULL) reported_user_ = new ::bnet::protocol::EntityId;
  return reported_user_;
}
inline ::bnet::protocol::EntityId* ReportPlayerResponse::release_reported_user() {
  clear_has_reported_user();
  ::bnet::protocol::EntityId* temp = reported_user_;
  reported_user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CheckPlayerBlockRequest

// required .bnet.protocol.EntityId target_id = 1;
inline bool CheckPlayerBlockRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckPlayerBlockRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckPlayerBlockRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckPlayerBlockRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
  clear_has_target_id();
}
inline const ::bnet::protocol::EntityId& CheckPlayerBlockRequest::target_id() const {
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::bnet::protocol::EntityId* CheckPlayerBlockRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::bnet::protocol::EntityId;
  return target_id_;
}
inline ::bnet::protocol::EntityId* CheckPlayerBlockRequest::release_target_id() {
  clear_has_target_id();
  ::bnet::protocol::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CheckPlayerBlockResponse

// optional .bnet.protocol.EntityId blocked_user = 1;
inline bool CheckPlayerBlockResponse::has_blocked_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckPlayerBlockResponse::set_has_blocked_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckPlayerBlockResponse::clear_has_blocked_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckPlayerBlockResponse::clear_blocked_user() {
  if (blocked_user_ != NULL) blocked_user_->::bnet::protocol::EntityId::Clear();
  clear_has_blocked_user();
}
inline const ::bnet::protocol::EntityId& CheckPlayerBlockResponse::blocked_user() const {
  return blocked_user_ != NULL ? *blocked_user_ : *default_instance_->blocked_user_;
}
inline ::bnet::protocol::EntityId* CheckPlayerBlockResponse::mutable_blocked_user() {
  set_has_blocked_user();
  if (blocked_user_ == NULL) blocked_user_ = new ::bnet::protocol::EntityId;
  return blocked_user_;
}
inline ::bnet::protocol::EntityId* CheckPlayerBlockResponse::release_blocked_user() {
  clear_has_blocked_user();
  ::bnet::protocol::EntityId* temp = blocked_user_;
  blocked_user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// BlockPlayerRequest

// required .bnet.protocol.EntityId target_id = 1;
inline bool BlockPlayerRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockPlayerRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockPlayerRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockPlayerRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
  clear_has_target_id();
}
inline const ::bnet::protocol::EntityId& BlockPlayerRequest::target_id() const {
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::bnet::protocol::EntityId* BlockPlayerRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::bnet::protocol::EntityId;
  return target_id_;
}
inline ::bnet::protocol::EntityId* BlockPlayerRequest::release_target_id() {
  clear_has_target_id();
  ::bnet::protocol::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// BlockPlayerResponse

// optional .bnet.protocol.EntityId blocked_user = 1;
inline bool BlockPlayerResponse::has_blocked_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockPlayerResponse::set_has_blocked_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockPlayerResponse::clear_has_blocked_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockPlayerResponse::clear_blocked_user() {
  if (blocked_user_ != NULL) blocked_user_->::bnet::protocol::EntityId::Clear();
  clear_has_blocked_user();
}
inline const ::bnet::protocol::EntityId& BlockPlayerResponse::blocked_user() const {
  return blocked_user_ != NULL ? *blocked_user_ : *default_instance_->blocked_user_;
}
inline ::bnet::protocol::EntityId* BlockPlayerResponse::mutable_blocked_user() {
  set_has_blocked_user();
  if (blocked_user_ == NULL) blocked_user_ = new ::bnet::protocol::EntityId;
  return blocked_user_;
}
inline ::bnet::protocol::EntityId* BlockPlayerResponse::release_blocked_user() {
  clear_has_blocked_user();
  ::bnet::protocol::EntityId* temp = blocked_user_;
  blocked_user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RemovePlayerBlockRequest

// required .bnet.protocol.EntityId target_id = 1;
inline bool RemovePlayerBlockRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemovePlayerBlockRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemovePlayerBlockRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemovePlayerBlockRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
  clear_has_target_id();
}
inline const ::bnet::protocol::EntityId& RemovePlayerBlockRequest::target_id() const {
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::bnet::protocol::EntityId* RemovePlayerBlockRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::bnet::protocol::EntityId;
  return target_id_;
}
inline ::bnet::protocol::EntityId* RemovePlayerBlockRequest::release_target_id() {
  clear_has_target_id();
  ::bnet::protocol::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RemovePlayerBlockResponse

// optional .bnet.protocol.EntityId blocked_user = 1;
inline bool RemovePlayerBlockResponse::has_blocked_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemovePlayerBlockResponse::set_has_blocked_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemovePlayerBlockResponse::clear_has_blocked_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemovePlayerBlockResponse::clear_blocked_user() {
  if (blocked_user_ != NULL) blocked_user_->::bnet::protocol::EntityId::Clear();
  clear_has_blocked_user();
}
inline const ::bnet::protocol::EntityId& RemovePlayerBlockResponse::blocked_user() const {
  return blocked_user_ != NULL ? *blocked_user_ : *default_instance_->blocked_user_;
}
inline ::bnet::protocol::EntityId* RemovePlayerBlockResponse::mutable_blocked_user() {
  set_has_blocked_user();
  if (blocked_user_ == NULL) blocked_user_ = new ::bnet::protocol::EntityId;
  return blocked_user_;
}
inline ::bnet::protocol::EntityId* RemovePlayerBlockResponse::release_blocked_user() {
  clear_has_blocked_user();
  ::bnet::protocol::EntityId* temp = blocked_user_;
  blocked_user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AddRecentPlayersRequest

// repeated .bnet.protocol.user_manager.RecentPlayer players = 1;
inline int AddRecentPlayersRequest::players_size() const {
  return players_.size();
}
inline void AddRecentPlayersRequest::clear_players() {
  players_.Clear();
}
inline const ::bnet::protocol::user_manager::RecentPlayer& AddRecentPlayersRequest::players(int index) const {
  return players_.Get(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* AddRecentPlayersRequest::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* AddRecentPlayersRequest::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
AddRecentPlayersRequest::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
AddRecentPlayersRequest::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// AddRecentPlayersResponse

// repeated .bnet.protocol.user_manager.RecentPlayer players_added = 1;
inline int AddRecentPlayersResponse::players_added_size() const {
  return players_added_.size();
}
inline void AddRecentPlayersResponse::clear_players_added() {
  players_added_.Clear();
}
inline const ::bnet::protocol::user_manager::RecentPlayer& AddRecentPlayersResponse::players_added(int index) const {
  return players_added_.Get(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* AddRecentPlayersResponse::mutable_players_added(int index) {
  return players_added_.Mutable(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* AddRecentPlayersResponse::add_players_added() {
  return players_added_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
AddRecentPlayersResponse::players_added() const {
  return players_added_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
AddRecentPlayersResponse::mutable_players_added() {
  return &players_added_;
}

// repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 3;
inline int AddRecentPlayersResponse::players_removed_size() const {
  return players_removed_.size();
}
inline void AddRecentPlayersResponse::clear_players_removed() {
  players_removed_.Clear();
}
inline const ::bnet::protocol::user_manager::RecentPlayer& AddRecentPlayersResponse::players_removed(int index) const {
  return players_removed_.Get(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* AddRecentPlayersResponse::mutable_players_removed(int index) {
  return players_removed_.Mutable(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* AddRecentPlayersResponse::add_players_removed() {
  return players_removed_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
AddRecentPlayersResponse::players_removed() const {
  return players_removed_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
AddRecentPlayersResponse::mutable_players_removed() {
  return &players_removed_;
}

// -------------------------------------------------------------------

// RemoveRecentPlayersRequest

// repeated .bnet.protocol.user_manager.RecentPlayer players = 2;
inline int RemoveRecentPlayersRequest::players_size() const {
  return players_.size();
}
inline void RemoveRecentPlayersRequest::clear_players() {
  players_.Clear();
}
inline const ::bnet::protocol::user_manager::RecentPlayer& RemoveRecentPlayersRequest::players(int index) const {
  return players_.Get(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* RemoveRecentPlayersRequest::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* RemoveRecentPlayersRequest::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
RemoveRecentPlayersRequest::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
RemoveRecentPlayersRequest::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// RemoveRecentPlayersResponse

// repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 1;
inline int RemoveRecentPlayersResponse::players_removed_size() const {
  return players_removed_.size();
}
inline void RemoveRecentPlayersResponse::clear_players_removed() {
  players_removed_.Clear();
}
inline const ::bnet::protocol::user_manager::RecentPlayer& RemoveRecentPlayersResponse::players_removed(int index) const {
  return players_removed_.Get(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* RemoveRecentPlayersResponse::mutable_players_removed(int index) {
  return players_removed_.Mutable(index);
}
inline ::bnet::protocol::user_manager::RecentPlayer* RemoveRecentPlayersResponse::add_players_removed() {
  return players_removed_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >&
RemoveRecentPlayersResponse::players_removed() const {
  return players_removed_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::user_manager::RecentPlayer >*
RemoveRecentPlayersResponse::mutable_players_removed() {
  return &players_removed_;
}

// -------------------------------------------------------------------

// BlockedPlayerNotification

// repeated .bnet.protocol.EntityId players = 1;
inline int BlockedPlayerNotification::players_size() const {
  return players_.size();
}
inline void BlockedPlayerNotification::clear_players() {
  players_.Clear();
}
inline const ::bnet::protocol::EntityId& BlockedPlayerNotification::players(int index) const {
  return players_.Get(index);
}
inline ::bnet::protocol::EntityId* BlockedPlayerNotification::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::bnet::protocol::EntityId* BlockedPlayerNotification::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
BlockedPlayerNotification::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
BlockedPlayerNotification::mutable_players() {
  return &players_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_manager
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bnet::protocol::user_manager::PlayerReport_UserComplaintCode>() {
  return ::bnet::protocol::user_manager::PlayerReport_UserComplaintCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fuser_5fmanager_2fuser_5fmanager_2eproto__INCLUDED
