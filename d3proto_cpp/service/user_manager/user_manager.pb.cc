// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/user_manager/user_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace user_manager {

namespace {

const ::google::protobuf::Descriptor* PlayerReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReport_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerReport_UserComplaintCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RecentPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeToUserManagerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeToUserManagerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeToUserManagerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeToUserManagerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPlayerBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPlayerBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPlayerBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPlayerBlockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemovePlayerBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemovePlayerBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemovePlayerBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemovePlayerBlockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRecentPlayersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRecentPlayersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRecentPlayersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRecentPlayersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRecentPlayersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveRecentPlayersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRecentPlayersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveRecentPlayersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockedPlayerNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockedPlayerNotification_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto() {
  protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/user_manager/user_manager.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerReport_descriptor_ = file->message_type(0);
  static const int PlayerReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReport, complaint_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReport, complaint_note_),
  };
  PlayerReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReport_descriptor_,
      PlayerReport::default_instance_,
      PlayerReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReport));
  PlayerReport_UserComplaintCode_descriptor_ = PlayerReport_descriptor_->enum_type(0);
  RecentPlayer_descriptor_ = file->message_type(1);
  static const int RecentPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayer, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayer, timestamp_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayer, attributes_),
  };
  RecentPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentPlayer_descriptor_,
      RecentPlayer::default_instance_,
      RecentPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentPlayer));
  SubscribeToUserManagerRequest_descriptor_ = file->message_type(2);
  static const int SubscribeToUserManagerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToUserManagerRequest, object_id_),
  };
  SubscribeToUserManagerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeToUserManagerRequest_descriptor_,
      SubscribeToUserManagerRequest::default_instance_,
      SubscribeToUserManagerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToUserManagerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToUserManagerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeToUserManagerRequest));
  SubscribeToUserManagerResponse_descriptor_ = file->message_type(3);
  static const int SubscribeToUserManagerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToUserManagerResponse, blocked_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToUserManagerResponse, recent_players_),
  };
  SubscribeToUserManagerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeToUserManagerResponse_descriptor_,
      SubscribeToUserManagerResponse::default_instance_,
      SubscribeToUserManagerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToUserManagerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToUserManagerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeToUserManagerResponse));
  ReportPlayerRequest_descriptor_ = file->message_type(4);
  static const int ReportPlayerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerRequest, report_),
  };
  ReportPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportPlayerRequest_descriptor_,
      ReportPlayerRequest::default_instance_,
      ReportPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportPlayerRequest));
  ReportPlayerResponse_descriptor_ = file->message_type(5);
  static const int ReportPlayerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerResponse, reported_user_),
  };
  ReportPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportPlayerResponse_descriptor_,
      ReportPlayerResponse::default_instance_,
      ReportPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportPlayerResponse));
  CheckPlayerBlockRequest_descriptor_ = file->message_type(6);
  static const int CheckPlayerBlockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPlayerBlockRequest, target_id_),
  };
  CheckPlayerBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPlayerBlockRequest_descriptor_,
      CheckPlayerBlockRequest::default_instance_,
      CheckPlayerBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPlayerBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPlayerBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPlayerBlockRequest));
  CheckPlayerBlockResponse_descriptor_ = file->message_type(7);
  static const int CheckPlayerBlockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPlayerBlockResponse, blocked_user_),
  };
  CheckPlayerBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPlayerBlockResponse_descriptor_,
      CheckPlayerBlockResponse::default_instance_,
      CheckPlayerBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPlayerBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPlayerBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPlayerBlockResponse));
  BlockPlayerRequest_descriptor_ = file->message_type(8);
  static const int BlockPlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, target_id_),
  };
  BlockPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockPlayerRequest_descriptor_,
      BlockPlayerRequest::default_instance_,
      BlockPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockPlayerRequest));
  BlockPlayerResponse_descriptor_ = file->message_type(9);
  static const int BlockPlayerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerResponse, blocked_user_),
  };
  BlockPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockPlayerResponse_descriptor_,
      BlockPlayerResponse::default_instance_,
      BlockPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockPlayerResponse));
  RemovePlayerBlockRequest_descriptor_ = file->message_type(10);
  static const int RemovePlayerBlockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerBlockRequest, target_id_),
  };
  RemovePlayerBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemovePlayerBlockRequest_descriptor_,
      RemovePlayerBlockRequest::default_instance_,
      RemovePlayerBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemovePlayerBlockRequest));
  RemovePlayerBlockResponse_descriptor_ = file->message_type(11);
  static const int RemovePlayerBlockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerBlockResponse, blocked_user_),
  };
  RemovePlayerBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemovePlayerBlockResponse_descriptor_,
      RemovePlayerBlockResponse::default_instance_,
      RemovePlayerBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemovePlayerBlockResponse));
  AddRecentPlayersRequest_descriptor_ = file->message_type(12);
  static const int AddRecentPlayersRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersRequest, players_),
  };
  AddRecentPlayersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRecentPlayersRequest_descriptor_,
      AddRecentPlayersRequest::default_instance_,
      AddRecentPlayersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRecentPlayersRequest));
  AddRecentPlayersResponse_descriptor_ = file->message_type(13);
  static const int AddRecentPlayersResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersResponse, players_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersResponse, players_removed_),
  };
  AddRecentPlayersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRecentPlayersResponse_descriptor_,
      AddRecentPlayersResponse::default_instance_,
      AddRecentPlayersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRecentPlayersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRecentPlayersResponse));
  RemoveRecentPlayersRequest_descriptor_ = file->message_type(14);
  static const int RemoveRecentPlayersRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRecentPlayersRequest, players_),
  };
  RemoveRecentPlayersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveRecentPlayersRequest_descriptor_,
      RemoveRecentPlayersRequest::default_instance_,
      RemoveRecentPlayersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRecentPlayersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRecentPlayersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveRecentPlayersRequest));
  RemoveRecentPlayersResponse_descriptor_ = file->message_type(15);
  static const int RemoveRecentPlayersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRecentPlayersResponse, players_removed_),
  };
  RemoveRecentPlayersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveRecentPlayersResponse_descriptor_,
      RemoveRecentPlayersResponse::default_instance_,
      RemoveRecentPlayersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRecentPlayersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRecentPlayersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveRecentPlayersResponse));
  BlockedPlayerNotification_descriptor_ = file->message_type(16);
  static const int BlockedPlayerNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerNotification, players_),
  };
  BlockedPlayerNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockedPlayerNotification_descriptor_,
      BlockedPlayerNotification::default_instance_,
      BlockedPlayerNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockedPlayerNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockedPlayerNotification));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReport_descriptor_, &PlayerReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentPlayer_descriptor_, &RecentPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeToUserManagerRequest_descriptor_, &SubscribeToUserManagerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeToUserManagerResponse_descriptor_, &SubscribeToUserManagerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportPlayerRequest_descriptor_, &ReportPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportPlayerResponse_descriptor_, &ReportPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPlayerBlockRequest_descriptor_, &CheckPlayerBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPlayerBlockResponse_descriptor_, &CheckPlayerBlockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockPlayerRequest_descriptor_, &BlockPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockPlayerResponse_descriptor_, &BlockPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemovePlayerBlockRequest_descriptor_, &RemovePlayerBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemovePlayerBlockResponse_descriptor_, &RemovePlayerBlockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRecentPlayersRequest_descriptor_, &AddRecentPlayersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRecentPlayersResponse_descriptor_, &AddRecentPlayersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveRecentPlayersRequest_descriptor_, &RemoveRecentPlayersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveRecentPlayersResponse_descriptor_, &RemoveRecentPlayersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockedPlayerNotification_descriptor_, &BlockedPlayerNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto() {
  delete PlayerReport::default_instance_;
  delete PlayerReport_reflection_;
  delete RecentPlayer::default_instance_;
  delete RecentPlayer_reflection_;
  delete SubscribeToUserManagerRequest::default_instance_;
  delete SubscribeToUserManagerRequest_reflection_;
  delete SubscribeToUserManagerResponse::default_instance_;
  delete SubscribeToUserManagerResponse_reflection_;
  delete ReportPlayerRequest::default_instance_;
  delete ReportPlayerRequest_reflection_;
  delete ReportPlayerResponse::default_instance_;
  delete ReportPlayerResponse_reflection_;
  delete CheckPlayerBlockRequest::default_instance_;
  delete CheckPlayerBlockRequest_reflection_;
  delete CheckPlayerBlockResponse::default_instance_;
  delete CheckPlayerBlockResponse_reflection_;
  delete BlockPlayerRequest::default_instance_;
  delete BlockPlayerRequest_reflection_;
  delete BlockPlayerResponse::default_instance_;
  delete BlockPlayerResponse_reflection_;
  delete RemovePlayerBlockRequest::default_instance_;
  delete RemovePlayerBlockRequest_reflection_;
  delete RemovePlayerBlockResponse::default_instance_;
  delete RemovePlayerBlockResponse_reflection_;
  delete AddRecentPlayersRequest::default_instance_;
  delete AddRecentPlayersRequest_reflection_;
  delete AddRecentPlayersResponse::default_instance_;
  delete AddRecentPlayersResponse_reflection_;
  delete RemoveRecentPlayersRequest::default_instance_;
  delete RemoveRecentPlayersRequest_reflection_;
  delete RemoveRecentPlayersResponse::default_instance_;
  delete RemoveRecentPlayersResponse_reflection_;
  delete BlockedPlayerNotification::default_instance_;
  delete BlockedPlayerNotification_reflection_;
}

void protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'service/user_manager/user_manager.prot"
    "o\022\032bnet.protocol.user_manager\032\034lib/proto"
    "col/attribute.proto\032\031lib/protocol/entity"
    ".proto\032\021lib/rpc/rpc.proto\"\310\002\n\014PlayerRepo"
    "rt\022R\n\016complaint_code\030\001 \002(\0162:.bnet.protoc"
    "ol.user_manager.PlayerReport.UserComplai"
    "ntCode\022\026\n\016complaint_note\030\002 \002(\t\"\313\001\n\021UserC"
    "omplaintCode\022\027\n\023USER_COMPLAINT_SPAM\020\000\022\035\n"
    "\031USER_COMPLAINT_HARASSMENT\020\001\022#\n\037USER_COM"
    "PLAINT_REAL_LIFE_THREAT\020\002\022%\n!USER_COMPLA"
    "INT_INAPPROPRIATE_NAME\020\003\022\032\n\026USER_COMPLAI"
    "NT_HACKING\020\004\022\026\n\022USER_COMPLAINT_ANY\020\005\"\211\001\n"
    "\014RecentPlayer\022\'\n\006player\030\001 \002(\0132\027.bnet.pro"
    "tocol.EntityId\022\030\n\020timestamp_played\030\002 \001(\006"
    "\0226\n\nattributes\030\003 \003(\0132\".bnet.protocol.att"
    "ribute.Attribute\"2\n\035SubscribeToUserManag"
    "erRequest\022\021\n\tobject_id\030\001 \002(\004\"\222\001\n\036Subscri"
    "beToUserManagerResponse\022.\n\rblocked_users"
    "\030\001 \003(\0132\027.bnet.protocol.EntityId\022@\n\016recen"
    "t_players\030\002 \003(\0132(.bnet.protocol.user_man"
    "ager.RecentPlayer\"{\n\023ReportPlayerRequest"
    "\022*\n\ttarget_id\030\001 \002(\0132\027.bnet.protocol.Enti"
    "tyId\0228\n\006report\030\002 \002(\0132(.bnet.protocol.use"
    "r_manager.PlayerReport\"F\n\024ReportPlayerRe"
    "sponse\022.\n\rreported_user\030\001 \001(\0132\027.bnet.pro"
    "tocol.EntityId\"E\n\027CheckPlayerBlockReques"
    "t\022*\n\ttarget_id\030\001 \002(\0132\027.bnet.protocol.Ent"
    "ityId\"I\n\030CheckPlayerBlockResponse\022-\n\014blo"
    "cked_user\030\001 \001(\0132\027.bnet.protocol.EntityId"
    "\"@\n\022BlockPlayerRequest\022*\n\ttarget_id\030\001 \002("
    "\0132\027.bnet.protocol.EntityId\"D\n\023BlockPlaye"
    "rResponse\022-\n\014blocked_user\030\001 \001(\0132\027.bnet.p"
    "rotocol.EntityId\"F\n\030RemovePlayerBlockReq"
    "uest\022*\n\ttarget_id\030\001 \002(\0132\027.bnet.protocol."
    "EntityId\"J\n\031RemovePlayerBlockResponse\022-\n"
    "\014blocked_user\030\001 \001(\0132\027.bnet.protocol.Enti"
    "tyId\"T\n\027AddRecentPlayersRequest\0229\n\007playe"
    "rs\030\001 \003(\0132(.bnet.protocol.user_manager.Re"
    "centPlayer\"\236\001\n\030AddRecentPlayersResponse\022"
    "\?\n\rplayers_added\030\001 \003(\0132(.bnet.protocol.u"
    "ser_manager.RecentPlayer\022A\n\017players_remo"
    "ved\030\003 \003(\0132(.bnet.protocol.user_manager.R"
    "ecentPlayer\"W\n\032RemoveRecentPlayersReques"
    "t\0229\n\007players\030\002 \003(\0132(.bnet.protocol.user_"
    "manager.RecentPlayer\"`\n\033RemoveRecentPlay"
    "ersResponse\022A\n\017players_removed\030\001 \003(\0132(.b"
    "net.protocol.user_manager.RecentPlayer\"E"
    "\n\031BlockedPlayerNotification\022(\n\007players\030\001"
    " \003(\0132\027.bnet.protocol.EntityId", 1949);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/user_manager/user_manager.proto", &protobuf_RegisterTypes);
  PlayerReport::default_instance_ = new PlayerReport();
  RecentPlayer::default_instance_ = new RecentPlayer();
  SubscribeToUserManagerRequest::default_instance_ = new SubscribeToUserManagerRequest();
  SubscribeToUserManagerResponse::default_instance_ = new SubscribeToUserManagerResponse();
  ReportPlayerRequest::default_instance_ = new ReportPlayerRequest();
  ReportPlayerResponse::default_instance_ = new ReportPlayerResponse();
  CheckPlayerBlockRequest::default_instance_ = new CheckPlayerBlockRequest();
  CheckPlayerBlockResponse::default_instance_ = new CheckPlayerBlockResponse();
  BlockPlayerRequest::default_instance_ = new BlockPlayerRequest();
  BlockPlayerResponse::default_instance_ = new BlockPlayerResponse();
  RemovePlayerBlockRequest::default_instance_ = new RemovePlayerBlockRequest();
  RemovePlayerBlockResponse::default_instance_ = new RemovePlayerBlockResponse();
  AddRecentPlayersRequest::default_instance_ = new AddRecentPlayersRequest();
  AddRecentPlayersResponse::default_instance_ = new AddRecentPlayersResponse();
  RemoveRecentPlayersRequest::default_instance_ = new RemoveRecentPlayersRequest();
  RemoveRecentPlayersResponse::default_instance_ = new RemoveRecentPlayersResponse();
  BlockedPlayerNotification::default_instance_ = new BlockedPlayerNotification();
  PlayerReport::default_instance_->InitAsDefaultInstance();
  RecentPlayer::default_instance_->InitAsDefaultInstance();
  SubscribeToUserManagerRequest::default_instance_->InitAsDefaultInstance();
  SubscribeToUserManagerResponse::default_instance_->InitAsDefaultInstance();
  ReportPlayerRequest::default_instance_->InitAsDefaultInstance();
  ReportPlayerResponse::default_instance_->InitAsDefaultInstance();
  CheckPlayerBlockRequest::default_instance_->InitAsDefaultInstance();
  CheckPlayerBlockResponse::default_instance_->InitAsDefaultInstance();
  BlockPlayerRequest::default_instance_->InitAsDefaultInstance();
  BlockPlayerResponse::default_instance_->InitAsDefaultInstance();
  RemovePlayerBlockRequest::default_instance_->InitAsDefaultInstance();
  RemovePlayerBlockResponse::default_instance_->InitAsDefaultInstance();
  AddRecentPlayersRequest::default_instance_->InitAsDefaultInstance();
  AddRecentPlayersResponse::default_instance_->InitAsDefaultInstance();
  RemoveRecentPlayersRequest::default_instance_->InitAsDefaultInstance();
  RemoveRecentPlayersResponse::default_instance_->InitAsDefaultInstance();
  BlockedPlayerNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fuser_5fmanager_2fuser_5fmanager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fuser_5fmanager_2fuser_5fmanager_2eproto {
  StaticDescriptorInitializer_service_2fuser_5fmanager_2fuser_5fmanager_2eproto() {
    protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();
  }
} static_descriptor_initializer_service_2fuser_5fmanager_2fuser_5fmanager_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlayerReport_UserComplaintCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReport_UserComplaintCode_descriptor_;
}
bool PlayerReport_UserComplaintCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlayerReport_UserComplaintCode PlayerReport::USER_COMPLAINT_SPAM;
const PlayerReport_UserComplaintCode PlayerReport::USER_COMPLAINT_HARASSMENT;
const PlayerReport_UserComplaintCode PlayerReport::USER_COMPLAINT_REAL_LIFE_THREAT;
const PlayerReport_UserComplaintCode PlayerReport::USER_COMPLAINT_INAPPROPRIATE_NAME;
const PlayerReport_UserComplaintCode PlayerReport::USER_COMPLAINT_HACKING;
const PlayerReport_UserComplaintCode PlayerReport::USER_COMPLAINT_ANY;
const PlayerReport_UserComplaintCode PlayerReport::UserComplaintCode_MIN;
const PlayerReport_UserComplaintCode PlayerReport::UserComplaintCode_MAX;
const int PlayerReport::UserComplaintCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlayerReport::kComplaintCodeFieldNumber;
const int PlayerReport::kComplaintNoteFieldNumber;
#endif  // !_MSC_VER

PlayerReport::PlayerReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReport::InitAsDefaultInstance() {
}

PlayerReport::PlayerReport(const PlayerReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReport::SharedCtor() {
  _cached_size_ = 0;
  complaint_code_ = 0;
  complaint_note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReport::~PlayerReport() {
  SharedDtor();
}

void PlayerReport::SharedDtor() {
  if (complaint_note_ != &::google::protobuf::internal::kEmptyString) {
    delete complaint_note_;
  }
  if (this != default_instance_) {
  }
}

void PlayerReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReport_descriptor_;
}

const PlayerReport& PlayerReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

PlayerReport* PlayerReport::default_instance_ = NULL;

PlayerReport* PlayerReport::New() const {
  return new PlayerReport;
}

void PlayerReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    complaint_code_ = 0;
    if (has_complaint_note()) {
      if (complaint_note_ != &::google::protobuf::internal::kEmptyString) {
        complaint_note_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.user_manager.PlayerReport.UserComplaintCode complaint_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bnet::protocol::user_manager::PlayerReport_UserComplaintCode_IsValid(value)) {
            set_complaint_code(static_cast< ::bnet::protocol::user_manager::PlayerReport_UserComplaintCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_complaint_note;
        break;
      }
      
      // required string complaint_note = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_complaint_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_complaint_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->complaint_note().data(), this->complaint_note().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.user_manager.PlayerReport.UserComplaintCode complaint_code = 1;
  if (has_complaint_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->complaint_code(), output);
  }
  
  // required string complaint_note = 2;
  if (has_complaint_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->complaint_note().data(), this->complaint_note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->complaint_note(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.user_manager.PlayerReport.UserComplaintCode complaint_code = 1;
  if (has_complaint_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->complaint_code(), target);
  }
  
  // required string complaint_note = 2;
  if (has_complaint_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->complaint_note().data(), this->complaint_note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->complaint_note(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.user_manager.PlayerReport.UserComplaintCode complaint_code = 1;
    if (has_complaint_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->complaint_code());
    }
    
    // required string complaint_note = 2;
    if (has_complaint_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->complaint_note());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReport::MergeFrom(const PlayerReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_complaint_code()) {
      set_complaint_code(from.complaint_code());
    }
    if (from.has_complaint_note()) {
      set_complaint_note(from.complaint_note());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReport::CopyFrom(const PlayerReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlayerReport::Swap(PlayerReport* other) {
  if (other != this) {
    std::swap(complaint_code_, other->complaint_code_);
    std::swap(complaint_note_, other->complaint_note_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReport_descriptor_;
  metadata.reflection = PlayerReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecentPlayer::kPlayerFieldNumber;
const int RecentPlayer::kTimestampPlayedFieldNumber;
const int RecentPlayer::kAttributesFieldNumber;
#endif  // !_MSC_VER

RecentPlayer::RecentPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecentPlayer::InitAsDefaultInstance() {
  player_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

RecentPlayer::RecentPlayer(const RecentPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecentPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  timestamp_played_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentPlayer::~RecentPlayer() {
  SharedDtor();
}

void RecentPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void RecentPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentPlayer_descriptor_;
}

const RecentPlayer& RecentPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

RecentPlayer* RecentPlayer::default_instance_ = NULL;

RecentPlayer* RecentPlayer::New() const {
  return new RecentPlayer;
}

void RecentPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::bnet::protocol::EntityId::Clear();
    }
    timestamp_played_ = GOOGLE_ULONGLONG(0);
  }
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecentPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_timestamp_played;
        break;
      }
      
      // optional fixed64 timestamp_played = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_played_)));
          set_has_timestamp_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attributes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecentPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }
  
  // optional fixed64 timestamp_played = 2;
  if (has_timestamp_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->timestamp_played(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attributes = 3;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attributes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecentPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }
  
  // optional fixed64 timestamp_played = 2;
  if (has_timestamp_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->timestamp_played(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attributes = 3;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attributes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecentPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }
    
    // optional fixed64 timestamp_played = 2;
    if (has_timestamp_played()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attributes = 3;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecentPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecentPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecentPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecentPlayer::MergeFrom(const RecentPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::bnet::protocol::EntityId::MergeFrom(from.player());
    }
    if (from.has_timestamp_played()) {
      set_timestamp_played(from.timestamp_played());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecentPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentPlayer::CopyFrom(const RecentPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  return true;
}

void RecentPlayer::Swap(RecentPlayer* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(timestamp_played_, other->timestamp_played_);
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecentPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentPlayer_descriptor_;
  metadata.reflection = RecentPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeToUserManagerRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

SubscribeToUserManagerRequest::SubscribeToUserManagerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeToUserManagerRequest::InitAsDefaultInstance() {
}

SubscribeToUserManagerRequest::SubscribeToUserManagerRequest(const SubscribeToUserManagerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeToUserManagerRequest::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeToUserManagerRequest::~SubscribeToUserManagerRequest() {
  SharedDtor();
}

void SubscribeToUserManagerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeToUserManagerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeToUserManagerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeToUserManagerRequest_descriptor_;
}

const SubscribeToUserManagerRequest& SubscribeToUserManagerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

SubscribeToUserManagerRequest* SubscribeToUserManagerRequest::default_instance_ = NULL;

SubscribeToUserManagerRequest* SubscribeToUserManagerRequest::New() const {
  return new SubscribeToUserManagerRequest;
}

void SubscribeToUserManagerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeToUserManagerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeToUserManagerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeToUserManagerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeToUserManagerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeToUserManagerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeToUserManagerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeToUserManagerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeToUserManagerRequest::MergeFrom(const SubscribeToUserManagerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeToUserManagerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeToUserManagerRequest::CopyFrom(const SubscribeToUserManagerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeToUserManagerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SubscribeToUserManagerRequest::Swap(SubscribeToUserManagerRequest* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeToUserManagerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeToUserManagerRequest_descriptor_;
  metadata.reflection = SubscribeToUserManagerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeToUserManagerResponse::kBlockedUsersFieldNumber;
const int SubscribeToUserManagerResponse::kRecentPlayersFieldNumber;
#endif  // !_MSC_VER

SubscribeToUserManagerResponse::SubscribeToUserManagerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeToUserManagerResponse::InitAsDefaultInstance() {
}

SubscribeToUserManagerResponse::SubscribeToUserManagerResponse(const SubscribeToUserManagerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeToUserManagerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeToUserManagerResponse::~SubscribeToUserManagerResponse() {
  SharedDtor();
}

void SubscribeToUserManagerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeToUserManagerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeToUserManagerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeToUserManagerResponse_descriptor_;
}

const SubscribeToUserManagerResponse& SubscribeToUserManagerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

SubscribeToUserManagerResponse* SubscribeToUserManagerResponse::default_instance_ = NULL;

SubscribeToUserManagerResponse* SubscribeToUserManagerResponse::New() const {
  return new SubscribeToUserManagerResponse;
}

void SubscribeToUserManagerResponse::Clear() {
  blocked_users_.Clear();
  recent_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeToUserManagerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.EntityId blocked_users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocked_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocked_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blocked_users;
        if (input->ExpectTag(18)) goto parse_recent_players;
        break;
      }
      
      // repeated .bnet.protocol.user_manager.RecentPlayer recent_players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recent_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recent_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recent_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeToUserManagerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.EntityId blocked_users = 1;
  for (int i = 0; i < this->blocked_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blocked_users(i), output);
  }
  
  // repeated .bnet.protocol.user_manager.RecentPlayer recent_players = 2;
  for (int i = 0; i < this->recent_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recent_players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeToUserManagerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.EntityId blocked_users = 1;
  for (int i = 0; i < this->blocked_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blocked_users(i), target);
  }
  
  // repeated .bnet.protocol.user_manager.RecentPlayer recent_players = 2;
  for (int i = 0; i < this->recent_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recent_players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeToUserManagerResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.EntityId blocked_users = 1;
  total_size += 1 * this->blocked_users_size();
  for (int i = 0; i < this->blocked_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocked_users(i));
  }
  
  // repeated .bnet.protocol.user_manager.RecentPlayer recent_players = 2;
  total_size += 1 * this->recent_players_size();
  for (int i = 0; i < this->recent_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recent_players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeToUserManagerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeToUserManagerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeToUserManagerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeToUserManagerResponse::MergeFrom(const SubscribeToUserManagerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocked_users_.MergeFrom(from.blocked_users_);
  recent_players_.MergeFrom(from.recent_players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeToUserManagerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeToUserManagerResponse::CopyFrom(const SubscribeToUserManagerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeToUserManagerResponse::IsInitialized() const {
  
  for (int i = 0; i < blocked_users_size(); i++) {
    if (!this->blocked_users(i).IsInitialized()) return false;
  }
  for (int i = 0; i < recent_players_size(); i++) {
    if (!this->recent_players(i).IsInitialized()) return false;
  }
  return true;
}

void SubscribeToUserManagerResponse::Swap(SubscribeToUserManagerResponse* other) {
  if (other != this) {
    blocked_users_.Swap(&other->blocked_users_);
    recent_players_.Swap(&other->recent_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeToUserManagerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeToUserManagerResponse_descriptor_;
  metadata.reflection = SubscribeToUserManagerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportPlayerRequest::kTargetIdFieldNumber;
const int ReportPlayerRequest::kReportFieldNumber;
#endif  // !_MSC_VER

ReportPlayerRequest::ReportPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportPlayerRequest::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  report_ = const_cast< ::bnet::protocol::user_manager::PlayerReport*>(&::bnet::protocol::user_manager::PlayerReport::default_instance());
}

ReportPlayerRequest::ReportPlayerRequest(const ReportPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportPlayerRequest::~ReportPlayerRequest() {
  SharedDtor();
}

void ReportPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
    delete report_;
  }
}

void ReportPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportPlayerRequest_descriptor_;
}

const ReportPlayerRequest& ReportPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

ReportPlayerRequest* ReportPlayerRequest::default_instance_ = NULL;

ReportPlayerRequest* ReportPlayerRequest::New() const {
  return new ReportPlayerRequest;
}

void ReportPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_report()) {
      if (report_ != NULL) report_->::bnet::protocol::user_manager::PlayerReport::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_report;
        break;
      }
      
      // required .bnet.protocol.user_manager.PlayerReport report = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target_id(), output);
  }
  
  // required .bnet.protocol.user_manager.PlayerReport report = 2;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->report(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_id(), target);
  }
  
  // required .bnet.protocol.user_manager.PlayerReport report = 2;
  if (has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->report(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
    // required .bnet.protocol.user_manager.PlayerReport report = 2;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->report());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportPlayerRequest::MergeFrom(const ReportPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
    if (from.has_report()) {
      mutable_report()->::bnet::protocol::user_manager::PlayerReport::MergeFrom(from.report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportPlayerRequest::CopyFrom(const ReportPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportPlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  if (has_report()) {
    if (!this->report().IsInitialized()) return false;
  }
  return true;
}

void ReportPlayerRequest::Swap(ReportPlayerRequest* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(report_, other->report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportPlayerRequest_descriptor_;
  metadata.reflection = ReportPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportPlayerResponse::kReportedUserFieldNumber;
#endif  // !_MSC_VER

ReportPlayerResponse::ReportPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportPlayerResponse::InitAsDefaultInstance() {
  reported_user_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

ReportPlayerResponse::ReportPlayerResponse(const ReportPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  reported_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportPlayerResponse::~ReportPlayerResponse() {
  SharedDtor();
}

void ReportPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete reported_user_;
  }
}

void ReportPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportPlayerResponse_descriptor_;
}

const ReportPlayerResponse& ReportPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

ReportPlayerResponse* ReportPlayerResponse::default_instance_ = NULL;

ReportPlayerResponse* ReportPlayerResponse::New() const {
  return new ReportPlayerResponse;
}

void ReportPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reported_user()) {
      if (reported_user_ != NULL) reported_user_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId reported_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reported_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId reported_user = 1;
  if (has_reported_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reported_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId reported_user = 1;
  if (has_reported_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reported_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId reported_user = 1;
    if (has_reported_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reported_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportPlayerResponse::MergeFrom(const ReportPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reported_user()) {
      mutable_reported_user()->::bnet::protocol::EntityId::MergeFrom(from.reported_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportPlayerResponse::CopyFrom(const ReportPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportPlayerResponse::IsInitialized() const {
  
  if (has_reported_user()) {
    if (!this->reported_user().IsInitialized()) return false;
  }
  return true;
}

void ReportPlayerResponse::Swap(ReportPlayerResponse* other) {
  if (other != this) {
    std::swap(reported_user_, other->reported_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportPlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportPlayerResponse_descriptor_;
  metadata.reflection = ReportPlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckPlayerBlockRequest::kTargetIdFieldNumber;
#endif  // !_MSC_VER

CheckPlayerBlockRequest::CheckPlayerBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckPlayerBlockRequest::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

CheckPlayerBlockRequest::CheckPlayerBlockRequest(const CheckPlayerBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckPlayerBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPlayerBlockRequest::~CheckPlayerBlockRequest() {
  SharedDtor();
}

void CheckPlayerBlockRequest::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
  }
}

void CheckPlayerBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPlayerBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPlayerBlockRequest_descriptor_;
}

const CheckPlayerBlockRequest& CheckPlayerBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

CheckPlayerBlockRequest* CheckPlayerBlockRequest::default_instance_ = NULL;

CheckPlayerBlockRequest* CheckPlayerBlockRequest::New() const {
  return new CheckPlayerBlockRequest;
}

void CheckPlayerBlockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPlayerBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckPlayerBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckPlayerBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckPlayerBlockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPlayerBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPlayerBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPlayerBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPlayerBlockRequest::MergeFrom(const CheckPlayerBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPlayerBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPlayerBlockRequest::CopyFrom(const CheckPlayerBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPlayerBlockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void CheckPlayerBlockRequest::Swap(CheckPlayerBlockRequest* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPlayerBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPlayerBlockRequest_descriptor_;
  metadata.reflection = CheckPlayerBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckPlayerBlockResponse::kBlockedUserFieldNumber;
#endif  // !_MSC_VER

CheckPlayerBlockResponse::CheckPlayerBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckPlayerBlockResponse::InitAsDefaultInstance() {
  blocked_user_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

CheckPlayerBlockResponse::CheckPlayerBlockResponse(const CheckPlayerBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckPlayerBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  blocked_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPlayerBlockResponse::~CheckPlayerBlockResponse() {
  SharedDtor();
}

void CheckPlayerBlockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete blocked_user_;
  }
}

void CheckPlayerBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPlayerBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPlayerBlockResponse_descriptor_;
}

const CheckPlayerBlockResponse& CheckPlayerBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

CheckPlayerBlockResponse* CheckPlayerBlockResponse::default_instance_ = NULL;

CheckPlayerBlockResponse* CheckPlayerBlockResponse::New() const {
  return new CheckPlayerBlockResponse;
}

void CheckPlayerBlockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_blocked_user()) {
      if (blocked_user_ != NULL) blocked_user_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPlayerBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId blocked_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blocked_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckPlayerBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId blocked_user = 1;
  if (has_blocked_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blocked_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckPlayerBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId blocked_user = 1;
  if (has_blocked_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blocked_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckPlayerBlockResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId blocked_user = 1;
    if (has_blocked_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocked_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPlayerBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPlayerBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPlayerBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPlayerBlockResponse::MergeFrom(const CheckPlayerBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocked_user()) {
      mutable_blocked_user()->::bnet::protocol::EntityId::MergeFrom(from.blocked_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPlayerBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPlayerBlockResponse::CopyFrom(const CheckPlayerBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPlayerBlockResponse::IsInitialized() const {
  
  if (has_blocked_user()) {
    if (!this->blocked_user().IsInitialized()) return false;
  }
  return true;
}

void CheckPlayerBlockResponse::Swap(CheckPlayerBlockResponse* other) {
  if (other != this) {
    std::swap(blocked_user_, other->blocked_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPlayerBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPlayerBlockResponse_descriptor_;
  metadata.reflection = CheckPlayerBlockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockPlayerRequest::kTargetIdFieldNumber;
#endif  // !_MSC_VER

BlockPlayerRequest::BlockPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockPlayerRequest::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

BlockPlayerRequest::BlockPlayerRequest(const BlockPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockPlayerRequest::~BlockPlayerRequest() {
  SharedDtor();
}

void BlockPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
  }
}

void BlockPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockPlayerRequest_descriptor_;
}

const BlockPlayerRequest& BlockPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

BlockPlayerRequest* BlockPlayerRequest::default_instance_ = NULL;

BlockPlayerRequest* BlockPlayerRequest::New() const {
  return new BlockPlayerRequest;
}

void BlockPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockPlayerRequest::MergeFrom(const BlockPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockPlayerRequest::CopyFrom(const BlockPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void BlockPlayerRequest::Swap(BlockPlayerRequest* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockPlayerRequest_descriptor_;
  metadata.reflection = BlockPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockPlayerResponse::kBlockedUserFieldNumber;
#endif  // !_MSC_VER

BlockPlayerResponse::BlockPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockPlayerResponse::InitAsDefaultInstance() {
  blocked_user_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

BlockPlayerResponse::BlockPlayerResponse(const BlockPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  blocked_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockPlayerResponse::~BlockPlayerResponse() {
  SharedDtor();
}

void BlockPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete blocked_user_;
  }
}

void BlockPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockPlayerResponse_descriptor_;
}

const BlockPlayerResponse& BlockPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

BlockPlayerResponse* BlockPlayerResponse::default_instance_ = NULL;

BlockPlayerResponse* BlockPlayerResponse::New() const {
  return new BlockPlayerResponse;
}

void BlockPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_blocked_user()) {
      if (blocked_user_ != NULL) blocked_user_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId blocked_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blocked_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId blocked_user = 1;
  if (has_blocked_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blocked_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId blocked_user = 1;
  if (has_blocked_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blocked_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId blocked_user = 1;
    if (has_blocked_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocked_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockPlayerResponse::MergeFrom(const BlockPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocked_user()) {
      mutable_blocked_user()->::bnet::protocol::EntityId::MergeFrom(from.blocked_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockPlayerResponse::CopyFrom(const BlockPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPlayerResponse::IsInitialized() const {
  
  if (has_blocked_user()) {
    if (!this->blocked_user().IsInitialized()) return false;
  }
  return true;
}

void BlockPlayerResponse::Swap(BlockPlayerResponse* other) {
  if (other != this) {
    std::swap(blocked_user_, other->blocked_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockPlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockPlayerResponse_descriptor_;
  metadata.reflection = BlockPlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemovePlayerBlockRequest::kTargetIdFieldNumber;
#endif  // !_MSC_VER

RemovePlayerBlockRequest::RemovePlayerBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemovePlayerBlockRequest::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

RemovePlayerBlockRequest::RemovePlayerBlockRequest(const RemovePlayerBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemovePlayerBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemovePlayerBlockRequest::~RemovePlayerBlockRequest() {
  SharedDtor();
}

void RemovePlayerBlockRequest::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
  }
}

void RemovePlayerBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePlayerBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemovePlayerBlockRequest_descriptor_;
}

const RemovePlayerBlockRequest& RemovePlayerBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

RemovePlayerBlockRequest* RemovePlayerBlockRequest::default_instance_ = NULL;

RemovePlayerBlockRequest* RemovePlayerBlockRequest::New() const {
  return new RemovePlayerBlockRequest;
}

void RemovePlayerBlockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemovePlayerBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemovePlayerBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemovePlayerBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemovePlayerBlockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePlayerBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemovePlayerBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemovePlayerBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemovePlayerBlockRequest::MergeFrom(const RemovePlayerBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemovePlayerBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayerBlockRequest::CopyFrom(const RemovePlayerBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayerBlockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void RemovePlayerBlockRequest::Swap(RemovePlayerBlockRequest* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemovePlayerBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemovePlayerBlockRequest_descriptor_;
  metadata.reflection = RemovePlayerBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemovePlayerBlockResponse::kBlockedUserFieldNumber;
#endif  // !_MSC_VER

RemovePlayerBlockResponse::RemovePlayerBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemovePlayerBlockResponse::InitAsDefaultInstance() {
  blocked_user_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

RemovePlayerBlockResponse::RemovePlayerBlockResponse(const RemovePlayerBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemovePlayerBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  blocked_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemovePlayerBlockResponse::~RemovePlayerBlockResponse() {
  SharedDtor();
}

void RemovePlayerBlockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete blocked_user_;
  }
}

void RemovePlayerBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePlayerBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemovePlayerBlockResponse_descriptor_;
}

const RemovePlayerBlockResponse& RemovePlayerBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

RemovePlayerBlockResponse* RemovePlayerBlockResponse::default_instance_ = NULL;

RemovePlayerBlockResponse* RemovePlayerBlockResponse::New() const {
  return new RemovePlayerBlockResponse;
}

void RemovePlayerBlockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_blocked_user()) {
      if (blocked_user_ != NULL) blocked_user_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemovePlayerBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId blocked_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blocked_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemovePlayerBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId blocked_user = 1;
  if (has_blocked_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blocked_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemovePlayerBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId blocked_user = 1;
  if (has_blocked_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blocked_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemovePlayerBlockResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId blocked_user = 1;
    if (has_blocked_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocked_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePlayerBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemovePlayerBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemovePlayerBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemovePlayerBlockResponse::MergeFrom(const RemovePlayerBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blocked_user()) {
      mutable_blocked_user()->::bnet::protocol::EntityId::MergeFrom(from.blocked_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemovePlayerBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayerBlockResponse::CopyFrom(const RemovePlayerBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayerBlockResponse::IsInitialized() const {
  
  if (has_blocked_user()) {
    if (!this->blocked_user().IsInitialized()) return false;
  }
  return true;
}

void RemovePlayerBlockResponse::Swap(RemovePlayerBlockResponse* other) {
  if (other != this) {
    std::swap(blocked_user_, other->blocked_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemovePlayerBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemovePlayerBlockResponse_descriptor_;
  metadata.reflection = RemovePlayerBlockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRecentPlayersRequest::kPlayersFieldNumber;
#endif  // !_MSC_VER

AddRecentPlayersRequest::AddRecentPlayersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddRecentPlayersRequest::InitAsDefaultInstance() {
}

AddRecentPlayersRequest::AddRecentPlayersRequest(const AddRecentPlayersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddRecentPlayersRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRecentPlayersRequest::~AddRecentPlayersRequest() {
  SharedDtor();
}

void AddRecentPlayersRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRecentPlayersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRecentPlayersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRecentPlayersRequest_descriptor_;
}

const AddRecentPlayersRequest& AddRecentPlayersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

AddRecentPlayersRequest* AddRecentPlayersRequest::default_instance_ = NULL;

AddRecentPlayersRequest* AddRecentPlayersRequest::New() const {
  return new AddRecentPlayersRequest;
}

void AddRecentPlayersRequest::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRecentPlayersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.user_manager.RecentPlayer players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddRecentPlayersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.user_manager.RecentPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddRecentPlayersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.user_manager.RecentPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddRecentPlayersRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRecentPlayersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRecentPlayersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRecentPlayersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRecentPlayersRequest::MergeFrom(const AddRecentPlayersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRecentPlayersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRecentPlayersRequest::CopyFrom(const AddRecentPlayersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRecentPlayersRequest::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void AddRecentPlayersRequest::Swap(AddRecentPlayersRequest* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRecentPlayersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRecentPlayersRequest_descriptor_;
  metadata.reflection = AddRecentPlayersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRecentPlayersResponse::kPlayersAddedFieldNumber;
const int AddRecentPlayersResponse::kPlayersRemovedFieldNumber;
#endif  // !_MSC_VER

AddRecentPlayersResponse::AddRecentPlayersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddRecentPlayersResponse::InitAsDefaultInstance() {
}

AddRecentPlayersResponse::AddRecentPlayersResponse(const AddRecentPlayersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddRecentPlayersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRecentPlayersResponse::~AddRecentPlayersResponse() {
  SharedDtor();
}

void AddRecentPlayersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRecentPlayersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRecentPlayersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRecentPlayersResponse_descriptor_;
}

const AddRecentPlayersResponse& AddRecentPlayersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

AddRecentPlayersResponse* AddRecentPlayersResponse::default_instance_ = NULL;

AddRecentPlayersResponse* AddRecentPlayersResponse::New() const {
  return new AddRecentPlayersResponse;
}

void AddRecentPlayersResponse::Clear() {
  players_added_.Clear();
  players_removed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRecentPlayersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.user_manager.RecentPlayer players_added = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players_added:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players_added()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players_added;
        if (input->ExpectTag(26)) goto parse_players_removed;
        break;
      }
      
      // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players_removed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players_removed;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddRecentPlayersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.user_manager.RecentPlayer players_added = 1;
  for (int i = 0; i < this->players_added_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players_added(i), output);
  }
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 3;
  for (int i = 0; i < this->players_removed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players_removed(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddRecentPlayersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.user_manager.RecentPlayer players_added = 1;
  for (int i = 0; i < this->players_added_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players_added(i), target);
  }
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 3;
  for (int i = 0; i < this->players_removed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players_removed(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddRecentPlayersResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players_added = 1;
  total_size += 1 * this->players_added_size();
  for (int i = 0; i < this->players_added_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players_added(i));
  }
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 3;
  total_size += 1 * this->players_removed_size();
  for (int i = 0; i < this->players_removed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players_removed(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRecentPlayersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRecentPlayersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRecentPlayersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRecentPlayersResponse::MergeFrom(const AddRecentPlayersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_added_.MergeFrom(from.players_added_);
  players_removed_.MergeFrom(from.players_removed_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRecentPlayersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRecentPlayersResponse::CopyFrom(const AddRecentPlayersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRecentPlayersResponse::IsInitialized() const {
  
  for (int i = 0; i < players_added_size(); i++) {
    if (!this->players_added(i).IsInitialized()) return false;
  }
  for (int i = 0; i < players_removed_size(); i++) {
    if (!this->players_removed(i).IsInitialized()) return false;
  }
  return true;
}

void AddRecentPlayersResponse::Swap(AddRecentPlayersResponse* other) {
  if (other != this) {
    players_added_.Swap(&other->players_added_);
    players_removed_.Swap(&other->players_removed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRecentPlayersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRecentPlayersResponse_descriptor_;
  metadata.reflection = AddRecentPlayersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRecentPlayersRequest::kPlayersFieldNumber;
#endif  // !_MSC_VER

RemoveRecentPlayersRequest::RemoveRecentPlayersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveRecentPlayersRequest::InitAsDefaultInstance() {
}

RemoveRecentPlayersRequest::RemoveRecentPlayersRequest(const RemoveRecentPlayersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveRecentPlayersRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRecentPlayersRequest::~RemoveRecentPlayersRequest() {
  SharedDtor();
}

void RemoveRecentPlayersRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveRecentPlayersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRecentPlayersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRecentPlayersRequest_descriptor_;
}

const RemoveRecentPlayersRequest& RemoveRecentPlayersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

RemoveRecentPlayersRequest* RemoveRecentPlayersRequest::default_instance_ = NULL;

RemoveRecentPlayersRequest* RemoveRecentPlayersRequest::New() const {
  return new RemoveRecentPlayersRequest;
}

void RemoveRecentPlayersRequest::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveRecentPlayersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.user_manager.RecentPlayer players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveRecentPlayersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.user_manager.RecentPlayer players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveRecentPlayersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.user_manager.RecentPlayer players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveRecentPlayersRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRecentPlayersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveRecentPlayersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveRecentPlayersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveRecentPlayersRequest::MergeFrom(const RemoveRecentPlayersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveRecentPlayersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRecentPlayersRequest::CopyFrom(const RemoveRecentPlayersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRecentPlayersRequest::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void RemoveRecentPlayersRequest::Swap(RemoveRecentPlayersRequest* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveRecentPlayersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRecentPlayersRequest_descriptor_;
  metadata.reflection = RemoveRecentPlayersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRecentPlayersResponse::kPlayersRemovedFieldNumber;
#endif  // !_MSC_VER

RemoveRecentPlayersResponse::RemoveRecentPlayersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveRecentPlayersResponse::InitAsDefaultInstance() {
}

RemoveRecentPlayersResponse::RemoveRecentPlayersResponse(const RemoveRecentPlayersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveRecentPlayersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRecentPlayersResponse::~RemoveRecentPlayersResponse() {
  SharedDtor();
}

void RemoveRecentPlayersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveRecentPlayersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRecentPlayersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRecentPlayersResponse_descriptor_;
}

const RemoveRecentPlayersResponse& RemoveRecentPlayersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

RemoveRecentPlayersResponse* RemoveRecentPlayersResponse::default_instance_ = NULL;

RemoveRecentPlayersResponse* RemoveRecentPlayersResponse::New() const {
  return new RemoveRecentPlayersResponse;
}

void RemoveRecentPlayersResponse::Clear() {
  players_removed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveRecentPlayersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players_removed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players_removed;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveRecentPlayersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 1;
  for (int i = 0; i < this->players_removed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players_removed(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveRecentPlayersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 1;
  for (int i = 0; i < this->players_removed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players_removed(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveRecentPlayersResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.user_manager.RecentPlayer players_removed = 1;
  total_size += 1 * this->players_removed_size();
  for (int i = 0; i < this->players_removed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players_removed(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRecentPlayersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveRecentPlayersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveRecentPlayersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveRecentPlayersResponse::MergeFrom(const RemoveRecentPlayersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_removed_.MergeFrom(from.players_removed_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveRecentPlayersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRecentPlayersResponse::CopyFrom(const RemoveRecentPlayersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRecentPlayersResponse::IsInitialized() const {
  
  for (int i = 0; i < players_removed_size(); i++) {
    if (!this->players_removed(i).IsInitialized()) return false;
  }
  return true;
}

void RemoveRecentPlayersResponse::Swap(RemoveRecentPlayersResponse* other) {
  if (other != this) {
    players_removed_.Swap(&other->players_removed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveRecentPlayersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRecentPlayersResponse_descriptor_;
  metadata.reflection = RemoveRecentPlayersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockedPlayerNotification::kPlayersFieldNumber;
#endif  // !_MSC_VER

BlockedPlayerNotification::BlockedPlayerNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockedPlayerNotification::InitAsDefaultInstance() {
}

BlockedPlayerNotification::BlockedPlayerNotification(const BlockedPlayerNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockedPlayerNotification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockedPlayerNotification::~BlockedPlayerNotification() {
  SharedDtor();
}

void BlockedPlayerNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockedPlayerNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockedPlayerNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockedPlayerNotification_descriptor_;
}

const BlockedPlayerNotification& BlockedPlayerNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fuser_5fmanager_2fuser_5fmanager_2eproto();  return *default_instance_;
}

BlockedPlayerNotification* BlockedPlayerNotification::default_instance_ = NULL;

BlockedPlayerNotification* BlockedPlayerNotification::New() const {
  return new BlockedPlayerNotification;
}

void BlockedPlayerNotification::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockedPlayerNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.EntityId players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockedPlayerNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.EntityId players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockedPlayerNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.EntityId players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockedPlayerNotification::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.EntityId players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockedPlayerNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockedPlayerNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockedPlayerNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockedPlayerNotification::MergeFrom(const BlockedPlayerNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockedPlayerNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockedPlayerNotification::CopyFrom(const BlockedPlayerNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedPlayerNotification::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void BlockedPlayerNotification::Swap(BlockedPlayerNotification* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockedPlayerNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockedPlayerNotification_descriptor_;
  metadata.reflection = BlockedPlayerNotification_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_manager
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
