// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/exchange/exchange.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace exchange {

namespace {

const ::google::protobuf::Descriptor* CreateOrderBookRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateOrderBookRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateOrderBookResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateOrderBookResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceOfferOnOrderBookRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceOfferOnOrderBookRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceOfferOnOrderBookResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceOfferOnOrderBookResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceOfferCreateOrderBookIfNeededRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceOfferCreateOrderBookIfNeededRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceOfferCreateOrderBookIfNeededResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceOfferCreateOrderBookIfNeededResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceBidOnOrderBookRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceBidOnOrderBookRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceBidOnOrderBookResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceBidOnOrderBookResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceBidCreateOrderBookIfNeededRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceBidCreateOrderBookIfNeededRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceBidCreateOrderBookIfNeededResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceBidCreateOrderBookIfNeededResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOffersByOrderBookRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOffersByOrderBookRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOffersByOrderBookResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOffersByOrderBookResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBidsByOrderBookRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBidsByOrderBookRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBidsByOrderBookResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBidsByOrderBookResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOffersByAccountForItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOffersByAccountForItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOffersByAccountForItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOffersByAccountForItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBidsByAccountForItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBidsByAccountForItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBidsByAccountForItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBidsByAccountForItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOrderBooksSummaryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOrderBooksSummaryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOrderBooksSummaryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOrderBooksSummaryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuerySettlementsByOrderBookRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuerySettlementsByOrderBookRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuerySettlementsByOrderBookResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuerySettlementsByOrderBookResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeOrderBookStatusChangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeOrderBookStatusChangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeOrderBookStatusChangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeOrderBookStatusChangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeOrderStatusChangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeOrderStatusChangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeOrderStatusChangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeOrderStatusChangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClaimRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClaimRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfigurationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfigurationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetConfigurationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetConfigurationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOfferFeeEstimationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOfferFeeEstimationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBidFeeEstimationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBidFeeEstimationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFeeEstimationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFeeEstimationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderBookNotificationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderBookNotificationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferNotificationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferNotificationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidNotificationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidNotificationRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fexchange_2fexchange_2eproto() {
  protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/exchange/exchange.proto");
  GOOGLE_CHECK(file != NULL);
  CreateOrderBookRequest_descriptor_ = file->message_type(0);
  static const int CreateOrderBookRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrderBookRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrderBookRequest, order_book_),
  };
  CreateOrderBookRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateOrderBookRequest_descriptor_,
      CreateOrderBookRequest::default_instance_,
      CreateOrderBookRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrderBookRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrderBookRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateOrderBookRequest));
  CreateOrderBookResponse_descriptor_ = file->message_type(1);
  static const int CreateOrderBookResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrderBookResponse, order_book_id_),
  };
  CreateOrderBookResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateOrderBookResponse_descriptor_,
      CreateOrderBookResponse::default_instance_,
      CreateOrderBookResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrderBookResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrderBookResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateOrderBookResponse));
  PlaceOfferOnOrderBookRequest_descriptor_ = file->message_type(2);
  static const int PlaceOfferOnOrderBookRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferOnOrderBookRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferOnOrderBookRequest, offer_creation_),
  };
  PlaceOfferOnOrderBookRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceOfferOnOrderBookRequest_descriptor_,
      PlaceOfferOnOrderBookRequest::default_instance_,
      PlaceOfferOnOrderBookRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferOnOrderBookRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferOnOrderBookRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceOfferOnOrderBookRequest));
  PlaceOfferOnOrderBookResponse_descriptor_ = file->message_type(3);
  static const int PlaceOfferOnOrderBookResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferOnOrderBookResponse, order_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferOnOrderBookResponse, offer_id_),
  };
  PlaceOfferOnOrderBookResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceOfferOnOrderBookResponse_descriptor_,
      PlaceOfferOnOrderBookResponse::default_instance_,
      PlaceOfferOnOrderBookResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferOnOrderBookResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferOnOrderBookResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceOfferOnOrderBookResponse));
  PlaceOfferCreateOrderBookIfNeededRequest_descriptor_ = file->message_type(4);
  static const int PlaceOfferCreateOrderBookIfNeededRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferCreateOrderBookIfNeededRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferCreateOrderBookIfNeededRequest, order_book_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferCreateOrderBookIfNeededRequest, offer_creation_),
  };
  PlaceOfferCreateOrderBookIfNeededRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceOfferCreateOrderBookIfNeededRequest_descriptor_,
      PlaceOfferCreateOrderBookIfNeededRequest::default_instance_,
      PlaceOfferCreateOrderBookIfNeededRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferCreateOrderBookIfNeededRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferCreateOrderBookIfNeededRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceOfferCreateOrderBookIfNeededRequest));
  PlaceOfferCreateOrderBookIfNeededResponse_descriptor_ = file->message_type(5);
  static const int PlaceOfferCreateOrderBookIfNeededResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferCreateOrderBookIfNeededResponse, order_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferCreateOrderBookIfNeededResponse, offer_id_),
  };
  PlaceOfferCreateOrderBookIfNeededResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceOfferCreateOrderBookIfNeededResponse_descriptor_,
      PlaceOfferCreateOrderBookIfNeededResponse::default_instance_,
      PlaceOfferCreateOrderBookIfNeededResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferCreateOrderBookIfNeededResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOfferCreateOrderBookIfNeededResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceOfferCreateOrderBookIfNeededResponse));
  PlaceBidOnOrderBookRequest_descriptor_ = file->message_type(6);
  static const int PlaceBidOnOrderBookRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidOnOrderBookRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidOnOrderBookRequest, bid_creation_),
  };
  PlaceBidOnOrderBookRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceBidOnOrderBookRequest_descriptor_,
      PlaceBidOnOrderBookRequest::default_instance_,
      PlaceBidOnOrderBookRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidOnOrderBookRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidOnOrderBookRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceBidOnOrderBookRequest));
  PlaceBidOnOrderBookResponse_descriptor_ = file->message_type(7);
  static const int PlaceBidOnOrderBookResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidOnOrderBookResponse, order_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidOnOrderBookResponse, bid_id_),
  };
  PlaceBidOnOrderBookResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceBidOnOrderBookResponse_descriptor_,
      PlaceBidOnOrderBookResponse::default_instance_,
      PlaceBidOnOrderBookResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidOnOrderBookResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidOnOrderBookResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceBidOnOrderBookResponse));
  PlaceBidCreateOrderBookIfNeededRequest_descriptor_ = file->message_type(8);
  static const int PlaceBidCreateOrderBookIfNeededRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidCreateOrderBookIfNeededRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidCreateOrderBookIfNeededRequest, order_book_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidCreateOrderBookIfNeededRequest, bid_creation_),
  };
  PlaceBidCreateOrderBookIfNeededRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceBidCreateOrderBookIfNeededRequest_descriptor_,
      PlaceBidCreateOrderBookIfNeededRequest::default_instance_,
      PlaceBidCreateOrderBookIfNeededRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidCreateOrderBookIfNeededRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidCreateOrderBookIfNeededRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceBidCreateOrderBookIfNeededRequest));
  PlaceBidCreateOrderBookIfNeededResponse_descriptor_ = file->message_type(9);
  static const int PlaceBidCreateOrderBookIfNeededResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidCreateOrderBookIfNeededResponse, order_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidCreateOrderBookIfNeededResponse, bid_id_),
  };
  PlaceBidCreateOrderBookIfNeededResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceBidCreateOrderBookIfNeededResponse_descriptor_,
      PlaceBidCreateOrderBookIfNeededResponse::default_instance_,
      PlaceBidCreateOrderBookIfNeededResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidCreateOrderBookIfNeededResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceBidCreateOrderBookIfNeededResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceBidCreateOrderBookIfNeededResponse));
  QueryOffersByOrderBookRequest_descriptor_ = file->message_type(10);
  static const int QueryOffersByOrderBookRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByOrderBookRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByOrderBookRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByOrderBookRequest, status_),
  };
  QueryOffersByOrderBookRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryOffersByOrderBookRequest_descriptor_,
      QueryOffersByOrderBookRequest::default_instance_,
      QueryOffersByOrderBookRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByOrderBookRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByOrderBookRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryOffersByOrderBookRequest));
  QueryOffersByOrderBookResponse_descriptor_ = file->message_type(11);
  static const int QueryOffersByOrderBookResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByOrderBookResponse, offers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByOrderBookResponse, total_count_),
  };
  QueryOffersByOrderBookResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryOffersByOrderBookResponse_descriptor_,
      QueryOffersByOrderBookResponse::default_instance_,
      QueryOffersByOrderBookResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByOrderBookResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByOrderBookResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryOffersByOrderBookResponse));
  QueryBidsByOrderBookRequest_descriptor_ = file->message_type(12);
  static const int QueryBidsByOrderBookRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByOrderBookRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByOrderBookRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByOrderBookRequest, status_),
  };
  QueryBidsByOrderBookRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBidsByOrderBookRequest_descriptor_,
      QueryBidsByOrderBookRequest::default_instance_,
      QueryBidsByOrderBookRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByOrderBookRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByOrderBookRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBidsByOrderBookRequest));
  QueryBidsByOrderBookResponse_descriptor_ = file->message_type(13);
  static const int QueryBidsByOrderBookResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByOrderBookResponse, bids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByOrderBookResponse, total_count_),
  };
  QueryBidsByOrderBookResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBidsByOrderBookResponse_descriptor_,
      QueryBidsByOrderBookResponse::default_instance_,
      QueryBidsByOrderBookResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByOrderBookResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByOrderBookResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBidsByOrderBookResponse));
  QueryOffersByAccountForItemRequest_descriptor_ = file->message_type(14);
  static const int QueryOffersByAccountForItemRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByAccountForItemRequest, account_for_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByAccountForItemRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByAccountForItemRequest, bnet_account_),
  };
  QueryOffersByAccountForItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryOffersByAccountForItemRequest_descriptor_,
      QueryOffersByAccountForItemRequest::default_instance_,
      QueryOffersByAccountForItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByAccountForItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByAccountForItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryOffersByAccountForItemRequest));
  QueryOffersByAccountForItemResponse_descriptor_ = file->message_type(15);
  static const int QueryOffersByAccountForItemResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByAccountForItemResponse, offers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByAccountForItemResponse, total_count_),
  };
  QueryOffersByAccountForItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryOffersByAccountForItemResponse_descriptor_,
      QueryOffersByAccountForItemResponse::default_instance_,
      QueryOffersByAccountForItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByAccountForItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOffersByAccountForItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryOffersByAccountForItemResponse));
  QueryBidsByAccountForItemRequest_descriptor_ = file->message_type(16);
  static const int QueryBidsByAccountForItemRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByAccountForItemRequest, account_for_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByAccountForItemRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByAccountForItemRequest, bnet_account_),
  };
  QueryBidsByAccountForItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBidsByAccountForItemRequest_descriptor_,
      QueryBidsByAccountForItemRequest::default_instance_,
      QueryBidsByAccountForItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByAccountForItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByAccountForItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBidsByAccountForItemRequest));
  QueryBidsByAccountForItemResponse_descriptor_ = file->message_type(17);
  static const int QueryBidsByAccountForItemResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByAccountForItemResponse, bids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByAccountForItemResponse, total_count_),
  };
  QueryBidsByAccountForItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryBidsByAccountForItemResponse_descriptor_,
      QueryBidsByAccountForItemResponse::default_instance_,
      QueryBidsByAccountForItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByAccountForItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBidsByAccountForItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryBidsByAccountForItemResponse));
  QueryOrderBooksSummaryRequest_descriptor_ = file->message_type(18);
  static const int QueryOrderBooksSummaryRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderBooksSummaryRequest, handles_),
  };
  QueryOrderBooksSummaryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryOrderBooksSummaryRequest_descriptor_,
      QueryOrderBooksSummaryRequest::default_instance_,
      QueryOrderBooksSummaryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderBooksSummaryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderBooksSummaryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryOrderBooksSummaryRequest));
  QueryOrderBooksSummaryResponse_descriptor_ = file->message_type(19);
  static const int QueryOrderBooksSummaryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderBooksSummaryResponse, order_books_),
  };
  QueryOrderBooksSummaryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryOrderBooksSummaryResponse_descriptor_,
      QueryOrderBooksSummaryResponse::default_instance_,
      QueryOrderBooksSummaryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderBooksSummaryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderBooksSummaryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryOrderBooksSummaryResponse));
  QuerySettlementsByOrderBookRequest_descriptor_ = file->message_type(20);
  static const int QuerySettlementsByOrderBookRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySettlementsByOrderBookRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySettlementsByOrderBookRequest, filter_),
  };
  QuerySettlementsByOrderBookRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuerySettlementsByOrderBookRequest_descriptor_,
      QuerySettlementsByOrderBookRequest::default_instance_,
      QuerySettlementsByOrderBookRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySettlementsByOrderBookRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySettlementsByOrderBookRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuerySettlementsByOrderBookRequest));
  QuerySettlementsByOrderBookResponse_descriptor_ = file->message_type(21);
  static const int QuerySettlementsByOrderBookResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySettlementsByOrderBookResponse, settlements_),
  };
  QuerySettlementsByOrderBookResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuerySettlementsByOrderBookResponse_descriptor_,
      QuerySettlementsByOrderBookResponse::default_instance_,
      QuerySettlementsByOrderBookResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySettlementsByOrderBookResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuerySettlementsByOrderBookResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuerySettlementsByOrderBookResponse));
  SubscribeOrderBookStatusChangeRequest_descriptor_ = file->message_type(22);
  static const int SubscribeOrderBookStatusChangeRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, min_partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, max_partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, specialist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, bootstrap_),
  };
  SubscribeOrderBookStatusChangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeOrderBookStatusChangeRequest_descriptor_,
      SubscribeOrderBookStatusChangeRequest::default_instance_,
      SubscribeOrderBookStatusChangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderBookStatusChangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeOrderBookStatusChangeRequest));
  UnsubscribeOrderBookStatusChangeRequest_descriptor_ = file->message_type(23);
  static const int UnsubscribeOrderBookStatusChangeRequest_offsets_[1] = {
  };
  UnsubscribeOrderBookStatusChangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeOrderBookStatusChangeRequest_descriptor_,
      UnsubscribeOrderBookStatusChangeRequest::default_instance_,
      UnsubscribeOrderBookStatusChangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeOrderBookStatusChangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeOrderBookStatusChangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeOrderBookStatusChangeRequest));
  SubscribeOrderStatusChangeRequest_descriptor_ = file->message_type(24);
  static const int SubscribeOrderStatusChangeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderStatusChangeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderStatusChangeRequest, object_id_),
  };
  SubscribeOrderStatusChangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeOrderStatusChangeRequest_descriptor_,
      SubscribeOrderStatusChangeRequest::default_instance_,
      SubscribeOrderStatusChangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderStatusChangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeOrderStatusChangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeOrderStatusChangeRequest));
  UnsubscribeOrderStatusChangeRequest_descriptor_ = file->message_type(25);
  static const int UnsubscribeOrderStatusChangeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeOrderStatusChangeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeOrderStatusChangeRequest, object_id_),
  };
  UnsubscribeOrderStatusChangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeOrderStatusChangeRequest_descriptor_,
      UnsubscribeOrderStatusChangeRequest::default_instance_,
      UnsubscribeOrderStatusChangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeOrderStatusChangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeOrderStatusChangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeOrderStatusChangeRequest));
  ClaimRequest_descriptor_ = file->message_type(26);
  static const int ClaimRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimRequest, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimRequest, bnet_account_),
  };
  ClaimRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClaimRequest_descriptor_,
      ClaimRequest::default_instance_,
      ClaimRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClaimRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClaimRequest));
  CancelRequest_descriptor_ = file->message_type(27);
  static const int CancelRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelRequest, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelRequest, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelRequest, bnet_account_),
  };
  CancelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelRequest_descriptor_,
      CancelRequest::default_instance_,
      CancelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelRequest));
  GetConfigurationRequest_descriptor_ = file->message_type(28);
  static const int GetConfigurationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigurationRequest, program_),
  };
  GetConfigurationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfigurationRequest_descriptor_,
      GetConfigurationRequest::default_instance_,
      GetConfigurationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigurationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigurationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfigurationRequest));
  GetConfigurationResponse_descriptor_ = file->message_type(29);
  static const int GetConfigurationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigurationResponse, configs_),
  };
  GetConfigurationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetConfigurationResponse_descriptor_,
      GetConfigurationResponse::default_instance_,
      GetConfigurationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigurationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConfigurationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetConfigurationResponse));
  GetOfferFeeEstimationRequest_descriptor_ = file->message_type(30);
  static const int GetOfferFeeEstimationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfferFeeEstimationRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfferFeeEstimationRequest, data_),
  };
  GetOfferFeeEstimationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOfferFeeEstimationRequest_descriptor_,
      GetOfferFeeEstimationRequest::default_instance_,
      GetOfferFeeEstimationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfferFeeEstimationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfferFeeEstimationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOfferFeeEstimationRequest));
  GetBidFeeEstimationRequest_descriptor_ = file->message_type(31);
  static const int GetBidFeeEstimationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBidFeeEstimationRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBidFeeEstimationRequest, data_),
  };
  GetBidFeeEstimationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBidFeeEstimationRequest_descriptor_,
      GetBidFeeEstimationRequest::default_instance_,
      GetBidFeeEstimationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBidFeeEstimationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBidFeeEstimationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBidFeeEstimationRequest));
  GetFeeEstimationResponse_descriptor_ = file->message_type(32);
  static const int GetFeeEstimationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFeeEstimationResponse, fee_amount_),
  };
  GetFeeEstimationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFeeEstimationResponse_descriptor_,
      GetFeeEstimationResponse::default_instance_,
      GetFeeEstimationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFeeEstimationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFeeEstimationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFeeEstimationResponse));
  OrderBookNotificationRequest_descriptor_ = file->message_type(33);
  static const int OrderBookNotificationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotificationRequest, notifications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotificationRequest, boot_strap_last_),
  };
  OrderBookNotificationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderBookNotificationRequest_descriptor_,
      OrderBookNotificationRequest::default_instance_,
      OrderBookNotificationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotificationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotificationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderBookNotificationRequest));
  OfferNotificationRequest_descriptor_ = file->message_type(34);
  static const int OfferNotificationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferNotificationRequest, offer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferNotificationRequest, event_),
  };
  OfferNotificationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferNotificationRequest_descriptor_,
      OfferNotificationRequest::default_instance_,
      OfferNotificationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferNotificationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferNotificationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferNotificationRequest));
  BidNotificationRequest_descriptor_ = file->message_type(35);
  static const int BidNotificationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidNotificationRequest, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidNotificationRequest, event_),
  };
  BidNotificationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidNotificationRequest_descriptor_,
      BidNotificationRequest::default_instance_,
      BidNotificationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidNotificationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidNotificationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidNotificationRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fexchange_2fexchange_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateOrderBookRequest_descriptor_, &CreateOrderBookRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateOrderBookResponse_descriptor_, &CreateOrderBookResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceOfferOnOrderBookRequest_descriptor_, &PlaceOfferOnOrderBookRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceOfferOnOrderBookResponse_descriptor_, &PlaceOfferOnOrderBookResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceOfferCreateOrderBookIfNeededRequest_descriptor_, &PlaceOfferCreateOrderBookIfNeededRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceOfferCreateOrderBookIfNeededResponse_descriptor_, &PlaceOfferCreateOrderBookIfNeededResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceBidOnOrderBookRequest_descriptor_, &PlaceBidOnOrderBookRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceBidOnOrderBookResponse_descriptor_, &PlaceBidOnOrderBookResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceBidCreateOrderBookIfNeededRequest_descriptor_, &PlaceBidCreateOrderBookIfNeededRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceBidCreateOrderBookIfNeededResponse_descriptor_, &PlaceBidCreateOrderBookIfNeededResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryOffersByOrderBookRequest_descriptor_, &QueryOffersByOrderBookRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryOffersByOrderBookResponse_descriptor_, &QueryOffersByOrderBookResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBidsByOrderBookRequest_descriptor_, &QueryBidsByOrderBookRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBidsByOrderBookResponse_descriptor_, &QueryBidsByOrderBookResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryOffersByAccountForItemRequest_descriptor_, &QueryOffersByAccountForItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryOffersByAccountForItemResponse_descriptor_, &QueryOffersByAccountForItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBidsByAccountForItemRequest_descriptor_, &QueryBidsByAccountForItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryBidsByAccountForItemResponse_descriptor_, &QueryBidsByAccountForItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryOrderBooksSummaryRequest_descriptor_, &QueryOrderBooksSummaryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryOrderBooksSummaryResponse_descriptor_, &QueryOrderBooksSummaryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuerySettlementsByOrderBookRequest_descriptor_, &QuerySettlementsByOrderBookRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuerySettlementsByOrderBookResponse_descriptor_, &QuerySettlementsByOrderBookResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeOrderBookStatusChangeRequest_descriptor_, &SubscribeOrderBookStatusChangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeOrderBookStatusChangeRequest_descriptor_, &UnsubscribeOrderBookStatusChangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeOrderStatusChangeRequest_descriptor_, &SubscribeOrderStatusChangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeOrderStatusChangeRequest_descriptor_, &UnsubscribeOrderStatusChangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClaimRequest_descriptor_, &ClaimRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelRequest_descriptor_, &CancelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfigurationRequest_descriptor_, &GetConfigurationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetConfigurationResponse_descriptor_, &GetConfigurationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOfferFeeEstimationRequest_descriptor_, &GetOfferFeeEstimationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBidFeeEstimationRequest_descriptor_, &GetBidFeeEstimationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFeeEstimationResponse_descriptor_, &GetFeeEstimationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderBookNotificationRequest_descriptor_, &OrderBookNotificationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferNotificationRequest_descriptor_, &OfferNotificationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidNotificationRequest_descriptor_, &BidNotificationRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fexchange_2fexchange_2eproto() {
  delete CreateOrderBookRequest::default_instance_;
  delete CreateOrderBookRequest_reflection_;
  delete CreateOrderBookResponse::default_instance_;
  delete CreateOrderBookResponse_reflection_;
  delete PlaceOfferOnOrderBookRequest::default_instance_;
  delete PlaceOfferOnOrderBookRequest_reflection_;
  delete PlaceOfferOnOrderBookResponse::default_instance_;
  delete PlaceOfferOnOrderBookResponse_reflection_;
  delete PlaceOfferCreateOrderBookIfNeededRequest::default_instance_;
  delete PlaceOfferCreateOrderBookIfNeededRequest_reflection_;
  delete PlaceOfferCreateOrderBookIfNeededResponse::default_instance_;
  delete PlaceOfferCreateOrderBookIfNeededResponse_reflection_;
  delete PlaceBidOnOrderBookRequest::default_instance_;
  delete PlaceBidOnOrderBookRequest_reflection_;
  delete PlaceBidOnOrderBookResponse::default_instance_;
  delete PlaceBidOnOrderBookResponse_reflection_;
  delete PlaceBidCreateOrderBookIfNeededRequest::default_instance_;
  delete PlaceBidCreateOrderBookIfNeededRequest_reflection_;
  delete PlaceBidCreateOrderBookIfNeededResponse::default_instance_;
  delete PlaceBidCreateOrderBookIfNeededResponse_reflection_;
  delete QueryOffersByOrderBookRequest::default_instance_;
  delete QueryOffersByOrderBookRequest_reflection_;
  delete QueryOffersByOrderBookResponse::default_instance_;
  delete QueryOffersByOrderBookResponse_reflection_;
  delete QueryBidsByOrderBookRequest::default_instance_;
  delete QueryBidsByOrderBookRequest_reflection_;
  delete QueryBidsByOrderBookResponse::default_instance_;
  delete QueryBidsByOrderBookResponse_reflection_;
  delete QueryOffersByAccountForItemRequest::default_instance_;
  delete QueryOffersByAccountForItemRequest_reflection_;
  delete QueryOffersByAccountForItemResponse::default_instance_;
  delete QueryOffersByAccountForItemResponse_reflection_;
  delete QueryBidsByAccountForItemRequest::default_instance_;
  delete QueryBidsByAccountForItemRequest_reflection_;
  delete QueryBidsByAccountForItemResponse::default_instance_;
  delete QueryBidsByAccountForItemResponse_reflection_;
  delete QueryOrderBooksSummaryRequest::default_instance_;
  delete QueryOrderBooksSummaryRequest_reflection_;
  delete QueryOrderBooksSummaryResponse::default_instance_;
  delete QueryOrderBooksSummaryResponse_reflection_;
  delete QuerySettlementsByOrderBookRequest::default_instance_;
  delete QuerySettlementsByOrderBookRequest_reflection_;
  delete QuerySettlementsByOrderBookResponse::default_instance_;
  delete QuerySettlementsByOrderBookResponse_reflection_;
  delete SubscribeOrderBookStatusChangeRequest::default_instance_;
  delete SubscribeOrderBookStatusChangeRequest_reflection_;
  delete UnsubscribeOrderBookStatusChangeRequest::default_instance_;
  delete UnsubscribeOrderBookStatusChangeRequest_reflection_;
  delete SubscribeOrderStatusChangeRequest::default_instance_;
  delete SubscribeOrderStatusChangeRequest_reflection_;
  delete UnsubscribeOrderStatusChangeRequest::default_instance_;
  delete UnsubscribeOrderStatusChangeRequest_reflection_;
  delete ClaimRequest::default_instance_;
  delete ClaimRequest_reflection_;
  delete CancelRequest::default_instance_;
  delete CancelRequest_reflection_;
  delete GetConfigurationRequest::default_instance_;
  delete GetConfigurationRequest_reflection_;
  delete GetConfigurationResponse::default_instance_;
  delete GetConfigurationResponse_reflection_;
  delete GetOfferFeeEstimationRequest::default_instance_;
  delete GetOfferFeeEstimationRequest_reflection_;
  delete GetBidFeeEstimationRequest::default_instance_;
  delete GetBidFeeEstimationRequest_reflection_;
  delete GetFeeEstimationResponse::default_instance_;
  delete GetFeeEstimationResponse_reflection_;
  delete OrderBookNotificationRequest::default_instance_;
  delete OrderBookNotificationRequest_reflection_;
  delete OfferNotificationRequest::default_instance_;
  delete OfferNotificationRequest_reflection_;
  delete BidNotificationRequest::default_instance_;
  delete BidNotificationRequest_reflection_;
}

void protobuf_AddDesc_service_2fexchange_2fexchange_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::bnet::protocol::exchange::protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto();
  ::bnet::protocol::exchange_object_provider::protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::exchange::protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037service/exchange/exchange.proto\022\026bnet."
    "protocol.exchange\032\021lib/rpc/rpc.proto\032\033li"
    "b/protocol/exchange.proto\032+lib/protocol/"
    "exchange_object_provider.proto\032\031lib/prot"
    "ocol/entity.proto\032%service/exchange/exch"
    "ange_types.proto\"\212\001\n\026CreateOrderBookRequ"
    "est\0229\n\014partition_id\030\001 \002(\0132#.bnet.protoco"
    "l.exchange.PartitionId\0225\n\norder_book\030\002 \002"
    "(\0132!.bnet.protocol.exchange.OrderBook\"0\n"
    "\027CreateOrderBookResponse\022\025\n\rorder_book_i"
    "d\030\001 \001(\004\"\230\001\n\034PlaceOfferOnOrderBookRequest"
    "\0229\n\014partition_id\030\001 \002(\0132#.bnet.protocol.e"
    "xchange.PartitionId\022=\n\016offer_creation\030\002 "
    "\002(\0132%.bnet.protocol.exchange.OfferCreati"
    "on\"H\n\035PlaceOfferOnOrderBookResponse\022\025\n\ro"
    "rder_book_id\030\001 \001(\004\022\020\n\010offer_id\030\002 \001(\004\"\333\001\n"
    "(PlaceOfferCreateOrderBookIfNeededReques"
    "t\0229\n\014partition_id\030\001 \002(\0132#.bnet.protocol."
    "exchange.PartitionId\0225\n\norder_book\030\002 \002(\013"
    "2!.bnet.protocol.exchange.OrderBook\022=\n\016o"
    "ffer_creation\030\003 \002(\0132%.bnet.protocol.exch"
    "ange.OfferCreation\"T\n)PlaceOfferCreateOr"
    "derBookIfNeededResponse\022\025\n\rorder_book_id"
    "\030\001 \001(\004\022\020\n\010offer_id\030\002 \001(\004\"\222\001\n\032PlaceBidOnO"
    "rderBookRequest\0229\n\014partition_id\030\001 \002(\0132#."
    "bnet.protocol.exchange.PartitionId\0229\n\014bi"
    "d_creation\030\002 \002(\0132#.bnet.protocol.exchang"
    "e.BidCreation\"D\n\033PlaceBidOnOrderBookResp"
    "onse\022\025\n\rorder_book_id\030\001 \001(\004\022\016\n\006bid_id\030\002 "
    "\001(\004\"\325\001\n&PlaceBidCreateOrderBookIfNeededR"
    "equest\0229\n\014partition_id\030\001 \002(\0132#.bnet.prot"
    "ocol.exchange.PartitionId\0225\n\norder_book\030"
    "\002 \002(\0132!.bnet.protocol.exchange.OrderBook"
    "\0229\n\014bid_creation\030\003 \002(\0132#.bnet.protocol.e"
    "xchange.BidCreation\"P\n\'PlaceBidCreateOrd"
    "erBookIfNeededResponse\022\025\n\rorder_book_id\030"
    "\001 \001(\004\022\016\n\006bid_id\030\002 \001(\004\"\250\001\n\035QueryOffersByO"
    "rderBookRequest\0229\n\014partition_id\030\001 \002(\0132#."
    "bnet.protocol.exchange.PartitionId\022<\n\006fi"
    "lter\030\002 \002(\0132,.bnet.protocol.exchange.Quer"
    "yFilterByOrderId\022\016\n\006status\030\003 \002(\005\"l\n\036Quer"
    "yOffersByOrderBookResponse\0225\n\006offers\030\001 \003"
    "(\0132%.bnet.protocol.exchange.OfferExtende"
    "d\022\023\n\013total_count\030\002 \002(\r\"\246\001\n\033QueryBidsByOr"
    "derBookRequest\0229\n\014partition_id\030\001 \002(\0132#.b"
    "net.protocol.exchange.PartitionId\022<\n\006fil"
    "ter\030\002 \002(\0132,.bnet.protocol.exchange.Query"
    "FilterByOrderId\022\016\n\006status\030\003 \002(\005\"f\n\034Query"
    "BidsByOrderBookResponse\0221\n\004bids\030\001 \003(\0132#."
    "bnet.protocol.exchange.BidExtended\022\023\n\013to"
    "tal_count\030\002 \002(\r\"\321\001\n\"QueryOffersByAccount"
    "ForItemRequest\022:\n\020account_for_item\030\001 \002(\013"
    "2 .bnet.protocol.exchange.BlobFrom\022@\n\006fi"
    "lter\030\002 \002(\01320.bnet.protocol.exchange.Quer"
    "yFilterByCreatedTime\022-\n\014bnet_account\030\003 \001"
    "(\0132\027.bnet.protocol.EntityId\"q\n#QueryOffe"
    "rsByAccountForItemResponse\0225\n\006offers\030\001 \003"
    "(\0132%.bnet.protocol.exchange.OfferExtende"
    "d\022\023\n\013total_count\030\002 \002(\r\"\317\001\n QueryBidsByAc"
    "countForItemRequest\022:\n\020account_for_item\030"
    "\001 \002(\0132 .bnet.protocol.exchange.BlobFrom\022"
    "@\n\006filter\030\002 \002(\01320.bnet.protocol.exchange"
    ".QueryFilterByCreatedTime\022-\n\014bnet_accoun"
    "t\030\003 \001(\0132\027.bnet.protocol.EntityId\"k\n!Quer"
    "yBidsByAccountForItemResponse\0221\n\004bids\030\001 "
    "\003(\0132#.bnet.protocol.exchange.BidExtended"
    "\022\023\n\013total_count\030\002 \002(\r\"Y\n\035QueryOrderBooks"
    "SummaryRequest\0228\n\007handles\030\001 \003(\0132\'.bnet.p"
    "rotocol.exchange.OrderBookHandle\"_\n\036Quer"
    "yOrderBooksSummaryResponse\022=\n\013order_book"
    "s\030\001 \003(\0132(.bnet.protocol.exchange.OrderBo"
    "okSummary\"\235\001\n\"QuerySettlementsByOrderBoo"
    "kRequest\0229\n\014partition_id\030\001 \002(\0132#.bnet.pr"
    "otocol.exchange.PartitionId\022<\n\006filter\030\002 "
    "\002(\0132,.bnet.protocol.exchange.QueryFilter"
    "ByOrderId\"^\n#QuerySettlementsByOrderBook"
    "Response\0227\n\013settlements\030\001 \003(\0132\".bnet.pro"
    "tocol.exchange.Settlement\"\222\002\n%SubscribeO"
    "rderBookStatusChangeRequest\022\021\n\tobject_id"
    "\030\001 \002(\004\022=\n\020min_partition_id\030\002 \002(\0132#.bnet."
    "protocol.exchange.PartitionId\022=\n\020max_par"
    "tition_id\030\003 \002(\0132#.bnet.protocol.exchange"
    ".PartitionId\022\017\n\007program\030\004 \002(\007\022\016\n\006status\030"
    "\005 \002(\005\022\020\n\010currency\030\006 \001(\t\022\022\n\nspecialist\030\007 "
    "\001(\005\022\021\n\tbootstrap\030\010 \001(\010\")\n\'UnsubscribeOrd"
    "erBookStatusChangeRequest\"a\n!SubscribeOr"
    "derStatusChangeRequest\022)\n\010agent_id\030\001 \002(\013"
    "2\027.bnet.protocol.EntityId\022\021\n\tobject_id\030\002"
    " \002(\004\"c\n#UnsubscribeOrderStatusChangeRequ"
    "est\022)\n\010agent_id\030\001 \002(\0132\027.bnet.protocol.En"
    "tityId\022\021\n\tobject_id\030\002 \002(\004\"\212\001\n\014ClaimReque"
    "st\0229\n\014partition_id\030\001 \002(\0132#.bnet.protocol"
    ".exchange.PartitionId\022\020\n\010order_id\030\002 \002(\r\022"
    "-\n\014bnet_account\030\003 \001(\0132\027.bnet.protocol.En"
    "tityId\"\233\001\n\rCancelRequest\0229\n\014partition_id"
    "\030\001 \002(\0132#.bnet.protocol.exchange.Partitio"
    "nId\022\020\n\010order_id\030\002 \002(\r\022\016\n\006reason\030\003 \001(\r\022-\n"
    "\014bnet_account\030\004 \001(\0132\027.bnet.protocol.Enti"
    "tyId\"*\n\027GetConfigurationRequest\022\017\n\007progr"
    "am\030\001 \002(\007\"U\n\030GetConfigurationResponse\0229\n\007"
    "configs\030\001 \003(\0132(.bnet.protocol.exchange.S"
    "pecialistConfig\"\222\001\n\034GetOfferFeeEstimatio"
    "nRequest\0229\n\014partition_id\030\001 \002(\0132#.bnet.pr"
    "otocol.exchange.PartitionId\0227\n\004data\030\002 \002("
    "\0132).bnet.protocol.exchange.FeeEstimation"
    "Data\"\220\001\n\032GetBidFeeEstimationRequest\0229\n\014p"
    "artition_id\030\001 \002(\0132#.bnet.protocol.exchan"
    "ge.PartitionId\0227\n\004data\030\002 \002(\0132).bnet.prot"
    "ocol.exchange.FeeEstimationData\".\n\030GetFe"
    "eEstimationResponse\022\022\n\nfee_amount\030\001 \001(\004\""
    "}\n\034OrderBookNotificationRequest\022D\n\rnotif"
    "ications\030\001 \003(\0132-.bnet.protocol.exchange."
    "OrderBookNotification\022\027\n\017boot_strap_last"
    "\030\002 \001(\010\"_\n\030OfferNotificationRequest\0224\n\005of"
    "fer\030\001 \002(\0132%.bnet.protocol.exchange.Offer"
    "Extended\022\r\n\005event\030\002 \002(\r\"Y\n\026BidNotificati"
    "onRequest\0220\n\003bid\030\001 \002(\0132#.bnet.protocol.e"
    "xchange.BidExtended\022\r\n\005event\030\002 \002(\r", 4714);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/exchange/exchange.proto", &protobuf_RegisterTypes);
  CreateOrderBookRequest::default_instance_ = new CreateOrderBookRequest();
  CreateOrderBookResponse::default_instance_ = new CreateOrderBookResponse();
  PlaceOfferOnOrderBookRequest::default_instance_ = new PlaceOfferOnOrderBookRequest();
  PlaceOfferOnOrderBookResponse::default_instance_ = new PlaceOfferOnOrderBookResponse();
  PlaceOfferCreateOrderBookIfNeededRequest::default_instance_ = new PlaceOfferCreateOrderBookIfNeededRequest();
  PlaceOfferCreateOrderBookIfNeededResponse::default_instance_ = new PlaceOfferCreateOrderBookIfNeededResponse();
  PlaceBidOnOrderBookRequest::default_instance_ = new PlaceBidOnOrderBookRequest();
  PlaceBidOnOrderBookResponse::default_instance_ = new PlaceBidOnOrderBookResponse();
  PlaceBidCreateOrderBookIfNeededRequest::default_instance_ = new PlaceBidCreateOrderBookIfNeededRequest();
  PlaceBidCreateOrderBookIfNeededResponse::default_instance_ = new PlaceBidCreateOrderBookIfNeededResponse();
  QueryOffersByOrderBookRequest::default_instance_ = new QueryOffersByOrderBookRequest();
  QueryOffersByOrderBookResponse::default_instance_ = new QueryOffersByOrderBookResponse();
  QueryBidsByOrderBookRequest::default_instance_ = new QueryBidsByOrderBookRequest();
  QueryBidsByOrderBookResponse::default_instance_ = new QueryBidsByOrderBookResponse();
  QueryOffersByAccountForItemRequest::default_instance_ = new QueryOffersByAccountForItemRequest();
  QueryOffersByAccountForItemResponse::default_instance_ = new QueryOffersByAccountForItemResponse();
  QueryBidsByAccountForItemRequest::default_instance_ = new QueryBidsByAccountForItemRequest();
  QueryBidsByAccountForItemResponse::default_instance_ = new QueryBidsByAccountForItemResponse();
  QueryOrderBooksSummaryRequest::default_instance_ = new QueryOrderBooksSummaryRequest();
  QueryOrderBooksSummaryResponse::default_instance_ = new QueryOrderBooksSummaryResponse();
  QuerySettlementsByOrderBookRequest::default_instance_ = new QuerySettlementsByOrderBookRequest();
  QuerySettlementsByOrderBookResponse::default_instance_ = new QuerySettlementsByOrderBookResponse();
  SubscribeOrderBookStatusChangeRequest::default_instance_ = new SubscribeOrderBookStatusChangeRequest();
  UnsubscribeOrderBookStatusChangeRequest::default_instance_ = new UnsubscribeOrderBookStatusChangeRequest();
  SubscribeOrderStatusChangeRequest::default_instance_ = new SubscribeOrderStatusChangeRequest();
  UnsubscribeOrderStatusChangeRequest::default_instance_ = new UnsubscribeOrderStatusChangeRequest();
  ClaimRequest::default_instance_ = new ClaimRequest();
  CancelRequest::default_instance_ = new CancelRequest();
  GetConfigurationRequest::default_instance_ = new GetConfigurationRequest();
  GetConfigurationResponse::default_instance_ = new GetConfigurationResponse();
  GetOfferFeeEstimationRequest::default_instance_ = new GetOfferFeeEstimationRequest();
  GetBidFeeEstimationRequest::default_instance_ = new GetBidFeeEstimationRequest();
  GetFeeEstimationResponse::default_instance_ = new GetFeeEstimationResponse();
  OrderBookNotificationRequest::default_instance_ = new OrderBookNotificationRequest();
  OfferNotificationRequest::default_instance_ = new OfferNotificationRequest();
  BidNotificationRequest::default_instance_ = new BidNotificationRequest();
  CreateOrderBookRequest::default_instance_->InitAsDefaultInstance();
  CreateOrderBookResponse::default_instance_->InitAsDefaultInstance();
  PlaceOfferOnOrderBookRequest::default_instance_->InitAsDefaultInstance();
  PlaceOfferOnOrderBookResponse::default_instance_->InitAsDefaultInstance();
  PlaceOfferCreateOrderBookIfNeededRequest::default_instance_->InitAsDefaultInstance();
  PlaceOfferCreateOrderBookIfNeededResponse::default_instance_->InitAsDefaultInstance();
  PlaceBidOnOrderBookRequest::default_instance_->InitAsDefaultInstance();
  PlaceBidOnOrderBookResponse::default_instance_->InitAsDefaultInstance();
  PlaceBidCreateOrderBookIfNeededRequest::default_instance_->InitAsDefaultInstance();
  PlaceBidCreateOrderBookIfNeededResponse::default_instance_->InitAsDefaultInstance();
  QueryOffersByOrderBookRequest::default_instance_->InitAsDefaultInstance();
  QueryOffersByOrderBookResponse::default_instance_->InitAsDefaultInstance();
  QueryBidsByOrderBookRequest::default_instance_->InitAsDefaultInstance();
  QueryBidsByOrderBookResponse::default_instance_->InitAsDefaultInstance();
  QueryOffersByAccountForItemRequest::default_instance_->InitAsDefaultInstance();
  QueryOffersByAccountForItemResponse::default_instance_->InitAsDefaultInstance();
  QueryBidsByAccountForItemRequest::default_instance_->InitAsDefaultInstance();
  QueryBidsByAccountForItemResponse::default_instance_->InitAsDefaultInstance();
  QueryOrderBooksSummaryRequest::default_instance_->InitAsDefaultInstance();
  QueryOrderBooksSummaryResponse::default_instance_->InitAsDefaultInstance();
  QuerySettlementsByOrderBookRequest::default_instance_->InitAsDefaultInstance();
  QuerySettlementsByOrderBookResponse::default_instance_->InitAsDefaultInstance();
  SubscribeOrderBookStatusChangeRequest::default_instance_->InitAsDefaultInstance();
  UnsubscribeOrderBookStatusChangeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeOrderStatusChangeRequest::default_instance_->InitAsDefaultInstance();
  UnsubscribeOrderStatusChangeRequest::default_instance_->InitAsDefaultInstance();
  ClaimRequest::default_instance_->InitAsDefaultInstance();
  CancelRequest::default_instance_->InitAsDefaultInstance();
  GetConfigurationRequest::default_instance_->InitAsDefaultInstance();
  GetConfigurationResponse::default_instance_->InitAsDefaultInstance();
  GetOfferFeeEstimationRequest::default_instance_->InitAsDefaultInstance();
  GetBidFeeEstimationRequest::default_instance_->InitAsDefaultInstance();
  GetFeeEstimationResponse::default_instance_->InitAsDefaultInstance();
  OrderBookNotificationRequest::default_instance_->InitAsDefaultInstance();
  OfferNotificationRequest::default_instance_->InitAsDefaultInstance();
  BidNotificationRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fexchange_2fexchange_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fexchange_2fexchange_2eproto {
  StaticDescriptorInitializer_service_2fexchange_2fexchange_2eproto() {
    protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();
  }
} static_descriptor_initializer_service_2fexchange_2fexchange_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CreateOrderBookRequest::kPartitionIdFieldNumber;
const int CreateOrderBookRequest::kOrderBookFieldNumber;
#endif  // !_MSC_VER

CreateOrderBookRequest::CreateOrderBookRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateOrderBookRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  order_book_ = const_cast< ::bnet::protocol::exchange::OrderBook*>(&::bnet::protocol::exchange::OrderBook::default_instance());
}

CreateOrderBookRequest::CreateOrderBookRequest(const CreateOrderBookRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateOrderBookRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  order_book_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateOrderBookRequest::~CreateOrderBookRequest() {
  SharedDtor();
}

void CreateOrderBookRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete order_book_;
  }
}

void CreateOrderBookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateOrderBookRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateOrderBookRequest_descriptor_;
}

const CreateOrderBookRequest& CreateOrderBookRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

CreateOrderBookRequest* CreateOrderBookRequest::default_instance_ = NULL;

CreateOrderBookRequest* CreateOrderBookRequest::New() const {
  return new CreateOrderBookRequest;
}

void CreateOrderBookRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_order_book()) {
      if (order_book_ != NULL) order_book_->::bnet::protocol::exchange::OrderBook::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateOrderBookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order_book;
        break;
      }
      
      // required .bnet.protocol.exchange.OrderBook order_book = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_book:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_book()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateOrderBookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.OrderBook order_book = 2;
  if (has_order_book()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->order_book(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateOrderBookRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.OrderBook order_book = 2;
  if (has_order_book()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->order_book(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateOrderBookRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.OrderBook order_book = 2;
    if (has_order_book()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_book());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateOrderBookRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateOrderBookRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateOrderBookRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateOrderBookRequest::MergeFrom(const CreateOrderBookRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_order_book()) {
      mutable_order_book()->::bnet::protocol::exchange::OrderBook::MergeFrom(from.order_book());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateOrderBookRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOrderBookRequest::CopyFrom(const CreateOrderBookRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrderBookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_order_book()) {
    if (!this->order_book().IsInitialized()) return false;
  }
  return true;
}

void CreateOrderBookRequest::Swap(CreateOrderBookRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(order_book_, other->order_book_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateOrderBookRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateOrderBookRequest_descriptor_;
  metadata.reflection = CreateOrderBookRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateOrderBookResponse::kOrderBookIdFieldNumber;
#endif  // !_MSC_VER

CreateOrderBookResponse::CreateOrderBookResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateOrderBookResponse::InitAsDefaultInstance() {
}

CreateOrderBookResponse::CreateOrderBookResponse(const CreateOrderBookResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateOrderBookResponse::SharedCtor() {
  _cached_size_ = 0;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateOrderBookResponse::~CreateOrderBookResponse() {
  SharedDtor();
}

void CreateOrderBookResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateOrderBookResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateOrderBookResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateOrderBookResponse_descriptor_;
}

const CreateOrderBookResponse& CreateOrderBookResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

CreateOrderBookResponse* CreateOrderBookResponse::default_instance_ = NULL;

CreateOrderBookResponse* CreateOrderBookResponse::New() const {
  return new CreateOrderBookResponse;
}

void CreateOrderBookResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_book_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateOrderBookResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateOrderBookResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_book_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateOrderBookResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_book_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateOrderBookResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 order_book_id = 1;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateOrderBookResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateOrderBookResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateOrderBookResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateOrderBookResponse::MergeFrom(const CreateOrderBookResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateOrderBookResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOrderBookResponse::CopyFrom(const CreateOrderBookResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrderBookResponse::IsInitialized() const {
  
  return true;
}

void CreateOrderBookResponse::Swap(CreateOrderBookResponse* other) {
  if (other != this) {
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateOrderBookResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateOrderBookResponse_descriptor_;
  metadata.reflection = CreateOrderBookResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceOfferOnOrderBookRequest::kPartitionIdFieldNumber;
const int PlaceOfferOnOrderBookRequest::kOfferCreationFieldNumber;
#endif  // !_MSC_VER

PlaceOfferOnOrderBookRequest::PlaceOfferOnOrderBookRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceOfferOnOrderBookRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  offer_creation_ = const_cast< ::bnet::protocol::exchange::OfferCreation*>(&::bnet::protocol::exchange::OfferCreation::default_instance());
}

PlaceOfferOnOrderBookRequest::PlaceOfferOnOrderBookRequest(const PlaceOfferOnOrderBookRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceOfferOnOrderBookRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  offer_creation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceOfferOnOrderBookRequest::~PlaceOfferOnOrderBookRequest() {
  SharedDtor();
}

void PlaceOfferOnOrderBookRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete offer_creation_;
  }
}

void PlaceOfferOnOrderBookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceOfferOnOrderBookRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceOfferOnOrderBookRequest_descriptor_;
}

const PlaceOfferOnOrderBookRequest& PlaceOfferOnOrderBookRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

PlaceOfferOnOrderBookRequest* PlaceOfferOnOrderBookRequest::default_instance_ = NULL;

PlaceOfferOnOrderBookRequest* PlaceOfferOnOrderBookRequest::New() const {
  return new PlaceOfferOnOrderBookRequest;
}

void PlaceOfferOnOrderBookRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_offer_creation()) {
      if (offer_creation_ != NULL) offer_creation_->::bnet::protocol::exchange::OfferCreation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceOfferOnOrderBookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_offer_creation;
        break;
      }
      
      // required .bnet.protocol.exchange.OfferCreation offer_creation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offer_creation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offer_creation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceOfferOnOrderBookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.OfferCreation offer_creation = 2;
  if (has_offer_creation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->offer_creation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceOfferOnOrderBookRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.OfferCreation offer_creation = 2;
  if (has_offer_creation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->offer_creation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceOfferOnOrderBookRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.OfferCreation offer_creation = 2;
    if (has_offer_creation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offer_creation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceOfferOnOrderBookRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceOfferOnOrderBookRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceOfferOnOrderBookRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceOfferOnOrderBookRequest::MergeFrom(const PlaceOfferOnOrderBookRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_offer_creation()) {
      mutable_offer_creation()->::bnet::protocol::exchange::OfferCreation::MergeFrom(from.offer_creation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceOfferOnOrderBookRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOfferOnOrderBookRequest::CopyFrom(const PlaceOfferOnOrderBookRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOfferOnOrderBookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_offer_creation()) {
    if (!this->offer_creation().IsInitialized()) return false;
  }
  return true;
}

void PlaceOfferOnOrderBookRequest::Swap(PlaceOfferOnOrderBookRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(offer_creation_, other->offer_creation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceOfferOnOrderBookRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceOfferOnOrderBookRequest_descriptor_;
  metadata.reflection = PlaceOfferOnOrderBookRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceOfferOnOrderBookResponse::kOrderBookIdFieldNumber;
const int PlaceOfferOnOrderBookResponse::kOfferIdFieldNumber;
#endif  // !_MSC_VER

PlaceOfferOnOrderBookResponse::PlaceOfferOnOrderBookResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceOfferOnOrderBookResponse::InitAsDefaultInstance() {
}

PlaceOfferOnOrderBookResponse::PlaceOfferOnOrderBookResponse(const PlaceOfferOnOrderBookResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceOfferOnOrderBookResponse::SharedCtor() {
  _cached_size_ = 0;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  offer_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceOfferOnOrderBookResponse::~PlaceOfferOnOrderBookResponse() {
  SharedDtor();
}

void PlaceOfferOnOrderBookResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaceOfferOnOrderBookResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceOfferOnOrderBookResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceOfferOnOrderBookResponse_descriptor_;
}

const PlaceOfferOnOrderBookResponse& PlaceOfferOnOrderBookResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

PlaceOfferOnOrderBookResponse* PlaceOfferOnOrderBookResponse::default_instance_ = NULL;

PlaceOfferOnOrderBookResponse* PlaceOfferOnOrderBookResponse::New() const {
  return new PlaceOfferOnOrderBookResponse;
}

void PlaceOfferOnOrderBookResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_book_id_ = GOOGLE_ULONGLONG(0);
    offer_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceOfferOnOrderBookResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offer_id;
        break;
      }
      
      // optional uint64 offer_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offer_id_)));
          set_has_offer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceOfferOnOrderBookResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_book_id(), output);
  }
  
  // optional uint64 offer_id = 2;
  if (has_offer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offer_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceOfferOnOrderBookResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_book_id(), target);
  }
  
  // optional uint64 offer_id = 2;
  if (has_offer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->offer_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceOfferOnOrderBookResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 order_book_id = 1;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
    // optional uint64 offer_id = 2;
    if (has_offer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offer_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceOfferOnOrderBookResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceOfferOnOrderBookResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceOfferOnOrderBookResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceOfferOnOrderBookResponse::MergeFrom(const PlaceOfferOnOrderBookResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
    if (from.has_offer_id()) {
      set_offer_id(from.offer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceOfferOnOrderBookResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOfferOnOrderBookResponse::CopyFrom(const PlaceOfferOnOrderBookResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOfferOnOrderBookResponse::IsInitialized() const {
  
  return true;
}

void PlaceOfferOnOrderBookResponse::Swap(PlaceOfferOnOrderBookResponse* other) {
  if (other != this) {
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(offer_id_, other->offer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceOfferOnOrderBookResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceOfferOnOrderBookResponse_descriptor_;
  metadata.reflection = PlaceOfferOnOrderBookResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceOfferCreateOrderBookIfNeededRequest::kPartitionIdFieldNumber;
const int PlaceOfferCreateOrderBookIfNeededRequest::kOrderBookFieldNumber;
const int PlaceOfferCreateOrderBookIfNeededRequest::kOfferCreationFieldNumber;
#endif  // !_MSC_VER

PlaceOfferCreateOrderBookIfNeededRequest::PlaceOfferCreateOrderBookIfNeededRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceOfferCreateOrderBookIfNeededRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  order_book_ = const_cast< ::bnet::protocol::exchange::OrderBook*>(&::bnet::protocol::exchange::OrderBook::default_instance());
  offer_creation_ = const_cast< ::bnet::protocol::exchange::OfferCreation*>(&::bnet::protocol::exchange::OfferCreation::default_instance());
}

PlaceOfferCreateOrderBookIfNeededRequest::PlaceOfferCreateOrderBookIfNeededRequest(const PlaceOfferCreateOrderBookIfNeededRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceOfferCreateOrderBookIfNeededRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  order_book_ = NULL;
  offer_creation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceOfferCreateOrderBookIfNeededRequest::~PlaceOfferCreateOrderBookIfNeededRequest() {
  SharedDtor();
}

void PlaceOfferCreateOrderBookIfNeededRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete order_book_;
    delete offer_creation_;
  }
}

void PlaceOfferCreateOrderBookIfNeededRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceOfferCreateOrderBookIfNeededRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceOfferCreateOrderBookIfNeededRequest_descriptor_;
}

const PlaceOfferCreateOrderBookIfNeededRequest& PlaceOfferCreateOrderBookIfNeededRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

PlaceOfferCreateOrderBookIfNeededRequest* PlaceOfferCreateOrderBookIfNeededRequest::default_instance_ = NULL;

PlaceOfferCreateOrderBookIfNeededRequest* PlaceOfferCreateOrderBookIfNeededRequest::New() const {
  return new PlaceOfferCreateOrderBookIfNeededRequest;
}

void PlaceOfferCreateOrderBookIfNeededRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_order_book()) {
      if (order_book_ != NULL) order_book_->::bnet::protocol::exchange::OrderBook::Clear();
    }
    if (has_offer_creation()) {
      if (offer_creation_ != NULL) offer_creation_->::bnet::protocol::exchange::OfferCreation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceOfferCreateOrderBookIfNeededRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order_book;
        break;
      }
      
      // required .bnet.protocol.exchange.OrderBook order_book = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_book:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_book()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_offer_creation;
        break;
      }
      
      // required .bnet.protocol.exchange.OfferCreation offer_creation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offer_creation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offer_creation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceOfferCreateOrderBookIfNeededRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.OrderBook order_book = 2;
  if (has_order_book()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->order_book(), output);
  }
  
  // required .bnet.protocol.exchange.OfferCreation offer_creation = 3;
  if (has_offer_creation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->offer_creation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceOfferCreateOrderBookIfNeededRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.OrderBook order_book = 2;
  if (has_order_book()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->order_book(), target);
  }
  
  // required .bnet.protocol.exchange.OfferCreation offer_creation = 3;
  if (has_offer_creation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->offer_creation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceOfferCreateOrderBookIfNeededRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.OrderBook order_book = 2;
    if (has_order_book()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_book());
    }
    
    // required .bnet.protocol.exchange.OfferCreation offer_creation = 3;
    if (has_offer_creation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offer_creation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceOfferCreateOrderBookIfNeededRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceOfferCreateOrderBookIfNeededRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceOfferCreateOrderBookIfNeededRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceOfferCreateOrderBookIfNeededRequest::MergeFrom(const PlaceOfferCreateOrderBookIfNeededRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_order_book()) {
      mutable_order_book()->::bnet::protocol::exchange::OrderBook::MergeFrom(from.order_book());
    }
    if (from.has_offer_creation()) {
      mutable_offer_creation()->::bnet::protocol::exchange::OfferCreation::MergeFrom(from.offer_creation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceOfferCreateOrderBookIfNeededRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOfferCreateOrderBookIfNeededRequest::CopyFrom(const PlaceOfferCreateOrderBookIfNeededRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOfferCreateOrderBookIfNeededRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_order_book()) {
    if (!this->order_book().IsInitialized()) return false;
  }
  if (has_offer_creation()) {
    if (!this->offer_creation().IsInitialized()) return false;
  }
  return true;
}

void PlaceOfferCreateOrderBookIfNeededRequest::Swap(PlaceOfferCreateOrderBookIfNeededRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(order_book_, other->order_book_);
    std::swap(offer_creation_, other->offer_creation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceOfferCreateOrderBookIfNeededRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceOfferCreateOrderBookIfNeededRequest_descriptor_;
  metadata.reflection = PlaceOfferCreateOrderBookIfNeededRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceOfferCreateOrderBookIfNeededResponse::kOrderBookIdFieldNumber;
const int PlaceOfferCreateOrderBookIfNeededResponse::kOfferIdFieldNumber;
#endif  // !_MSC_VER

PlaceOfferCreateOrderBookIfNeededResponse::PlaceOfferCreateOrderBookIfNeededResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceOfferCreateOrderBookIfNeededResponse::InitAsDefaultInstance() {
}

PlaceOfferCreateOrderBookIfNeededResponse::PlaceOfferCreateOrderBookIfNeededResponse(const PlaceOfferCreateOrderBookIfNeededResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceOfferCreateOrderBookIfNeededResponse::SharedCtor() {
  _cached_size_ = 0;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  offer_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceOfferCreateOrderBookIfNeededResponse::~PlaceOfferCreateOrderBookIfNeededResponse() {
  SharedDtor();
}

void PlaceOfferCreateOrderBookIfNeededResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaceOfferCreateOrderBookIfNeededResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceOfferCreateOrderBookIfNeededResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceOfferCreateOrderBookIfNeededResponse_descriptor_;
}

const PlaceOfferCreateOrderBookIfNeededResponse& PlaceOfferCreateOrderBookIfNeededResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

PlaceOfferCreateOrderBookIfNeededResponse* PlaceOfferCreateOrderBookIfNeededResponse::default_instance_ = NULL;

PlaceOfferCreateOrderBookIfNeededResponse* PlaceOfferCreateOrderBookIfNeededResponse::New() const {
  return new PlaceOfferCreateOrderBookIfNeededResponse;
}

void PlaceOfferCreateOrderBookIfNeededResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_book_id_ = GOOGLE_ULONGLONG(0);
    offer_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceOfferCreateOrderBookIfNeededResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offer_id;
        break;
      }
      
      // optional uint64 offer_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offer_id_)));
          set_has_offer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceOfferCreateOrderBookIfNeededResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_book_id(), output);
  }
  
  // optional uint64 offer_id = 2;
  if (has_offer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offer_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceOfferCreateOrderBookIfNeededResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_book_id(), target);
  }
  
  // optional uint64 offer_id = 2;
  if (has_offer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->offer_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceOfferCreateOrderBookIfNeededResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 order_book_id = 1;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
    // optional uint64 offer_id = 2;
    if (has_offer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offer_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceOfferCreateOrderBookIfNeededResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceOfferCreateOrderBookIfNeededResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceOfferCreateOrderBookIfNeededResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceOfferCreateOrderBookIfNeededResponse::MergeFrom(const PlaceOfferCreateOrderBookIfNeededResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
    if (from.has_offer_id()) {
      set_offer_id(from.offer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceOfferCreateOrderBookIfNeededResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOfferCreateOrderBookIfNeededResponse::CopyFrom(const PlaceOfferCreateOrderBookIfNeededResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOfferCreateOrderBookIfNeededResponse::IsInitialized() const {
  
  return true;
}

void PlaceOfferCreateOrderBookIfNeededResponse::Swap(PlaceOfferCreateOrderBookIfNeededResponse* other) {
  if (other != this) {
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(offer_id_, other->offer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceOfferCreateOrderBookIfNeededResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceOfferCreateOrderBookIfNeededResponse_descriptor_;
  metadata.reflection = PlaceOfferCreateOrderBookIfNeededResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceBidOnOrderBookRequest::kPartitionIdFieldNumber;
const int PlaceBidOnOrderBookRequest::kBidCreationFieldNumber;
#endif  // !_MSC_VER

PlaceBidOnOrderBookRequest::PlaceBidOnOrderBookRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceBidOnOrderBookRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  bid_creation_ = const_cast< ::bnet::protocol::exchange::BidCreation*>(&::bnet::protocol::exchange::BidCreation::default_instance());
}

PlaceBidOnOrderBookRequest::PlaceBidOnOrderBookRequest(const PlaceBidOnOrderBookRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceBidOnOrderBookRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  bid_creation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceBidOnOrderBookRequest::~PlaceBidOnOrderBookRequest() {
  SharedDtor();
}

void PlaceBidOnOrderBookRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete bid_creation_;
  }
}

void PlaceBidOnOrderBookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceBidOnOrderBookRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceBidOnOrderBookRequest_descriptor_;
}

const PlaceBidOnOrderBookRequest& PlaceBidOnOrderBookRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

PlaceBidOnOrderBookRequest* PlaceBidOnOrderBookRequest::default_instance_ = NULL;

PlaceBidOnOrderBookRequest* PlaceBidOnOrderBookRequest::New() const {
  return new PlaceBidOnOrderBookRequest;
}

void PlaceBidOnOrderBookRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_bid_creation()) {
      if (bid_creation_ != NULL) bid_creation_->::bnet::protocol::exchange::BidCreation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceBidOnOrderBookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bid_creation;
        break;
      }
      
      // required .bnet.protocol.exchange.BidCreation bid_creation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bid_creation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bid_creation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceBidOnOrderBookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.BidCreation bid_creation = 2;
  if (has_bid_creation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bid_creation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceBidOnOrderBookRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.BidCreation bid_creation = 2;
  if (has_bid_creation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bid_creation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceBidOnOrderBookRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.BidCreation bid_creation = 2;
    if (has_bid_creation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bid_creation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceBidOnOrderBookRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceBidOnOrderBookRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceBidOnOrderBookRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceBidOnOrderBookRequest::MergeFrom(const PlaceBidOnOrderBookRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_bid_creation()) {
      mutable_bid_creation()->::bnet::protocol::exchange::BidCreation::MergeFrom(from.bid_creation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceBidOnOrderBookRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceBidOnOrderBookRequest::CopyFrom(const PlaceBidOnOrderBookRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceBidOnOrderBookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_bid_creation()) {
    if (!this->bid_creation().IsInitialized()) return false;
  }
  return true;
}

void PlaceBidOnOrderBookRequest::Swap(PlaceBidOnOrderBookRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(bid_creation_, other->bid_creation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceBidOnOrderBookRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceBidOnOrderBookRequest_descriptor_;
  metadata.reflection = PlaceBidOnOrderBookRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceBidOnOrderBookResponse::kOrderBookIdFieldNumber;
const int PlaceBidOnOrderBookResponse::kBidIdFieldNumber;
#endif  // !_MSC_VER

PlaceBidOnOrderBookResponse::PlaceBidOnOrderBookResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceBidOnOrderBookResponse::InitAsDefaultInstance() {
}

PlaceBidOnOrderBookResponse::PlaceBidOnOrderBookResponse(const PlaceBidOnOrderBookResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceBidOnOrderBookResponse::SharedCtor() {
  _cached_size_ = 0;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  bid_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceBidOnOrderBookResponse::~PlaceBidOnOrderBookResponse() {
  SharedDtor();
}

void PlaceBidOnOrderBookResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaceBidOnOrderBookResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceBidOnOrderBookResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceBidOnOrderBookResponse_descriptor_;
}

const PlaceBidOnOrderBookResponse& PlaceBidOnOrderBookResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

PlaceBidOnOrderBookResponse* PlaceBidOnOrderBookResponse::default_instance_ = NULL;

PlaceBidOnOrderBookResponse* PlaceBidOnOrderBookResponse::New() const {
  return new PlaceBidOnOrderBookResponse;
}

void PlaceBidOnOrderBookResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_book_id_ = GOOGLE_ULONGLONG(0);
    bid_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceBidOnOrderBookResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bid_id;
        break;
      }
      
      // optional uint64 bid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bid_id_)));
          set_has_bid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceBidOnOrderBookResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_book_id(), output);
  }
  
  // optional uint64 bid_id = 2;
  if (has_bid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceBidOnOrderBookResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_book_id(), target);
  }
  
  // optional uint64 bid_id = 2;
  if (has_bid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceBidOnOrderBookResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 order_book_id = 1;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
    // optional uint64 bid_id = 2;
    if (has_bid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceBidOnOrderBookResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceBidOnOrderBookResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceBidOnOrderBookResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceBidOnOrderBookResponse::MergeFrom(const PlaceBidOnOrderBookResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
    if (from.has_bid_id()) {
      set_bid_id(from.bid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceBidOnOrderBookResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceBidOnOrderBookResponse::CopyFrom(const PlaceBidOnOrderBookResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceBidOnOrderBookResponse::IsInitialized() const {
  
  return true;
}

void PlaceBidOnOrderBookResponse::Swap(PlaceBidOnOrderBookResponse* other) {
  if (other != this) {
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(bid_id_, other->bid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceBidOnOrderBookResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceBidOnOrderBookResponse_descriptor_;
  metadata.reflection = PlaceBidOnOrderBookResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceBidCreateOrderBookIfNeededRequest::kPartitionIdFieldNumber;
const int PlaceBidCreateOrderBookIfNeededRequest::kOrderBookFieldNumber;
const int PlaceBidCreateOrderBookIfNeededRequest::kBidCreationFieldNumber;
#endif  // !_MSC_VER

PlaceBidCreateOrderBookIfNeededRequest::PlaceBidCreateOrderBookIfNeededRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceBidCreateOrderBookIfNeededRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  order_book_ = const_cast< ::bnet::protocol::exchange::OrderBook*>(&::bnet::protocol::exchange::OrderBook::default_instance());
  bid_creation_ = const_cast< ::bnet::protocol::exchange::BidCreation*>(&::bnet::protocol::exchange::BidCreation::default_instance());
}

PlaceBidCreateOrderBookIfNeededRequest::PlaceBidCreateOrderBookIfNeededRequest(const PlaceBidCreateOrderBookIfNeededRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceBidCreateOrderBookIfNeededRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  order_book_ = NULL;
  bid_creation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceBidCreateOrderBookIfNeededRequest::~PlaceBidCreateOrderBookIfNeededRequest() {
  SharedDtor();
}

void PlaceBidCreateOrderBookIfNeededRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete order_book_;
    delete bid_creation_;
  }
}

void PlaceBidCreateOrderBookIfNeededRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceBidCreateOrderBookIfNeededRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceBidCreateOrderBookIfNeededRequest_descriptor_;
}

const PlaceBidCreateOrderBookIfNeededRequest& PlaceBidCreateOrderBookIfNeededRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

PlaceBidCreateOrderBookIfNeededRequest* PlaceBidCreateOrderBookIfNeededRequest::default_instance_ = NULL;

PlaceBidCreateOrderBookIfNeededRequest* PlaceBidCreateOrderBookIfNeededRequest::New() const {
  return new PlaceBidCreateOrderBookIfNeededRequest;
}

void PlaceBidCreateOrderBookIfNeededRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_order_book()) {
      if (order_book_ != NULL) order_book_->::bnet::protocol::exchange::OrderBook::Clear();
    }
    if (has_bid_creation()) {
      if (bid_creation_ != NULL) bid_creation_->::bnet::protocol::exchange::BidCreation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceBidCreateOrderBookIfNeededRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order_book;
        break;
      }
      
      // required .bnet.protocol.exchange.OrderBook order_book = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_book:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_book()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bid_creation;
        break;
      }
      
      // required .bnet.protocol.exchange.BidCreation bid_creation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bid_creation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bid_creation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceBidCreateOrderBookIfNeededRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.OrderBook order_book = 2;
  if (has_order_book()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->order_book(), output);
  }
  
  // required .bnet.protocol.exchange.BidCreation bid_creation = 3;
  if (has_bid_creation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bid_creation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceBidCreateOrderBookIfNeededRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.OrderBook order_book = 2;
  if (has_order_book()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->order_book(), target);
  }
  
  // required .bnet.protocol.exchange.BidCreation bid_creation = 3;
  if (has_bid_creation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bid_creation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceBidCreateOrderBookIfNeededRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.OrderBook order_book = 2;
    if (has_order_book()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_book());
    }
    
    // required .bnet.protocol.exchange.BidCreation bid_creation = 3;
    if (has_bid_creation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bid_creation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceBidCreateOrderBookIfNeededRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceBidCreateOrderBookIfNeededRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceBidCreateOrderBookIfNeededRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceBidCreateOrderBookIfNeededRequest::MergeFrom(const PlaceBidCreateOrderBookIfNeededRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_order_book()) {
      mutable_order_book()->::bnet::protocol::exchange::OrderBook::MergeFrom(from.order_book());
    }
    if (from.has_bid_creation()) {
      mutable_bid_creation()->::bnet::protocol::exchange::BidCreation::MergeFrom(from.bid_creation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceBidCreateOrderBookIfNeededRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceBidCreateOrderBookIfNeededRequest::CopyFrom(const PlaceBidCreateOrderBookIfNeededRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceBidCreateOrderBookIfNeededRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_order_book()) {
    if (!this->order_book().IsInitialized()) return false;
  }
  if (has_bid_creation()) {
    if (!this->bid_creation().IsInitialized()) return false;
  }
  return true;
}

void PlaceBidCreateOrderBookIfNeededRequest::Swap(PlaceBidCreateOrderBookIfNeededRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(order_book_, other->order_book_);
    std::swap(bid_creation_, other->bid_creation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceBidCreateOrderBookIfNeededRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceBidCreateOrderBookIfNeededRequest_descriptor_;
  metadata.reflection = PlaceBidCreateOrderBookIfNeededRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceBidCreateOrderBookIfNeededResponse::kOrderBookIdFieldNumber;
const int PlaceBidCreateOrderBookIfNeededResponse::kBidIdFieldNumber;
#endif  // !_MSC_VER

PlaceBidCreateOrderBookIfNeededResponse::PlaceBidCreateOrderBookIfNeededResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceBidCreateOrderBookIfNeededResponse::InitAsDefaultInstance() {
}

PlaceBidCreateOrderBookIfNeededResponse::PlaceBidCreateOrderBookIfNeededResponse(const PlaceBidCreateOrderBookIfNeededResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceBidCreateOrderBookIfNeededResponse::SharedCtor() {
  _cached_size_ = 0;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  bid_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceBidCreateOrderBookIfNeededResponse::~PlaceBidCreateOrderBookIfNeededResponse() {
  SharedDtor();
}

void PlaceBidCreateOrderBookIfNeededResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaceBidCreateOrderBookIfNeededResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceBidCreateOrderBookIfNeededResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceBidCreateOrderBookIfNeededResponse_descriptor_;
}

const PlaceBidCreateOrderBookIfNeededResponse& PlaceBidCreateOrderBookIfNeededResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

PlaceBidCreateOrderBookIfNeededResponse* PlaceBidCreateOrderBookIfNeededResponse::default_instance_ = NULL;

PlaceBidCreateOrderBookIfNeededResponse* PlaceBidCreateOrderBookIfNeededResponse::New() const {
  return new PlaceBidCreateOrderBookIfNeededResponse;
}

void PlaceBidCreateOrderBookIfNeededResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_book_id_ = GOOGLE_ULONGLONG(0);
    bid_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceBidCreateOrderBookIfNeededResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bid_id;
        break;
      }
      
      // optional uint64 bid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bid_id_)));
          set_has_bid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceBidCreateOrderBookIfNeededResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_book_id(), output);
  }
  
  // optional uint64 bid_id = 2;
  if (has_bid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceBidCreateOrderBookIfNeededResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 order_book_id = 1;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_book_id(), target);
  }
  
  // optional uint64 bid_id = 2;
  if (has_bid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceBidCreateOrderBookIfNeededResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 order_book_id = 1;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
    // optional uint64 bid_id = 2;
    if (has_bid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceBidCreateOrderBookIfNeededResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceBidCreateOrderBookIfNeededResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceBidCreateOrderBookIfNeededResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceBidCreateOrderBookIfNeededResponse::MergeFrom(const PlaceBidCreateOrderBookIfNeededResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
    if (from.has_bid_id()) {
      set_bid_id(from.bid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceBidCreateOrderBookIfNeededResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceBidCreateOrderBookIfNeededResponse::CopyFrom(const PlaceBidCreateOrderBookIfNeededResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceBidCreateOrderBookIfNeededResponse::IsInitialized() const {
  
  return true;
}

void PlaceBidCreateOrderBookIfNeededResponse::Swap(PlaceBidCreateOrderBookIfNeededResponse* other) {
  if (other != this) {
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(bid_id_, other->bid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceBidCreateOrderBookIfNeededResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceBidCreateOrderBookIfNeededResponse_descriptor_;
  metadata.reflection = PlaceBidCreateOrderBookIfNeededResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryOffersByOrderBookRequest::kPartitionIdFieldNumber;
const int QueryOffersByOrderBookRequest::kFilterFieldNumber;
const int QueryOffersByOrderBookRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

QueryOffersByOrderBookRequest::QueryOffersByOrderBookRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryOffersByOrderBookRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  filter_ = const_cast< ::bnet::protocol::exchange::QueryFilterByOrderId*>(&::bnet::protocol::exchange::QueryFilterByOrderId::default_instance());
}

QueryOffersByOrderBookRequest::QueryOffersByOrderBookRequest(const QueryOffersByOrderBookRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryOffersByOrderBookRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  filter_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryOffersByOrderBookRequest::~QueryOffersByOrderBookRequest() {
  SharedDtor();
}

void QueryOffersByOrderBookRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete filter_;
  }
}

void QueryOffersByOrderBookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOffersByOrderBookRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOffersByOrderBookRequest_descriptor_;
}

const QueryOffersByOrderBookRequest& QueryOffersByOrderBookRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryOffersByOrderBookRequest* QueryOffersByOrderBookRequest::default_instance_ = NULL;

QueryOffersByOrderBookRequest* QueryOffersByOrderBookRequest::New() const {
  return new QueryOffersByOrderBookRequest;
}

void QueryOffersByOrderBookRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::bnet::protocol::exchange::QueryFilterByOrderId::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryOffersByOrderBookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }
      
      // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryOffersByOrderBookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }
  
  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryOffersByOrderBookRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }
  
  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryOffersByOrderBookRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOffersByOrderBookRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryOffersByOrderBookRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryOffersByOrderBookRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOffersByOrderBookRequest::MergeFrom(const QueryOffersByOrderBookRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_filter()) {
      mutable_filter()->::bnet::protocol::exchange::QueryFilterByOrderId::MergeFrom(from.filter());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryOffersByOrderBookRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOffersByOrderBookRequest::CopyFrom(const QueryOffersByOrderBookRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOffersByOrderBookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void QueryOffersByOrderBookRequest::Swap(QueryOffersByOrderBookRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(filter_, other->filter_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryOffersByOrderBookRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOffersByOrderBookRequest_descriptor_;
  metadata.reflection = QueryOffersByOrderBookRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryOffersByOrderBookResponse::kOffersFieldNumber;
const int QueryOffersByOrderBookResponse::kTotalCountFieldNumber;
#endif  // !_MSC_VER

QueryOffersByOrderBookResponse::QueryOffersByOrderBookResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryOffersByOrderBookResponse::InitAsDefaultInstance() {
}

QueryOffersByOrderBookResponse::QueryOffersByOrderBookResponse(const QueryOffersByOrderBookResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryOffersByOrderBookResponse::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryOffersByOrderBookResponse::~QueryOffersByOrderBookResponse() {
  SharedDtor();
}

void QueryOffersByOrderBookResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryOffersByOrderBookResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOffersByOrderBookResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOffersByOrderBookResponse_descriptor_;
}

const QueryOffersByOrderBookResponse& QueryOffersByOrderBookResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryOffersByOrderBookResponse* QueryOffersByOrderBookResponse::default_instance_ = NULL;

QueryOffersByOrderBookResponse* QueryOffersByOrderBookResponse::New() const {
  return new QueryOffersByOrderBookResponse;
}

void QueryOffersByOrderBookResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_count_ = 0u;
  }
  offers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryOffersByOrderBookResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange.OfferExtended offers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_offers;
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }
      
      // required uint32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryOffersByOrderBookResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange.OfferExtended offers = 1;
  for (int i = 0; i < this->offers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offers(i), output);
  }
  
  // required uint32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryOffersByOrderBookResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange.OfferExtended offers = 1;
  for (int i = 0; i < this->offers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offers(i), target);
  }
  
  // required uint32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryOffersByOrderBookResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }
    
  }
  // repeated .bnet.protocol.exchange.OfferExtended offers = 1;
  total_size += 1 * this->offers_size();
  for (int i = 0; i < this->offers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOffersByOrderBookResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryOffersByOrderBookResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryOffersByOrderBookResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOffersByOrderBookResponse::MergeFrom(const QueryOffersByOrderBookResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  offers_.MergeFrom(from.offers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryOffersByOrderBookResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOffersByOrderBookResponse::CopyFrom(const QueryOffersByOrderBookResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOffersByOrderBookResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < offers_size(); i++) {
    if (!this->offers(i).IsInitialized()) return false;
  }
  return true;
}

void QueryOffersByOrderBookResponse::Swap(QueryOffersByOrderBookResponse* other) {
  if (other != this) {
    offers_.Swap(&other->offers_);
    std::swap(total_count_, other->total_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryOffersByOrderBookResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOffersByOrderBookResponse_descriptor_;
  metadata.reflection = QueryOffersByOrderBookResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBidsByOrderBookRequest::kPartitionIdFieldNumber;
const int QueryBidsByOrderBookRequest::kFilterFieldNumber;
const int QueryBidsByOrderBookRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

QueryBidsByOrderBookRequest::QueryBidsByOrderBookRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryBidsByOrderBookRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  filter_ = const_cast< ::bnet::protocol::exchange::QueryFilterByOrderId*>(&::bnet::protocol::exchange::QueryFilterByOrderId::default_instance());
}

QueryBidsByOrderBookRequest::QueryBidsByOrderBookRequest(const QueryBidsByOrderBookRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryBidsByOrderBookRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  filter_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBidsByOrderBookRequest::~QueryBidsByOrderBookRequest() {
  SharedDtor();
}

void QueryBidsByOrderBookRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete filter_;
  }
}

void QueryBidsByOrderBookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBidsByOrderBookRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBidsByOrderBookRequest_descriptor_;
}

const QueryBidsByOrderBookRequest& QueryBidsByOrderBookRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryBidsByOrderBookRequest* QueryBidsByOrderBookRequest::default_instance_ = NULL;

QueryBidsByOrderBookRequest* QueryBidsByOrderBookRequest::New() const {
  return new QueryBidsByOrderBookRequest;
}

void QueryBidsByOrderBookRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::bnet::protocol::exchange::QueryFilterByOrderId::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBidsByOrderBookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }
      
      // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryBidsByOrderBookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }
  
  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryBidsByOrderBookRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }
  
  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryBidsByOrderBookRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBidsByOrderBookRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBidsByOrderBookRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBidsByOrderBookRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBidsByOrderBookRequest::MergeFrom(const QueryBidsByOrderBookRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_filter()) {
      mutable_filter()->::bnet::protocol::exchange::QueryFilterByOrderId::MergeFrom(from.filter());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBidsByOrderBookRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBidsByOrderBookRequest::CopyFrom(const QueryBidsByOrderBookRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBidsByOrderBookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void QueryBidsByOrderBookRequest::Swap(QueryBidsByOrderBookRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(filter_, other->filter_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBidsByOrderBookRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBidsByOrderBookRequest_descriptor_;
  metadata.reflection = QueryBidsByOrderBookRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBidsByOrderBookResponse::kBidsFieldNumber;
const int QueryBidsByOrderBookResponse::kTotalCountFieldNumber;
#endif  // !_MSC_VER

QueryBidsByOrderBookResponse::QueryBidsByOrderBookResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryBidsByOrderBookResponse::InitAsDefaultInstance() {
}

QueryBidsByOrderBookResponse::QueryBidsByOrderBookResponse(const QueryBidsByOrderBookResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryBidsByOrderBookResponse::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBidsByOrderBookResponse::~QueryBidsByOrderBookResponse() {
  SharedDtor();
}

void QueryBidsByOrderBookResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryBidsByOrderBookResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBidsByOrderBookResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBidsByOrderBookResponse_descriptor_;
}

const QueryBidsByOrderBookResponse& QueryBidsByOrderBookResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryBidsByOrderBookResponse* QueryBidsByOrderBookResponse::default_instance_ = NULL;

QueryBidsByOrderBookResponse* QueryBidsByOrderBookResponse::New() const {
  return new QueryBidsByOrderBookResponse;
}

void QueryBidsByOrderBookResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_count_ = 0u;
  }
  bids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBidsByOrderBookResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange.BidExtended bids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bids;
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }
      
      // required uint32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryBidsByOrderBookResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange.BidExtended bids = 1;
  for (int i = 0; i < this->bids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bids(i), output);
  }
  
  // required uint32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryBidsByOrderBookResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange.BidExtended bids = 1;
  for (int i = 0; i < this->bids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bids(i), target);
  }
  
  // required uint32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryBidsByOrderBookResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }
    
  }
  // repeated .bnet.protocol.exchange.BidExtended bids = 1;
  total_size += 1 * this->bids_size();
  for (int i = 0; i < this->bids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBidsByOrderBookResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBidsByOrderBookResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBidsByOrderBookResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBidsByOrderBookResponse::MergeFrom(const QueryBidsByOrderBookResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bids_.MergeFrom(from.bids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBidsByOrderBookResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBidsByOrderBookResponse::CopyFrom(const QueryBidsByOrderBookResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBidsByOrderBookResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < bids_size(); i++) {
    if (!this->bids(i).IsInitialized()) return false;
  }
  return true;
}

void QueryBidsByOrderBookResponse::Swap(QueryBidsByOrderBookResponse* other) {
  if (other != this) {
    bids_.Swap(&other->bids_);
    std::swap(total_count_, other->total_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBidsByOrderBookResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBidsByOrderBookResponse_descriptor_;
  metadata.reflection = QueryBidsByOrderBookResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryOffersByAccountForItemRequest::kAccountForItemFieldNumber;
const int QueryOffersByAccountForItemRequest::kFilterFieldNumber;
const int QueryOffersByAccountForItemRequest::kBnetAccountFieldNumber;
#endif  // !_MSC_VER

QueryOffersByAccountForItemRequest::QueryOffersByAccountForItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryOffersByAccountForItemRequest::InitAsDefaultInstance() {
  account_for_item_ = const_cast< ::bnet::protocol::exchange::BlobFrom*>(&::bnet::protocol::exchange::BlobFrom::default_instance());
  filter_ = const_cast< ::bnet::protocol::exchange::QueryFilterByCreatedTime*>(&::bnet::protocol::exchange::QueryFilterByCreatedTime::default_instance());
  bnet_account_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

QueryOffersByAccountForItemRequest::QueryOffersByAccountForItemRequest(const QueryOffersByAccountForItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryOffersByAccountForItemRequest::SharedCtor() {
  _cached_size_ = 0;
  account_for_item_ = NULL;
  filter_ = NULL;
  bnet_account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryOffersByAccountForItemRequest::~QueryOffersByAccountForItemRequest() {
  SharedDtor();
}

void QueryOffersByAccountForItemRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_for_item_;
    delete filter_;
    delete bnet_account_;
  }
}

void QueryOffersByAccountForItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOffersByAccountForItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOffersByAccountForItemRequest_descriptor_;
}

const QueryOffersByAccountForItemRequest& QueryOffersByAccountForItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryOffersByAccountForItemRequest* QueryOffersByAccountForItemRequest::default_instance_ = NULL;

QueryOffersByAccountForItemRequest* QueryOffersByAccountForItemRequest::New() const {
  return new QueryOffersByAccountForItemRequest;
}

void QueryOffersByAccountForItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_for_item()) {
      if (account_for_item_ != NULL) account_for_item_->::bnet::protocol::exchange::BlobFrom::Clear();
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::bnet::protocol::exchange::QueryFilterByCreatedTime::Clear();
    }
    if (has_bnet_account()) {
      if (bnet_account_ != NULL) bnet_account_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryOffersByAccountForItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_for_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }
      
      // required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bnet_account;
        break;
      }
      
      // optional .bnet.protocol.EntityId bnet_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryOffersByAccountForItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
  if (has_account_for_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account_for_item(), output);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 3;
  if (has_bnet_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bnet_account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryOffersByAccountForItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
  if (has_account_for_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_for_item(), target);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 3;
  if (has_bnet_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bnet_account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryOffersByAccountForItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
    if (has_account_for_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_for_item());
    }
    
    // required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
    // optional .bnet.protocol.EntityId bnet_account = 3;
    if (has_bnet_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOffersByAccountForItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryOffersByAccountForItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryOffersByAccountForItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOffersByAccountForItemRequest::MergeFrom(const QueryOffersByAccountForItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_for_item()) {
      mutable_account_for_item()->::bnet::protocol::exchange::BlobFrom::MergeFrom(from.account_for_item());
    }
    if (from.has_filter()) {
      mutable_filter()->::bnet::protocol::exchange::QueryFilterByCreatedTime::MergeFrom(from.filter());
    }
    if (from.has_bnet_account()) {
      mutable_bnet_account()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryOffersByAccountForItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOffersByAccountForItemRequest::CopyFrom(const QueryOffersByAccountForItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOffersByAccountForItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_account_for_item()) {
    if (!this->account_for_item().IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  if (has_bnet_account()) {
    if (!this->bnet_account().IsInitialized()) return false;
  }
  return true;
}

void QueryOffersByAccountForItemRequest::Swap(QueryOffersByAccountForItemRequest* other) {
  if (other != this) {
    std::swap(account_for_item_, other->account_for_item_);
    std::swap(filter_, other->filter_);
    std::swap(bnet_account_, other->bnet_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryOffersByAccountForItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOffersByAccountForItemRequest_descriptor_;
  metadata.reflection = QueryOffersByAccountForItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryOffersByAccountForItemResponse::kOffersFieldNumber;
const int QueryOffersByAccountForItemResponse::kTotalCountFieldNumber;
#endif  // !_MSC_VER

QueryOffersByAccountForItemResponse::QueryOffersByAccountForItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryOffersByAccountForItemResponse::InitAsDefaultInstance() {
}

QueryOffersByAccountForItemResponse::QueryOffersByAccountForItemResponse(const QueryOffersByAccountForItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryOffersByAccountForItemResponse::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryOffersByAccountForItemResponse::~QueryOffersByAccountForItemResponse() {
  SharedDtor();
}

void QueryOffersByAccountForItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryOffersByAccountForItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOffersByAccountForItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOffersByAccountForItemResponse_descriptor_;
}

const QueryOffersByAccountForItemResponse& QueryOffersByAccountForItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryOffersByAccountForItemResponse* QueryOffersByAccountForItemResponse::default_instance_ = NULL;

QueryOffersByAccountForItemResponse* QueryOffersByAccountForItemResponse::New() const {
  return new QueryOffersByAccountForItemResponse;
}

void QueryOffersByAccountForItemResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_count_ = 0u;
  }
  offers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryOffersByAccountForItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange.OfferExtended offers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_offers;
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }
      
      // required uint32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryOffersByAccountForItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange.OfferExtended offers = 1;
  for (int i = 0; i < this->offers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offers(i), output);
  }
  
  // required uint32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryOffersByAccountForItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange.OfferExtended offers = 1;
  for (int i = 0; i < this->offers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offers(i), target);
  }
  
  // required uint32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryOffersByAccountForItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }
    
  }
  // repeated .bnet.protocol.exchange.OfferExtended offers = 1;
  total_size += 1 * this->offers_size();
  for (int i = 0; i < this->offers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOffersByAccountForItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryOffersByAccountForItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryOffersByAccountForItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOffersByAccountForItemResponse::MergeFrom(const QueryOffersByAccountForItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  offers_.MergeFrom(from.offers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryOffersByAccountForItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOffersByAccountForItemResponse::CopyFrom(const QueryOffersByAccountForItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOffersByAccountForItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < offers_size(); i++) {
    if (!this->offers(i).IsInitialized()) return false;
  }
  return true;
}

void QueryOffersByAccountForItemResponse::Swap(QueryOffersByAccountForItemResponse* other) {
  if (other != this) {
    offers_.Swap(&other->offers_);
    std::swap(total_count_, other->total_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryOffersByAccountForItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOffersByAccountForItemResponse_descriptor_;
  metadata.reflection = QueryOffersByAccountForItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBidsByAccountForItemRequest::kAccountForItemFieldNumber;
const int QueryBidsByAccountForItemRequest::kFilterFieldNumber;
const int QueryBidsByAccountForItemRequest::kBnetAccountFieldNumber;
#endif  // !_MSC_VER

QueryBidsByAccountForItemRequest::QueryBidsByAccountForItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryBidsByAccountForItemRequest::InitAsDefaultInstance() {
  account_for_item_ = const_cast< ::bnet::protocol::exchange::BlobFrom*>(&::bnet::protocol::exchange::BlobFrom::default_instance());
  filter_ = const_cast< ::bnet::protocol::exchange::QueryFilterByCreatedTime*>(&::bnet::protocol::exchange::QueryFilterByCreatedTime::default_instance());
  bnet_account_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

QueryBidsByAccountForItemRequest::QueryBidsByAccountForItemRequest(const QueryBidsByAccountForItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryBidsByAccountForItemRequest::SharedCtor() {
  _cached_size_ = 0;
  account_for_item_ = NULL;
  filter_ = NULL;
  bnet_account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBidsByAccountForItemRequest::~QueryBidsByAccountForItemRequest() {
  SharedDtor();
}

void QueryBidsByAccountForItemRequest::SharedDtor() {
  if (this != default_instance_) {
    delete account_for_item_;
    delete filter_;
    delete bnet_account_;
  }
}

void QueryBidsByAccountForItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBidsByAccountForItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBidsByAccountForItemRequest_descriptor_;
}

const QueryBidsByAccountForItemRequest& QueryBidsByAccountForItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryBidsByAccountForItemRequest* QueryBidsByAccountForItemRequest::default_instance_ = NULL;

QueryBidsByAccountForItemRequest* QueryBidsByAccountForItemRequest::New() const {
  return new QueryBidsByAccountForItemRequest;
}

void QueryBidsByAccountForItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_for_item()) {
      if (account_for_item_ != NULL) account_for_item_->::bnet::protocol::exchange::BlobFrom::Clear();
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::bnet::protocol::exchange::QueryFilterByCreatedTime::Clear();
    }
    if (has_bnet_account()) {
      if (bnet_account_ != NULL) bnet_account_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBidsByAccountForItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_for_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }
      
      // required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bnet_account;
        break;
      }
      
      // optional .bnet.protocol.EntityId bnet_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryBidsByAccountForItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
  if (has_account_for_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account_for_item(), output);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 3;
  if (has_bnet_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bnet_account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryBidsByAccountForItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
  if (has_account_for_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_for_item(), target);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 3;
  if (has_bnet_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bnet_account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryBidsByAccountForItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.BlobFrom account_for_item = 1;
    if (has_account_for_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_for_item());
    }
    
    // required .bnet.protocol.exchange.QueryFilterByCreatedTime filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
    // optional .bnet.protocol.EntityId bnet_account = 3;
    if (has_bnet_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBidsByAccountForItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBidsByAccountForItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBidsByAccountForItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBidsByAccountForItemRequest::MergeFrom(const QueryBidsByAccountForItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_for_item()) {
      mutable_account_for_item()->::bnet::protocol::exchange::BlobFrom::MergeFrom(from.account_for_item());
    }
    if (from.has_filter()) {
      mutable_filter()->::bnet::protocol::exchange::QueryFilterByCreatedTime::MergeFrom(from.filter());
    }
    if (from.has_bnet_account()) {
      mutable_bnet_account()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBidsByAccountForItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBidsByAccountForItemRequest::CopyFrom(const QueryBidsByAccountForItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBidsByAccountForItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_account_for_item()) {
    if (!this->account_for_item().IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  if (has_bnet_account()) {
    if (!this->bnet_account().IsInitialized()) return false;
  }
  return true;
}

void QueryBidsByAccountForItemRequest::Swap(QueryBidsByAccountForItemRequest* other) {
  if (other != this) {
    std::swap(account_for_item_, other->account_for_item_);
    std::swap(filter_, other->filter_);
    std::swap(bnet_account_, other->bnet_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBidsByAccountForItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBidsByAccountForItemRequest_descriptor_;
  metadata.reflection = QueryBidsByAccountForItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryBidsByAccountForItemResponse::kBidsFieldNumber;
const int QueryBidsByAccountForItemResponse::kTotalCountFieldNumber;
#endif  // !_MSC_VER

QueryBidsByAccountForItemResponse::QueryBidsByAccountForItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryBidsByAccountForItemResponse::InitAsDefaultInstance() {
}

QueryBidsByAccountForItemResponse::QueryBidsByAccountForItemResponse(const QueryBidsByAccountForItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryBidsByAccountForItemResponse::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryBidsByAccountForItemResponse::~QueryBidsByAccountForItemResponse() {
  SharedDtor();
}

void QueryBidsByAccountForItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryBidsByAccountForItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBidsByAccountForItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBidsByAccountForItemResponse_descriptor_;
}

const QueryBidsByAccountForItemResponse& QueryBidsByAccountForItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryBidsByAccountForItemResponse* QueryBidsByAccountForItemResponse::default_instance_ = NULL;

QueryBidsByAccountForItemResponse* QueryBidsByAccountForItemResponse::New() const {
  return new QueryBidsByAccountForItemResponse;
}

void QueryBidsByAccountForItemResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_count_ = 0u;
  }
  bids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryBidsByAccountForItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange.BidExtended bids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bids;
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }
      
      // required uint32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryBidsByAccountForItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange.BidExtended bids = 1;
  for (int i = 0; i < this->bids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bids(i), output);
  }
  
  // required uint32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryBidsByAccountForItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange.BidExtended bids = 1;
  for (int i = 0; i < this->bids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bids(i), target);
  }
  
  // required uint32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryBidsByAccountForItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }
    
  }
  // repeated .bnet.protocol.exchange.BidExtended bids = 1;
  total_size += 1 * this->bids_size();
  for (int i = 0; i < this->bids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBidsByAccountForItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryBidsByAccountForItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryBidsByAccountForItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBidsByAccountForItemResponse::MergeFrom(const QueryBidsByAccountForItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bids_.MergeFrom(from.bids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryBidsByAccountForItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBidsByAccountForItemResponse::CopyFrom(const QueryBidsByAccountForItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBidsByAccountForItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < bids_size(); i++) {
    if (!this->bids(i).IsInitialized()) return false;
  }
  return true;
}

void QueryBidsByAccountForItemResponse::Swap(QueryBidsByAccountForItemResponse* other) {
  if (other != this) {
    bids_.Swap(&other->bids_);
    std::swap(total_count_, other->total_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryBidsByAccountForItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBidsByAccountForItemResponse_descriptor_;
  metadata.reflection = QueryBidsByAccountForItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryOrderBooksSummaryRequest::kHandlesFieldNumber;
#endif  // !_MSC_VER

QueryOrderBooksSummaryRequest::QueryOrderBooksSummaryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryOrderBooksSummaryRequest::InitAsDefaultInstance() {
}

QueryOrderBooksSummaryRequest::QueryOrderBooksSummaryRequest(const QueryOrderBooksSummaryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryOrderBooksSummaryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryOrderBooksSummaryRequest::~QueryOrderBooksSummaryRequest() {
  SharedDtor();
}

void QueryOrderBooksSummaryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryOrderBooksSummaryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOrderBooksSummaryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOrderBooksSummaryRequest_descriptor_;
}

const QueryOrderBooksSummaryRequest& QueryOrderBooksSummaryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryOrderBooksSummaryRequest* QueryOrderBooksSummaryRequest::default_instance_ = NULL;

QueryOrderBooksSummaryRequest* QueryOrderBooksSummaryRequest::New() const {
  return new QueryOrderBooksSummaryRequest;
}

void QueryOrderBooksSummaryRequest::Clear() {
  handles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryOrderBooksSummaryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange.OrderBookHandle handles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_handles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryOrderBooksSummaryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange.OrderBookHandle handles = 1;
  for (int i = 0; i < this->handles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->handles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryOrderBooksSummaryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange.OrderBookHandle handles = 1;
  for (int i = 0; i < this->handles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->handles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryOrderBooksSummaryRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.exchange.OrderBookHandle handles = 1;
  total_size += 1 * this->handles_size();
  for (int i = 0; i < this->handles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOrderBooksSummaryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryOrderBooksSummaryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryOrderBooksSummaryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOrderBooksSummaryRequest::MergeFrom(const QueryOrderBooksSummaryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  handles_.MergeFrom(from.handles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryOrderBooksSummaryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOrderBooksSummaryRequest::CopyFrom(const QueryOrderBooksSummaryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOrderBooksSummaryRequest::IsInitialized() const {
  
  for (int i = 0; i < handles_size(); i++) {
    if (!this->handles(i).IsInitialized()) return false;
  }
  return true;
}

void QueryOrderBooksSummaryRequest::Swap(QueryOrderBooksSummaryRequest* other) {
  if (other != this) {
    handles_.Swap(&other->handles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryOrderBooksSummaryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOrderBooksSummaryRequest_descriptor_;
  metadata.reflection = QueryOrderBooksSummaryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryOrderBooksSummaryResponse::kOrderBooksFieldNumber;
#endif  // !_MSC_VER

QueryOrderBooksSummaryResponse::QueryOrderBooksSummaryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryOrderBooksSummaryResponse::InitAsDefaultInstance() {
}

QueryOrderBooksSummaryResponse::QueryOrderBooksSummaryResponse(const QueryOrderBooksSummaryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryOrderBooksSummaryResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryOrderBooksSummaryResponse::~QueryOrderBooksSummaryResponse() {
  SharedDtor();
}

void QueryOrderBooksSummaryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryOrderBooksSummaryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOrderBooksSummaryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOrderBooksSummaryResponse_descriptor_;
}

const QueryOrderBooksSummaryResponse& QueryOrderBooksSummaryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QueryOrderBooksSummaryResponse* QueryOrderBooksSummaryResponse::default_instance_ = NULL;

QueryOrderBooksSummaryResponse* QueryOrderBooksSummaryResponse::New() const {
  return new QueryOrderBooksSummaryResponse;
}

void QueryOrderBooksSummaryResponse::Clear() {
  order_books_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryOrderBooksSummaryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange.OrderBookSummary order_books = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_books:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order_books()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_order_books;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryOrderBooksSummaryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange.OrderBookSummary order_books = 1;
  for (int i = 0; i < this->order_books_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order_books(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryOrderBooksSummaryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange.OrderBookSummary order_books = 1;
  for (int i = 0; i < this->order_books_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order_books(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryOrderBooksSummaryResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.exchange.OrderBookSummary order_books = 1;
  total_size += 1 * this->order_books_size();
  for (int i = 0; i < this->order_books_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order_books(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOrderBooksSummaryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryOrderBooksSummaryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryOrderBooksSummaryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOrderBooksSummaryResponse::MergeFrom(const QueryOrderBooksSummaryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_books_.MergeFrom(from.order_books_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryOrderBooksSummaryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOrderBooksSummaryResponse::CopyFrom(const QueryOrderBooksSummaryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOrderBooksSummaryResponse::IsInitialized() const {
  
  for (int i = 0; i < order_books_size(); i++) {
    if (!this->order_books(i).IsInitialized()) return false;
  }
  return true;
}

void QueryOrderBooksSummaryResponse::Swap(QueryOrderBooksSummaryResponse* other) {
  if (other != this) {
    order_books_.Swap(&other->order_books_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryOrderBooksSummaryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOrderBooksSummaryResponse_descriptor_;
  metadata.reflection = QueryOrderBooksSummaryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySettlementsByOrderBookRequest::kPartitionIdFieldNumber;
const int QuerySettlementsByOrderBookRequest::kFilterFieldNumber;
#endif  // !_MSC_VER

QuerySettlementsByOrderBookRequest::QuerySettlementsByOrderBookRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuerySettlementsByOrderBookRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  filter_ = const_cast< ::bnet::protocol::exchange::QueryFilterByOrderId*>(&::bnet::protocol::exchange::QueryFilterByOrderId::default_instance());
}

QuerySettlementsByOrderBookRequest::QuerySettlementsByOrderBookRequest(const QuerySettlementsByOrderBookRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuerySettlementsByOrderBookRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySettlementsByOrderBookRequest::~QuerySettlementsByOrderBookRequest() {
  SharedDtor();
}

void QuerySettlementsByOrderBookRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete filter_;
  }
}

void QuerySettlementsByOrderBookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySettlementsByOrderBookRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuerySettlementsByOrderBookRequest_descriptor_;
}

const QuerySettlementsByOrderBookRequest& QuerySettlementsByOrderBookRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QuerySettlementsByOrderBookRequest* QuerySettlementsByOrderBookRequest::default_instance_ = NULL;

QuerySettlementsByOrderBookRequest* QuerySettlementsByOrderBookRequest::New() const {
  return new QuerySettlementsByOrderBookRequest;
}

void QuerySettlementsByOrderBookRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::bnet::protocol::exchange::QueryFilterByOrderId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuerySettlementsByOrderBookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }
      
      // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuerySettlementsByOrderBookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuerySettlementsByOrderBookRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuerySettlementsByOrderBookRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.QueryFilterByOrderId filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySettlementsByOrderBookRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuerySettlementsByOrderBookRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuerySettlementsByOrderBookRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuerySettlementsByOrderBookRequest::MergeFrom(const QuerySettlementsByOrderBookRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_filter()) {
      mutable_filter()->::bnet::protocol::exchange::QueryFilterByOrderId::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuerySettlementsByOrderBookRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySettlementsByOrderBookRequest::CopyFrom(const QuerySettlementsByOrderBookRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySettlementsByOrderBookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void QuerySettlementsByOrderBookRequest::Swap(QuerySettlementsByOrderBookRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuerySettlementsByOrderBookRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuerySettlementsByOrderBookRequest_descriptor_;
  metadata.reflection = QuerySettlementsByOrderBookRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySettlementsByOrderBookResponse::kSettlementsFieldNumber;
#endif  // !_MSC_VER

QuerySettlementsByOrderBookResponse::QuerySettlementsByOrderBookResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuerySettlementsByOrderBookResponse::InitAsDefaultInstance() {
}

QuerySettlementsByOrderBookResponse::QuerySettlementsByOrderBookResponse(const QuerySettlementsByOrderBookResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuerySettlementsByOrderBookResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySettlementsByOrderBookResponse::~QuerySettlementsByOrderBookResponse() {
  SharedDtor();
}

void QuerySettlementsByOrderBookResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuerySettlementsByOrderBookResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySettlementsByOrderBookResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuerySettlementsByOrderBookResponse_descriptor_;
}

const QuerySettlementsByOrderBookResponse& QuerySettlementsByOrderBookResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

QuerySettlementsByOrderBookResponse* QuerySettlementsByOrderBookResponse::default_instance_ = NULL;

QuerySettlementsByOrderBookResponse* QuerySettlementsByOrderBookResponse::New() const {
  return new QuerySettlementsByOrderBookResponse;
}

void QuerySettlementsByOrderBookResponse::Clear() {
  settlements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuerySettlementsByOrderBookResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange.Settlement settlements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settlements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settlements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_settlements;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuerySettlementsByOrderBookResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange.Settlement settlements = 1;
  for (int i = 0; i < this->settlements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->settlements(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuerySettlementsByOrderBookResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange.Settlement settlements = 1;
  for (int i = 0; i < this->settlements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->settlements(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuerySettlementsByOrderBookResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.exchange.Settlement settlements = 1;
  total_size += 1 * this->settlements_size();
  for (int i = 0; i < this->settlements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settlements(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySettlementsByOrderBookResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuerySettlementsByOrderBookResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuerySettlementsByOrderBookResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuerySettlementsByOrderBookResponse::MergeFrom(const QuerySettlementsByOrderBookResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  settlements_.MergeFrom(from.settlements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuerySettlementsByOrderBookResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySettlementsByOrderBookResponse::CopyFrom(const QuerySettlementsByOrderBookResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySettlementsByOrderBookResponse::IsInitialized() const {
  
  for (int i = 0; i < settlements_size(); i++) {
    if (!this->settlements(i).IsInitialized()) return false;
  }
  return true;
}

void QuerySettlementsByOrderBookResponse::Swap(QuerySettlementsByOrderBookResponse* other) {
  if (other != this) {
    settlements_.Swap(&other->settlements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuerySettlementsByOrderBookResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuerySettlementsByOrderBookResponse_descriptor_;
  metadata.reflection = QuerySettlementsByOrderBookResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeOrderBookStatusChangeRequest::kObjectIdFieldNumber;
const int SubscribeOrderBookStatusChangeRequest::kMinPartitionIdFieldNumber;
const int SubscribeOrderBookStatusChangeRequest::kMaxPartitionIdFieldNumber;
const int SubscribeOrderBookStatusChangeRequest::kProgramFieldNumber;
const int SubscribeOrderBookStatusChangeRequest::kStatusFieldNumber;
const int SubscribeOrderBookStatusChangeRequest::kCurrencyFieldNumber;
const int SubscribeOrderBookStatusChangeRequest::kSpecialistFieldNumber;
const int SubscribeOrderBookStatusChangeRequest::kBootstrapFieldNumber;
#endif  // !_MSC_VER

SubscribeOrderBookStatusChangeRequest::SubscribeOrderBookStatusChangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeOrderBookStatusChangeRequest::InitAsDefaultInstance() {
  min_partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  max_partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
}

SubscribeOrderBookStatusChangeRequest::SubscribeOrderBookStatusChangeRequest(const SubscribeOrderBookStatusChangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeOrderBookStatusChangeRequest::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  min_partition_id_ = NULL;
  max_partition_id_ = NULL;
  program_ = 0u;
  status_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specialist_ = 0;
  bootstrap_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeOrderBookStatusChangeRequest::~SubscribeOrderBookStatusChangeRequest() {
  SharedDtor();
}

void SubscribeOrderBookStatusChangeRequest::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (this != default_instance_) {
    delete min_partition_id_;
    delete max_partition_id_;
  }
}

void SubscribeOrderBookStatusChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeOrderBookStatusChangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeOrderBookStatusChangeRequest_descriptor_;
}

const SubscribeOrderBookStatusChangeRequest& SubscribeOrderBookStatusChangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

SubscribeOrderBookStatusChangeRequest* SubscribeOrderBookStatusChangeRequest::default_instance_ = NULL;

SubscribeOrderBookStatusChangeRequest* SubscribeOrderBookStatusChangeRequest::New() const {
  return new SubscribeOrderBookStatusChangeRequest;
}

void SubscribeOrderBookStatusChangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    if (has_min_partition_id()) {
      if (min_partition_id_ != NULL) min_partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_max_partition_id()) {
      if (max_partition_id_ != NULL) max_partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    program_ = 0u;
    status_ = 0;
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    specialist_ = 0;
    bootstrap_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeOrderBookStatusChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_min_partition_id;
        break;
      }
      
      // required .bnet.protocol.exchange.PartitionId min_partition_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_partition_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_max_partition_id;
        break;
      }
      
      // required .bnet.protocol.exchange.PartitionId max_partition_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_partition_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_program;
        break;
      }
      
      // required fixed32 program = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_program:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // required int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currency;
        break;
      }
      
      // optional string currency = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_specialist;
        break;
      }
      
      // optional int32 specialist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialist_)));
          set_has_specialist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bootstrap;
        break;
      }
      
      // optional bool bootstrap = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bootstrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bootstrap_)));
          set_has_bootstrap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeOrderBookStatusChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }
  
  // required .bnet.protocol.exchange.PartitionId min_partition_id = 2;
  if (has_min_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->min_partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.PartitionId max_partition_id = 3;
  if (has_max_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->max_partition_id(), output);
  }
  
  // required fixed32 program = 4;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->program(), output);
  }
  
  // required int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional string currency = 6;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->currency(), output);
  }
  
  // optional int32 specialist = 7;
  if (has_specialist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->specialist(), output);
  }
  
  // optional bool bootstrap = 8;
  if (has_bootstrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bootstrap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeOrderBookStatusChangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }
  
  // required .bnet.protocol.exchange.PartitionId min_partition_id = 2;
  if (has_min_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->min_partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.PartitionId max_partition_id = 3;
  if (has_max_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->max_partition_id(), target);
  }
  
  // required fixed32 program = 4;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->program(), target);
  }
  
  // required int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional string currency = 6;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->currency(), target);
  }
  
  // optional int32 specialist = 7;
  if (has_specialist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->specialist(), target);
  }
  
  // optional bool bootstrap = 8;
  if (has_bootstrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bootstrap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeOrderBookStatusChangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
    // required .bnet.protocol.exchange.PartitionId min_partition_id = 2;
    if (has_min_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_partition_id());
    }
    
    // required .bnet.protocol.exchange.PartitionId max_partition_id = 3;
    if (has_max_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_partition_id());
    }
    
    // required fixed32 program = 4;
    if (has_program()) {
      total_size += 1 + 4;
    }
    
    // required int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional string currency = 6;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }
    
    // optional int32 specialist = 7;
    if (has_specialist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialist());
    }
    
    // optional bool bootstrap = 8;
    if (has_bootstrap()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeOrderBookStatusChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeOrderBookStatusChangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeOrderBookStatusChangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeOrderBookStatusChangeRequest::MergeFrom(const SubscribeOrderBookStatusChangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_min_partition_id()) {
      mutable_min_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.min_partition_id());
    }
    if (from.has_max_partition_id()) {
      mutable_max_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.max_partition_id());
    }
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_specialist()) {
      set_specialist(from.specialist());
    }
    if (from.has_bootstrap()) {
      set_bootstrap(from.bootstrap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeOrderBookStatusChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeOrderBookStatusChangeRequest::CopyFrom(const SubscribeOrderBookStatusChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeOrderBookStatusChangeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_min_partition_id()) {
    if (!this->min_partition_id().IsInitialized()) return false;
  }
  if (has_max_partition_id()) {
    if (!this->max_partition_id().IsInitialized()) return false;
  }
  return true;
}

void SubscribeOrderBookStatusChangeRequest::Swap(SubscribeOrderBookStatusChangeRequest* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(min_partition_id_, other->min_partition_id_);
    std::swap(max_partition_id_, other->max_partition_id_);
    std::swap(program_, other->program_);
    std::swap(status_, other->status_);
    std::swap(currency_, other->currency_);
    std::swap(specialist_, other->specialist_);
    std::swap(bootstrap_, other->bootstrap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeOrderBookStatusChangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeOrderBookStatusChangeRequest_descriptor_;
  metadata.reflection = SubscribeOrderBookStatusChangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UnsubscribeOrderBookStatusChangeRequest::UnsubscribeOrderBookStatusChangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnsubscribeOrderBookStatusChangeRequest::InitAsDefaultInstance() {
}

UnsubscribeOrderBookStatusChangeRequest::UnsubscribeOrderBookStatusChangeRequest(const UnsubscribeOrderBookStatusChangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnsubscribeOrderBookStatusChangeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeOrderBookStatusChangeRequest::~UnsubscribeOrderBookStatusChangeRequest() {
  SharedDtor();
}

void UnsubscribeOrderBookStatusChangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnsubscribeOrderBookStatusChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeOrderBookStatusChangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeOrderBookStatusChangeRequest_descriptor_;
}

const UnsubscribeOrderBookStatusChangeRequest& UnsubscribeOrderBookStatusChangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

UnsubscribeOrderBookStatusChangeRequest* UnsubscribeOrderBookStatusChangeRequest::default_instance_ = NULL;

UnsubscribeOrderBookStatusChangeRequest* UnsubscribeOrderBookStatusChangeRequest::New() const {
  return new UnsubscribeOrderBookStatusChangeRequest;
}

void UnsubscribeOrderBookStatusChangeRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsubscribeOrderBookStatusChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UnsubscribeOrderBookStatusChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnsubscribeOrderBookStatusChangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnsubscribeOrderBookStatusChangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsubscribeOrderBookStatusChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsubscribeOrderBookStatusChangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsubscribeOrderBookStatusChangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsubscribeOrderBookStatusChangeRequest::MergeFrom(const UnsubscribeOrderBookStatusChangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsubscribeOrderBookStatusChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeOrderBookStatusChangeRequest::CopyFrom(const UnsubscribeOrderBookStatusChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeOrderBookStatusChangeRequest::IsInitialized() const {
  
  return true;
}

void UnsubscribeOrderBookStatusChangeRequest::Swap(UnsubscribeOrderBookStatusChangeRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsubscribeOrderBookStatusChangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeOrderBookStatusChangeRequest_descriptor_;
  metadata.reflection = UnsubscribeOrderBookStatusChangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeOrderStatusChangeRequest::kAgentIdFieldNumber;
const int SubscribeOrderStatusChangeRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

SubscribeOrderStatusChangeRequest::SubscribeOrderStatusChangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeOrderStatusChangeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

SubscribeOrderStatusChangeRequest::SubscribeOrderStatusChangeRequest(const SubscribeOrderStatusChangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeOrderStatusChangeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeOrderStatusChangeRequest::~SubscribeOrderStatusChangeRequest() {
  SharedDtor();
}

void SubscribeOrderStatusChangeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void SubscribeOrderStatusChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeOrderStatusChangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeOrderStatusChangeRequest_descriptor_;
}

const SubscribeOrderStatusChangeRequest& SubscribeOrderStatusChangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

SubscribeOrderStatusChangeRequest* SubscribeOrderStatusChangeRequest::default_instance_ = NULL;

SubscribeOrderStatusChangeRequest* SubscribeOrderStatusChangeRequest::New() const {
  return new SubscribeOrderStatusChangeRequest;
}

void SubscribeOrderStatusChangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeOrderStatusChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_id;
        break;
      }
      
      // required uint64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeOrderStatusChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required uint64 object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeOrderStatusChangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required uint64 object_id = 2;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeOrderStatusChangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required uint64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeOrderStatusChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeOrderStatusChangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeOrderStatusChangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeOrderStatusChangeRequest::MergeFrom(const SubscribeOrderStatusChangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeOrderStatusChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeOrderStatusChangeRequest::CopyFrom(const SubscribeOrderStatusChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeOrderStatusChangeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void SubscribeOrderStatusChangeRequest::Swap(SubscribeOrderStatusChangeRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeOrderStatusChangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeOrderStatusChangeRequest_descriptor_;
  metadata.reflection = SubscribeOrderStatusChangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsubscribeOrderStatusChangeRequest::kAgentIdFieldNumber;
const int UnsubscribeOrderStatusChangeRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

UnsubscribeOrderStatusChangeRequest::UnsubscribeOrderStatusChangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnsubscribeOrderStatusChangeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

UnsubscribeOrderStatusChangeRequest::UnsubscribeOrderStatusChangeRequest(const UnsubscribeOrderStatusChangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnsubscribeOrderStatusChangeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeOrderStatusChangeRequest::~UnsubscribeOrderStatusChangeRequest() {
  SharedDtor();
}

void UnsubscribeOrderStatusChangeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void UnsubscribeOrderStatusChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeOrderStatusChangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeOrderStatusChangeRequest_descriptor_;
}

const UnsubscribeOrderStatusChangeRequest& UnsubscribeOrderStatusChangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

UnsubscribeOrderStatusChangeRequest* UnsubscribeOrderStatusChangeRequest::default_instance_ = NULL;

UnsubscribeOrderStatusChangeRequest* UnsubscribeOrderStatusChangeRequest::New() const {
  return new UnsubscribeOrderStatusChangeRequest;
}

void UnsubscribeOrderStatusChangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsubscribeOrderStatusChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_id;
        break;
      }
      
      // required uint64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnsubscribeOrderStatusChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required uint64 object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnsubscribeOrderStatusChangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required uint64 object_id = 2;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnsubscribeOrderStatusChangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required uint64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsubscribeOrderStatusChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsubscribeOrderStatusChangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsubscribeOrderStatusChangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsubscribeOrderStatusChangeRequest::MergeFrom(const UnsubscribeOrderStatusChangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsubscribeOrderStatusChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeOrderStatusChangeRequest::CopyFrom(const UnsubscribeOrderStatusChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeOrderStatusChangeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeOrderStatusChangeRequest::Swap(UnsubscribeOrderStatusChangeRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsubscribeOrderStatusChangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeOrderStatusChangeRequest_descriptor_;
  metadata.reflection = UnsubscribeOrderStatusChangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClaimRequest::kPartitionIdFieldNumber;
const int ClaimRequest::kOrderIdFieldNumber;
const int ClaimRequest::kBnetAccountFieldNumber;
#endif  // !_MSC_VER

ClaimRequest::ClaimRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClaimRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  bnet_account_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

ClaimRequest::ClaimRequest(const ClaimRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClaimRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  order_id_ = 0u;
  bnet_account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClaimRequest::~ClaimRequest() {
  SharedDtor();
}

void ClaimRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete bnet_account_;
  }
}

void ClaimRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClaimRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClaimRequest_descriptor_;
}

const ClaimRequest& ClaimRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

ClaimRequest* ClaimRequest::default_instance_ = NULL;

ClaimRequest* ClaimRequest::New() const {
  return new ClaimRequest;
}

void ClaimRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    order_id_ = 0u;
    if (has_bnet_account()) {
      if (bnet_account_ != NULL) bnet_account_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClaimRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }
      
      // required uint32 order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bnet_account;
        break;
      }
      
      // optional .bnet.protocol.EntityId bnet_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClaimRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required uint32 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order_id(), output);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 3;
  if (has_bnet_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bnet_account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClaimRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required uint32 order_id = 2;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order_id(), target);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 3;
  if (has_bnet_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bnet_account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClaimRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required uint32 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }
    
    // optional .bnet.protocol.EntityId bnet_account = 3;
    if (has_bnet_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClaimRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClaimRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClaimRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClaimRequest::MergeFrom(const ClaimRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_bnet_account()) {
      mutable_bnet_account()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClaimRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClaimRequest::CopyFrom(const ClaimRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_bnet_account()) {
    if (!this->bnet_account().IsInitialized()) return false;
  }
  return true;
}

void ClaimRequest::Swap(ClaimRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(bnet_account_, other->bnet_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClaimRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClaimRequest_descriptor_;
  metadata.reflection = ClaimRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelRequest::kPartitionIdFieldNumber;
const int CancelRequest::kOrderIdFieldNumber;
const int CancelRequest::kReasonFieldNumber;
const int CancelRequest::kBnetAccountFieldNumber;
#endif  // !_MSC_VER

CancelRequest::CancelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  bnet_account_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

CancelRequest::CancelRequest(const CancelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  order_id_ = 0u;
  reason_ = 0u;
  bnet_account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelRequest::~CancelRequest() {
  SharedDtor();
}

void CancelRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete bnet_account_;
  }
}

void CancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelRequest_descriptor_;
}

const CancelRequest& CancelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

CancelRequest* CancelRequest::default_instance_ = NULL;

CancelRequest* CancelRequest::New() const {
  return new CancelRequest;
}

void CancelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    order_id_ = 0u;
    reason_ = 0u;
    if (has_bnet_account()) {
      if (bnet_account_ != NULL) bnet_account_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }
      
      // required uint32 order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bnet_account;
        break;
      }
      
      // optional .bnet.protocol.EntityId bnet_account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required uint32 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order_id(), output);
  }
  
  // optional uint32 reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 4;
  if (has_bnet_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bnet_account(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required uint32 order_id = 2;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order_id(), target);
  }
  
  // optional uint32 reason = 3;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 4;
  if (has_bnet_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bnet_account(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required uint32 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }
    
    // optional uint32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional .bnet.protocol.EntityId bnet_account = 4;
    if (has_bnet_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelRequest::MergeFrom(const CancelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_bnet_account()) {
      mutable_bnet_account()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelRequest::CopyFrom(const CancelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_bnet_account()) {
    if (!this->bnet_account().IsInitialized()) return false;
  }
  return true;
}

void CancelRequest::Swap(CancelRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(reason_, other->reason_);
    std::swap(bnet_account_, other->bnet_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelRequest_descriptor_;
  metadata.reflection = CancelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetConfigurationRequest::kProgramFieldNumber;
#endif  // !_MSC_VER

GetConfigurationRequest::GetConfigurationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetConfigurationRequest::InitAsDefaultInstance() {
}

GetConfigurationRequest::GetConfigurationRequest(const GetConfigurationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetConfigurationRequest::SharedCtor() {
  _cached_size_ = 0;
  program_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfigurationRequest::~GetConfigurationRequest() {
  SharedDtor();
}

void GetConfigurationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetConfigurationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfigurationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfigurationRequest_descriptor_;
}

const GetConfigurationRequest& GetConfigurationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

GetConfigurationRequest* GetConfigurationRequest::default_instance_ = NULL;

GetConfigurationRequest* GetConfigurationRequest::New() const {
  return new GetConfigurationRequest;
}

void GetConfigurationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    program_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfigurationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 program = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetConfigurationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 program = 1;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->program(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetConfigurationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 program = 1;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->program(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetConfigurationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 program = 1;
    if (has_program()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfigurationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfigurationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfigurationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfigurationRequest::MergeFrom(const GetConfigurationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_program()) {
      set_program(from.program());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfigurationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfigurationRequest::CopyFrom(const GetConfigurationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigurationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetConfigurationRequest::Swap(GetConfigurationRequest* other) {
  if (other != this) {
    std::swap(program_, other->program_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfigurationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfigurationRequest_descriptor_;
  metadata.reflection = GetConfigurationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetConfigurationResponse::kConfigsFieldNumber;
#endif  // !_MSC_VER

GetConfigurationResponse::GetConfigurationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetConfigurationResponse::InitAsDefaultInstance() {
}

GetConfigurationResponse::GetConfigurationResponse(const GetConfigurationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetConfigurationResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetConfigurationResponse::~GetConfigurationResponse() {
  SharedDtor();
}

void GetConfigurationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetConfigurationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConfigurationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetConfigurationResponse_descriptor_;
}

const GetConfigurationResponse& GetConfigurationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

GetConfigurationResponse* GetConfigurationResponse::default_instance_ = NULL;

GetConfigurationResponse* GetConfigurationResponse::New() const {
  return new GetConfigurationResponse;
}

void GetConfigurationResponse::Clear() {
  configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetConfigurationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange.SpecialistConfig configs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_configs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetConfigurationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange.SpecialistConfig configs = 1;
  for (int i = 0; i < this->configs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->configs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetConfigurationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange.SpecialistConfig configs = 1;
  for (int i = 0; i < this->configs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->configs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetConfigurationResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.exchange.SpecialistConfig configs = 1;
  total_size += 1 * this->configs_size();
  for (int i = 0; i < this->configs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConfigurationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetConfigurationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetConfigurationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetConfigurationResponse::MergeFrom(const GetConfigurationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  configs_.MergeFrom(from.configs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetConfigurationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfigurationResponse::CopyFrom(const GetConfigurationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfigurationResponse::IsInitialized() const {
  
  for (int i = 0; i < configs_size(); i++) {
    if (!this->configs(i).IsInitialized()) return false;
  }
  return true;
}

void GetConfigurationResponse::Swap(GetConfigurationResponse* other) {
  if (other != this) {
    configs_.Swap(&other->configs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetConfigurationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetConfigurationResponse_descriptor_;
  metadata.reflection = GetConfigurationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfferFeeEstimationRequest::kPartitionIdFieldNumber;
const int GetOfferFeeEstimationRequest::kDataFieldNumber;
#endif  // !_MSC_VER

GetOfferFeeEstimationRequest::GetOfferFeeEstimationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOfferFeeEstimationRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  data_ = const_cast< ::bnet::protocol::exchange::FeeEstimationData*>(&::bnet::protocol::exchange::FeeEstimationData::default_instance());
}

GetOfferFeeEstimationRequest::GetOfferFeeEstimationRequest(const GetOfferFeeEstimationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOfferFeeEstimationRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfferFeeEstimationRequest::~GetOfferFeeEstimationRequest() {
  SharedDtor();
}

void GetOfferFeeEstimationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete data_;
  }
}

void GetOfferFeeEstimationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOfferFeeEstimationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOfferFeeEstimationRequest_descriptor_;
}

const GetOfferFeeEstimationRequest& GetOfferFeeEstimationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

GetOfferFeeEstimationRequest* GetOfferFeeEstimationRequest::default_instance_ = NULL;

GetOfferFeeEstimationRequest* GetOfferFeeEstimationRequest::New() const {
  return new GetOfferFeeEstimationRequest;
}

void GetOfferFeeEstimationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::bnet::protocol::exchange::FeeEstimationData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOfferFeeEstimationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required .bnet.protocol.exchange.FeeEstimationData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOfferFeeEstimationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.FeeEstimationData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOfferFeeEstimationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.FeeEstimationData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOfferFeeEstimationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.FeeEstimationData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfferFeeEstimationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOfferFeeEstimationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOfferFeeEstimationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOfferFeeEstimationRequest::MergeFrom(const GetOfferFeeEstimationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_data()) {
      mutable_data()->::bnet::protocol::exchange::FeeEstimationData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOfferFeeEstimationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOfferFeeEstimationRequest::CopyFrom(const GetOfferFeeEstimationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfferFeeEstimationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GetOfferFeeEstimationRequest::Swap(GetOfferFeeEstimationRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOfferFeeEstimationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOfferFeeEstimationRequest_descriptor_;
  metadata.reflection = GetOfferFeeEstimationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBidFeeEstimationRequest::kPartitionIdFieldNumber;
const int GetBidFeeEstimationRequest::kDataFieldNumber;
#endif  // !_MSC_VER

GetBidFeeEstimationRequest::GetBidFeeEstimationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBidFeeEstimationRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  data_ = const_cast< ::bnet::protocol::exchange::FeeEstimationData*>(&::bnet::protocol::exchange::FeeEstimationData::default_instance());
}

GetBidFeeEstimationRequest::GetBidFeeEstimationRequest(const GetBidFeeEstimationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBidFeeEstimationRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBidFeeEstimationRequest::~GetBidFeeEstimationRequest() {
  SharedDtor();
}

void GetBidFeeEstimationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete data_;
  }
}

void GetBidFeeEstimationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBidFeeEstimationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBidFeeEstimationRequest_descriptor_;
}

const GetBidFeeEstimationRequest& GetBidFeeEstimationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

GetBidFeeEstimationRequest* GetBidFeeEstimationRequest::default_instance_ = NULL;

GetBidFeeEstimationRequest* GetBidFeeEstimationRequest::New() const {
  return new GetBidFeeEstimationRequest;
}

void GetBidFeeEstimationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::bnet::protocol::exchange::FeeEstimationData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBidFeeEstimationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required .bnet.protocol.exchange.FeeEstimationData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBidFeeEstimationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.FeeEstimationData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBidFeeEstimationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.FeeEstimationData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBidFeeEstimationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.FeeEstimationData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBidFeeEstimationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBidFeeEstimationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBidFeeEstimationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBidFeeEstimationRequest::MergeFrom(const GetBidFeeEstimationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_data()) {
      mutable_data()->::bnet::protocol::exchange::FeeEstimationData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBidFeeEstimationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBidFeeEstimationRequest::CopyFrom(const GetBidFeeEstimationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBidFeeEstimationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void GetBidFeeEstimationRequest::Swap(GetBidFeeEstimationRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBidFeeEstimationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBidFeeEstimationRequest_descriptor_;
  metadata.reflection = GetBidFeeEstimationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFeeEstimationResponse::kFeeAmountFieldNumber;
#endif  // !_MSC_VER

GetFeeEstimationResponse::GetFeeEstimationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFeeEstimationResponse::InitAsDefaultInstance() {
}

GetFeeEstimationResponse::GetFeeEstimationResponse(const GetFeeEstimationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFeeEstimationResponse::SharedCtor() {
  _cached_size_ = 0;
  fee_amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFeeEstimationResponse::~GetFeeEstimationResponse() {
  SharedDtor();
}

void GetFeeEstimationResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFeeEstimationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFeeEstimationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFeeEstimationResponse_descriptor_;
}

const GetFeeEstimationResponse& GetFeeEstimationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

GetFeeEstimationResponse* GetFeeEstimationResponse::default_instance_ = NULL;

GetFeeEstimationResponse* GetFeeEstimationResponse::New() const {
  return new GetFeeEstimationResponse;
}

void GetFeeEstimationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fee_amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFeeEstimationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fee_amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_amount_)));
          set_has_fee_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFeeEstimationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fee_amount = 1;
  if (has_fee_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fee_amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFeeEstimationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fee_amount = 1;
  if (has_fee_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fee_amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFeeEstimationResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fee_amount = 1;
    if (has_fee_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee_amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFeeEstimationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFeeEstimationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFeeEstimationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFeeEstimationResponse::MergeFrom(const GetFeeEstimationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fee_amount()) {
      set_fee_amount(from.fee_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFeeEstimationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeeEstimationResponse::CopyFrom(const GetFeeEstimationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeEstimationResponse::IsInitialized() const {
  
  return true;
}

void GetFeeEstimationResponse::Swap(GetFeeEstimationResponse* other) {
  if (other != this) {
    std::swap(fee_amount_, other->fee_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFeeEstimationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFeeEstimationResponse_descriptor_;
  metadata.reflection = GetFeeEstimationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderBookNotificationRequest::kNotificationsFieldNumber;
const int OrderBookNotificationRequest::kBootStrapLastFieldNumber;
#endif  // !_MSC_VER

OrderBookNotificationRequest::OrderBookNotificationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderBookNotificationRequest::InitAsDefaultInstance() {
}

OrderBookNotificationRequest::OrderBookNotificationRequest(const OrderBookNotificationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderBookNotificationRequest::SharedCtor() {
  _cached_size_ = 0;
  boot_strap_last_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderBookNotificationRequest::~OrderBookNotificationRequest() {
  SharedDtor();
}

void OrderBookNotificationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderBookNotificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderBookNotificationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderBookNotificationRequest_descriptor_;
}

const OrderBookNotificationRequest& OrderBookNotificationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

OrderBookNotificationRequest* OrderBookNotificationRequest::default_instance_ = NULL;

OrderBookNotificationRequest* OrderBookNotificationRequest::New() const {
  return new OrderBookNotificationRequest;
}

void OrderBookNotificationRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    boot_strap_last_ = false;
  }
  notifications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderBookNotificationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange.OrderBookNotification notifications = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notifications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notifications;
        if (input->ExpectTag(16)) goto parse_boot_strap_last;
        break;
      }
      
      // optional bool boot_strap_last = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boot_strap_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boot_strap_last_)));
          set_has_boot_strap_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderBookNotificationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange.OrderBookNotification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notifications(i), output);
  }
  
  // optional bool boot_strap_last = 2;
  if (has_boot_strap_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->boot_strap_last(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderBookNotificationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange.OrderBookNotification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notifications(i), target);
  }
  
  // optional bool boot_strap_last = 2;
  if (has_boot_strap_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->boot_strap_last(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderBookNotificationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool boot_strap_last = 2;
    if (has_boot_strap_last()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .bnet.protocol.exchange.OrderBookNotification notifications = 1;
  total_size += 1 * this->notifications_size();
  for (int i = 0; i < this->notifications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notifications(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderBookNotificationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderBookNotificationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderBookNotificationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderBookNotificationRequest::MergeFrom(const OrderBookNotificationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifications_.MergeFrom(from.notifications_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_boot_strap_last()) {
      set_boot_strap_last(from.boot_strap_last());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderBookNotificationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBookNotificationRequest::CopyFrom(const OrderBookNotificationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBookNotificationRequest::IsInitialized() const {
  
  for (int i = 0; i < notifications_size(); i++) {
    if (!this->notifications(i).IsInitialized()) return false;
  }
  return true;
}

void OrderBookNotificationRequest::Swap(OrderBookNotificationRequest* other) {
  if (other != this) {
    notifications_.Swap(&other->notifications_);
    std::swap(boot_strap_last_, other->boot_strap_last_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderBookNotificationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderBookNotificationRequest_descriptor_;
  metadata.reflection = OrderBookNotificationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferNotificationRequest::kOfferFieldNumber;
const int OfferNotificationRequest::kEventFieldNumber;
#endif  // !_MSC_VER

OfferNotificationRequest::OfferNotificationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferNotificationRequest::InitAsDefaultInstance() {
  offer_ = const_cast< ::bnet::protocol::exchange::OfferExtended*>(&::bnet::protocol::exchange::OfferExtended::default_instance());
}

OfferNotificationRequest::OfferNotificationRequest(const OfferNotificationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferNotificationRequest::SharedCtor() {
  _cached_size_ = 0;
  offer_ = NULL;
  event_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferNotificationRequest::~OfferNotificationRequest() {
  SharedDtor();
}

void OfferNotificationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete offer_;
  }
}

void OfferNotificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferNotificationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferNotificationRequest_descriptor_;
}

const OfferNotificationRequest& OfferNotificationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

OfferNotificationRequest* OfferNotificationRequest::default_instance_ = NULL;

OfferNotificationRequest* OfferNotificationRequest::New() const {
  return new OfferNotificationRequest;
}

void OfferNotificationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_offer()) {
      if (offer_ != NULL) offer_->::bnet::protocol::exchange::OfferExtended::Clear();
    }
    event_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferNotificationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.OfferExtended offer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }
      
      // required uint32 event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferNotificationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.OfferExtended offer = 1;
  if (has_offer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offer(), output);
  }
  
  // required uint32 event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferNotificationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.OfferExtended offer = 1;
  if (has_offer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offer(), target);
  }
  
  // required uint32 event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferNotificationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.OfferExtended offer = 1;
    if (has_offer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offer());
    }
    
    // required uint32 event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferNotificationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferNotificationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferNotificationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferNotificationRequest::MergeFrom(const OfferNotificationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offer()) {
      mutable_offer()->::bnet::protocol::exchange::OfferExtended::MergeFrom(from.offer());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferNotificationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferNotificationRequest::CopyFrom(const OfferNotificationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferNotificationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_offer()) {
    if (!this->offer().IsInitialized()) return false;
  }
  return true;
}

void OfferNotificationRequest::Swap(OfferNotificationRequest* other) {
  if (other != this) {
    std::swap(offer_, other->offer_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferNotificationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferNotificationRequest_descriptor_;
  metadata.reflection = OfferNotificationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidNotificationRequest::kBidFieldNumber;
const int BidNotificationRequest::kEventFieldNumber;
#endif  // !_MSC_VER

BidNotificationRequest::BidNotificationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidNotificationRequest::InitAsDefaultInstance() {
  bid_ = const_cast< ::bnet::protocol::exchange::BidExtended*>(&::bnet::protocol::exchange::BidExtended::default_instance());
}

BidNotificationRequest::BidNotificationRequest(const BidNotificationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidNotificationRequest::SharedCtor() {
  _cached_size_ = 0;
  bid_ = NULL;
  event_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidNotificationRequest::~BidNotificationRequest() {
  SharedDtor();
}

void BidNotificationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete bid_;
  }
}

void BidNotificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidNotificationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidNotificationRequest_descriptor_;
}

const BidNotificationRequest& BidNotificationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_2eproto();  return *default_instance_;
}

BidNotificationRequest* BidNotificationRequest::default_instance_ = NULL;

BidNotificationRequest* BidNotificationRequest::New() const {
  return new BidNotificationRequest;
}

void BidNotificationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bid()) {
      if (bid_ != NULL) bid_->::bnet::protocol::exchange::BidExtended::Clear();
    }
    event_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidNotificationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.BidExtended bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }
      
      // required uint32 event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidNotificationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.BidExtended bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(), output);
  }
  
  // required uint32 event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidNotificationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.BidExtended bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bid(), target);
  }
  
  // required uint32 event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidNotificationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.BidExtended bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bid());
    }
    
    // required uint32 event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidNotificationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidNotificationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidNotificationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidNotificationRequest::MergeFrom(const BidNotificationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      mutable_bid()->::bnet::protocol::exchange::BidExtended::MergeFrom(from.bid());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidNotificationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidNotificationRequest::CopyFrom(const BidNotificationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidNotificationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_bid()) {
    if (!this->bid().IsInitialized()) return false;
  }
  return true;
}

void BidNotificationRequest::Swap(BidNotificationRequest* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidNotificationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidNotificationRequest_descriptor_;
  metadata.reflection = BidNotificationRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace exchange
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
