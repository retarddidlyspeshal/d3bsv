// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/exchange/exchange_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace exchange {

namespace {

const ::google::protobuf::Descriptor* OrderBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderBookHandle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderBookHandle_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderBookNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderBookNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderBookSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderBookSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* Extension_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extension_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferExtended_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferExtended_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidExtended_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidExtended_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFilterByOrderId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFilterByOrderId_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFilterByCreatedTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFilterByCreatedTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Settlement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Settlement_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrencyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrencyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialistConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialistConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillingAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillingAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeeEstimationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeeEstimationData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto() {
  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/exchange/exchange_types.proto");
  GOOGLE_CHECK(file != NULL);
  OrderBook_descriptor_ = file->message_type(0);
  static const int OrderBook_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBook, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBook, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBook, compatibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBook, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBook, specialist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBook, allowed_realm_),
  };
  OrderBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderBook_descriptor_,
      OrderBook::default_instance_,
      OrderBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderBook));
  OrderBookHandle_descriptor_ = file->message_type(1);
  static const int OrderBookHandle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookHandle, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookHandle, order_book_id_),
  };
  OrderBookHandle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderBookHandle_descriptor_,
      OrderBookHandle::default_instance_,
      OrderBookHandle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookHandle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookHandle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderBookHandle));
  OrderBookNotification_descriptor_ = file->message_type(2);
  static const int OrderBookNotification_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotification, order_book_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotification, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotification, order_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotification, trade_now_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotification, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotification, update_time_),
  };
  OrderBookNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderBookNotification_descriptor_,
      OrderBookNotification::default_instance_,
      OrderBookNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderBookNotification));
  OrderBookSummary_descriptor_ = file->message_type(3);
  static const int OrderBookSummary_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, order_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, order_book_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, best_offer_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, best_bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, created_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, closed_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, out_bid_unit_price_),
  };
  OrderBookSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderBookSummary_descriptor_,
      OrderBookSummary::default_instance_,
      OrderBookSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBookSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderBookSummary));
  Order_descriptor_ = file->message_type(4);
  static const int Order_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, account_for_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, account_for_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, bnet_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, toon_),
  };
  Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Order));
  Extension_descriptor_ = file->message_type(5);
  static const int Extension_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, order_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, filled_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, order_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, authorized_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, created_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, closed_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, order_book_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, order_book_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, money_to_claim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, items_to_claim_),
  };
  Extension_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Extension_descriptor_,
      Extension::default_instance_,
      Extension_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extension, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Extension));
  Offer_descriptor_ = file->message_type(6);
  static const int Offer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, trade_now_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, reserve_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, out_bid_price_),
  };
  Offer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_descriptor_,
      Offer::default_instance_,
      Offer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer));
  OfferExtended_descriptor_ = file->message_type(7);
  static const int OfferExtended_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferExtended, offer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferExtended, extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferExtended, current_winning_price_),
  };
  OfferExtended_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferExtended_descriptor_,
      OfferExtended::default_instance_,
      OfferExtended_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferExtended, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferExtended, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferExtended));
  OfferCreation_descriptor_ = file->message_type(8);
  static const int OfferCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferCreation, offer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferCreation, auction_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferCreation, auction_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferCreation, billing_address_),
  };
  OfferCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferCreation_descriptor_,
      OfferCreation::default_instance_,
      OfferCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferCreation));
  Bid_descriptor_ = file->message_type(9);
  static const int Bid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, current_unit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, max_unit_price_),
  };
  Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bid_descriptor_,
      Bid::default_instance_,
      Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bid));
  BidExtended_descriptor_ = file->message_type(10);
  static const int BidExtended_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidExtended, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidExtended, extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidExtended, offer_out_bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidExtended, offer_trade_now_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidExtended, offer_current_winning_price_),
  };
  BidExtended_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidExtended_descriptor_,
      BidExtended::default_instance_,
      BidExtended_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidExtended, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidExtended, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidExtended));
  BidCreation_descriptor_ = file->message_type(11);
  static const int BidCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidCreation, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidCreation, auction_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidCreation, auction_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidCreation, billing_address_),
  };
  BidCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidCreation_descriptor_,
      BidCreation::default_instance_,
      BidCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidCreation));
  QueryFilterByOrderId_descriptor_ = file->message_type(12);
  static const int QueryFilterByOrderId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilterByOrderId, max_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilterByOrderId, ref_order_id_),
  };
  QueryFilterByOrderId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFilterByOrderId_descriptor_,
      QueryFilterByOrderId::default_instance_,
      QueryFilterByOrderId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilterByOrderId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilterByOrderId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFilterByOrderId));
  QueryFilterByCreatedTime_descriptor_ = file->message_type(13);
  static const int QueryFilterByCreatedTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilterByCreatedTime, max_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilterByCreatedTime, ref_created_time_),
  };
  QueryFilterByCreatedTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFilterByCreatedTime_descriptor_,
      QueryFilterByCreatedTime::default_instance_,
      QueryFilterByCreatedTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilterByCreatedTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFilterByCreatedTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFilterByCreatedTime));
  Settlement_descriptor_ = file->message_type(14);
  static const int Settlement_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, order_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, money_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, items_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, offer_settle_id_),
  };
  Settlement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Settlement_descriptor_,
      Settlement::default_instance_,
      Settlement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settlement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Settlement));
  CurrencyConfig_descriptor_ = file->message_type(15);
  static const int CurrencyConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, tick_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, flat_outbid_incr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, scale_outbid_incr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, min_starting_unit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, max_starting_unit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, max_unit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, max_total_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, buyout_rule_),
  };
  CurrencyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrencyConfig_descriptor_,
      CurrencyConfig::default_instance_,
      CurrencyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrencyConfig));
  SpecialistConfig_descriptor_ = file->message_type(16);
  static const int SpecialistConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialistConfig, specialist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialistConfig, auction_durations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialistConfig, auction_start_delays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialistConfig, anti_sniping_extension_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialistConfig, currency_config_),
  };
  SpecialistConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialistConfig_descriptor_,
      SpecialistConfig::default_instance_,
      SpecialistConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialistConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialistConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialistConfig));
  BillingAddress_descriptor_ = file->message_type(17);
  static const int BillingAddress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAddress, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAddress, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAddress, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAddress, postal_code_),
  };
  BillingAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillingAddress_descriptor_,
      BillingAddress::default_instance_,
      BillingAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillingAddress));
  FeeEstimationData_descriptor_ = file->message_type(18);
  static const int FeeEstimationData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeeEstimationData, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeeEstimationData, specialist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeeEstimationData, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeeEstimationData, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeeEstimationData, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeeEstimationData, bnet_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeeEstimationData, billing_address_),
  };
  FeeEstimationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeeEstimationData_descriptor_,
      FeeEstimationData::default_instance_,
      FeeEstimationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeeEstimationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeeEstimationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeeEstimationData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderBook_descriptor_, &OrderBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderBookHandle_descriptor_, &OrderBookHandle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderBookNotification_descriptor_, &OrderBookNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderBookSummary_descriptor_, &OrderBookSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Order_descriptor_, &Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Extension_descriptor_, &Extension::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_descriptor_, &Offer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferExtended_descriptor_, &OfferExtended::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferCreation_descriptor_, &OfferCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bid_descriptor_, &Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidExtended_descriptor_, &BidExtended::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidCreation_descriptor_, &BidCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFilterByOrderId_descriptor_, &QueryFilterByOrderId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFilterByCreatedTime_descriptor_, &QueryFilterByCreatedTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Settlement_descriptor_, &Settlement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrencyConfig_descriptor_, &CurrencyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialistConfig_descriptor_, &SpecialistConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillingAddress_descriptor_, &BillingAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeeEstimationData_descriptor_, &FeeEstimationData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto() {
  delete OrderBook::default_instance_;
  delete OrderBook_reflection_;
  delete OrderBookHandle::default_instance_;
  delete OrderBookHandle_reflection_;
  delete OrderBookNotification::default_instance_;
  delete OrderBookNotification_reflection_;
  delete OrderBookSummary::default_instance_;
  delete OrderBookSummary_reflection_;
  delete Order::default_instance_;
  delete Order_reflection_;
  delete Extension::default_instance_;
  delete Extension_reflection_;
  delete Offer::default_instance_;
  delete Offer_reflection_;
  delete OfferExtended::default_instance_;
  delete OfferExtended_reflection_;
  delete OfferCreation::default_instance_;
  delete OfferCreation_reflection_;
  delete Bid::default_instance_;
  delete Bid_reflection_;
  delete BidExtended::default_instance_;
  delete BidExtended_reflection_;
  delete BidCreation::default_instance_;
  delete BidCreation_reflection_;
  delete QueryFilterByOrderId::default_instance_;
  delete QueryFilterByOrderId_reflection_;
  delete QueryFilterByCreatedTime::default_instance_;
  delete QueryFilterByCreatedTime_reflection_;
  delete Settlement::default_instance_;
  delete Settlement_reflection_;
  delete CurrencyConfig::default_instance_;
  delete CurrencyConfig_reflection_;
  delete SpecialistConfig::default_instance_;
  delete SpecialistConfig_reflection_;
  delete BillingAddress::default_instance_;
  delete BillingAddress_reflection_;
  delete FeeEstimationData::default_instance_;
  delete FeeEstimationData_reflection_;
}

void protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::exchange::protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%service/exchange/exchange_types.proto\022"
    "\026bnet.protocol.exchange\032\031lib/protocol/en"
    "tity.proto\032\033lib/protocol/exchange.proto\""
    "\244\001\n\tOrderBook\0222\n\006object\030\001 \002(\0132\".bnet.pro"
    "tocol.exchange.BlobOfType\022\017\n\007program\030\002 \002"
    "(\007\022\025\n\rcompatibility\030\003 \002(\r\022\020\n\010currency\030\004 "
    "\002(\t\022\022\n\nspecialist\030\005 \002(\005\022\025\n\rallowed_realm"
    "\030\006 \002(\r\"c\n\017OrderBookHandle\0229\n\014partition_i"
    "d\030\001 \002(\0132#.bnet.protocol.exchange.Partiti"
    "onId\022\025\n\rorder_book_id\030\002 \002(\004\"\336\001\n\025OrderBoo"
    "kNotification\0225\n\norder_book\030\001 \002(\0132!.bnet"
    ".protocol.exchange.OrderBook\0229\n\014partitio"
    "n_id\030\002 \002(\0132#.bnet.protocol.exchange.Part"
    "itionId\022\025\n\rorder_book_id\030\003 \002(\004\022\027\n\017trade_"
    "now_price\030\004 \001(\004\022\016\n\006status\030\005 \002(\r\022\023\n\013updat"
    "e_time\030\006 \002(\004\"\373\002\n\020OrderBookSummary\0229\n\014par"
    "tition_id\030\001 \002(\0132#.bnet.protocol.exchange"
    ".PartitionId\022\025\n\rorder_book_id\030\002 \002(\004\022\016\n\006r"
    "esult\030\003 \002(\r\0225\n\norder_book\030\004 \001(\0132!.bnet.p"
    "rotocol.exchange.OrderBook\022\016\n\006amount\030\005 \001"
    "(\004\022\030\n\020best_offer_price\030\006 \001(\004\022\026\n\016best_bid"
    "_price\030\007 \001(\004\022\020\n\010end_time\030\010 \001(\004\022\016\n\006status"
    "\030\t \001(\005\022\024\n\014created_time\030\n \001(\004\022\023\n\013active_t"
    "ime\030\013 \001(\004\022\023\n\013closed_time\030\014 \001(\004\022\016\n\006reason"
    "\030\r \001(\r\022\032\n\022out_bid_unit_price\030\016 \001(\004\"\273\002\n\005O"
    "rder\022\016\n\006amount\030\001 \002(\r\022\022\n\nstart_time\030\002 \001(\004"
    "\022\020\n\010end_time\030\003 \001(\004\022;\n\021account_for_money\030"
    "\004 \001(\0132 .bnet.protocol.exchange.BlobFrom\022"
    ":\n\020account_for_item\030\005 \001(\0132 .bnet.protoco"
    "l.exchange.BlobFrom\022-\n\014bnet_account\030\006 \001("
    "\0132\027.bnet.protocol.EntityId\022-\n\014game_accou"
    "nt\030\007 \001(\0132\027.bnet.protocol.EntityId\022%\n\004too"
    "n\030\010 \001(\0132\027.bnet.protocol.EntityId\"\362\002\n\tExt"
    "ension\0229\n\014partition_id\030\001 \002(\0132#.bnet.prot"
    "ocol.exchange.PartitionId\022\025\n\rorder_book_"
    "id\030\002 \002(\004\022\020\n\010order_id\030\003 \002(\004\022\025\n\rfilled_amo"
    "unt\030\004 \001(\004\022\024\n\014order_status\030\005 \001(\005\022\027\n\017autho"
    "rized_time\030\006 \001(\004\022\024\n\014created_time\030\007 \001(\004\022\023"
    "\n\013closed_time\030\010 \001(\004\022\016\n\006reason\030\t \001(\r\0225\n\no"
    "rder_book\030\n \001(\0132!.bnet.protocol.exchange"
    ".OrderBook\022\031\n\021order_book_status\030\013 \001(\004\022\026\n"
    "\016money_to_claim\030\014 \001(\004\022\026\n\016items_to_claim\030"
    "\r \001(\004\"|\n\005Offer\022,\n\005order\030\001 \002(\0132\035.bnet.pro"
    "tocol.exchange.Order\022\027\n\017trade_now_price\030"
    "\002 \001(\004\022\025\n\rreserve_price\030\003 \001(\004\022\025\n\rout_bid_"
    "price\030\004 \001(\004\"\222\001\n\rOfferExtended\022,\n\005offer\030\001"
    " \002(\0132\035.bnet.protocol.exchange.Offer\0224\n\te"
    "xtension\030\002 \002(\0132!.bnet.protocol.exchange."
    "Extension\022\035\n\025current_winning_price\030\003 \001(\004"
    "\"\265\001\n\rOfferCreation\022,\n\005offer\030\001 \002(\0132\035.bnet"
    ".protocol.exchange.Offer\022\030\n\020auction_dura"
    "tion\030\002 \001(\004\022\033\n\023auction_start_delay\030\003 \001(\004\022"
    "\?\n\017billing_address\030\004 \001(\0132&.bnet.protocol"
    ".exchange.BillingAddress\"g\n\003Bid\022,\n\005order"
    "\030\001 \002(\0132\035.bnet.protocol.exchange.Order\022\032\n"
    "\022current_unit_price\030\002 \001(\004\022\026\n\016max_unit_pr"
    "ice\030\003 \001(\004\"\316\001\n\013BidExtended\022(\n\003bid\030\001 \002(\0132\033"
    ".bnet.protocol.exchange.Bid\0224\n\textension"
    "\030\002 \002(\0132!.bnet.protocol.exchange.Extensio"
    "n\022\033\n\023offer_out_bid_price\030\003 \001(\004\022\035\n\025offer_"
    "trade_now_price\030\004 \001(\004\022#\n\033offer_current_w"
    "inning_price\030\005 \001(\004\"\257\001\n\013BidCreation\022(\n\003bi"
    "d\030\001 \002(\0132\033.bnet.protocol.exchange.Bid\022\030\n\020"
    "auction_duration\030\002 \001(\004\022\033\n\023auction_start_"
    "delay\030\003 \001(\004\022\?\n\017billing_address\030\004 \001(\0132&.b"
    "net.protocol.exchange.BillingAddress\"@\n\024"
    "QueryFilterByOrderId\022\022\n\nmax_result\030\001 \002(\r"
    "\022\024\n\014ref_order_id\030\002 \001(\004\"H\n\030QueryFilterByC"
    "reatedTime\022\022\n\nmax_result\030\001 \002(\r\022\030\n\020ref_cr"
    "eated_time\030\002 \001(\004\"h\n\nSettlement\022\025\n\rorder_"
    "book_id\030\001 \002(\004\022\024\n\014money_amount\030\002 \002(\004\022\024\n\014i"
    "tems_amount\030\003 \002(\004\022\027\n\017offer_settle_id\030\004 \002"
    "(\004\"\363\001\n\016CurrencyConfig\022\020\n\010currency\030\001 \002(\t\022"
    "\021\n\ttick_size\030\002 \002(\004\022\030\n\020flat_outbid_incr\030\003"
    " \002(\004\022\031\n\021scale_outbid_incr\030\004 \002(\004\022\037\n\027min_s"
    "tarting_unit_price\030\005 \002(\004\022\037\n\027max_starting"
    "_unit_price\030\006 \002(\004\022\026\n\016max_unit_price\030\007 \002("
    "\004\022\030\n\020max_total_amount\030\010 \002(\004\022\023\n\013buyout_ru"
    "le\030\t \002(\005\"\306\001\n\020SpecialistConfig\022\022\n\nspecial"
    "ist\030\001 \002(\005\022\031\n\021auction_durations\030\002 \003(\004\022\034\n\024"
    "auction_start_delays\030\003 \003(\004\022$\n\034anti_snipi"
    "ng_extension_delay\030\004 \002(\004\022\?\n\017currency_con"
    "fig\030\005 \003(\0132&.bnet.protocol.exchange.Curre"
    "ncyConfig\"V\n\016BillingAddress\022\022\n\ncountry_i"
    "d\030\001 \002(\005\022\014\n\004city\030\002 \002(\t\022\r\n\005state\030\003 \001(\t\022\023\n\013"
    "postal_code\030\004 \001(\t\"\332\001\n\021FeeEstimationData\022"
    "\017\n\007program\030\001 \002(\007\022\022\n\nspecialist\030\002 \002(\005\022\020\n\010"
    "currency\030\003 \002(\t\022\016\n\006source\030\004 \002(\007\022\016\n\006amount"
    "\030\005 \002(\004\022-\n\014bnet_account\030\006 \001(\0132\027.bnet.prot"
    "ocol.EntityId\022\?\n\017billing_address\030\007 \001(\0132&"
    ".bnet.protocol.exchange.BillingAddress", 3638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/exchange/exchange_types.proto", &protobuf_RegisterTypes);
  OrderBook::default_instance_ = new OrderBook();
  OrderBookHandle::default_instance_ = new OrderBookHandle();
  OrderBookNotification::default_instance_ = new OrderBookNotification();
  OrderBookSummary::default_instance_ = new OrderBookSummary();
  Order::default_instance_ = new Order();
  Extension::default_instance_ = new Extension();
  Offer::default_instance_ = new Offer();
  OfferExtended::default_instance_ = new OfferExtended();
  OfferCreation::default_instance_ = new OfferCreation();
  Bid::default_instance_ = new Bid();
  BidExtended::default_instance_ = new BidExtended();
  BidCreation::default_instance_ = new BidCreation();
  QueryFilterByOrderId::default_instance_ = new QueryFilterByOrderId();
  QueryFilterByCreatedTime::default_instance_ = new QueryFilterByCreatedTime();
  Settlement::default_instance_ = new Settlement();
  CurrencyConfig::default_instance_ = new CurrencyConfig();
  SpecialistConfig::default_instance_ = new SpecialistConfig();
  BillingAddress::default_instance_ = new BillingAddress();
  FeeEstimationData::default_instance_ = new FeeEstimationData();
  OrderBook::default_instance_->InitAsDefaultInstance();
  OrderBookHandle::default_instance_->InitAsDefaultInstance();
  OrderBookNotification::default_instance_->InitAsDefaultInstance();
  OrderBookSummary::default_instance_->InitAsDefaultInstance();
  Order::default_instance_->InitAsDefaultInstance();
  Extension::default_instance_->InitAsDefaultInstance();
  Offer::default_instance_->InitAsDefaultInstance();
  OfferExtended::default_instance_->InitAsDefaultInstance();
  OfferCreation::default_instance_->InitAsDefaultInstance();
  Bid::default_instance_->InitAsDefaultInstance();
  BidExtended::default_instance_->InitAsDefaultInstance();
  BidCreation::default_instance_->InitAsDefaultInstance();
  QueryFilterByOrderId::default_instance_->InitAsDefaultInstance();
  QueryFilterByCreatedTime::default_instance_->InitAsDefaultInstance();
  Settlement::default_instance_->InitAsDefaultInstance();
  CurrencyConfig::default_instance_->InitAsDefaultInstance();
  SpecialistConfig::default_instance_->InitAsDefaultInstance();
  BillingAddress::default_instance_->InitAsDefaultInstance();
  FeeEstimationData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fexchange_2fexchange_5ftypes_2eproto {
  StaticDescriptorInitializer_service_2fexchange_2fexchange_5ftypes_2eproto() {
    protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  }
} static_descriptor_initializer_service_2fexchange_2fexchange_5ftypes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int OrderBook::kObjectFieldNumber;
const int OrderBook::kProgramFieldNumber;
const int OrderBook::kCompatibilityFieldNumber;
const int OrderBook::kCurrencyFieldNumber;
const int OrderBook::kSpecialistFieldNumber;
const int OrderBook::kAllowedRealmFieldNumber;
#endif  // !_MSC_VER

OrderBook::OrderBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderBook::InitAsDefaultInstance() {
  object_ = const_cast< ::bnet::protocol::exchange::BlobOfType*>(&::bnet::protocol::exchange::BlobOfType::default_instance());
}

OrderBook::OrderBook(const OrderBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderBook::SharedCtor() {
  _cached_size_ = 0;
  object_ = NULL;
  program_ = 0u;
  compatibility_ = 0u;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specialist_ = 0;
  allowed_realm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderBook::~OrderBook() {
  SharedDtor();
}

void OrderBook::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (this != default_instance_) {
    delete object_;
  }
}

void OrderBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderBook_descriptor_;
}

const OrderBook& OrderBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

OrderBook* OrderBook::default_instance_ = NULL;

OrderBook* OrderBook::New() const {
  return new OrderBook;
}

void OrderBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_object()) {
      if (object_ != NULL) object_->::bnet::protocol::exchange::BlobOfType::Clear();
    }
    program_ = 0u;
    compatibility_ = 0u;
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    specialist_ = 0;
    allowed_realm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.BlobOfType object = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_program;
        break;
      }
      
      // required fixed32 program = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_program:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compatibility;
        break;
      }
      
      // required uint32 compatibility = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compatibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compatibility_)));
          set_has_compatibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currency;
        break;
      }
      
      // required string currency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_specialist;
        break;
      }
      
      // required int32 specialist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialist_)));
          set_has_specialist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allowed_realm;
        break;
      }
      
      // required uint32 allowed_realm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowed_realm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allowed_realm_)));
          set_has_allowed_realm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.BlobOfType object = 1;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object(), output);
  }
  
  // required fixed32 program = 2;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->program(), output);
  }
  
  // required uint32 compatibility = 3;
  if (has_compatibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->compatibility(), output);
  }
  
  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currency(), output);
  }
  
  // required int32 specialist = 5;
  if (has_specialist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->specialist(), output);
  }
  
  // required uint32 allowed_realm = 6;
  if (has_allowed_realm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->allowed_realm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.BlobOfType object = 1;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object(), target);
  }
  
  // required fixed32 program = 2;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->program(), target);
  }
  
  // required uint32 compatibility = 3;
  if (has_compatibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->compatibility(), target);
  }
  
  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency(), target);
  }
  
  // required int32 specialist = 5;
  if (has_specialist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->specialist(), target);
  }
  
  // required uint32 allowed_realm = 6;
  if (has_allowed_realm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->allowed_realm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderBook::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.BlobOfType object = 1;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }
    
    // required fixed32 program = 2;
    if (has_program()) {
      total_size += 1 + 4;
    }
    
    // required uint32 compatibility = 3;
    if (has_compatibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compatibility());
    }
    
    // required string currency = 4;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }
    
    // required int32 specialist = 5;
    if (has_specialist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialist());
    }
    
    // required uint32 allowed_realm = 6;
    if (has_allowed_realm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allowed_realm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderBook::MergeFrom(const OrderBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object()) {
      mutable_object()->::bnet::protocol::exchange::BlobOfType::MergeFrom(from.object());
    }
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_compatibility()) {
      set_compatibility(from.compatibility());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_specialist()) {
      set_specialist(from.specialist());
    }
    if (from.has_allowed_realm()) {
      set_allowed_realm(from.allowed_realm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBook::CopyFrom(const OrderBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void OrderBook::Swap(OrderBook* other) {
  if (other != this) {
    std::swap(object_, other->object_);
    std::swap(program_, other->program_);
    std::swap(compatibility_, other->compatibility_);
    std::swap(currency_, other->currency_);
    std::swap(specialist_, other->specialist_);
    std::swap(allowed_realm_, other->allowed_realm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderBook_descriptor_;
  metadata.reflection = OrderBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderBookHandle::kPartitionIdFieldNumber;
const int OrderBookHandle::kOrderBookIdFieldNumber;
#endif  // !_MSC_VER

OrderBookHandle::OrderBookHandle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderBookHandle::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
}

OrderBookHandle::OrderBookHandle(const OrderBookHandle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderBookHandle::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderBookHandle::~OrderBookHandle() {
  SharedDtor();
}

void OrderBookHandle::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
  }
}

void OrderBookHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderBookHandle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderBookHandle_descriptor_;
}

const OrderBookHandle& OrderBookHandle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

OrderBookHandle* OrderBookHandle::default_instance_ = NULL;

OrderBookHandle* OrderBookHandle::New() const {
  return new OrderBookHandle;
}

void OrderBookHandle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    order_book_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderBookHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order_book_id;
        break;
      }
      
      // required uint64 order_book_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_book_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderBookHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required uint64 order_book_id = 2;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->order_book_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderBookHandle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required uint64 order_book_id = 2;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->order_book_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderBookHandle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required uint64 order_book_id = 2;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderBookHandle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderBookHandle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderBookHandle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderBookHandle::MergeFrom(const OrderBookHandle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderBookHandle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBookHandle::CopyFrom(const OrderBookHandle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBookHandle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  return true;
}

void OrderBookHandle::Swap(OrderBookHandle* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderBookHandle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderBookHandle_descriptor_;
  metadata.reflection = OrderBookHandle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderBookNotification::kOrderBookFieldNumber;
const int OrderBookNotification::kPartitionIdFieldNumber;
const int OrderBookNotification::kOrderBookIdFieldNumber;
const int OrderBookNotification::kTradeNowPriceFieldNumber;
const int OrderBookNotification::kStatusFieldNumber;
const int OrderBookNotification::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

OrderBookNotification::OrderBookNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderBookNotification::InitAsDefaultInstance() {
  order_book_ = const_cast< ::bnet::protocol::exchange::OrderBook*>(&::bnet::protocol::exchange::OrderBook::default_instance());
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
}

OrderBookNotification::OrderBookNotification(const OrderBookNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderBookNotification::SharedCtor() {
  _cached_size_ = 0;
  order_book_ = NULL;
  partition_id_ = NULL;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  trade_now_price_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  update_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderBookNotification::~OrderBookNotification() {
  SharedDtor();
}

void OrderBookNotification::SharedDtor() {
  if (this != default_instance_) {
    delete order_book_;
    delete partition_id_;
  }
}

void OrderBookNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderBookNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderBookNotification_descriptor_;
}

const OrderBookNotification& OrderBookNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

OrderBookNotification* OrderBookNotification::default_instance_ = NULL;

OrderBookNotification* OrderBookNotification::New() const {
  return new OrderBookNotification;
}

void OrderBookNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order_book()) {
      if (order_book_ != NULL) order_book_->::bnet::protocol::exchange::OrderBook::Clear();
    }
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    order_book_id_ = GOOGLE_ULONGLONG(0);
    trade_now_price_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    update_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderBookNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.OrderBook order_book = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_book()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partition_id;
        break;
      }
      
      // required .bnet.protocol.exchange.PartitionId partition_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partition_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order_book_id;
        break;
      }
      
      // required uint64 order_book_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_book_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_trade_now_price;
        break;
      }
      
      // optional uint64 trade_now_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_now_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trade_now_price_)));
          set_has_trade_now_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // required uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }
      
      // required uint64 update_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderBookNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.OrderBook order_book = 1;
  if (has_order_book()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order_book(), output);
  }
  
  // required .bnet.protocol.exchange.PartitionId partition_id = 2;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->partition_id(), output);
  }
  
  // required uint64 order_book_id = 3;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->order_book_id(), output);
  }
  
  // optional uint64 trade_now_price = 4;
  if (has_trade_now_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->trade_now_price(), output);
  }
  
  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }
  
  // required uint64 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->update_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderBookNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.OrderBook order_book = 1;
  if (has_order_book()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order_book(), target);
  }
  
  // required .bnet.protocol.exchange.PartitionId partition_id = 2;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->partition_id(), target);
  }
  
  // required uint64 order_book_id = 3;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->order_book_id(), target);
  }
  
  // optional uint64 trade_now_price = 4;
  if (has_trade_now_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->trade_now_price(), target);
  }
  
  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }
  
  // required uint64 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->update_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderBookNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.OrderBook order_book = 1;
    if (has_order_book()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_book());
    }
    
    // required .bnet.protocol.exchange.PartitionId partition_id = 2;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required uint64 order_book_id = 3;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
    // optional uint64 trade_now_price = 4;
    if (has_trade_now_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trade_now_price());
    }
    
    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // required uint64 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderBookNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderBookNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderBookNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderBookNotification::MergeFrom(const OrderBookNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_book()) {
      mutable_order_book()->::bnet::protocol::exchange::OrderBook::MergeFrom(from.order_book());
    }
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
    if (from.has_trade_now_price()) {
      set_trade_now_price(from.trade_now_price());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderBookNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBookNotification::CopyFrom(const OrderBookNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBookNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  if (has_order_book()) {
    if (!this->order_book().IsInitialized()) return false;
  }
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  return true;
}

void OrderBookNotification::Swap(OrderBookNotification* other) {
  if (other != this) {
    std::swap(order_book_, other->order_book_);
    std::swap(partition_id_, other->partition_id_);
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(trade_now_price_, other->trade_now_price_);
    std::swap(status_, other->status_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderBookNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderBookNotification_descriptor_;
  metadata.reflection = OrderBookNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderBookSummary::kPartitionIdFieldNumber;
const int OrderBookSummary::kOrderBookIdFieldNumber;
const int OrderBookSummary::kResultFieldNumber;
const int OrderBookSummary::kOrderBookFieldNumber;
const int OrderBookSummary::kAmountFieldNumber;
const int OrderBookSummary::kBestOfferPriceFieldNumber;
const int OrderBookSummary::kBestBidPriceFieldNumber;
const int OrderBookSummary::kEndTimeFieldNumber;
const int OrderBookSummary::kStatusFieldNumber;
const int OrderBookSummary::kCreatedTimeFieldNumber;
const int OrderBookSummary::kActiveTimeFieldNumber;
const int OrderBookSummary::kClosedTimeFieldNumber;
const int OrderBookSummary::kReasonFieldNumber;
const int OrderBookSummary::kOutBidUnitPriceFieldNumber;
#endif  // !_MSC_VER

OrderBookSummary::OrderBookSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderBookSummary::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  order_book_ = const_cast< ::bnet::protocol::exchange::OrderBook*>(&::bnet::protocol::exchange::OrderBook::default_instance());
}

OrderBookSummary::OrderBookSummary(const OrderBookSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderBookSummary::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  order_book_ = NULL;
  amount_ = GOOGLE_ULONGLONG(0);
  best_offer_price_ = GOOGLE_ULONGLONG(0);
  best_bid_price_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  created_time_ = GOOGLE_ULONGLONG(0);
  active_time_ = GOOGLE_ULONGLONG(0);
  closed_time_ = GOOGLE_ULONGLONG(0);
  reason_ = 0u;
  out_bid_unit_price_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderBookSummary::~OrderBookSummary() {
  SharedDtor();
}

void OrderBookSummary::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete order_book_;
  }
}

void OrderBookSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderBookSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderBookSummary_descriptor_;
}

const OrderBookSummary& OrderBookSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

OrderBookSummary* OrderBookSummary::default_instance_ = NULL;

OrderBookSummary* OrderBookSummary::New() const {
  return new OrderBookSummary;
}

void OrderBookSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    order_book_id_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
    if (has_order_book()) {
      if (order_book_ != NULL) order_book_->::bnet::protocol::exchange::OrderBook::Clear();
    }
    amount_ = GOOGLE_ULONGLONG(0);
    best_offer_price_ = GOOGLE_ULONGLONG(0);
    best_bid_price_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0;
    created_time_ = GOOGLE_ULONGLONG(0);
    active_time_ = GOOGLE_ULONGLONG(0);
    closed_time_ = GOOGLE_ULONGLONG(0);
    reason_ = 0u;
    out_bid_unit_price_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderBookSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order_book_id;
        break;
      }
      
      // required uint64 order_book_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_book_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // required uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_order_book;
        break;
      }
      
      // optional .bnet.protocol.exchange.OrderBook order_book = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_book:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_book()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }
      
      // optional uint64 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_best_offer_price;
        break;
      }
      
      // optional uint64 best_offer_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_offer_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &best_offer_price_)));
          set_has_best_offer_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_best_bid_price;
        break;
      }
      
      // optional uint64 best_bid_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &best_bid_price_)));
          set_has_best_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_end_time;
        break;
      }
      
      // optional uint64 end_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }
      
      // optional int32 status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_created_time;
        break;
      }
      
      // optional uint64 created_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &created_time_)));
          set_has_created_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_active_time;
        break;
      }
      
      // optional uint64 active_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_closed_time;
        break;
      }
      
      // optional uint64 closed_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &closed_time_)));
          set_has_closed_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_out_bid_unit_price;
        break;
      }
      
      // optional uint64 out_bid_unit_price = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bid_unit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_bid_unit_price_)));
          set_has_out_bid_unit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderBookSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required uint64 order_book_id = 2;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->order_book_id(), output);
  }
  
  // required uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }
  
  // optional .bnet.protocol.exchange.OrderBook order_book = 4;
  if (has_order_book()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->order_book(), output);
  }
  
  // optional uint64 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount(), output);
  }
  
  // optional uint64 best_offer_price = 6;
  if (has_best_offer_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->best_offer_price(), output);
  }
  
  // optional uint64 best_bid_price = 7;
  if (has_best_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->best_bid_price(), output);
  }
  
  // optional uint64 end_time = 8;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->end_time(), output);
  }
  
  // optional int32 status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->status(), output);
  }
  
  // optional uint64 created_time = 10;
  if (has_created_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->created_time(), output);
  }
  
  // optional uint64 active_time = 11;
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->active_time(), output);
  }
  
  // optional uint64 closed_time = 12;
  if (has_closed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->closed_time(), output);
  }
  
  // optional uint32 reason = 13;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->reason(), output);
  }
  
  // optional uint64 out_bid_unit_price = 14;
  if (has_out_bid_unit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->out_bid_unit_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderBookSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required uint64 order_book_id = 2;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->order_book_id(), target);
  }
  
  // required uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }
  
  // optional .bnet.protocol.exchange.OrderBook order_book = 4;
  if (has_order_book()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->order_book(), target);
  }
  
  // optional uint64 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount(), target);
  }
  
  // optional uint64 best_offer_price = 6;
  if (has_best_offer_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->best_offer_price(), target);
  }
  
  // optional uint64 best_bid_price = 7;
  if (has_best_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->best_bid_price(), target);
  }
  
  // optional uint64 end_time = 8;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->end_time(), target);
  }
  
  // optional int32 status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->status(), target);
  }
  
  // optional uint64 created_time = 10;
  if (has_created_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->created_time(), target);
  }
  
  // optional uint64 active_time = 11;
  if (has_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->active_time(), target);
  }
  
  // optional uint64 closed_time = 12;
  if (has_closed_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->closed_time(), target);
  }
  
  // optional uint32 reason = 13;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->reason(), target);
  }
  
  // optional uint64 out_bid_unit_price = 14;
  if (has_out_bid_unit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->out_bid_unit_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderBookSummary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required uint64 order_book_id = 2;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
    // required uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
    // optional .bnet.protocol.exchange.OrderBook order_book = 4;
    if (has_order_book()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_book());
    }
    
    // optional uint64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }
    
    // optional uint64 best_offer_price = 6;
    if (has_best_offer_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->best_offer_price());
    }
    
    // optional uint64 best_bid_price = 7;
    if (has_best_bid_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->best_bid_price());
    }
    
    // optional uint64 end_time = 8;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint64 created_time = 10;
    if (has_created_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->created_time());
    }
    
    // optional uint64 active_time = 11;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_time());
    }
    
    // optional uint64 closed_time = 12;
    if (has_closed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->closed_time());
    }
    
    // optional uint32 reason = 13;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional uint64 out_bid_unit_price = 14;
    if (has_out_bid_unit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_bid_unit_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderBookSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderBookSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderBookSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderBookSummary::MergeFrom(const OrderBookSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_order_book()) {
      mutable_order_book()->::bnet::protocol::exchange::OrderBook::MergeFrom(from.order_book());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_best_offer_price()) {
      set_best_offer_price(from.best_offer_price());
    }
    if (from.has_best_bid_price()) {
      set_best_bid_price(from.best_bid_price());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_created_time()) {
      set_created_time(from.created_time());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
    if (from.has_closed_time()) {
      set_closed_time(from.closed_time());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_out_bid_unit_price()) {
      set_out_bid_unit_price(from.out_bid_unit_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderBookSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBookSummary::CopyFrom(const OrderBookSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBookSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_order_book()) {
    if (!this->order_book().IsInitialized()) return false;
  }
  return true;
}

void OrderBookSummary::Swap(OrderBookSummary* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(result_, other->result_);
    std::swap(order_book_, other->order_book_);
    std::swap(amount_, other->amount_);
    std::swap(best_offer_price_, other->best_offer_price_);
    std::swap(best_bid_price_, other->best_bid_price_);
    std::swap(end_time_, other->end_time_);
    std::swap(status_, other->status_);
    std::swap(created_time_, other->created_time_);
    std::swap(active_time_, other->active_time_);
    std::swap(closed_time_, other->closed_time_);
    std::swap(reason_, other->reason_);
    std::swap(out_bid_unit_price_, other->out_bid_unit_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderBookSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderBookSummary_descriptor_;
  metadata.reflection = OrderBookSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Order::kAmountFieldNumber;
const int Order::kStartTimeFieldNumber;
const int Order::kEndTimeFieldNumber;
const int Order::kAccountForMoneyFieldNumber;
const int Order::kAccountForItemFieldNumber;
const int Order::kBnetAccountFieldNumber;
const int Order::kGameAccountFieldNumber;
const int Order::kToonFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Order::InitAsDefaultInstance() {
  account_for_money_ = const_cast< ::bnet::protocol::exchange::BlobFrom*>(&::bnet::protocol::exchange::BlobFrom::default_instance());
  account_for_item_ = const_cast< ::bnet::protocol::exchange::BlobFrom*>(&::bnet::protocol::exchange::BlobFrom::default_instance());
  bnet_account_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  toon_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

Order::Order(const Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Order::SharedCtor() {
  _cached_size_ = 0;
  amount_ = 0u;
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  account_for_money_ = NULL;
  account_for_item_ = NULL;
  bnet_account_ = NULL;
  game_account_ = NULL;
  toon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Order::~Order() {
  SharedDtor();
}

void Order::SharedDtor() {
  if (this != default_instance_) {
    delete account_for_money_;
    delete account_for_item_;
    delete bnet_account_;
    delete game_account_;
    delete toon_;
  }
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New() const {
  return new Order;
}

void Order::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amount_ = 0u;
    start_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    if (has_account_for_money()) {
      if (account_for_money_ != NULL) account_for_money_->::bnet::protocol::exchange::BlobFrom::Clear();
    }
    if (has_account_for_item()) {
      if (account_for_item_ != NULL) account_for_item_->::bnet::protocol::exchange::BlobFrom::Clear();
    }
    if (has_bnet_account()) {
      if (bnet_account_ != NULL) bnet_account_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account()) {
      if (game_account_ != NULL) game_account_->::bnet::protocol::EntityId::Clear();
    }
    if (has_toon()) {
      if (toon_ != NULL) toon_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }
      
      // optional uint64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }
      
      // optional uint64 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account_for_money;
        break;
      }
      
      // optional .bnet.protocol.exchange.BlobFrom account_for_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_for_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_for_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account_for_item;
        break;
      }
      
      // optional .bnet.protocol.exchange.BlobFrom account_for_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_for_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_for_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bnet_account;
        break;
      }
      
      // optional .bnet.protocol.EntityId bnet_account = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_game_account;
        break;
      }
      
      // optional .bnet.protocol.EntityId game_account = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_toon;
        break;
      }
      
      // optional .bnet.protocol.EntityId toon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->amount(), output);
  }
  
  // optional uint64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_time(), output);
  }
  
  // optional uint64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_time(), output);
  }
  
  // optional .bnet.protocol.exchange.BlobFrom account_for_money = 4;
  if (has_account_for_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->account_for_money(), output);
  }
  
  // optional .bnet.protocol.exchange.BlobFrom account_for_item = 5;
  if (has_account_for_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->account_for_item(), output);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 6;
  if (has_bnet_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bnet_account(), output);
  }
  
  // optional .bnet.protocol.EntityId game_account = 7;
  if (has_game_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->game_account(), output);
  }
  
  // optional .bnet.protocol.EntityId toon = 8;
  if (has_toon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->toon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 amount = 1;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->amount(), target);
  }
  
  // optional uint64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_time(), target);
  }
  
  // optional uint64 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_time(), target);
  }
  
  // optional .bnet.protocol.exchange.BlobFrom account_for_money = 4;
  if (has_account_for_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->account_for_money(), target);
  }
  
  // optional .bnet.protocol.exchange.BlobFrom account_for_item = 5;
  if (has_account_for_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->account_for_item(), target);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 6;
  if (has_bnet_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bnet_account(), target);
  }
  
  // optional .bnet.protocol.EntityId game_account = 7;
  if (has_game_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->game_account(), target);
  }
  
  // optional .bnet.protocol.EntityId toon = 8;
  if (has_toon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->toon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount());
    }
    
    // optional uint64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }
    
    // optional uint64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }
    
    // optional .bnet.protocol.exchange.BlobFrom account_for_money = 4;
    if (has_account_for_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_for_money());
    }
    
    // optional .bnet.protocol.exchange.BlobFrom account_for_item = 5;
    if (has_account_for_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_for_item());
    }
    
    // optional .bnet.protocol.EntityId bnet_account = 6;
    if (has_bnet_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account());
    }
    
    // optional .bnet.protocol.EntityId game_account = 7;
    if (has_game_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account());
    }
    
    // optional .bnet.protocol.EntityId toon = 8;
    if (has_toon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_account_for_money()) {
      mutable_account_for_money()->::bnet::protocol::exchange::BlobFrom::MergeFrom(from.account_for_money());
    }
    if (from.has_account_for_item()) {
      mutable_account_for_item()->::bnet::protocol::exchange::BlobFrom::MergeFrom(from.account_for_item());
    }
    if (from.has_bnet_account()) {
      mutable_bnet_account()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account());
    }
    if (from.has_game_account()) {
      mutable_game_account()->::bnet::protocol::EntityId::MergeFrom(from.game_account());
    }
    if (from.has_toon()) {
      mutable_toon()->::bnet::protocol::EntityId::MergeFrom(from.toon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_account_for_money()) {
    if (!this->account_for_money().IsInitialized()) return false;
  }
  if (has_account_for_item()) {
    if (!this->account_for_item().IsInitialized()) return false;
  }
  if (has_bnet_account()) {
    if (!this->bnet_account().IsInitialized()) return false;
  }
  if (has_game_account()) {
    if (!this->game_account().IsInitialized()) return false;
  }
  if (has_toon()) {
    if (!this->toon().IsInitialized()) return false;
  }
  return true;
}

void Order::Swap(Order* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(account_for_money_, other->account_for_money_);
    std::swap(account_for_item_, other->account_for_item_);
    std::swap(bnet_account_, other->bnet_account_);
    std::swap(game_account_, other->game_account_);
    std::swap(toon_, other->toon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Extension::kPartitionIdFieldNumber;
const int Extension::kOrderBookIdFieldNumber;
const int Extension::kOrderIdFieldNumber;
const int Extension::kFilledAmountFieldNumber;
const int Extension::kOrderStatusFieldNumber;
const int Extension::kAuthorizedTimeFieldNumber;
const int Extension::kCreatedTimeFieldNumber;
const int Extension::kClosedTimeFieldNumber;
const int Extension::kReasonFieldNumber;
const int Extension::kOrderBookFieldNumber;
const int Extension::kOrderBookStatusFieldNumber;
const int Extension::kMoneyToClaimFieldNumber;
const int Extension::kItemsToClaimFieldNumber;
#endif  // !_MSC_VER

Extension::Extension()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Extension::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  order_book_ = const_cast< ::bnet::protocol::exchange::OrderBook*>(&::bnet::protocol::exchange::OrderBook::default_instance());
}

Extension::Extension(const Extension& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Extension::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  order_id_ = GOOGLE_ULONGLONG(0);
  filled_amount_ = GOOGLE_ULONGLONG(0);
  order_status_ = 0;
  authorized_time_ = GOOGLE_ULONGLONG(0);
  created_time_ = GOOGLE_ULONGLONG(0);
  closed_time_ = GOOGLE_ULONGLONG(0);
  reason_ = 0u;
  order_book_ = NULL;
  order_book_status_ = GOOGLE_ULONGLONG(0);
  money_to_claim_ = GOOGLE_ULONGLONG(0);
  items_to_claim_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Extension::~Extension() {
  SharedDtor();
}

void Extension::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete order_book_;
  }
}

void Extension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extension::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extension_descriptor_;
}

const Extension& Extension::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

Extension* Extension::default_instance_ = NULL;

Extension* Extension::New() const {
  return new Extension;
}

void Extension::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    order_book_id_ = GOOGLE_ULONGLONG(0);
    order_id_ = GOOGLE_ULONGLONG(0);
    filled_amount_ = GOOGLE_ULONGLONG(0);
    order_status_ = 0;
    authorized_time_ = GOOGLE_ULONGLONG(0);
    created_time_ = GOOGLE_ULONGLONG(0);
    closed_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reason_ = 0u;
    if (has_order_book()) {
      if (order_book_ != NULL) order_book_->::bnet::protocol::exchange::OrderBook::Clear();
    }
    order_book_status_ = GOOGLE_ULONGLONG(0);
    money_to_claim_ = GOOGLE_ULONGLONG(0);
    items_to_claim_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Extension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order_book_id;
        break;
      }
      
      // required uint64 order_book_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_book_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order_id;
        break;
      }
      
      // required uint64 order_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filled_amount;
        break;
      }
      
      // optional uint64 filled_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filled_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filled_amount_)));
          set_has_filled_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_order_status;
        break;
      }
      
      // optional int32 order_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_status_)));
          set_has_order_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_authorized_time;
        break;
      }
      
      // optional uint64 authorized_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_authorized_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &authorized_time_)));
          set_has_authorized_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_created_time;
        break;
      }
      
      // optional uint64 created_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &created_time_)));
          set_has_created_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_closed_time;
        break;
      }
      
      // optional uint64 closed_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &closed_time_)));
          set_has_closed_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_order_book;
        break;
      }
      
      // optional .bnet.protocol.exchange.OrderBook order_book = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_book:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_book()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_order_book_status;
        break;
      }
      
      // optional uint64 order_book_status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_book_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_status_)));
          set_has_order_book_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_money_to_claim;
        break;
      }
      
      // optional uint64 money_to_claim = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_to_claim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_to_claim_)));
          set_has_money_to_claim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_items_to_claim;
        break;
      }
      
      // optional uint64 items_to_claim = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items_to_claim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &items_to_claim_)));
          set_has_items_to_claim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Extension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required uint64 order_book_id = 2;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->order_book_id(), output);
  }
  
  // required uint64 order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->order_id(), output);
  }
  
  // optional uint64 filled_amount = 4;
  if (has_filled_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->filled_amount(), output);
  }
  
  // optional int32 order_status = 5;
  if (has_order_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->order_status(), output);
  }
  
  // optional uint64 authorized_time = 6;
  if (has_authorized_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->authorized_time(), output);
  }
  
  // optional uint64 created_time = 7;
  if (has_created_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->created_time(), output);
  }
  
  // optional uint64 closed_time = 8;
  if (has_closed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->closed_time(), output);
  }
  
  // optional uint32 reason = 9;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reason(), output);
  }
  
  // optional .bnet.protocol.exchange.OrderBook order_book = 10;
  if (has_order_book()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->order_book(), output);
  }
  
  // optional uint64 order_book_status = 11;
  if (has_order_book_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->order_book_status(), output);
  }
  
  // optional uint64 money_to_claim = 12;
  if (has_money_to_claim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->money_to_claim(), output);
  }
  
  // optional uint64 items_to_claim = 13;
  if (has_items_to_claim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->items_to_claim(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Extension::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required uint64 order_book_id = 2;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->order_book_id(), target);
  }
  
  // required uint64 order_id = 3;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->order_id(), target);
  }
  
  // optional uint64 filled_amount = 4;
  if (has_filled_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->filled_amount(), target);
  }
  
  // optional int32 order_status = 5;
  if (has_order_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->order_status(), target);
  }
  
  // optional uint64 authorized_time = 6;
  if (has_authorized_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->authorized_time(), target);
  }
  
  // optional uint64 created_time = 7;
  if (has_created_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->created_time(), target);
  }
  
  // optional uint64 closed_time = 8;
  if (has_closed_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->closed_time(), target);
  }
  
  // optional uint32 reason = 9;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reason(), target);
  }
  
  // optional .bnet.protocol.exchange.OrderBook order_book = 10;
  if (has_order_book()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->order_book(), target);
  }
  
  // optional uint64 order_book_status = 11;
  if (has_order_book_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->order_book_status(), target);
  }
  
  // optional uint64 money_to_claim = 12;
  if (has_money_to_claim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->money_to_claim(), target);
  }
  
  // optional uint64 items_to_claim = 13;
  if (has_items_to_claim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->items_to_claim(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Extension::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required uint64 order_book_id = 2;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
    // required uint64 order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }
    
    // optional uint64 filled_amount = 4;
    if (has_filled_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filled_amount());
    }
    
    // optional int32 order_status = 5;
    if (has_order_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_status());
    }
    
    // optional uint64 authorized_time = 6;
    if (has_authorized_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->authorized_time());
    }
    
    // optional uint64 created_time = 7;
    if (has_created_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->created_time());
    }
    
    // optional uint64 closed_time = 8;
    if (has_closed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->closed_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 reason = 9;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional .bnet.protocol.exchange.OrderBook order_book = 10;
    if (has_order_book()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_book());
    }
    
    // optional uint64 order_book_status = 11;
    if (has_order_book_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_status());
    }
    
    // optional uint64 money_to_claim = 12;
    if (has_money_to_claim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money_to_claim());
    }
    
    // optional uint64 items_to_claim = 13;
    if (has_items_to_claim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->items_to_claim());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extension::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Extension* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Extension*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Extension::MergeFrom(const Extension& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_filled_amount()) {
      set_filled_amount(from.filled_amount());
    }
    if (from.has_order_status()) {
      set_order_status(from.order_status());
    }
    if (from.has_authorized_time()) {
      set_authorized_time(from.authorized_time());
    }
    if (from.has_created_time()) {
      set_created_time(from.created_time());
    }
    if (from.has_closed_time()) {
      set_closed_time(from.closed_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_order_book()) {
      mutable_order_book()->::bnet::protocol::exchange::OrderBook::MergeFrom(from.order_book());
    }
    if (from.has_order_book_status()) {
      set_order_book_status(from.order_book_status());
    }
    if (from.has_money_to_claim()) {
      set_money_to_claim(from.money_to_claim());
    }
    if (from.has_items_to_claim()) {
      set_items_to_claim(from.items_to_claim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Extension::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extension::CopyFrom(const Extension& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extension::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_order_book()) {
    if (!this->order_book().IsInitialized()) return false;
  }
  return true;
}

void Extension::Swap(Extension* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(filled_amount_, other->filled_amount_);
    std::swap(order_status_, other->order_status_);
    std::swap(authorized_time_, other->authorized_time_);
    std::swap(created_time_, other->created_time_);
    std::swap(closed_time_, other->closed_time_);
    std::swap(reason_, other->reason_);
    std::swap(order_book_, other->order_book_);
    std::swap(order_book_status_, other->order_book_status_);
    std::swap(money_to_claim_, other->money_to_claim_);
    std::swap(items_to_claim_, other->items_to_claim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Extension::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extension_descriptor_;
  metadata.reflection = Extension_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Offer::kOrderFieldNumber;
const int Offer::kTradeNowPriceFieldNumber;
const int Offer::kReservePriceFieldNumber;
const int Offer::kOutBidPriceFieldNumber;
#endif  // !_MSC_VER

Offer::Offer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer::InitAsDefaultInstance() {
  order_ = const_cast< ::bnet::protocol::exchange::Order*>(&::bnet::protocol::exchange::Order::default_instance());
}

Offer::Offer(const Offer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer::SharedCtor() {
  _cached_size_ = 0;
  order_ = NULL;
  trade_now_price_ = GOOGLE_ULONGLONG(0);
  reserve_price_ = GOOGLE_ULONGLONG(0);
  out_bid_price_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer::~Offer() {
  SharedDtor();
}

void Offer::SharedDtor() {
  if (this != default_instance_) {
    delete order_;
  }
}

void Offer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_descriptor_;
}

const Offer& Offer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

Offer* Offer::default_instance_ = NULL;

Offer* Offer::New() const {
  return new Offer;
}

void Offer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order()) {
      if (order_ != NULL) order_->::bnet::protocol::exchange::Order::Clear();
    }
    trade_now_price_ = GOOGLE_ULONGLONG(0);
    reserve_price_ = GOOGLE_ULONGLONG(0);
    out_bid_price_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.Order order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trade_now_price;
        break;
      }
      
      // optional uint64 trade_now_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_now_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trade_now_price_)));
          set_has_trade_now_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reserve_price;
        break;
      }
      
      // optional uint64 reserve_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserve_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reserve_price_)));
          set_has_reserve_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_out_bid_price;
        break;
      }
      
      // optional uint64 out_bid_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &out_bid_price_)));
          set_has_out_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.Order order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order(), output);
  }
  
  // optional uint64 trade_now_price = 2;
  if (has_trade_now_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->trade_now_price(), output);
  }
  
  // optional uint64 reserve_price = 3;
  if (has_reserve_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->reserve_price(), output);
  }
  
  // optional uint64 out_bid_price = 4;
  if (has_out_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->out_bid_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.Order order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order(), target);
  }
  
  // optional uint64 trade_now_price = 2;
  if (has_trade_now_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->trade_now_price(), target);
  }
  
  // optional uint64 reserve_price = 3;
  if (has_reserve_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->reserve_price(), target);
  }
  
  // optional uint64 out_bid_price = 4;
  if (has_out_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->out_bid_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.Order order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }
    
    // optional uint64 trade_now_price = 2;
    if (has_trade_now_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trade_now_price());
    }
    
    // optional uint64 reserve_price = 3;
    if (has_reserve_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reserve_price());
    }
    
    // optional uint64 out_bid_price = 4;
    if (has_out_bid_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->out_bid_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer::MergeFrom(const Offer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      mutable_order()->::bnet::protocol::exchange::Order::MergeFrom(from.order());
    }
    if (from.has_trade_now_price()) {
      set_trade_now_price(from.trade_now_price());
    }
    if (from.has_reserve_price()) {
      set_reserve_price(from.reserve_price());
    }
    if (from.has_out_bid_price()) {
      set_out_bid_price(from.out_bid_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer::CopyFrom(const Offer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_order()) {
    if (!this->order().IsInitialized()) return false;
  }
  return true;
}

void Offer::Swap(Offer* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(trade_now_price_, other->trade_now_price_);
    std::swap(reserve_price_, other->reserve_price_);
    std::swap(out_bid_price_, other->out_bid_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_descriptor_;
  metadata.reflection = Offer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferExtended::kOfferFieldNumber;
const int OfferExtended::kExtensionFieldNumber;
const int OfferExtended::kCurrentWinningPriceFieldNumber;
#endif  // !_MSC_VER

OfferExtended::OfferExtended()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferExtended::InitAsDefaultInstance() {
  offer_ = const_cast< ::bnet::protocol::exchange::Offer*>(&::bnet::protocol::exchange::Offer::default_instance());
  extension_ = const_cast< ::bnet::protocol::exchange::Extension*>(&::bnet::protocol::exchange::Extension::default_instance());
}

OfferExtended::OfferExtended(const OfferExtended& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferExtended::SharedCtor() {
  _cached_size_ = 0;
  offer_ = NULL;
  extension_ = NULL;
  current_winning_price_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferExtended::~OfferExtended() {
  SharedDtor();
}

void OfferExtended::SharedDtor() {
  if (this != default_instance_) {
    delete offer_;
    delete extension_;
  }
}

void OfferExtended::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferExtended::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferExtended_descriptor_;
}

const OfferExtended& OfferExtended::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

OfferExtended* OfferExtended::default_instance_ = NULL;

OfferExtended* OfferExtended::New() const {
  return new OfferExtended;
}

void OfferExtended::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_offer()) {
      if (offer_ != NULL) offer_->::bnet::protocol::exchange::Offer::Clear();
    }
    if (has_extension()) {
      if (extension_ != NULL) extension_->::bnet::protocol::exchange::Extension::Clear();
    }
    current_winning_price_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferExtended::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.Offer offer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extension;
        break;
      }
      
      // required .bnet.protocol.exchange.Extension extension = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_winning_price;
        break;
      }
      
      // optional uint64 current_winning_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_winning_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_winning_price_)));
          set_has_current_winning_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferExtended::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.Offer offer = 1;
  if (has_offer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offer(), output);
  }
  
  // required .bnet.protocol.exchange.Extension extension = 2;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extension(), output);
  }
  
  // optional uint64 current_winning_price = 3;
  if (has_current_winning_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->current_winning_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferExtended::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.Offer offer = 1;
  if (has_offer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offer(), target);
  }
  
  // required .bnet.protocol.exchange.Extension extension = 2;
  if (has_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extension(), target);
  }
  
  // optional uint64 current_winning_price = 3;
  if (has_current_winning_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->current_winning_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferExtended::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.Offer offer = 1;
    if (has_offer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offer());
    }
    
    // required .bnet.protocol.exchange.Extension extension = 2;
    if (has_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extension());
    }
    
    // optional uint64 current_winning_price = 3;
    if (has_current_winning_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_winning_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferExtended::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferExtended* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferExtended*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferExtended::MergeFrom(const OfferExtended& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offer()) {
      mutable_offer()->::bnet::protocol::exchange::Offer::MergeFrom(from.offer());
    }
    if (from.has_extension()) {
      mutable_extension()->::bnet::protocol::exchange::Extension::MergeFrom(from.extension());
    }
    if (from.has_current_winning_price()) {
      set_current_winning_price(from.current_winning_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferExtended::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferExtended::CopyFrom(const OfferExtended& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferExtended::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_offer()) {
    if (!this->offer().IsInitialized()) return false;
  }
  if (has_extension()) {
    if (!this->extension().IsInitialized()) return false;
  }
  return true;
}

void OfferExtended::Swap(OfferExtended* other) {
  if (other != this) {
    std::swap(offer_, other->offer_);
    std::swap(extension_, other->extension_);
    std::swap(current_winning_price_, other->current_winning_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferExtended::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferExtended_descriptor_;
  metadata.reflection = OfferExtended_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferCreation::kOfferFieldNumber;
const int OfferCreation::kAuctionDurationFieldNumber;
const int OfferCreation::kAuctionStartDelayFieldNumber;
const int OfferCreation::kBillingAddressFieldNumber;
#endif  // !_MSC_VER

OfferCreation::OfferCreation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferCreation::InitAsDefaultInstance() {
  offer_ = const_cast< ::bnet::protocol::exchange::Offer*>(&::bnet::protocol::exchange::Offer::default_instance());
  billing_address_ = const_cast< ::bnet::protocol::exchange::BillingAddress*>(&::bnet::protocol::exchange::BillingAddress::default_instance());
}

OfferCreation::OfferCreation(const OfferCreation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferCreation::SharedCtor() {
  _cached_size_ = 0;
  offer_ = NULL;
  auction_duration_ = GOOGLE_ULONGLONG(0);
  auction_start_delay_ = GOOGLE_ULONGLONG(0);
  billing_address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferCreation::~OfferCreation() {
  SharedDtor();
}

void OfferCreation::SharedDtor() {
  if (this != default_instance_) {
    delete offer_;
    delete billing_address_;
  }
}

void OfferCreation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferCreation_descriptor_;
}

const OfferCreation& OfferCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

OfferCreation* OfferCreation::default_instance_ = NULL;

OfferCreation* OfferCreation::New() const {
  return new OfferCreation;
}

void OfferCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_offer()) {
      if (offer_ != NULL) offer_->::bnet::protocol::exchange::Offer::Clear();
    }
    auction_duration_ = GOOGLE_ULONGLONG(0);
    auction_start_delay_ = GOOGLE_ULONGLONG(0);
    if (has_billing_address()) {
      if (billing_address_ != NULL) billing_address_->::bnet::protocol::exchange::BillingAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.Offer offer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auction_duration;
        break;
      }
      
      // optional uint64 auction_duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auction_duration_)));
          set_has_auction_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auction_start_delay;
        break;
      }
      
      // optional uint64 auction_start_delay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auction_start_delay_)));
          set_has_auction_start_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_billing_address;
        break;
      }
      
      // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billing_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_billing_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.Offer offer = 1;
  if (has_offer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offer(), output);
  }
  
  // optional uint64 auction_duration = 2;
  if (has_auction_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->auction_duration(), output);
  }
  
  // optional uint64 auction_start_delay = 3;
  if (has_auction_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->auction_start_delay(), output);
  }
  
  // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
  if (has_billing_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->billing_address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.Offer offer = 1;
  if (has_offer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offer(), target);
  }
  
  // optional uint64 auction_duration = 2;
  if (has_auction_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->auction_duration(), target);
  }
  
  // optional uint64 auction_start_delay = 3;
  if (has_auction_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->auction_start_delay(), target);
  }
  
  // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
  if (has_billing_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->billing_address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.Offer offer = 1;
    if (has_offer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offer());
    }
    
    // optional uint64 auction_duration = 2;
    if (has_auction_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auction_duration());
    }
    
    // optional uint64 auction_start_delay = 3;
    if (has_auction_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auction_start_delay());
    }
    
    // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
    if (has_billing_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->billing_address());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferCreation::MergeFrom(const OfferCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offer()) {
      mutable_offer()->::bnet::protocol::exchange::Offer::MergeFrom(from.offer());
    }
    if (from.has_auction_duration()) {
      set_auction_duration(from.auction_duration());
    }
    if (from.has_auction_start_delay()) {
      set_auction_start_delay(from.auction_start_delay());
    }
    if (from.has_billing_address()) {
      mutable_billing_address()->::bnet::protocol::exchange::BillingAddress::MergeFrom(from.billing_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferCreation::CopyFrom(const OfferCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_offer()) {
    if (!this->offer().IsInitialized()) return false;
  }
  if (has_billing_address()) {
    if (!this->billing_address().IsInitialized()) return false;
  }
  return true;
}

void OfferCreation::Swap(OfferCreation* other) {
  if (other != this) {
    std::swap(offer_, other->offer_);
    std::swap(auction_duration_, other->auction_duration_);
    std::swap(auction_start_delay_, other->auction_start_delay_);
    std::swap(billing_address_, other->billing_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferCreation_descriptor_;
  metadata.reflection = OfferCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bid::kOrderFieldNumber;
const int Bid::kCurrentUnitPriceFieldNumber;
const int Bid::kMaxUnitPriceFieldNumber;
#endif  // !_MSC_VER

Bid::Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bid::InitAsDefaultInstance() {
  order_ = const_cast< ::bnet::protocol::exchange::Order*>(&::bnet::protocol::exchange::Order::default_instance());
}

Bid::Bid(const Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bid::SharedCtor() {
  _cached_size_ = 0;
  order_ = NULL;
  current_unit_price_ = GOOGLE_ULONGLONG(0);
  max_unit_price_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bid::~Bid() {
  SharedDtor();
}

void Bid::SharedDtor() {
  if (this != default_instance_) {
    delete order_;
  }
}

void Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bid_descriptor_;
}

const Bid& Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

Bid* Bid::default_instance_ = NULL;

Bid* Bid::New() const {
  return new Bid;
}

void Bid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order()) {
      if (order_ != NULL) order_->::bnet::protocol::exchange::Order::Clear();
    }
    current_unit_price_ = GOOGLE_ULONGLONG(0);
    max_unit_price_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.Order order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_unit_price;
        break;
      }
      
      // optional uint64 current_unit_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_unit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_unit_price_)));
          set_has_current_unit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_unit_price;
        break;
      }
      
      // optional uint64 max_unit_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_unit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_unit_price_)));
          set_has_max_unit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.Order order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order(), output);
  }
  
  // optional uint64 current_unit_price = 2;
  if (has_current_unit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->current_unit_price(), output);
  }
  
  // optional uint64 max_unit_price = 3;
  if (has_max_unit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_unit_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.Order order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order(), target);
  }
  
  // optional uint64 current_unit_price = 2;
  if (has_current_unit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->current_unit_price(), target);
  }
  
  // optional uint64 max_unit_price = 3;
  if (has_max_unit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_unit_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.Order order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }
    
    // optional uint64 current_unit_price = 2;
    if (has_current_unit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_unit_price());
    }
    
    // optional uint64 max_unit_price = 3;
    if (has_max_unit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_unit_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bid::MergeFrom(const Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      mutable_order()->::bnet::protocol::exchange::Order::MergeFrom(from.order());
    }
    if (from.has_current_unit_price()) {
      set_current_unit_price(from.current_unit_price());
    }
    if (from.has_max_unit_price()) {
      set_max_unit_price(from.max_unit_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bid::CopyFrom(const Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_order()) {
    if (!this->order().IsInitialized()) return false;
  }
  return true;
}

void Bid::Swap(Bid* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(current_unit_price_, other->current_unit_price_);
    std::swap(max_unit_price_, other->max_unit_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bid_descriptor_;
  metadata.reflection = Bid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidExtended::kBidFieldNumber;
const int BidExtended::kExtensionFieldNumber;
const int BidExtended::kOfferOutBidPriceFieldNumber;
const int BidExtended::kOfferTradeNowPriceFieldNumber;
const int BidExtended::kOfferCurrentWinningPriceFieldNumber;
#endif  // !_MSC_VER

BidExtended::BidExtended()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidExtended::InitAsDefaultInstance() {
  bid_ = const_cast< ::bnet::protocol::exchange::Bid*>(&::bnet::protocol::exchange::Bid::default_instance());
  extension_ = const_cast< ::bnet::protocol::exchange::Extension*>(&::bnet::protocol::exchange::Extension::default_instance());
}

BidExtended::BidExtended(const BidExtended& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidExtended::SharedCtor() {
  _cached_size_ = 0;
  bid_ = NULL;
  extension_ = NULL;
  offer_out_bid_price_ = GOOGLE_ULONGLONG(0);
  offer_trade_now_price_ = GOOGLE_ULONGLONG(0);
  offer_current_winning_price_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidExtended::~BidExtended() {
  SharedDtor();
}

void BidExtended::SharedDtor() {
  if (this != default_instance_) {
    delete bid_;
    delete extension_;
  }
}

void BidExtended::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidExtended::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidExtended_descriptor_;
}

const BidExtended& BidExtended::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

BidExtended* BidExtended::default_instance_ = NULL;

BidExtended* BidExtended::New() const {
  return new BidExtended;
}

void BidExtended::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bid()) {
      if (bid_ != NULL) bid_->::bnet::protocol::exchange::Bid::Clear();
    }
    if (has_extension()) {
      if (extension_ != NULL) extension_->::bnet::protocol::exchange::Extension::Clear();
    }
    offer_out_bid_price_ = GOOGLE_ULONGLONG(0);
    offer_trade_now_price_ = GOOGLE_ULONGLONG(0);
    offer_current_winning_price_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidExtended::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.Bid bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extension;
        break;
      }
      
      // required .bnet.protocol.exchange.Extension extension = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offer_out_bid_price;
        break;
      }
      
      // optional uint64 offer_out_bid_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_out_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offer_out_bid_price_)));
          set_has_offer_out_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offer_trade_now_price;
        break;
      }
      
      // optional uint64 offer_trade_now_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_trade_now_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offer_trade_now_price_)));
          set_has_offer_trade_now_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offer_current_winning_price;
        break;
      }
      
      // optional uint64 offer_current_winning_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_current_winning_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offer_current_winning_price_)));
          set_has_offer_current_winning_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidExtended::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.Bid bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(), output);
  }
  
  // required .bnet.protocol.exchange.Extension extension = 2;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extension(), output);
  }
  
  // optional uint64 offer_out_bid_price = 3;
  if (has_offer_out_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offer_out_bid_price(), output);
  }
  
  // optional uint64 offer_trade_now_price = 4;
  if (has_offer_trade_now_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->offer_trade_now_price(), output);
  }
  
  // optional uint64 offer_current_winning_price = 5;
  if (has_offer_current_winning_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->offer_current_winning_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidExtended::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.Bid bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bid(), target);
  }
  
  // required .bnet.protocol.exchange.Extension extension = 2;
  if (has_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extension(), target);
  }
  
  // optional uint64 offer_out_bid_price = 3;
  if (has_offer_out_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offer_out_bid_price(), target);
  }
  
  // optional uint64 offer_trade_now_price = 4;
  if (has_offer_trade_now_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->offer_trade_now_price(), target);
  }
  
  // optional uint64 offer_current_winning_price = 5;
  if (has_offer_current_winning_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->offer_current_winning_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidExtended::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.Bid bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bid());
    }
    
    // required .bnet.protocol.exchange.Extension extension = 2;
    if (has_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extension());
    }
    
    // optional uint64 offer_out_bid_price = 3;
    if (has_offer_out_bid_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offer_out_bid_price());
    }
    
    // optional uint64 offer_trade_now_price = 4;
    if (has_offer_trade_now_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offer_trade_now_price());
    }
    
    // optional uint64 offer_current_winning_price = 5;
    if (has_offer_current_winning_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offer_current_winning_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidExtended::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidExtended* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidExtended*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidExtended::MergeFrom(const BidExtended& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      mutable_bid()->::bnet::protocol::exchange::Bid::MergeFrom(from.bid());
    }
    if (from.has_extension()) {
      mutable_extension()->::bnet::protocol::exchange::Extension::MergeFrom(from.extension());
    }
    if (from.has_offer_out_bid_price()) {
      set_offer_out_bid_price(from.offer_out_bid_price());
    }
    if (from.has_offer_trade_now_price()) {
      set_offer_trade_now_price(from.offer_trade_now_price());
    }
    if (from.has_offer_current_winning_price()) {
      set_offer_current_winning_price(from.offer_current_winning_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidExtended::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidExtended::CopyFrom(const BidExtended& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidExtended::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_bid()) {
    if (!this->bid().IsInitialized()) return false;
  }
  if (has_extension()) {
    if (!this->extension().IsInitialized()) return false;
  }
  return true;
}

void BidExtended::Swap(BidExtended* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(extension_, other->extension_);
    std::swap(offer_out_bid_price_, other->offer_out_bid_price_);
    std::swap(offer_trade_now_price_, other->offer_trade_now_price_);
    std::swap(offer_current_winning_price_, other->offer_current_winning_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidExtended::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidExtended_descriptor_;
  metadata.reflection = BidExtended_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidCreation::kBidFieldNumber;
const int BidCreation::kAuctionDurationFieldNumber;
const int BidCreation::kAuctionStartDelayFieldNumber;
const int BidCreation::kBillingAddressFieldNumber;
#endif  // !_MSC_VER

BidCreation::BidCreation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidCreation::InitAsDefaultInstance() {
  bid_ = const_cast< ::bnet::protocol::exchange::Bid*>(&::bnet::protocol::exchange::Bid::default_instance());
  billing_address_ = const_cast< ::bnet::protocol::exchange::BillingAddress*>(&::bnet::protocol::exchange::BillingAddress::default_instance());
}

BidCreation::BidCreation(const BidCreation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidCreation::SharedCtor() {
  _cached_size_ = 0;
  bid_ = NULL;
  auction_duration_ = GOOGLE_ULONGLONG(0);
  auction_start_delay_ = GOOGLE_ULONGLONG(0);
  billing_address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidCreation::~BidCreation() {
  SharedDtor();
}

void BidCreation::SharedDtor() {
  if (this != default_instance_) {
    delete bid_;
    delete billing_address_;
  }
}

void BidCreation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidCreation_descriptor_;
}

const BidCreation& BidCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

BidCreation* BidCreation::default_instance_ = NULL;

BidCreation* BidCreation::New() const {
  return new BidCreation;
}

void BidCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bid()) {
      if (bid_ != NULL) bid_->::bnet::protocol::exchange::Bid::Clear();
    }
    auction_duration_ = GOOGLE_ULONGLONG(0);
    auction_start_delay_ = GOOGLE_ULONGLONG(0);
    if (has_billing_address()) {
      if (billing_address_ != NULL) billing_address_->::bnet::protocol::exchange::BillingAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.Bid bid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auction_duration;
        break;
      }
      
      // optional uint64 auction_duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auction_duration_)));
          set_has_auction_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auction_start_delay;
        break;
      }
      
      // optional uint64 auction_start_delay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auction_start_delay_)));
          set_has_auction_start_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_billing_address;
        break;
      }
      
      // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billing_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_billing_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.Bid bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(), output);
  }
  
  // optional uint64 auction_duration = 2;
  if (has_auction_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->auction_duration(), output);
  }
  
  // optional uint64 auction_start_delay = 3;
  if (has_auction_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->auction_start_delay(), output);
  }
  
  // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
  if (has_billing_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->billing_address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.Bid bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bid(), target);
  }
  
  // optional uint64 auction_duration = 2;
  if (has_auction_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->auction_duration(), target);
  }
  
  // optional uint64 auction_start_delay = 3;
  if (has_auction_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->auction_start_delay(), target);
  }
  
  // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
  if (has_billing_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->billing_address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.Bid bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bid());
    }
    
    // optional uint64 auction_duration = 2;
    if (has_auction_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auction_duration());
    }
    
    // optional uint64 auction_start_delay = 3;
    if (has_auction_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auction_start_delay());
    }
    
    // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
    if (has_billing_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->billing_address());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidCreation::MergeFrom(const BidCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      mutable_bid()->::bnet::protocol::exchange::Bid::MergeFrom(from.bid());
    }
    if (from.has_auction_duration()) {
      set_auction_duration(from.auction_duration());
    }
    if (from.has_auction_start_delay()) {
      set_auction_start_delay(from.auction_start_delay());
    }
    if (from.has_billing_address()) {
      mutable_billing_address()->::bnet::protocol::exchange::BillingAddress::MergeFrom(from.billing_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidCreation::CopyFrom(const BidCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_bid()) {
    if (!this->bid().IsInitialized()) return false;
  }
  if (has_billing_address()) {
    if (!this->billing_address().IsInitialized()) return false;
  }
  return true;
}

void BidCreation::Swap(BidCreation* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(auction_duration_, other->auction_duration_);
    std::swap(auction_start_delay_, other->auction_start_delay_);
    std::swap(billing_address_, other->billing_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidCreation_descriptor_;
  metadata.reflection = BidCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFilterByOrderId::kMaxResultFieldNumber;
const int QueryFilterByOrderId::kRefOrderIdFieldNumber;
#endif  // !_MSC_VER

QueryFilterByOrderId::QueryFilterByOrderId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryFilterByOrderId::InitAsDefaultInstance() {
}

QueryFilterByOrderId::QueryFilterByOrderId(const QueryFilterByOrderId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFilterByOrderId::SharedCtor() {
  _cached_size_ = 0;
  max_result_ = 0u;
  ref_order_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFilterByOrderId::~QueryFilterByOrderId() {
  SharedDtor();
}

void QueryFilterByOrderId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryFilterByOrderId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFilterByOrderId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFilterByOrderId_descriptor_;
}

const QueryFilterByOrderId& QueryFilterByOrderId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

QueryFilterByOrderId* QueryFilterByOrderId::default_instance_ = NULL;

QueryFilterByOrderId* QueryFilterByOrderId::New() const {
  return new QueryFilterByOrderId;
}

void QueryFilterByOrderId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_result_ = 0u;
    ref_order_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFilterByOrderId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_result_)));
          set_has_max_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ref_order_id;
        break;
      }
      
      // optional uint64 ref_order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ref_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ref_order_id_)));
          set_has_ref_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFilterByOrderId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 max_result = 1;
  if (has_max_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_result(), output);
  }
  
  // optional uint64 ref_order_id = 2;
  if (has_ref_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ref_order_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryFilterByOrderId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 max_result = 1;
  if (has_max_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_result(), target);
  }
  
  // optional uint64 ref_order_id = 2;
  if (has_ref_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ref_order_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryFilterByOrderId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 max_result = 1;
    if (has_max_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_result());
    }
    
    // optional uint64 ref_order_id = 2;
    if (has_ref_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ref_order_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFilterByOrderId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFilterByOrderId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFilterByOrderId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFilterByOrderId::MergeFrom(const QueryFilterByOrderId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_result()) {
      set_max_result(from.max_result());
    }
    if (from.has_ref_order_id()) {
      set_ref_order_id(from.ref_order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFilterByOrderId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFilterByOrderId::CopyFrom(const QueryFilterByOrderId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFilterByOrderId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QueryFilterByOrderId::Swap(QueryFilterByOrderId* other) {
  if (other != this) {
    std::swap(max_result_, other->max_result_);
    std::swap(ref_order_id_, other->ref_order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFilterByOrderId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFilterByOrderId_descriptor_;
  metadata.reflection = QueryFilterByOrderId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFilterByCreatedTime::kMaxResultFieldNumber;
const int QueryFilterByCreatedTime::kRefCreatedTimeFieldNumber;
#endif  // !_MSC_VER

QueryFilterByCreatedTime::QueryFilterByCreatedTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryFilterByCreatedTime::InitAsDefaultInstance() {
}

QueryFilterByCreatedTime::QueryFilterByCreatedTime(const QueryFilterByCreatedTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFilterByCreatedTime::SharedCtor() {
  _cached_size_ = 0;
  max_result_ = 0u;
  ref_created_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFilterByCreatedTime::~QueryFilterByCreatedTime() {
  SharedDtor();
}

void QueryFilterByCreatedTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryFilterByCreatedTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFilterByCreatedTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFilterByCreatedTime_descriptor_;
}

const QueryFilterByCreatedTime& QueryFilterByCreatedTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

QueryFilterByCreatedTime* QueryFilterByCreatedTime::default_instance_ = NULL;

QueryFilterByCreatedTime* QueryFilterByCreatedTime::New() const {
  return new QueryFilterByCreatedTime;
}

void QueryFilterByCreatedTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_result_ = 0u;
    ref_created_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFilterByCreatedTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_result_)));
          set_has_max_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ref_created_time;
        break;
      }
      
      // optional uint64 ref_created_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ref_created_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ref_created_time_)));
          set_has_ref_created_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFilterByCreatedTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 max_result = 1;
  if (has_max_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_result(), output);
  }
  
  // optional uint64 ref_created_time = 2;
  if (has_ref_created_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ref_created_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryFilterByCreatedTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 max_result = 1;
  if (has_max_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_result(), target);
  }
  
  // optional uint64 ref_created_time = 2;
  if (has_ref_created_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ref_created_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryFilterByCreatedTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 max_result = 1;
    if (has_max_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_result());
    }
    
    // optional uint64 ref_created_time = 2;
    if (has_ref_created_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ref_created_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFilterByCreatedTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFilterByCreatedTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFilterByCreatedTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFilterByCreatedTime::MergeFrom(const QueryFilterByCreatedTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_result()) {
      set_max_result(from.max_result());
    }
    if (from.has_ref_created_time()) {
      set_ref_created_time(from.ref_created_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFilterByCreatedTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFilterByCreatedTime::CopyFrom(const QueryFilterByCreatedTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFilterByCreatedTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QueryFilterByCreatedTime::Swap(QueryFilterByCreatedTime* other) {
  if (other != this) {
    std::swap(max_result_, other->max_result_);
    std::swap(ref_created_time_, other->ref_created_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFilterByCreatedTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFilterByCreatedTime_descriptor_;
  metadata.reflection = QueryFilterByCreatedTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Settlement::kOrderBookIdFieldNumber;
const int Settlement::kMoneyAmountFieldNumber;
const int Settlement::kItemsAmountFieldNumber;
const int Settlement::kOfferSettleIdFieldNumber;
#endif  // !_MSC_VER

Settlement::Settlement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Settlement::InitAsDefaultInstance() {
}

Settlement::Settlement(const Settlement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Settlement::SharedCtor() {
  _cached_size_ = 0;
  order_book_id_ = GOOGLE_ULONGLONG(0);
  money_amount_ = GOOGLE_ULONGLONG(0);
  items_amount_ = GOOGLE_ULONGLONG(0);
  offer_settle_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Settlement::~Settlement() {
  SharedDtor();
}

void Settlement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Settlement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Settlement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Settlement_descriptor_;
}

const Settlement& Settlement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

Settlement* Settlement::default_instance_ = NULL;

Settlement* Settlement::New() const {
  return new Settlement;
}

void Settlement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_book_id_ = GOOGLE_ULONGLONG(0);
    money_amount_ = GOOGLE_ULONGLONG(0);
    items_amount_ = GOOGLE_ULONGLONG(0);
    offer_settle_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Settlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 order_book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_book_id_)));
          set_has_order_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money_amount;
        break;
      }
      
      // required uint64 money_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_amount_)));
          set_has_money_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_items_amount;
        break;
      }
      
      // required uint64 items_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &items_amount_)));
          set_has_items_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offer_settle_id;
        break;
      }
      
      // required uint64 offer_settle_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offer_settle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offer_settle_id_)));
          set_has_offer_settle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Settlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 order_book_id = 1;
  if (has_order_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_book_id(), output);
  }
  
  // required uint64 money_amount = 2;
  if (has_money_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->money_amount(), output);
  }
  
  // required uint64 items_amount = 3;
  if (has_items_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->items_amount(), output);
  }
  
  // required uint64 offer_settle_id = 4;
  if (has_offer_settle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->offer_settle_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Settlement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 order_book_id = 1;
  if (has_order_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_book_id(), target);
  }
  
  // required uint64 money_amount = 2;
  if (has_money_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->money_amount(), target);
  }
  
  // required uint64 items_amount = 3;
  if (has_items_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->items_amount(), target);
  }
  
  // required uint64 offer_settle_id = 4;
  if (has_offer_settle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->offer_settle_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Settlement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 order_book_id = 1;
    if (has_order_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_book_id());
    }
    
    // required uint64 money_amount = 2;
    if (has_money_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money_amount());
    }
    
    // required uint64 items_amount = 3;
    if (has_items_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->items_amount());
    }
    
    // required uint64 offer_settle_id = 4;
    if (has_offer_settle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offer_settle_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settlement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Settlement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Settlement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Settlement::MergeFrom(const Settlement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_book_id()) {
      set_order_book_id(from.order_book_id());
    }
    if (from.has_money_amount()) {
      set_money_amount(from.money_amount());
    }
    if (from.has_items_amount()) {
      set_items_amount(from.items_amount());
    }
    if (from.has_offer_settle_id()) {
      set_offer_settle_id(from.offer_settle_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Settlement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settlement::CopyFrom(const Settlement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settlement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Settlement::Swap(Settlement* other) {
  if (other != this) {
    std::swap(order_book_id_, other->order_book_id_);
    std::swap(money_amount_, other->money_amount_);
    std::swap(items_amount_, other->items_amount_);
    std::swap(offer_settle_id_, other->offer_settle_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Settlement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Settlement_descriptor_;
  metadata.reflection = Settlement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrencyConfig::kCurrencyFieldNumber;
const int CurrencyConfig::kTickSizeFieldNumber;
const int CurrencyConfig::kFlatOutbidIncrFieldNumber;
const int CurrencyConfig::kScaleOutbidIncrFieldNumber;
const int CurrencyConfig::kMinStartingUnitPriceFieldNumber;
const int CurrencyConfig::kMaxStartingUnitPriceFieldNumber;
const int CurrencyConfig::kMaxUnitPriceFieldNumber;
const int CurrencyConfig::kMaxTotalAmountFieldNumber;
const int CurrencyConfig::kBuyoutRuleFieldNumber;
#endif  // !_MSC_VER

CurrencyConfig::CurrencyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrencyConfig::InitAsDefaultInstance() {
}

CurrencyConfig::CurrencyConfig(const CurrencyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrencyConfig::SharedCtor() {
  _cached_size_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_size_ = GOOGLE_ULONGLONG(0);
  flat_outbid_incr_ = GOOGLE_ULONGLONG(0);
  scale_outbid_incr_ = GOOGLE_ULONGLONG(0);
  min_starting_unit_price_ = GOOGLE_ULONGLONG(0);
  max_starting_unit_price_ = GOOGLE_ULONGLONG(0);
  max_unit_price_ = GOOGLE_ULONGLONG(0);
  max_total_amount_ = GOOGLE_ULONGLONG(0);
  buyout_rule_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrencyConfig::~CurrencyConfig() {
  SharedDtor();
}

void CurrencyConfig::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (this != default_instance_) {
  }
}

void CurrencyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyConfig_descriptor_;
}

const CurrencyConfig& CurrencyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

CurrencyConfig* CurrencyConfig::default_instance_ = NULL;

CurrencyConfig* CurrencyConfig::New() const {
  return new CurrencyConfig;
}

void CurrencyConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    tick_size_ = GOOGLE_ULONGLONG(0);
    flat_outbid_incr_ = GOOGLE_ULONGLONG(0);
    scale_outbid_incr_ = GOOGLE_ULONGLONG(0);
    min_starting_unit_price_ = GOOGLE_ULONGLONG(0);
    max_starting_unit_price_ = GOOGLE_ULONGLONG(0);
    max_unit_price_ = GOOGLE_ULONGLONG(0);
    max_total_amount_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buyout_rule_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrencyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick_size;
        break;
      }
      
      // required uint64 tick_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tick_size_)));
          set_has_tick_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flat_outbid_incr;
        break;
      }
      
      // required uint64 flat_outbid_incr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flat_outbid_incr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flat_outbid_incr_)));
          set_has_flat_outbid_incr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scale_outbid_incr;
        break;
      }
      
      // required uint64 scale_outbid_incr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale_outbid_incr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scale_outbid_incr_)));
          set_has_scale_outbid_incr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_min_starting_unit_price;
        break;
      }
      
      // required uint64 min_starting_unit_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_starting_unit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_starting_unit_price_)));
          set_has_min_starting_unit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_starting_unit_price;
        break;
      }
      
      // required uint64 max_starting_unit_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_starting_unit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_starting_unit_price_)));
          set_has_max_starting_unit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_unit_price;
        break;
      }
      
      // required uint64 max_unit_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_unit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_unit_price_)));
          set_has_max_unit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_total_amount;
        break;
      }
      
      // required uint64 max_total_amount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_total_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_total_amount_)));
          set_has_max_total_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buyout_rule;
        break;
      }
      
      // required int32 buyout_rule = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyout_rule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyout_rule_)));
          set_has_buyout_rule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrencyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->currency(), output);
  }
  
  // required uint64 tick_size = 2;
  if (has_tick_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tick_size(), output);
  }
  
  // required uint64 flat_outbid_incr = 3;
  if (has_flat_outbid_incr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->flat_outbid_incr(), output);
  }
  
  // required uint64 scale_outbid_incr = 4;
  if (has_scale_outbid_incr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->scale_outbid_incr(), output);
  }
  
  // required uint64 min_starting_unit_price = 5;
  if (has_min_starting_unit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->min_starting_unit_price(), output);
  }
  
  // required uint64 max_starting_unit_price = 6;
  if (has_max_starting_unit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->max_starting_unit_price(), output);
  }
  
  // required uint64 max_unit_price = 7;
  if (has_max_unit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->max_unit_price(), output);
  }
  
  // required uint64 max_total_amount = 8;
  if (has_max_total_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->max_total_amount(), output);
  }
  
  // required int32 buyout_rule = 9;
  if (has_buyout_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buyout_rule(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrencyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->currency(), target);
  }
  
  // required uint64 tick_size = 2;
  if (has_tick_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tick_size(), target);
  }
  
  // required uint64 flat_outbid_incr = 3;
  if (has_flat_outbid_incr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->flat_outbid_incr(), target);
  }
  
  // required uint64 scale_outbid_incr = 4;
  if (has_scale_outbid_incr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->scale_outbid_incr(), target);
  }
  
  // required uint64 min_starting_unit_price = 5;
  if (has_min_starting_unit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->min_starting_unit_price(), target);
  }
  
  // required uint64 max_starting_unit_price = 6;
  if (has_max_starting_unit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->max_starting_unit_price(), target);
  }
  
  // required uint64 max_unit_price = 7;
  if (has_max_unit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->max_unit_price(), target);
  }
  
  // required uint64 max_total_amount = 8;
  if (has_max_total_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->max_total_amount(), target);
  }
  
  // required int32 buyout_rule = 9;
  if (has_buyout_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buyout_rule(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrencyConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string currency = 1;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }
    
    // required uint64 tick_size = 2;
    if (has_tick_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tick_size());
    }
    
    // required uint64 flat_outbid_incr = 3;
    if (has_flat_outbid_incr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flat_outbid_incr());
    }
    
    // required uint64 scale_outbid_incr = 4;
    if (has_scale_outbid_incr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scale_outbid_incr());
    }
    
    // required uint64 min_starting_unit_price = 5;
    if (has_min_starting_unit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_starting_unit_price());
    }
    
    // required uint64 max_starting_unit_price = 6;
    if (has_max_starting_unit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_starting_unit_price());
    }
    
    // required uint64 max_unit_price = 7;
    if (has_max_unit_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_unit_price());
    }
    
    // required uint64 max_total_amount = 8;
    if (has_max_total_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_total_amount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 buyout_rule = 9;
    if (has_buyout_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyout_rule());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrencyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrencyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrencyConfig::MergeFrom(const CurrencyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_tick_size()) {
      set_tick_size(from.tick_size());
    }
    if (from.has_flat_outbid_incr()) {
      set_flat_outbid_incr(from.flat_outbid_incr());
    }
    if (from.has_scale_outbid_incr()) {
      set_scale_outbid_incr(from.scale_outbid_incr());
    }
    if (from.has_min_starting_unit_price()) {
      set_min_starting_unit_price(from.min_starting_unit_price());
    }
    if (from.has_max_starting_unit_price()) {
      set_max_starting_unit_price(from.max_starting_unit_price());
    }
    if (from.has_max_unit_price()) {
      set_max_unit_price(from.max_unit_price());
    }
    if (from.has_max_total_amount()) {
      set_max_total_amount(from.max_total_amount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buyout_rule()) {
      set_buyout_rule(from.buyout_rule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrencyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyConfig::CopyFrom(const CurrencyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void CurrencyConfig::Swap(CurrencyConfig* other) {
  if (other != this) {
    std::swap(currency_, other->currency_);
    std::swap(tick_size_, other->tick_size_);
    std::swap(flat_outbid_incr_, other->flat_outbid_incr_);
    std::swap(scale_outbid_incr_, other->scale_outbid_incr_);
    std::swap(min_starting_unit_price_, other->min_starting_unit_price_);
    std::swap(max_starting_unit_price_, other->max_starting_unit_price_);
    std::swap(max_unit_price_, other->max_unit_price_);
    std::swap(max_total_amount_, other->max_total_amount_);
    std::swap(buyout_rule_, other->buyout_rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrencyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrencyConfig_descriptor_;
  metadata.reflection = CurrencyConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialistConfig::kSpecialistFieldNumber;
const int SpecialistConfig::kAuctionDurationsFieldNumber;
const int SpecialistConfig::kAuctionStartDelaysFieldNumber;
const int SpecialistConfig::kAntiSnipingExtensionDelayFieldNumber;
const int SpecialistConfig::kCurrencyConfigFieldNumber;
#endif  // !_MSC_VER

SpecialistConfig::SpecialistConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecialistConfig::InitAsDefaultInstance() {
}

SpecialistConfig::SpecialistConfig(const SpecialistConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecialistConfig::SharedCtor() {
  _cached_size_ = 0;
  specialist_ = 0;
  anti_sniping_extension_delay_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialistConfig::~SpecialistConfig() {
  SharedDtor();
}

void SpecialistConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialistConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialistConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialistConfig_descriptor_;
}

const SpecialistConfig& SpecialistConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

SpecialistConfig* SpecialistConfig::default_instance_ = NULL;

SpecialistConfig* SpecialistConfig::New() const {
  return new SpecialistConfig;
}

void SpecialistConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    specialist_ = 0;
    anti_sniping_extension_delay_ = GOOGLE_ULONGLONG(0);
  }
  auction_durations_.Clear();
  auction_start_delays_.Clear();
  currency_config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialistConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 specialist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialist_)));
          set_has_specialist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auction_durations;
        break;
      }
      
      // repeated uint64 auction_durations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_durations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_auction_durations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_auction_durations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auction_durations;
        if (input->ExpectTag(24)) goto parse_auction_start_delays;
        break;
      }
      
      // repeated uint64 auction_start_delays = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_start_delays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_auction_start_delays())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_auction_start_delays())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auction_start_delays;
        if (input->ExpectTag(32)) goto parse_anti_sniping_extension_delay;
        break;
      }
      
      // required uint64 anti_sniping_extension_delay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anti_sniping_extension_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &anti_sniping_extension_delay_)));
          set_has_anti_sniping_extension_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_currency_config;
        break;
      }
      
      // repeated .bnet.protocol.exchange.CurrencyConfig currency_config = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_currency_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_currency_config;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecialistConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 specialist = 1;
  if (has_specialist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->specialist(), output);
  }
  
  // repeated uint64 auction_durations = 2;
  for (int i = 0; i < this->auction_durations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->auction_durations(i), output);
  }
  
  // repeated uint64 auction_start_delays = 3;
  for (int i = 0; i < this->auction_start_delays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->auction_start_delays(i), output);
  }
  
  // required uint64 anti_sniping_extension_delay = 4;
  if (has_anti_sniping_extension_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->anti_sniping_extension_delay(), output);
  }
  
  // repeated .bnet.protocol.exchange.CurrencyConfig currency_config = 5;
  for (int i = 0; i < this->currency_config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->currency_config(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecialistConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 specialist = 1;
  if (has_specialist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->specialist(), target);
  }
  
  // repeated uint64 auction_durations = 2;
  for (int i = 0; i < this->auction_durations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->auction_durations(i), target);
  }
  
  // repeated uint64 auction_start_delays = 3;
  for (int i = 0; i < this->auction_start_delays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->auction_start_delays(i), target);
  }
  
  // required uint64 anti_sniping_extension_delay = 4;
  if (has_anti_sniping_extension_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->anti_sniping_extension_delay(), target);
  }
  
  // repeated .bnet.protocol.exchange.CurrencyConfig currency_config = 5;
  for (int i = 0; i < this->currency_config_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->currency_config(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecialistConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 specialist = 1;
    if (has_specialist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialist());
    }
    
    // required uint64 anti_sniping_extension_delay = 4;
    if (has_anti_sniping_extension_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->anti_sniping_extension_delay());
    }
    
  }
  // repeated uint64 auction_durations = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->auction_durations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->auction_durations(i));
    }
    total_size += 1 * this->auction_durations_size() + data_size;
  }
  
  // repeated uint64 auction_start_delays = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->auction_start_delays_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->auction_start_delays(i));
    }
    total_size += 1 * this->auction_start_delays_size() + data_size;
  }
  
  // repeated .bnet.protocol.exchange.CurrencyConfig currency_config = 5;
  total_size += 1 * this->currency_config_size();
  for (int i = 0; i < this->currency_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currency_config(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialistConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialistConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialistConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialistConfig::MergeFrom(const SpecialistConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  auction_durations_.MergeFrom(from.auction_durations_);
  auction_start_delays_.MergeFrom(from.auction_start_delays_);
  currency_config_.MergeFrom(from.currency_config_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_specialist()) {
      set_specialist(from.specialist());
    }
    if (from.has_anti_sniping_extension_delay()) {
      set_anti_sniping_extension_delay(from.anti_sniping_extension_delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialistConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialistConfig::CopyFrom(const SpecialistConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialistConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  for (int i = 0; i < currency_config_size(); i++) {
    if (!this->currency_config(i).IsInitialized()) return false;
  }
  return true;
}

void SpecialistConfig::Swap(SpecialistConfig* other) {
  if (other != this) {
    std::swap(specialist_, other->specialist_);
    auction_durations_.Swap(&other->auction_durations_);
    auction_start_delays_.Swap(&other->auction_start_delays_);
    std::swap(anti_sniping_extension_delay_, other->anti_sniping_extension_delay_);
    currency_config_.Swap(&other->currency_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialistConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialistConfig_descriptor_;
  metadata.reflection = SpecialistConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillingAddress::kCountryIdFieldNumber;
const int BillingAddress::kCityFieldNumber;
const int BillingAddress::kStateFieldNumber;
const int BillingAddress::kPostalCodeFieldNumber;
#endif  // !_MSC_VER

BillingAddress::BillingAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BillingAddress::InitAsDefaultInstance() {
}

BillingAddress::BillingAddress(const BillingAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BillingAddress::SharedCtor() {
  _cached_size_ = 0;
  country_id_ = 0;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillingAddress::~BillingAddress() {
  SharedDtor();
}

void BillingAddress::SharedDtor() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
    delete postal_code_;
  }
  if (this != default_instance_) {
  }
}

void BillingAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillingAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillingAddress_descriptor_;
}

const BillingAddress& BillingAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

BillingAddress* BillingAddress::default_instance_ = NULL;

BillingAddress* BillingAddress::New() const {
  return new BillingAddress;
}

void BillingAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_id_ = 0;
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    if (has_postal_code()) {
      if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
        postal_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillingAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 country_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }
      
      // required string city = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_state;
        break;
      }
      
      // optional string state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_postal_code;
        break;
      }
      
      // optional string postal_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BillingAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 country_id = 1;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country_id(), output);
  }
  
  // required string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->city(), output);
  }
  
  // optional string state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->state(), output);
  }
  
  // optional string postal_code = 4;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->postal_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BillingAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 country_id = 1;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country_id(), target);
  }
  
  // required string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }
  
  // optional string state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->state(), target);
  }
  
  // optional string postal_code = 4;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->postal_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BillingAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 country_id = 1;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country_id());
    }
    
    // required string city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // optional string state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }
    
    // optional string postal_code = 4;
    if (has_postal_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillingAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillingAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillingAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillingAddress::MergeFrom(const BillingAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_postal_code()) {
      set_postal_code(from.postal_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillingAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillingAddress::CopyFrom(const BillingAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillingAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BillingAddress::Swap(BillingAddress* other) {
  if (other != this) {
    std::swap(country_id_, other->country_id_);
    std::swap(city_, other->city_);
    std::swap(state_, other->state_);
    std::swap(postal_code_, other->postal_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillingAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillingAddress_descriptor_;
  metadata.reflection = BillingAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeeEstimationData::kProgramFieldNumber;
const int FeeEstimationData::kSpecialistFieldNumber;
const int FeeEstimationData::kCurrencyFieldNumber;
const int FeeEstimationData::kSourceFieldNumber;
const int FeeEstimationData::kAmountFieldNumber;
const int FeeEstimationData::kBnetAccountFieldNumber;
const int FeeEstimationData::kBillingAddressFieldNumber;
#endif  // !_MSC_VER

FeeEstimationData::FeeEstimationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeeEstimationData::InitAsDefaultInstance() {
  bnet_account_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  billing_address_ = const_cast< ::bnet::protocol::exchange::BillingAddress*>(&::bnet::protocol::exchange::BillingAddress::default_instance());
}

FeeEstimationData::FeeEstimationData(const FeeEstimationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeeEstimationData::SharedCtor() {
  _cached_size_ = 0;
  program_ = 0u;
  specialist_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  bnet_account_ = NULL;
  billing_address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeeEstimationData::~FeeEstimationData() {
  SharedDtor();
}

void FeeEstimationData::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (this != default_instance_) {
    delete bnet_account_;
    delete billing_address_;
  }
}

void FeeEstimationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeeEstimationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeeEstimationData_descriptor_;
}

const FeeEstimationData& FeeEstimationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();  return *default_instance_;
}

FeeEstimationData* FeeEstimationData::default_instance_ = NULL;

FeeEstimationData* FeeEstimationData::New() const {
  return new FeeEstimationData;
}

void FeeEstimationData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    program_ = 0u;
    specialist_ = 0;
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    source_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_bnet_account()) {
      if (bnet_account_ != NULL) bnet_account_->::bnet::protocol::EntityId::Clear();
    }
    if (has_billing_address()) {
      if (billing_address_ != NULL) billing_address_->::bnet::protocol::exchange::BillingAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeeEstimationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 program = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_specialist;
        break;
      }
      
      // required int32 specialist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialist_)));
          set_has_specialist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_currency;
        break;
      }
      
      // required string currency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_source;
        break;
      }
      
      // required fixed32 source = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }
      
      // required uint64 amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bnet_account;
        break;
      }
      
      // optional .bnet.protocol.EntityId bnet_account = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_billing_address;
        break;
      }
      
      // optional .bnet.protocol.exchange.BillingAddress billing_address = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billing_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_billing_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeeEstimationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 program = 1;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->program(), output);
  }
  
  // required int32 specialist = 2;
  if (has_specialist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->specialist(), output);
  }
  
  // required string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->currency(), output);
  }
  
  // required fixed32 source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->source(), output);
  }
  
  // required uint64 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->amount(), output);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 6;
  if (has_bnet_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bnet_account(), output);
  }
  
  // optional .bnet.protocol.exchange.BillingAddress billing_address = 7;
  if (has_billing_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->billing_address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeeEstimationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 program = 1;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->program(), target);
  }
  
  // required int32 specialist = 2;
  if (has_specialist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->specialist(), target);
  }
  
  // required string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency(), target);
  }
  
  // required fixed32 source = 4;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->source(), target);
  }
  
  // required uint64 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->amount(), target);
  }
  
  // optional .bnet.protocol.EntityId bnet_account = 6;
  if (has_bnet_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bnet_account(), target);
  }
  
  // optional .bnet.protocol.exchange.BillingAddress billing_address = 7;
  if (has_billing_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->billing_address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeeEstimationData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 program = 1;
    if (has_program()) {
      total_size += 1 + 4;
    }
    
    // required int32 specialist = 2;
    if (has_specialist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialist());
    }
    
    // required string currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }
    
    // required fixed32 source = 4;
    if (has_source()) {
      total_size += 1 + 4;
    }
    
    // required uint64 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }
    
    // optional .bnet.protocol.EntityId bnet_account = 6;
    if (has_bnet_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account());
    }
    
    // optional .bnet.protocol.exchange.BillingAddress billing_address = 7;
    if (has_billing_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->billing_address());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeeEstimationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeeEstimationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeeEstimationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeeEstimationData::MergeFrom(const FeeEstimationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_specialist()) {
      set_specialist(from.specialist());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_bnet_account()) {
      mutable_bnet_account()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account());
    }
    if (from.has_billing_address()) {
      mutable_billing_address()->::bnet::protocol::exchange::BillingAddress::MergeFrom(from.billing_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeeEstimationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeEstimationData::CopyFrom(const FeeEstimationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeEstimationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_bnet_account()) {
    if (!this->bnet_account().IsInitialized()) return false;
  }
  if (has_billing_address()) {
    if (!this->billing_address().IsInitialized()) return false;
  }
  return true;
}

void FeeEstimationData::Swap(FeeEstimationData* other) {
  if (other != this) {
    std::swap(program_, other->program_);
    std::swap(specialist_, other->specialist_);
    std::swap(currency_, other->currency_);
    std::swap(source_, other->source_);
    std::swap(amount_, other->amount_);
    std::swap(bnet_account_, other->bnet_account_);
    std::swap(billing_address_, other->billing_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeeEstimationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeeEstimationData_descriptor_;
  metadata.reflection = FeeEstimationData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace exchange
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
