// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/exchange/exchange_types.proto

#ifndef PROTOBUF_service_2fexchange_2fexchange_5ftypes_2eproto__INCLUDED
#define PROTOBUF_service_2fexchange_2fexchange_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/protocol/entity.pb.h"
#include "lib/protocol/exchange.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace exchange {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();

class OrderBook;
class OrderBookHandle;
class OrderBookNotification;
class OrderBookSummary;
class Order;
class Extension;
class Offer;
class OfferExtended;
class OfferCreation;
class Bid;
class BidExtended;
class BidCreation;
class QueryFilterByOrderId;
class QueryFilterByCreatedTime;
class Settlement;
class CurrencyConfig;
class SpecialistConfig;
class BillingAddress;
class FeeEstimationData;

// ===================================================================

class OrderBook : public ::google::protobuf::Message {
 public:
  OrderBook();
  virtual ~OrderBook();
  
  OrderBook(const OrderBook& from);
  
  inline OrderBook& operator=(const OrderBook& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderBook& default_instance();
  
  void Swap(OrderBook* other);
  
  // implements Message ----------------------------------------------
  
  OrderBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderBook& from);
  void MergeFrom(const OrderBook& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.BlobOfType object = 1;
  inline bool has_object() const;
  inline void clear_object();
  static const int kObjectFieldNumber = 1;
  inline const ::bnet::protocol::exchange::BlobOfType& object() const;
  inline ::bnet::protocol::exchange::BlobOfType* mutable_object();
  inline ::bnet::protocol::exchange::BlobOfType* release_object();
  
  // required fixed32 program = 2;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 2;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);
  
  // required uint32 compatibility = 3;
  inline bool has_compatibility() const;
  inline void clear_compatibility();
  static const int kCompatibilityFieldNumber = 3;
  inline ::google::protobuf::uint32 compatibility() const;
  inline void set_compatibility(::google::protobuf::uint32 value);
  
  // required string currency = 4;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 4;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  
  // required int32 specialist = 5;
  inline bool has_specialist() const;
  inline void clear_specialist();
  static const int kSpecialistFieldNumber = 5;
  inline ::google::protobuf::int32 specialist() const;
  inline void set_specialist(::google::protobuf::int32 value);
  
  // required uint32 allowed_realm = 6;
  inline bool has_allowed_realm() const;
  inline void clear_allowed_realm();
  static const int kAllowedRealmFieldNumber = 6;
  inline ::google::protobuf::uint32 allowed_realm() const;
  inline void set_allowed_realm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.OrderBook)
 private:
  inline void set_has_object();
  inline void clear_has_object();
  inline void set_has_program();
  inline void clear_has_program();
  inline void set_has_compatibility();
  inline void clear_has_compatibility();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_specialist();
  inline void clear_has_specialist();
  inline void set_has_allowed_realm();
  inline void clear_has_allowed_realm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::BlobOfType* object_;
  ::google::protobuf::uint32 program_;
  ::google::protobuf::uint32 compatibility_;
  ::std::string* currency_;
  ::google::protobuf::int32 specialist_;
  ::google::protobuf::uint32 allowed_realm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static OrderBook* default_instance_;
};
// -------------------------------------------------------------------

class OrderBookHandle : public ::google::protobuf::Message {
 public:
  OrderBookHandle();
  virtual ~OrderBookHandle();
  
  OrderBookHandle(const OrderBookHandle& from);
  
  inline OrderBookHandle& operator=(const OrderBookHandle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderBookHandle& default_instance();
  
  void Swap(OrderBookHandle* other);
  
  // implements Message ----------------------------------------------
  
  OrderBookHandle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderBookHandle& from);
  void MergeFrom(const OrderBookHandle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  inline bool has_partition_id() const;
  inline void clear_partition_id();
  static const int kPartitionIdFieldNumber = 1;
  inline const ::bnet::protocol::exchange::PartitionId& partition_id() const;
  inline ::bnet::protocol::exchange::PartitionId* mutable_partition_id();
  inline ::bnet::protocol::exchange::PartitionId* release_partition_id();
  
  // required uint64 order_book_id = 2;
  inline bool has_order_book_id() const;
  inline void clear_order_book_id();
  static const int kOrderBookIdFieldNumber = 2;
  inline ::google::protobuf::uint64 order_book_id() const;
  inline void set_order_book_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.OrderBookHandle)
 private:
  inline void set_has_partition_id();
  inline void clear_has_partition_id();
  inline void set_has_order_book_id();
  inline void clear_has_order_book_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::PartitionId* partition_id_;
  ::google::protobuf::uint64 order_book_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static OrderBookHandle* default_instance_;
};
// -------------------------------------------------------------------

class OrderBookNotification : public ::google::protobuf::Message {
 public:
  OrderBookNotification();
  virtual ~OrderBookNotification();
  
  OrderBookNotification(const OrderBookNotification& from);
  
  inline OrderBookNotification& operator=(const OrderBookNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderBookNotification& default_instance();
  
  void Swap(OrderBookNotification* other);
  
  // implements Message ----------------------------------------------
  
  OrderBookNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderBookNotification& from);
  void MergeFrom(const OrderBookNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.OrderBook order_book = 1;
  inline bool has_order_book() const;
  inline void clear_order_book();
  static const int kOrderBookFieldNumber = 1;
  inline const ::bnet::protocol::exchange::OrderBook& order_book() const;
  inline ::bnet::protocol::exchange::OrderBook* mutable_order_book();
  inline ::bnet::protocol::exchange::OrderBook* release_order_book();
  
  // required .bnet.protocol.exchange.PartitionId partition_id = 2;
  inline bool has_partition_id() const;
  inline void clear_partition_id();
  static const int kPartitionIdFieldNumber = 2;
  inline const ::bnet::protocol::exchange::PartitionId& partition_id() const;
  inline ::bnet::protocol::exchange::PartitionId* mutable_partition_id();
  inline ::bnet::protocol::exchange::PartitionId* release_partition_id();
  
  // required uint64 order_book_id = 3;
  inline bool has_order_book_id() const;
  inline void clear_order_book_id();
  static const int kOrderBookIdFieldNumber = 3;
  inline ::google::protobuf::uint64 order_book_id() const;
  inline void set_order_book_id(::google::protobuf::uint64 value);
  
  // optional uint64 trade_now_price = 4;
  inline bool has_trade_now_price() const;
  inline void clear_trade_now_price();
  static const int kTradeNowPriceFieldNumber = 4;
  inline ::google::protobuf::uint64 trade_now_price() const;
  inline void set_trade_now_price(::google::protobuf::uint64 value);
  
  // required uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required uint64 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 update_time() const;
  inline void set_update_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.OrderBookNotification)
 private:
  inline void set_has_order_book();
  inline void clear_has_order_book();
  inline void set_has_partition_id();
  inline void clear_has_partition_id();
  inline void set_has_order_book_id();
  inline void clear_has_order_book_id();
  inline void set_has_trade_now_price();
  inline void clear_has_trade_now_price();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::OrderBook* order_book_;
  ::bnet::protocol::exchange::PartitionId* partition_id_;
  ::google::protobuf::uint64 order_book_id_;
  ::google::protobuf::uint64 trade_now_price_;
  ::google::protobuf::uint64 update_time_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static OrderBookNotification* default_instance_;
};
// -------------------------------------------------------------------

class OrderBookSummary : public ::google::protobuf::Message {
 public:
  OrderBookSummary();
  virtual ~OrderBookSummary();
  
  OrderBookSummary(const OrderBookSummary& from);
  
  inline OrderBookSummary& operator=(const OrderBookSummary& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderBookSummary& default_instance();
  
  void Swap(OrderBookSummary* other);
  
  // implements Message ----------------------------------------------
  
  OrderBookSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderBookSummary& from);
  void MergeFrom(const OrderBookSummary& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  inline bool has_partition_id() const;
  inline void clear_partition_id();
  static const int kPartitionIdFieldNumber = 1;
  inline const ::bnet::protocol::exchange::PartitionId& partition_id() const;
  inline ::bnet::protocol::exchange::PartitionId* mutable_partition_id();
  inline ::bnet::protocol::exchange::PartitionId* release_partition_id();
  
  // required uint64 order_book_id = 2;
  inline bool has_order_book_id() const;
  inline void clear_order_book_id();
  static const int kOrderBookIdFieldNumber = 2;
  inline ::google::protobuf::uint64 order_book_id() const;
  inline void set_order_book_id(::google::protobuf::uint64 value);
  
  // required uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // optional .bnet.protocol.exchange.OrderBook order_book = 4;
  inline bool has_order_book() const;
  inline void clear_order_book();
  static const int kOrderBookFieldNumber = 4;
  inline const ::bnet::protocol::exchange::OrderBook& order_book() const;
  inline ::bnet::protocol::exchange::OrderBook* mutable_order_book();
  inline ::bnet::protocol::exchange::OrderBook* release_order_book();
  
  // optional uint64 amount = 5;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 5;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);
  
  // optional uint64 best_offer_price = 6;
  inline bool has_best_offer_price() const;
  inline void clear_best_offer_price();
  static const int kBestOfferPriceFieldNumber = 6;
  inline ::google::protobuf::uint64 best_offer_price() const;
  inline void set_best_offer_price(::google::protobuf::uint64 value);
  
  // optional uint64 best_bid_price = 7;
  inline bool has_best_bid_price() const;
  inline void clear_best_bid_price();
  static const int kBestBidPriceFieldNumber = 7;
  inline ::google::protobuf::uint64 best_bid_price() const;
  inline void set_best_bid_price(::google::protobuf::uint64 value);
  
  // optional uint64 end_time = 8;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);
  
  // optional int32 status = 9;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 9;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint64 created_time = 10;
  inline bool has_created_time() const;
  inline void clear_created_time();
  static const int kCreatedTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 created_time() const;
  inline void set_created_time(::google::protobuf::uint64 value);
  
  // optional uint64 active_time = 11;
  inline bool has_active_time() const;
  inline void clear_active_time();
  static const int kActiveTimeFieldNumber = 11;
  inline ::google::protobuf::uint64 active_time() const;
  inline void set_active_time(::google::protobuf::uint64 value);
  
  // optional uint64 closed_time = 12;
  inline bool has_closed_time() const;
  inline void clear_closed_time();
  static const int kClosedTimeFieldNumber = 12;
  inline ::google::protobuf::uint64 closed_time() const;
  inline void set_closed_time(::google::protobuf::uint64 value);
  
  // optional uint32 reason = 13;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 13;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // optional uint64 out_bid_unit_price = 14;
  inline bool has_out_bid_unit_price() const;
  inline void clear_out_bid_unit_price();
  static const int kOutBidUnitPriceFieldNumber = 14;
  inline ::google::protobuf::uint64 out_bid_unit_price() const;
  inline void set_out_bid_unit_price(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.OrderBookSummary)
 private:
  inline void set_has_partition_id();
  inline void clear_has_partition_id();
  inline void set_has_order_book_id();
  inline void clear_has_order_book_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_order_book();
  inline void clear_has_order_book();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_best_offer_price();
  inline void clear_has_best_offer_price();
  inline void set_has_best_bid_price();
  inline void clear_has_best_bid_price();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_created_time();
  inline void clear_has_created_time();
  inline void set_has_active_time();
  inline void clear_has_active_time();
  inline void set_has_closed_time();
  inline void clear_has_closed_time();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_out_bid_unit_price();
  inline void clear_has_out_bid_unit_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::PartitionId* partition_id_;
  ::google::protobuf::uint64 order_book_id_;
  ::bnet::protocol::exchange::OrderBook* order_book_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 best_offer_price_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint64 best_bid_price_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint64 created_time_;
  ::google::protobuf::uint64 active_time_;
  ::google::protobuf::uint64 closed_time_;
  ::google::protobuf::uint64 out_bid_unit_price_;
  ::google::protobuf::uint32 reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static OrderBookSummary* default_instance_;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message {
 public:
  Order();
  virtual ~Order();
  
  Order(const Order& from);
  
  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();
  
  void Swap(Order* other);
  
  // implements Message ----------------------------------------------
  
  Order* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 amount = 1;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 1;
  inline ::google::protobuf::uint32 amount() const;
  inline void set_amount(::google::protobuf::uint32 value);
  
  // optional uint64 start_time = 2;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 start_time() const;
  inline void set_start_time(::google::protobuf::uint64 value);
  
  // optional uint64 end_time = 3;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);
  
  // optional .bnet.protocol.exchange.BlobFrom account_for_money = 4;
  inline bool has_account_for_money() const;
  inline void clear_account_for_money();
  static const int kAccountForMoneyFieldNumber = 4;
  inline const ::bnet::protocol::exchange::BlobFrom& account_for_money() const;
  inline ::bnet::protocol::exchange::BlobFrom* mutable_account_for_money();
  inline ::bnet::protocol::exchange::BlobFrom* release_account_for_money();
  
  // optional .bnet.protocol.exchange.BlobFrom account_for_item = 5;
  inline bool has_account_for_item() const;
  inline void clear_account_for_item();
  static const int kAccountForItemFieldNumber = 5;
  inline const ::bnet::protocol::exchange::BlobFrom& account_for_item() const;
  inline ::bnet::protocol::exchange::BlobFrom* mutable_account_for_item();
  inline ::bnet::protocol::exchange::BlobFrom* release_account_for_item();
  
  // optional .bnet.protocol.EntityId bnet_account = 6;
  inline bool has_bnet_account() const;
  inline void clear_bnet_account();
  static const int kBnetAccountFieldNumber = 6;
  inline const ::bnet::protocol::EntityId& bnet_account() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account();
  inline ::bnet::protocol::EntityId* release_bnet_account();
  
  // optional .bnet.protocol.EntityId game_account = 7;
  inline bool has_game_account() const;
  inline void clear_game_account();
  static const int kGameAccountFieldNumber = 7;
  inline const ::bnet::protocol::EntityId& game_account() const;
  inline ::bnet::protocol::EntityId* mutable_game_account();
  inline ::bnet::protocol::EntityId* release_game_account();
  
  // optional .bnet.protocol.EntityId toon = 8;
  inline bool has_toon() const;
  inline void clear_toon();
  static const int kToonFieldNumber = 8;
  inline const ::bnet::protocol::EntityId& toon() const;
  inline ::bnet::protocol::EntityId* mutable_toon();
  inline ::bnet::protocol::EntityId* release_toon();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.Order)
 private:
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_account_for_money();
  inline void clear_has_account_for_money();
  inline void set_has_account_for_item();
  inline void clear_has_account_for_item();
  inline void set_has_bnet_account();
  inline void clear_has_bnet_account();
  inline void set_has_game_account();
  inline void clear_has_game_account();
  inline void set_has_toon();
  inline void clear_has_toon();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 end_time_;
  ::bnet::protocol::exchange::BlobFrom* account_for_money_;
  ::bnet::protocol::exchange::BlobFrom* account_for_item_;
  ::bnet::protocol::EntityId* bnet_account_;
  ::bnet::protocol::EntityId* game_account_;
  ::bnet::protocol::EntityId* toon_;
  ::google::protobuf::uint32 amount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Order* default_instance_;
};
// -------------------------------------------------------------------

class Extension : public ::google::protobuf::Message {
 public:
  Extension();
  virtual ~Extension();
  
  Extension(const Extension& from);
  
  inline Extension& operator=(const Extension& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Extension& default_instance();
  
  void Swap(Extension* other);
  
  // implements Message ----------------------------------------------
  
  Extension* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Extension& from);
  void MergeFrom(const Extension& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  inline bool has_partition_id() const;
  inline void clear_partition_id();
  static const int kPartitionIdFieldNumber = 1;
  inline const ::bnet::protocol::exchange::PartitionId& partition_id() const;
  inline ::bnet::protocol::exchange::PartitionId* mutable_partition_id();
  inline ::bnet::protocol::exchange::PartitionId* release_partition_id();
  
  // required uint64 order_book_id = 2;
  inline bool has_order_book_id() const;
  inline void clear_order_book_id();
  static const int kOrderBookIdFieldNumber = 2;
  inline ::google::protobuf::uint64 order_book_id() const;
  inline void set_order_book_id(::google::protobuf::uint64 value);
  
  // required uint64 order_id = 3;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::uint64 order_id() const;
  inline void set_order_id(::google::protobuf::uint64 value);
  
  // optional uint64 filled_amount = 4;
  inline bool has_filled_amount() const;
  inline void clear_filled_amount();
  static const int kFilledAmountFieldNumber = 4;
  inline ::google::protobuf::uint64 filled_amount() const;
  inline void set_filled_amount(::google::protobuf::uint64 value);
  
  // optional int32 order_status = 5;
  inline bool has_order_status() const;
  inline void clear_order_status();
  static const int kOrderStatusFieldNumber = 5;
  inline ::google::protobuf::int32 order_status() const;
  inline void set_order_status(::google::protobuf::int32 value);
  
  // optional uint64 authorized_time = 6;
  inline bool has_authorized_time() const;
  inline void clear_authorized_time();
  static const int kAuthorizedTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 authorized_time() const;
  inline void set_authorized_time(::google::protobuf::uint64 value);
  
  // optional uint64 created_time = 7;
  inline bool has_created_time() const;
  inline void clear_created_time();
  static const int kCreatedTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 created_time() const;
  inline void set_created_time(::google::protobuf::uint64 value);
  
  // optional uint64 closed_time = 8;
  inline bool has_closed_time() const;
  inline void clear_closed_time();
  static const int kClosedTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 closed_time() const;
  inline void set_closed_time(::google::protobuf::uint64 value);
  
  // optional uint32 reason = 9;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 9;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // optional .bnet.protocol.exchange.OrderBook order_book = 10;
  inline bool has_order_book() const;
  inline void clear_order_book();
  static const int kOrderBookFieldNumber = 10;
  inline const ::bnet::protocol::exchange::OrderBook& order_book() const;
  inline ::bnet::protocol::exchange::OrderBook* mutable_order_book();
  inline ::bnet::protocol::exchange::OrderBook* release_order_book();
  
  // optional uint64 order_book_status = 11;
  inline bool has_order_book_status() const;
  inline void clear_order_book_status();
  static const int kOrderBookStatusFieldNumber = 11;
  inline ::google::protobuf::uint64 order_book_status() const;
  inline void set_order_book_status(::google::protobuf::uint64 value);
  
  // optional uint64 money_to_claim = 12;
  inline bool has_money_to_claim() const;
  inline void clear_money_to_claim();
  static const int kMoneyToClaimFieldNumber = 12;
  inline ::google::protobuf::uint64 money_to_claim() const;
  inline void set_money_to_claim(::google::protobuf::uint64 value);
  
  // optional uint64 items_to_claim = 13;
  inline bool has_items_to_claim() const;
  inline void clear_items_to_claim();
  static const int kItemsToClaimFieldNumber = 13;
  inline ::google::protobuf::uint64 items_to_claim() const;
  inline void set_items_to_claim(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.Extension)
 private:
  inline void set_has_partition_id();
  inline void clear_has_partition_id();
  inline void set_has_order_book_id();
  inline void clear_has_order_book_id();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_filled_amount();
  inline void clear_has_filled_amount();
  inline void set_has_order_status();
  inline void clear_has_order_status();
  inline void set_has_authorized_time();
  inline void clear_has_authorized_time();
  inline void set_has_created_time();
  inline void clear_has_created_time();
  inline void set_has_closed_time();
  inline void clear_has_closed_time();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_order_book();
  inline void clear_has_order_book();
  inline void set_has_order_book_status();
  inline void clear_has_order_book_status();
  inline void set_has_money_to_claim();
  inline void clear_has_money_to_claim();
  inline void set_has_items_to_claim();
  inline void clear_has_items_to_claim();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::PartitionId* partition_id_;
  ::google::protobuf::uint64 order_book_id_;
  ::google::protobuf::uint64 order_id_;
  ::google::protobuf::uint64 filled_amount_;
  ::google::protobuf::uint64 authorized_time_;
  ::google::protobuf::uint64 created_time_;
  ::google::protobuf::int32 order_status_;
  ::google::protobuf::uint32 reason_;
  ::google::protobuf::uint64 closed_time_;
  ::bnet::protocol::exchange::OrderBook* order_book_;
  ::google::protobuf::uint64 order_book_status_;
  ::google::protobuf::uint64 money_to_claim_;
  ::google::protobuf::uint64 items_to_claim_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Extension* default_instance_;
};
// -------------------------------------------------------------------

class Offer : public ::google::protobuf::Message {
 public:
  Offer();
  virtual ~Offer();
  
  Offer(const Offer& from);
  
  inline Offer& operator=(const Offer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Offer& default_instance();
  
  void Swap(Offer* other);
  
  // implements Message ----------------------------------------------
  
  Offer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Offer& from);
  void MergeFrom(const Offer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.Order order = 1;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline const ::bnet::protocol::exchange::Order& order() const;
  inline ::bnet::protocol::exchange::Order* mutable_order();
  inline ::bnet::protocol::exchange::Order* release_order();
  
  // optional uint64 trade_now_price = 2;
  inline bool has_trade_now_price() const;
  inline void clear_trade_now_price();
  static const int kTradeNowPriceFieldNumber = 2;
  inline ::google::protobuf::uint64 trade_now_price() const;
  inline void set_trade_now_price(::google::protobuf::uint64 value);
  
  // optional uint64 reserve_price = 3;
  inline bool has_reserve_price() const;
  inline void clear_reserve_price();
  static const int kReservePriceFieldNumber = 3;
  inline ::google::protobuf::uint64 reserve_price() const;
  inline void set_reserve_price(::google::protobuf::uint64 value);
  
  // optional uint64 out_bid_price = 4;
  inline bool has_out_bid_price() const;
  inline void clear_out_bid_price();
  static const int kOutBidPriceFieldNumber = 4;
  inline ::google::protobuf::uint64 out_bid_price() const;
  inline void set_out_bid_price(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.Offer)
 private:
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_trade_now_price();
  inline void clear_has_trade_now_price();
  inline void set_has_reserve_price();
  inline void clear_has_reserve_price();
  inline void set_has_out_bid_price();
  inline void clear_has_out_bid_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::Order* order_;
  ::google::protobuf::uint64 trade_now_price_;
  ::google::protobuf::uint64 reserve_price_;
  ::google::protobuf::uint64 out_bid_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Offer* default_instance_;
};
// -------------------------------------------------------------------

class OfferExtended : public ::google::protobuf::Message {
 public:
  OfferExtended();
  virtual ~OfferExtended();
  
  OfferExtended(const OfferExtended& from);
  
  inline OfferExtended& operator=(const OfferExtended& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OfferExtended& default_instance();
  
  void Swap(OfferExtended* other);
  
  // implements Message ----------------------------------------------
  
  OfferExtended* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfferExtended& from);
  void MergeFrom(const OfferExtended& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.Offer offer = 1;
  inline bool has_offer() const;
  inline void clear_offer();
  static const int kOfferFieldNumber = 1;
  inline const ::bnet::protocol::exchange::Offer& offer() const;
  inline ::bnet::protocol::exchange::Offer* mutable_offer();
  inline ::bnet::protocol::exchange::Offer* release_offer();
  
  // required .bnet.protocol.exchange.Extension extension = 2;
  inline bool has_extension() const;
  inline void clear_extension();
  static const int kExtensionFieldNumber = 2;
  inline const ::bnet::protocol::exchange::Extension& extension() const;
  inline ::bnet::protocol::exchange::Extension* mutable_extension();
  inline ::bnet::protocol::exchange::Extension* release_extension();
  
  // optional uint64 current_winning_price = 3;
  inline bool has_current_winning_price() const;
  inline void clear_current_winning_price();
  static const int kCurrentWinningPriceFieldNumber = 3;
  inline ::google::protobuf::uint64 current_winning_price() const;
  inline void set_current_winning_price(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.OfferExtended)
 private:
  inline void set_has_offer();
  inline void clear_has_offer();
  inline void set_has_extension();
  inline void clear_has_extension();
  inline void set_has_current_winning_price();
  inline void clear_has_current_winning_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::Offer* offer_;
  ::bnet::protocol::exchange::Extension* extension_;
  ::google::protobuf::uint64 current_winning_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static OfferExtended* default_instance_;
};
// -------------------------------------------------------------------

class OfferCreation : public ::google::protobuf::Message {
 public:
  OfferCreation();
  virtual ~OfferCreation();
  
  OfferCreation(const OfferCreation& from);
  
  inline OfferCreation& operator=(const OfferCreation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OfferCreation& default_instance();
  
  void Swap(OfferCreation* other);
  
  // implements Message ----------------------------------------------
  
  OfferCreation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfferCreation& from);
  void MergeFrom(const OfferCreation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.Offer offer = 1;
  inline bool has_offer() const;
  inline void clear_offer();
  static const int kOfferFieldNumber = 1;
  inline const ::bnet::protocol::exchange::Offer& offer() const;
  inline ::bnet::protocol::exchange::Offer* mutable_offer();
  inline ::bnet::protocol::exchange::Offer* release_offer();
  
  // optional uint64 auction_duration = 2;
  inline bool has_auction_duration() const;
  inline void clear_auction_duration();
  static const int kAuctionDurationFieldNumber = 2;
  inline ::google::protobuf::uint64 auction_duration() const;
  inline void set_auction_duration(::google::protobuf::uint64 value);
  
  // optional uint64 auction_start_delay = 3;
  inline bool has_auction_start_delay() const;
  inline void clear_auction_start_delay();
  static const int kAuctionStartDelayFieldNumber = 3;
  inline ::google::protobuf::uint64 auction_start_delay() const;
  inline void set_auction_start_delay(::google::protobuf::uint64 value);
  
  // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
  inline bool has_billing_address() const;
  inline void clear_billing_address();
  static const int kBillingAddressFieldNumber = 4;
  inline const ::bnet::protocol::exchange::BillingAddress& billing_address() const;
  inline ::bnet::protocol::exchange::BillingAddress* mutable_billing_address();
  inline ::bnet::protocol::exchange::BillingAddress* release_billing_address();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.OfferCreation)
 private:
  inline void set_has_offer();
  inline void clear_has_offer();
  inline void set_has_auction_duration();
  inline void clear_has_auction_duration();
  inline void set_has_auction_start_delay();
  inline void clear_has_auction_start_delay();
  inline void set_has_billing_address();
  inline void clear_has_billing_address();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::Offer* offer_;
  ::google::protobuf::uint64 auction_duration_;
  ::google::protobuf::uint64 auction_start_delay_;
  ::bnet::protocol::exchange::BillingAddress* billing_address_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static OfferCreation* default_instance_;
};
// -------------------------------------------------------------------

class Bid : public ::google::protobuf::Message {
 public:
  Bid();
  virtual ~Bid();
  
  Bid(const Bid& from);
  
  inline Bid& operator=(const Bid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bid& default_instance();
  
  void Swap(Bid* other);
  
  // implements Message ----------------------------------------------
  
  Bid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bid& from);
  void MergeFrom(const Bid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.Order order = 1;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline const ::bnet::protocol::exchange::Order& order() const;
  inline ::bnet::protocol::exchange::Order* mutable_order();
  inline ::bnet::protocol::exchange::Order* release_order();
  
  // optional uint64 current_unit_price = 2;
  inline bool has_current_unit_price() const;
  inline void clear_current_unit_price();
  static const int kCurrentUnitPriceFieldNumber = 2;
  inline ::google::protobuf::uint64 current_unit_price() const;
  inline void set_current_unit_price(::google::protobuf::uint64 value);
  
  // optional uint64 max_unit_price = 3;
  inline bool has_max_unit_price() const;
  inline void clear_max_unit_price();
  static const int kMaxUnitPriceFieldNumber = 3;
  inline ::google::protobuf::uint64 max_unit_price() const;
  inline void set_max_unit_price(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.Bid)
 private:
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_current_unit_price();
  inline void clear_has_current_unit_price();
  inline void set_has_max_unit_price();
  inline void clear_has_max_unit_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::Order* order_;
  ::google::protobuf::uint64 current_unit_price_;
  ::google::protobuf::uint64 max_unit_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Bid* default_instance_;
};
// -------------------------------------------------------------------

class BidExtended : public ::google::protobuf::Message {
 public:
  BidExtended();
  virtual ~BidExtended();
  
  BidExtended(const BidExtended& from);
  
  inline BidExtended& operator=(const BidExtended& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BidExtended& default_instance();
  
  void Swap(BidExtended* other);
  
  // implements Message ----------------------------------------------
  
  BidExtended* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidExtended& from);
  void MergeFrom(const BidExtended& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.Bid bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::bnet::protocol::exchange::Bid& bid() const;
  inline ::bnet::protocol::exchange::Bid* mutable_bid();
  inline ::bnet::protocol::exchange::Bid* release_bid();
  
  // required .bnet.protocol.exchange.Extension extension = 2;
  inline bool has_extension() const;
  inline void clear_extension();
  static const int kExtensionFieldNumber = 2;
  inline const ::bnet::protocol::exchange::Extension& extension() const;
  inline ::bnet::protocol::exchange::Extension* mutable_extension();
  inline ::bnet::protocol::exchange::Extension* release_extension();
  
  // optional uint64 offer_out_bid_price = 3;
  inline bool has_offer_out_bid_price() const;
  inline void clear_offer_out_bid_price();
  static const int kOfferOutBidPriceFieldNumber = 3;
  inline ::google::protobuf::uint64 offer_out_bid_price() const;
  inline void set_offer_out_bid_price(::google::protobuf::uint64 value);
  
  // optional uint64 offer_trade_now_price = 4;
  inline bool has_offer_trade_now_price() const;
  inline void clear_offer_trade_now_price();
  static const int kOfferTradeNowPriceFieldNumber = 4;
  inline ::google::protobuf::uint64 offer_trade_now_price() const;
  inline void set_offer_trade_now_price(::google::protobuf::uint64 value);
  
  // optional uint64 offer_current_winning_price = 5;
  inline bool has_offer_current_winning_price() const;
  inline void clear_offer_current_winning_price();
  static const int kOfferCurrentWinningPriceFieldNumber = 5;
  inline ::google::protobuf::uint64 offer_current_winning_price() const;
  inline void set_offer_current_winning_price(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.BidExtended)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_extension();
  inline void clear_has_extension();
  inline void set_has_offer_out_bid_price();
  inline void clear_has_offer_out_bid_price();
  inline void set_has_offer_trade_now_price();
  inline void clear_has_offer_trade_now_price();
  inline void set_has_offer_current_winning_price();
  inline void clear_has_offer_current_winning_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::Bid* bid_;
  ::bnet::protocol::exchange::Extension* extension_;
  ::google::protobuf::uint64 offer_out_bid_price_;
  ::google::protobuf::uint64 offer_trade_now_price_;
  ::google::protobuf::uint64 offer_current_winning_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static BidExtended* default_instance_;
};
// -------------------------------------------------------------------

class BidCreation : public ::google::protobuf::Message {
 public:
  BidCreation();
  virtual ~BidCreation();
  
  BidCreation(const BidCreation& from);
  
  inline BidCreation& operator=(const BidCreation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BidCreation& default_instance();
  
  void Swap(BidCreation* other);
  
  // implements Message ----------------------------------------------
  
  BidCreation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidCreation& from);
  void MergeFrom(const BidCreation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.exchange.Bid bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::bnet::protocol::exchange::Bid& bid() const;
  inline ::bnet::protocol::exchange::Bid* mutable_bid();
  inline ::bnet::protocol::exchange::Bid* release_bid();
  
  // optional uint64 auction_duration = 2;
  inline bool has_auction_duration() const;
  inline void clear_auction_duration();
  static const int kAuctionDurationFieldNumber = 2;
  inline ::google::protobuf::uint64 auction_duration() const;
  inline void set_auction_duration(::google::protobuf::uint64 value);
  
  // optional uint64 auction_start_delay = 3;
  inline bool has_auction_start_delay() const;
  inline void clear_auction_start_delay();
  static const int kAuctionStartDelayFieldNumber = 3;
  inline ::google::protobuf::uint64 auction_start_delay() const;
  inline void set_auction_start_delay(::google::protobuf::uint64 value);
  
  // optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
  inline bool has_billing_address() const;
  inline void clear_billing_address();
  static const int kBillingAddressFieldNumber = 4;
  inline const ::bnet::protocol::exchange::BillingAddress& billing_address() const;
  inline ::bnet::protocol::exchange::BillingAddress* mutable_billing_address();
  inline ::bnet::protocol::exchange::BillingAddress* release_billing_address();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.BidCreation)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_auction_duration();
  inline void clear_has_auction_duration();
  inline void set_has_auction_start_delay();
  inline void clear_has_auction_start_delay();
  inline void set_has_billing_address();
  inline void clear_has_billing_address();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::exchange::Bid* bid_;
  ::google::protobuf::uint64 auction_duration_;
  ::google::protobuf::uint64 auction_start_delay_;
  ::bnet::protocol::exchange::BillingAddress* billing_address_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static BidCreation* default_instance_;
};
// -------------------------------------------------------------------

class QueryFilterByOrderId : public ::google::protobuf::Message {
 public:
  QueryFilterByOrderId();
  virtual ~QueryFilterByOrderId();
  
  QueryFilterByOrderId(const QueryFilterByOrderId& from);
  
  inline QueryFilterByOrderId& operator=(const QueryFilterByOrderId& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFilterByOrderId& default_instance();
  
  void Swap(QueryFilterByOrderId* other);
  
  // implements Message ----------------------------------------------
  
  QueryFilterByOrderId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFilterByOrderId& from);
  void MergeFrom(const QueryFilterByOrderId& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 max_result = 1;
  inline bool has_max_result() const;
  inline void clear_max_result();
  static const int kMaxResultFieldNumber = 1;
  inline ::google::protobuf::uint32 max_result() const;
  inline void set_max_result(::google::protobuf::uint32 value);
  
  // optional uint64 ref_order_id = 2;
  inline bool has_ref_order_id() const;
  inline void clear_ref_order_id();
  static const int kRefOrderIdFieldNumber = 2;
  inline ::google::protobuf::uint64 ref_order_id() const;
  inline void set_ref_order_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.QueryFilterByOrderId)
 private:
  inline void set_has_max_result();
  inline void clear_has_max_result();
  inline void set_has_ref_order_id();
  inline void clear_has_ref_order_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 ref_order_id_;
  ::google::protobuf::uint32 max_result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static QueryFilterByOrderId* default_instance_;
};
// -------------------------------------------------------------------

class QueryFilterByCreatedTime : public ::google::protobuf::Message {
 public:
  QueryFilterByCreatedTime();
  virtual ~QueryFilterByCreatedTime();
  
  QueryFilterByCreatedTime(const QueryFilterByCreatedTime& from);
  
  inline QueryFilterByCreatedTime& operator=(const QueryFilterByCreatedTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFilterByCreatedTime& default_instance();
  
  void Swap(QueryFilterByCreatedTime* other);
  
  // implements Message ----------------------------------------------
  
  QueryFilterByCreatedTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFilterByCreatedTime& from);
  void MergeFrom(const QueryFilterByCreatedTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 max_result = 1;
  inline bool has_max_result() const;
  inline void clear_max_result();
  static const int kMaxResultFieldNumber = 1;
  inline ::google::protobuf::uint32 max_result() const;
  inline void set_max_result(::google::protobuf::uint32 value);
  
  // optional uint64 ref_created_time = 2;
  inline bool has_ref_created_time() const;
  inline void clear_ref_created_time();
  static const int kRefCreatedTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 ref_created_time() const;
  inline void set_ref_created_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.QueryFilterByCreatedTime)
 private:
  inline void set_has_max_result();
  inline void clear_has_max_result();
  inline void set_has_ref_created_time();
  inline void clear_has_ref_created_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 ref_created_time_;
  ::google::protobuf::uint32 max_result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static QueryFilterByCreatedTime* default_instance_;
};
// -------------------------------------------------------------------

class Settlement : public ::google::protobuf::Message {
 public:
  Settlement();
  virtual ~Settlement();
  
  Settlement(const Settlement& from);
  
  inline Settlement& operator=(const Settlement& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Settlement& default_instance();
  
  void Swap(Settlement* other);
  
  // implements Message ----------------------------------------------
  
  Settlement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Settlement& from);
  void MergeFrom(const Settlement& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 order_book_id = 1;
  inline bool has_order_book_id() const;
  inline void clear_order_book_id();
  static const int kOrderBookIdFieldNumber = 1;
  inline ::google::protobuf::uint64 order_book_id() const;
  inline void set_order_book_id(::google::protobuf::uint64 value);
  
  // required uint64 money_amount = 2;
  inline bool has_money_amount() const;
  inline void clear_money_amount();
  static const int kMoneyAmountFieldNumber = 2;
  inline ::google::protobuf::uint64 money_amount() const;
  inline void set_money_amount(::google::protobuf::uint64 value);
  
  // required uint64 items_amount = 3;
  inline bool has_items_amount() const;
  inline void clear_items_amount();
  static const int kItemsAmountFieldNumber = 3;
  inline ::google::protobuf::uint64 items_amount() const;
  inline void set_items_amount(::google::protobuf::uint64 value);
  
  // required uint64 offer_settle_id = 4;
  inline bool has_offer_settle_id() const;
  inline void clear_offer_settle_id();
  static const int kOfferSettleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 offer_settle_id() const;
  inline void set_offer_settle_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.Settlement)
 private:
  inline void set_has_order_book_id();
  inline void clear_has_order_book_id();
  inline void set_has_money_amount();
  inline void clear_has_money_amount();
  inline void set_has_items_amount();
  inline void clear_has_items_amount();
  inline void set_has_offer_settle_id();
  inline void clear_has_offer_settle_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 order_book_id_;
  ::google::protobuf::uint64 money_amount_;
  ::google::protobuf::uint64 items_amount_;
  ::google::protobuf::uint64 offer_settle_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static Settlement* default_instance_;
};
// -------------------------------------------------------------------

class CurrencyConfig : public ::google::protobuf::Message {
 public:
  CurrencyConfig();
  virtual ~CurrencyConfig();
  
  CurrencyConfig(const CurrencyConfig& from);
  
  inline CurrencyConfig& operator=(const CurrencyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrencyConfig& default_instance();
  
  void Swap(CurrencyConfig* other);
  
  // implements Message ----------------------------------------------
  
  CurrencyConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrencyConfig& from);
  void MergeFrom(const CurrencyConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string currency = 1;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 1;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  
  // required uint64 tick_size = 2;
  inline bool has_tick_size() const;
  inline void clear_tick_size();
  static const int kTickSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 tick_size() const;
  inline void set_tick_size(::google::protobuf::uint64 value);
  
  // required uint64 flat_outbid_incr = 3;
  inline bool has_flat_outbid_incr() const;
  inline void clear_flat_outbid_incr();
  static const int kFlatOutbidIncrFieldNumber = 3;
  inline ::google::protobuf::uint64 flat_outbid_incr() const;
  inline void set_flat_outbid_incr(::google::protobuf::uint64 value);
  
  // required uint64 scale_outbid_incr = 4;
  inline bool has_scale_outbid_incr() const;
  inline void clear_scale_outbid_incr();
  static const int kScaleOutbidIncrFieldNumber = 4;
  inline ::google::protobuf::uint64 scale_outbid_incr() const;
  inline void set_scale_outbid_incr(::google::protobuf::uint64 value);
  
  // required uint64 min_starting_unit_price = 5;
  inline bool has_min_starting_unit_price() const;
  inline void clear_min_starting_unit_price();
  static const int kMinStartingUnitPriceFieldNumber = 5;
  inline ::google::protobuf::uint64 min_starting_unit_price() const;
  inline void set_min_starting_unit_price(::google::protobuf::uint64 value);
  
  // required uint64 max_starting_unit_price = 6;
  inline bool has_max_starting_unit_price() const;
  inline void clear_max_starting_unit_price();
  static const int kMaxStartingUnitPriceFieldNumber = 6;
  inline ::google::protobuf::uint64 max_starting_unit_price() const;
  inline void set_max_starting_unit_price(::google::protobuf::uint64 value);
  
  // required uint64 max_unit_price = 7;
  inline bool has_max_unit_price() const;
  inline void clear_max_unit_price();
  static const int kMaxUnitPriceFieldNumber = 7;
  inline ::google::protobuf::uint64 max_unit_price() const;
  inline void set_max_unit_price(::google::protobuf::uint64 value);
  
  // required uint64 max_total_amount = 8;
  inline bool has_max_total_amount() const;
  inline void clear_max_total_amount();
  static const int kMaxTotalAmountFieldNumber = 8;
  inline ::google::protobuf::uint64 max_total_amount() const;
  inline void set_max_total_amount(::google::protobuf::uint64 value);
  
  // required int32 buyout_rule = 9;
  inline bool has_buyout_rule() const;
  inline void clear_buyout_rule();
  static const int kBuyoutRuleFieldNumber = 9;
  inline ::google::protobuf::int32 buyout_rule() const;
  inline void set_buyout_rule(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.CurrencyConfig)
 private:
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_tick_size();
  inline void clear_has_tick_size();
  inline void set_has_flat_outbid_incr();
  inline void clear_has_flat_outbid_incr();
  inline void set_has_scale_outbid_incr();
  inline void clear_has_scale_outbid_incr();
  inline void set_has_min_starting_unit_price();
  inline void clear_has_min_starting_unit_price();
  inline void set_has_max_starting_unit_price();
  inline void clear_has_max_starting_unit_price();
  inline void set_has_max_unit_price();
  inline void clear_has_max_unit_price();
  inline void set_has_max_total_amount();
  inline void clear_has_max_total_amount();
  inline void set_has_buyout_rule();
  inline void clear_has_buyout_rule();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* currency_;
  ::google::protobuf::uint64 tick_size_;
  ::google::protobuf::uint64 flat_outbid_incr_;
  ::google::protobuf::uint64 scale_outbid_incr_;
  ::google::protobuf::uint64 min_starting_unit_price_;
  ::google::protobuf::uint64 max_starting_unit_price_;
  ::google::protobuf::uint64 max_unit_price_;
  ::google::protobuf::uint64 max_total_amount_;
  ::google::protobuf::int32 buyout_rule_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static CurrencyConfig* default_instance_;
};
// -------------------------------------------------------------------

class SpecialistConfig : public ::google::protobuf::Message {
 public:
  SpecialistConfig();
  virtual ~SpecialistConfig();
  
  SpecialistConfig(const SpecialistConfig& from);
  
  inline SpecialistConfig& operator=(const SpecialistConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecialistConfig& default_instance();
  
  void Swap(SpecialistConfig* other);
  
  // implements Message ----------------------------------------------
  
  SpecialistConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecialistConfig& from);
  void MergeFrom(const SpecialistConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 specialist = 1;
  inline bool has_specialist() const;
  inline void clear_specialist();
  static const int kSpecialistFieldNumber = 1;
  inline ::google::protobuf::int32 specialist() const;
  inline void set_specialist(::google::protobuf::int32 value);
  
  // repeated uint64 auction_durations = 2;
  inline int auction_durations_size() const;
  inline void clear_auction_durations();
  static const int kAuctionDurationsFieldNumber = 2;
  inline ::google::protobuf::uint64 auction_durations(int index) const;
  inline void set_auction_durations(int index, ::google::protobuf::uint64 value);
  inline void add_auction_durations(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      auction_durations() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_auction_durations();
  
  // repeated uint64 auction_start_delays = 3;
  inline int auction_start_delays_size() const;
  inline void clear_auction_start_delays();
  static const int kAuctionStartDelaysFieldNumber = 3;
  inline ::google::protobuf::uint64 auction_start_delays(int index) const;
  inline void set_auction_start_delays(int index, ::google::protobuf::uint64 value);
  inline void add_auction_start_delays(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      auction_start_delays() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_auction_start_delays();
  
  // required uint64 anti_sniping_extension_delay = 4;
  inline bool has_anti_sniping_extension_delay() const;
  inline void clear_anti_sniping_extension_delay();
  static const int kAntiSnipingExtensionDelayFieldNumber = 4;
  inline ::google::protobuf::uint64 anti_sniping_extension_delay() const;
  inline void set_anti_sniping_extension_delay(::google::protobuf::uint64 value);
  
  // repeated .bnet.protocol.exchange.CurrencyConfig currency_config = 5;
  inline int currency_config_size() const;
  inline void clear_currency_config();
  static const int kCurrencyConfigFieldNumber = 5;
  inline const ::bnet::protocol::exchange::CurrencyConfig& currency_config(int index) const;
  inline ::bnet::protocol::exchange::CurrencyConfig* mutable_currency_config(int index);
  inline ::bnet::protocol::exchange::CurrencyConfig* add_currency_config();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::exchange::CurrencyConfig >&
      currency_config() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::exchange::CurrencyConfig >*
      mutable_currency_config();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.SpecialistConfig)
 private:
  inline void set_has_specialist();
  inline void clear_has_specialist();
  inline void set_has_anti_sniping_extension_delay();
  inline void clear_has_anti_sniping_extension_delay();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > auction_durations_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > auction_start_delays_;
  ::google::protobuf::uint64 anti_sniping_extension_delay_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::exchange::CurrencyConfig > currency_config_;
  ::google::protobuf::int32 specialist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static SpecialistConfig* default_instance_;
};
// -------------------------------------------------------------------

class BillingAddress : public ::google::protobuf::Message {
 public:
  BillingAddress();
  virtual ~BillingAddress();
  
  BillingAddress(const BillingAddress& from);
  
  inline BillingAddress& operator=(const BillingAddress& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BillingAddress& default_instance();
  
  void Swap(BillingAddress* other);
  
  // implements Message ----------------------------------------------
  
  BillingAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BillingAddress& from);
  void MergeFrom(const BillingAddress& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 country_id = 1;
  inline bool has_country_id() const;
  inline void clear_country_id();
  static const int kCountryIdFieldNumber = 1;
  inline ::google::protobuf::int32 country_id() const;
  inline void set_country_id(::google::protobuf::int32 value);
  
  // required string city = 2;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 2;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  
  // optional string state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  
  // optional string postal_code = 4;
  inline bool has_postal_code() const;
  inline void clear_postal_code();
  static const int kPostalCodeFieldNumber = 4;
  inline const ::std::string& postal_code() const;
  inline void set_postal_code(const ::std::string& value);
  inline void set_postal_code(const char* value);
  inline void set_postal_code(const char* value, size_t size);
  inline ::std::string* mutable_postal_code();
  inline ::std::string* release_postal_code();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.BillingAddress)
 private:
  inline void set_has_country_id();
  inline void clear_has_country_id();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_postal_code();
  inline void clear_has_postal_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* city_;
  ::std::string* state_;
  ::std::string* postal_code_;
  ::google::protobuf::int32 country_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static BillingAddress* default_instance_;
};
// -------------------------------------------------------------------

class FeeEstimationData : public ::google::protobuf::Message {
 public:
  FeeEstimationData();
  virtual ~FeeEstimationData();
  
  FeeEstimationData(const FeeEstimationData& from);
  
  inline FeeEstimationData& operator=(const FeeEstimationData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeeEstimationData& default_instance();
  
  void Swap(FeeEstimationData* other);
  
  // implements Message ----------------------------------------------
  
  FeeEstimationData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeeEstimationData& from);
  void MergeFrom(const FeeEstimationData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed32 program = 1;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 1;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);
  
  // required int32 specialist = 2;
  inline bool has_specialist() const;
  inline void clear_specialist();
  static const int kSpecialistFieldNumber = 2;
  inline ::google::protobuf::int32 specialist() const;
  inline void set_specialist(::google::protobuf::int32 value);
  
  // required string currency = 3;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 3;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  
  // required fixed32 source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline ::google::protobuf::uint32 source() const;
  inline void set_source(::google::protobuf::uint32 value);
  
  // required uint64 amount = 5;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 5;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);
  
  // optional .bnet.protocol.EntityId bnet_account = 6;
  inline bool has_bnet_account() const;
  inline void clear_bnet_account();
  static const int kBnetAccountFieldNumber = 6;
  inline const ::bnet::protocol::EntityId& bnet_account() const;
  inline ::bnet::protocol::EntityId* mutable_bnet_account();
  inline ::bnet::protocol::EntityId* release_bnet_account();
  
  // optional .bnet.protocol.exchange.BillingAddress billing_address = 7;
  inline bool has_billing_address() const;
  inline void clear_billing_address();
  static const int kBillingAddressFieldNumber = 7;
  inline const ::bnet::protocol::exchange::BillingAddress& billing_address() const;
  inline ::bnet::protocol::exchange::BillingAddress* mutable_billing_address();
  inline ::bnet::protocol::exchange::BillingAddress* release_billing_address();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.exchange.FeeEstimationData)
 private:
  inline void set_has_program();
  inline void clear_has_program();
  inline void set_has_specialist();
  inline void clear_has_specialist();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_bnet_account();
  inline void clear_has_bnet_account();
  inline void set_has_billing_address();
  inline void clear_has_billing_address();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 program_;
  ::google::protobuf::int32 specialist_;
  ::std::string* currency_;
  ::google::protobuf::uint64 amount_;
  ::bnet::protocol::EntityId* bnet_account_;
  ::bnet::protocol::exchange::BillingAddress* billing_address_;
  ::google::protobuf::uint32 source_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fexchange_2fexchange_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fexchange_2fexchange_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static FeeEstimationData* default_instance_;
};
// ===================================================================


// ===================================================================

// OrderBook

// required .bnet.protocol.exchange.BlobOfType object = 1;
inline bool OrderBook::has_object() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderBook::set_has_object() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderBook::clear_has_object() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderBook::clear_object() {
  if (object_ != NULL) object_->::bnet::protocol::exchange::BlobOfType::Clear();
  clear_has_object();
}
inline const ::bnet::protocol::exchange::BlobOfType& OrderBook::object() const {
  return object_ != NULL ? *object_ : *default_instance_->object_;
}
inline ::bnet::protocol::exchange::BlobOfType* OrderBook::mutable_object() {
  set_has_object();
  if (object_ == NULL) object_ = new ::bnet::protocol::exchange::BlobOfType;
  return object_;
}
inline ::bnet::protocol::exchange::BlobOfType* OrderBook::release_object() {
  clear_has_object();
  ::bnet::protocol::exchange::BlobOfType* temp = object_;
  object_ = NULL;
  return temp;
}

// required fixed32 program = 2;
inline bool OrderBook::has_program() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderBook::set_has_program() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderBook::clear_has_program() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderBook::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 OrderBook::program() const {
  return program_;
}
inline void OrderBook::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
}

// required uint32 compatibility = 3;
inline bool OrderBook::has_compatibility() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderBook::set_has_compatibility() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderBook::clear_has_compatibility() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderBook::clear_compatibility() {
  compatibility_ = 0u;
  clear_has_compatibility();
}
inline ::google::protobuf::uint32 OrderBook::compatibility() const {
  return compatibility_;
}
inline void OrderBook::set_compatibility(::google::protobuf::uint32 value) {
  set_has_compatibility();
  compatibility_ = value;
}

// required string currency = 4;
inline bool OrderBook::has_currency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderBook::set_has_currency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderBook::clear_has_currency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderBook::clear_currency() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& OrderBook::currency() const {
  return *currency_;
}
inline void OrderBook::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void OrderBook::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void OrderBook::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderBook::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  return currency_;
}
inline ::std::string* OrderBook::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 specialist = 5;
inline bool OrderBook::has_specialist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderBook::set_has_specialist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderBook::clear_has_specialist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderBook::clear_specialist() {
  specialist_ = 0;
  clear_has_specialist();
}
inline ::google::protobuf::int32 OrderBook::specialist() const {
  return specialist_;
}
inline void OrderBook::set_specialist(::google::protobuf::int32 value) {
  set_has_specialist();
  specialist_ = value;
}

// required uint32 allowed_realm = 6;
inline bool OrderBook::has_allowed_realm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderBook::set_has_allowed_realm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderBook::clear_has_allowed_realm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderBook::clear_allowed_realm() {
  allowed_realm_ = 0u;
  clear_has_allowed_realm();
}
inline ::google::protobuf::uint32 OrderBook::allowed_realm() const {
  return allowed_realm_;
}
inline void OrderBook::set_allowed_realm(::google::protobuf::uint32 value) {
  set_has_allowed_realm();
  allowed_realm_ = value;
}

// -------------------------------------------------------------------

// OrderBookHandle

// required .bnet.protocol.exchange.PartitionId partition_id = 1;
inline bool OrderBookHandle::has_partition_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderBookHandle::set_has_partition_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderBookHandle::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderBookHandle::clear_partition_id() {
  if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
  clear_has_partition_id();
}
inline const ::bnet::protocol::exchange::PartitionId& OrderBookHandle::partition_id() const {
  return partition_id_ != NULL ? *partition_id_ : *default_instance_->partition_id_;
}
inline ::bnet::protocol::exchange::PartitionId* OrderBookHandle::mutable_partition_id() {
  set_has_partition_id();
  if (partition_id_ == NULL) partition_id_ = new ::bnet::protocol::exchange::PartitionId;
  return partition_id_;
}
inline ::bnet::protocol::exchange::PartitionId* OrderBookHandle::release_partition_id() {
  clear_has_partition_id();
  ::bnet::protocol::exchange::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}

// required uint64 order_book_id = 2;
inline bool OrderBookHandle::has_order_book_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderBookHandle::set_has_order_book_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderBookHandle::clear_has_order_book_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderBookHandle::clear_order_book_id() {
  order_book_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_book_id();
}
inline ::google::protobuf::uint64 OrderBookHandle::order_book_id() const {
  return order_book_id_;
}
inline void OrderBookHandle::set_order_book_id(::google::protobuf::uint64 value) {
  set_has_order_book_id();
  order_book_id_ = value;
}

// -------------------------------------------------------------------

// OrderBookNotification

// required .bnet.protocol.exchange.OrderBook order_book = 1;
inline bool OrderBookNotification::has_order_book() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderBookNotification::set_has_order_book() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderBookNotification::clear_has_order_book() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderBookNotification::clear_order_book() {
  if (order_book_ != NULL) order_book_->::bnet::protocol::exchange::OrderBook::Clear();
  clear_has_order_book();
}
inline const ::bnet::protocol::exchange::OrderBook& OrderBookNotification::order_book() const {
  return order_book_ != NULL ? *order_book_ : *default_instance_->order_book_;
}
inline ::bnet::protocol::exchange::OrderBook* OrderBookNotification::mutable_order_book() {
  set_has_order_book();
  if (order_book_ == NULL) order_book_ = new ::bnet::protocol::exchange::OrderBook;
  return order_book_;
}
inline ::bnet::protocol::exchange::OrderBook* OrderBookNotification::release_order_book() {
  clear_has_order_book();
  ::bnet::protocol::exchange::OrderBook* temp = order_book_;
  order_book_ = NULL;
  return temp;
}

// required .bnet.protocol.exchange.PartitionId partition_id = 2;
inline bool OrderBookNotification::has_partition_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderBookNotification::set_has_partition_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderBookNotification::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderBookNotification::clear_partition_id() {
  if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
  clear_has_partition_id();
}
inline const ::bnet::protocol::exchange::PartitionId& OrderBookNotification::partition_id() const {
  return partition_id_ != NULL ? *partition_id_ : *default_instance_->partition_id_;
}
inline ::bnet::protocol::exchange::PartitionId* OrderBookNotification::mutable_partition_id() {
  set_has_partition_id();
  if (partition_id_ == NULL) partition_id_ = new ::bnet::protocol::exchange::PartitionId;
  return partition_id_;
}
inline ::bnet::protocol::exchange::PartitionId* OrderBookNotification::release_partition_id() {
  clear_has_partition_id();
  ::bnet::protocol::exchange::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}

// required uint64 order_book_id = 3;
inline bool OrderBookNotification::has_order_book_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderBookNotification::set_has_order_book_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderBookNotification::clear_has_order_book_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderBookNotification::clear_order_book_id() {
  order_book_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_book_id();
}
inline ::google::protobuf::uint64 OrderBookNotification::order_book_id() const {
  return order_book_id_;
}
inline void OrderBookNotification::set_order_book_id(::google::protobuf::uint64 value) {
  set_has_order_book_id();
  order_book_id_ = value;
}

// optional uint64 trade_now_price = 4;
inline bool OrderBookNotification::has_trade_now_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderBookNotification::set_has_trade_now_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderBookNotification::clear_has_trade_now_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderBookNotification::clear_trade_now_price() {
  trade_now_price_ = GOOGLE_ULONGLONG(0);
  clear_has_trade_now_price();
}
inline ::google::protobuf::uint64 OrderBookNotification::trade_now_price() const {
  return trade_now_price_;
}
inline void OrderBookNotification::set_trade_now_price(::google::protobuf::uint64 value) {
  set_has_trade_now_price();
  trade_now_price_ = value;
}

// required uint32 status = 5;
inline bool OrderBookNotification::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderBookNotification::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderBookNotification::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderBookNotification::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 OrderBookNotification::status() const {
  return status_;
}
inline void OrderBookNotification::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint64 update_time = 6;
inline bool OrderBookNotification::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderBookNotification::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderBookNotification::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderBookNotification::clear_update_time() {
  update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::uint64 OrderBookNotification::update_time() const {
  return update_time_;
}
inline void OrderBookNotification::set_update_time(::google::protobuf::uint64 value) {
  set_has_update_time();
  update_time_ = value;
}

// -------------------------------------------------------------------

// OrderBookSummary

// required .bnet.protocol.exchange.PartitionId partition_id = 1;
inline bool OrderBookSummary::has_partition_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderBookSummary::set_has_partition_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderBookSummary::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderBookSummary::clear_partition_id() {
  if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
  clear_has_partition_id();
}
inline const ::bnet::protocol::exchange::PartitionId& OrderBookSummary::partition_id() const {
  return partition_id_ != NULL ? *partition_id_ : *default_instance_->partition_id_;
}
inline ::bnet::protocol::exchange::PartitionId* OrderBookSummary::mutable_partition_id() {
  set_has_partition_id();
  if (partition_id_ == NULL) partition_id_ = new ::bnet::protocol::exchange::PartitionId;
  return partition_id_;
}
inline ::bnet::protocol::exchange::PartitionId* OrderBookSummary::release_partition_id() {
  clear_has_partition_id();
  ::bnet::protocol::exchange::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}

// required uint64 order_book_id = 2;
inline bool OrderBookSummary::has_order_book_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderBookSummary::set_has_order_book_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderBookSummary::clear_has_order_book_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderBookSummary::clear_order_book_id() {
  order_book_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_book_id();
}
inline ::google::protobuf::uint64 OrderBookSummary::order_book_id() const {
  return order_book_id_;
}
inline void OrderBookSummary::set_order_book_id(::google::protobuf::uint64 value) {
  set_has_order_book_id();
  order_book_id_ = value;
}

// required uint32 result = 3;
inline bool OrderBookSummary::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderBookSummary::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderBookSummary::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderBookSummary::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 OrderBookSummary::result() const {
  return result_;
}
inline void OrderBookSummary::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional .bnet.protocol.exchange.OrderBook order_book = 4;
inline bool OrderBookSummary::has_order_book() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderBookSummary::set_has_order_book() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderBookSummary::clear_has_order_book() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderBookSummary::clear_order_book() {
  if (order_book_ != NULL) order_book_->::bnet::protocol::exchange::OrderBook::Clear();
  clear_has_order_book();
}
inline const ::bnet::protocol::exchange::OrderBook& OrderBookSummary::order_book() const {
  return order_book_ != NULL ? *order_book_ : *default_instance_->order_book_;
}
inline ::bnet::protocol::exchange::OrderBook* OrderBookSummary::mutable_order_book() {
  set_has_order_book();
  if (order_book_ == NULL) order_book_ = new ::bnet::protocol::exchange::OrderBook;
  return order_book_;
}
inline ::bnet::protocol::exchange::OrderBook* OrderBookSummary::release_order_book() {
  clear_has_order_book();
  ::bnet::protocol::exchange::OrderBook* temp = order_book_;
  order_book_ = NULL;
  return temp;
}

// optional uint64 amount = 5;
inline bool OrderBookSummary::has_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderBookSummary::set_has_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderBookSummary::clear_has_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderBookSummary::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 OrderBookSummary::amount() const {
  return amount_;
}
inline void OrderBookSummary::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint64 best_offer_price = 6;
inline bool OrderBookSummary::has_best_offer_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderBookSummary::set_has_best_offer_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderBookSummary::clear_has_best_offer_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderBookSummary::clear_best_offer_price() {
  best_offer_price_ = GOOGLE_ULONGLONG(0);
  clear_has_best_offer_price();
}
inline ::google::protobuf::uint64 OrderBookSummary::best_offer_price() const {
  return best_offer_price_;
}
inline void OrderBookSummary::set_best_offer_price(::google::protobuf::uint64 value) {
  set_has_best_offer_price();
  best_offer_price_ = value;
}

// optional uint64 best_bid_price = 7;
inline bool OrderBookSummary::has_best_bid_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OrderBookSummary::set_has_best_bid_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OrderBookSummary::clear_has_best_bid_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OrderBookSummary::clear_best_bid_price() {
  best_bid_price_ = GOOGLE_ULONGLONG(0);
  clear_has_best_bid_price();
}
inline ::google::protobuf::uint64 OrderBookSummary::best_bid_price() const {
  return best_bid_price_;
}
inline void OrderBookSummary::set_best_bid_price(::google::protobuf::uint64 value) {
  set_has_best_bid_price();
  best_bid_price_ = value;
}

// optional uint64 end_time = 8;
inline bool OrderBookSummary::has_end_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OrderBookSummary::set_has_end_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OrderBookSummary::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OrderBookSummary::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 OrderBookSummary::end_time() const {
  return end_time_;
}
inline void OrderBookSummary::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int32 status = 9;
inline bool OrderBookSummary::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OrderBookSummary::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OrderBookSummary::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OrderBookSummary::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 OrderBookSummary::status() const {
  return status_;
}
inline void OrderBookSummary::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint64 created_time = 10;
inline bool OrderBookSummary::has_created_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OrderBookSummary::set_has_created_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OrderBookSummary::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OrderBookSummary::clear_created_time() {
  created_time_ = GOOGLE_ULONGLONG(0);
  clear_has_created_time();
}
inline ::google::protobuf::uint64 OrderBookSummary::created_time() const {
  return created_time_;
}
inline void OrderBookSummary::set_created_time(::google::protobuf::uint64 value) {
  set_has_created_time();
  created_time_ = value;
}

// optional uint64 active_time = 11;
inline bool OrderBookSummary::has_active_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OrderBookSummary::set_has_active_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OrderBookSummary::clear_has_active_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OrderBookSummary::clear_active_time() {
  active_time_ = GOOGLE_ULONGLONG(0);
  clear_has_active_time();
}
inline ::google::protobuf::uint64 OrderBookSummary::active_time() const {
  return active_time_;
}
inline void OrderBookSummary::set_active_time(::google::protobuf::uint64 value) {
  set_has_active_time();
  active_time_ = value;
}

// optional uint64 closed_time = 12;
inline bool OrderBookSummary::has_closed_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OrderBookSummary::set_has_closed_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OrderBookSummary::clear_has_closed_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OrderBookSummary::clear_closed_time() {
  closed_time_ = GOOGLE_ULONGLONG(0);
  clear_has_closed_time();
}
inline ::google::protobuf::uint64 OrderBookSummary::closed_time() const {
  return closed_time_;
}
inline void OrderBookSummary::set_closed_time(::google::protobuf::uint64 value) {
  set_has_closed_time();
  closed_time_ = value;
}

// optional uint32 reason = 13;
inline bool OrderBookSummary::has_reason() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OrderBookSummary::set_has_reason() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OrderBookSummary::clear_has_reason() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OrderBookSummary::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 OrderBookSummary::reason() const {
  return reason_;
}
inline void OrderBookSummary::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// optional uint64 out_bid_unit_price = 14;
inline bool OrderBookSummary::has_out_bid_unit_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OrderBookSummary::set_has_out_bid_unit_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OrderBookSummary::clear_has_out_bid_unit_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OrderBookSummary::clear_out_bid_unit_price() {
  out_bid_unit_price_ = GOOGLE_ULONGLONG(0);
  clear_has_out_bid_unit_price();
}
inline ::google::protobuf::uint64 OrderBookSummary::out_bid_unit_price() const {
  return out_bid_unit_price_;
}
inline void OrderBookSummary::set_out_bid_unit_price(::google::protobuf::uint64 value) {
  set_has_out_bid_unit_price();
  out_bid_unit_price_ = value;
}

// -------------------------------------------------------------------

// Order

// required uint32 amount = 1;
inline bool Order::has_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Order::set_has_amount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Order::clear_has_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Order::clear_amount() {
  amount_ = 0u;
  clear_has_amount();
}
inline ::google::protobuf::uint32 Order::amount() const {
  return amount_;
}
inline void Order::set_amount(::google::protobuf::uint32 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint64 start_time = 2;
inline bool Order::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Order::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Order::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Order::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 Order::start_time() const {
  return start_time_;
}
inline void Order::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint64 end_time = 3;
inline bool Order::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Order::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Order::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Order::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 Order::end_time() const {
  return end_time_;
}
inline void Order::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional .bnet.protocol.exchange.BlobFrom account_for_money = 4;
inline bool Order::has_account_for_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Order::set_has_account_for_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Order::clear_has_account_for_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Order::clear_account_for_money() {
  if (account_for_money_ != NULL) account_for_money_->::bnet::protocol::exchange::BlobFrom::Clear();
  clear_has_account_for_money();
}
inline const ::bnet::protocol::exchange::BlobFrom& Order::account_for_money() const {
  return account_for_money_ != NULL ? *account_for_money_ : *default_instance_->account_for_money_;
}
inline ::bnet::protocol::exchange::BlobFrom* Order::mutable_account_for_money() {
  set_has_account_for_money();
  if (account_for_money_ == NULL) account_for_money_ = new ::bnet::protocol::exchange::BlobFrom;
  return account_for_money_;
}
inline ::bnet::protocol::exchange::BlobFrom* Order::release_account_for_money() {
  clear_has_account_for_money();
  ::bnet::protocol::exchange::BlobFrom* temp = account_for_money_;
  account_for_money_ = NULL;
  return temp;
}

// optional .bnet.protocol.exchange.BlobFrom account_for_item = 5;
inline bool Order::has_account_for_item() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Order::set_has_account_for_item() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Order::clear_has_account_for_item() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Order::clear_account_for_item() {
  if (account_for_item_ != NULL) account_for_item_->::bnet::protocol::exchange::BlobFrom::Clear();
  clear_has_account_for_item();
}
inline const ::bnet::protocol::exchange::BlobFrom& Order::account_for_item() const {
  return account_for_item_ != NULL ? *account_for_item_ : *default_instance_->account_for_item_;
}
inline ::bnet::protocol::exchange::BlobFrom* Order::mutable_account_for_item() {
  set_has_account_for_item();
  if (account_for_item_ == NULL) account_for_item_ = new ::bnet::protocol::exchange::BlobFrom;
  return account_for_item_;
}
inline ::bnet::protocol::exchange::BlobFrom* Order::release_account_for_item() {
  clear_has_account_for_item();
  ::bnet::protocol::exchange::BlobFrom* temp = account_for_item_;
  account_for_item_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId bnet_account = 6;
inline bool Order::has_bnet_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Order::set_has_bnet_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Order::clear_has_bnet_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Order::clear_bnet_account() {
  if (bnet_account_ != NULL) bnet_account_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account();
}
inline const ::bnet::protocol::EntityId& Order::bnet_account() const {
  return bnet_account_ != NULL ? *bnet_account_ : *default_instance_->bnet_account_;
}
inline ::bnet::protocol::EntityId* Order::mutable_bnet_account() {
  set_has_bnet_account();
  if (bnet_account_ == NULL) bnet_account_ = new ::bnet::protocol::EntityId;
  return bnet_account_;
}
inline ::bnet::protocol::EntityId* Order::release_bnet_account() {
  clear_has_bnet_account();
  ::bnet::protocol::EntityId* temp = bnet_account_;
  bnet_account_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId game_account = 7;
inline bool Order::has_game_account() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Order::set_has_game_account() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Order::clear_has_game_account() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Order::clear_game_account() {
  if (game_account_ != NULL) game_account_->::bnet::protocol::EntityId::Clear();
  clear_has_game_account();
}
inline const ::bnet::protocol::EntityId& Order::game_account() const {
  return game_account_ != NULL ? *game_account_ : *default_instance_->game_account_;
}
inline ::bnet::protocol::EntityId* Order::mutable_game_account() {
  set_has_game_account();
  if (game_account_ == NULL) game_account_ = new ::bnet::protocol::EntityId;
  return game_account_;
}
inline ::bnet::protocol::EntityId* Order::release_game_account() {
  clear_has_game_account();
  ::bnet::protocol::EntityId* temp = game_account_;
  game_account_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId toon = 8;
inline bool Order::has_toon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Order::set_has_toon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Order::clear_has_toon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Order::clear_toon() {
  if (toon_ != NULL) toon_->::bnet::protocol::EntityId::Clear();
  clear_has_toon();
}
inline const ::bnet::protocol::EntityId& Order::toon() const {
  return toon_ != NULL ? *toon_ : *default_instance_->toon_;
}
inline ::bnet::protocol::EntityId* Order::mutable_toon() {
  set_has_toon();
  if (toon_ == NULL) toon_ = new ::bnet::protocol::EntityId;
  return toon_;
}
inline ::bnet::protocol::EntityId* Order::release_toon() {
  clear_has_toon();
  ::bnet::protocol::EntityId* temp = toon_;
  toon_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Extension

// required .bnet.protocol.exchange.PartitionId partition_id = 1;
inline bool Extension::has_partition_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Extension::set_has_partition_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Extension::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Extension::clear_partition_id() {
  if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
  clear_has_partition_id();
}
inline const ::bnet::protocol::exchange::PartitionId& Extension::partition_id() const {
  return partition_id_ != NULL ? *partition_id_ : *default_instance_->partition_id_;
}
inline ::bnet::protocol::exchange::PartitionId* Extension::mutable_partition_id() {
  set_has_partition_id();
  if (partition_id_ == NULL) partition_id_ = new ::bnet::protocol::exchange::PartitionId;
  return partition_id_;
}
inline ::bnet::protocol::exchange::PartitionId* Extension::release_partition_id() {
  clear_has_partition_id();
  ::bnet::protocol::exchange::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}

// required uint64 order_book_id = 2;
inline bool Extension::has_order_book_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Extension::set_has_order_book_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Extension::clear_has_order_book_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Extension::clear_order_book_id() {
  order_book_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_book_id();
}
inline ::google::protobuf::uint64 Extension::order_book_id() const {
  return order_book_id_;
}
inline void Extension::set_order_book_id(::google::protobuf::uint64 value) {
  set_has_order_book_id();
  order_book_id_ = value;
}

// required uint64 order_id = 3;
inline bool Extension::has_order_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Extension::set_has_order_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Extension::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Extension::clear_order_id() {
  order_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::uint64 Extension::order_id() const {
  return order_id_;
}
inline void Extension::set_order_id(::google::protobuf::uint64 value) {
  set_has_order_id();
  order_id_ = value;
}

// optional uint64 filled_amount = 4;
inline bool Extension::has_filled_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Extension::set_has_filled_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Extension::clear_has_filled_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Extension::clear_filled_amount() {
  filled_amount_ = GOOGLE_ULONGLONG(0);
  clear_has_filled_amount();
}
inline ::google::protobuf::uint64 Extension::filled_amount() const {
  return filled_amount_;
}
inline void Extension::set_filled_amount(::google::protobuf::uint64 value) {
  set_has_filled_amount();
  filled_amount_ = value;
}

// optional int32 order_status = 5;
inline bool Extension::has_order_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Extension::set_has_order_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Extension::clear_has_order_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Extension::clear_order_status() {
  order_status_ = 0;
  clear_has_order_status();
}
inline ::google::protobuf::int32 Extension::order_status() const {
  return order_status_;
}
inline void Extension::set_order_status(::google::protobuf::int32 value) {
  set_has_order_status();
  order_status_ = value;
}

// optional uint64 authorized_time = 6;
inline bool Extension::has_authorized_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Extension::set_has_authorized_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Extension::clear_has_authorized_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Extension::clear_authorized_time() {
  authorized_time_ = GOOGLE_ULONGLONG(0);
  clear_has_authorized_time();
}
inline ::google::protobuf::uint64 Extension::authorized_time() const {
  return authorized_time_;
}
inline void Extension::set_authorized_time(::google::protobuf::uint64 value) {
  set_has_authorized_time();
  authorized_time_ = value;
}

// optional uint64 created_time = 7;
inline bool Extension::has_created_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Extension::set_has_created_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Extension::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Extension::clear_created_time() {
  created_time_ = GOOGLE_ULONGLONG(0);
  clear_has_created_time();
}
inline ::google::protobuf::uint64 Extension::created_time() const {
  return created_time_;
}
inline void Extension::set_created_time(::google::protobuf::uint64 value) {
  set_has_created_time();
  created_time_ = value;
}

// optional uint64 closed_time = 8;
inline bool Extension::has_closed_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Extension::set_has_closed_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Extension::clear_has_closed_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Extension::clear_closed_time() {
  closed_time_ = GOOGLE_ULONGLONG(0);
  clear_has_closed_time();
}
inline ::google::protobuf::uint64 Extension::closed_time() const {
  return closed_time_;
}
inline void Extension::set_closed_time(::google::protobuf::uint64 value) {
  set_has_closed_time();
  closed_time_ = value;
}

// optional uint32 reason = 9;
inline bool Extension::has_reason() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Extension::set_has_reason() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Extension::clear_has_reason() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Extension::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 Extension::reason() const {
  return reason_;
}
inline void Extension::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// optional .bnet.protocol.exchange.OrderBook order_book = 10;
inline bool Extension::has_order_book() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Extension::set_has_order_book() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Extension::clear_has_order_book() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Extension::clear_order_book() {
  if (order_book_ != NULL) order_book_->::bnet::protocol::exchange::OrderBook::Clear();
  clear_has_order_book();
}
inline const ::bnet::protocol::exchange::OrderBook& Extension::order_book() const {
  return order_book_ != NULL ? *order_book_ : *default_instance_->order_book_;
}
inline ::bnet::protocol::exchange::OrderBook* Extension::mutable_order_book() {
  set_has_order_book();
  if (order_book_ == NULL) order_book_ = new ::bnet::protocol::exchange::OrderBook;
  return order_book_;
}
inline ::bnet::protocol::exchange::OrderBook* Extension::release_order_book() {
  clear_has_order_book();
  ::bnet::protocol::exchange::OrderBook* temp = order_book_;
  order_book_ = NULL;
  return temp;
}

// optional uint64 order_book_status = 11;
inline bool Extension::has_order_book_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Extension::set_has_order_book_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Extension::clear_has_order_book_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Extension::clear_order_book_status() {
  order_book_status_ = GOOGLE_ULONGLONG(0);
  clear_has_order_book_status();
}
inline ::google::protobuf::uint64 Extension::order_book_status() const {
  return order_book_status_;
}
inline void Extension::set_order_book_status(::google::protobuf::uint64 value) {
  set_has_order_book_status();
  order_book_status_ = value;
}

// optional uint64 money_to_claim = 12;
inline bool Extension::has_money_to_claim() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Extension::set_has_money_to_claim() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Extension::clear_has_money_to_claim() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Extension::clear_money_to_claim() {
  money_to_claim_ = GOOGLE_ULONGLONG(0);
  clear_has_money_to_claim();
}
inline ::google::protobuf::uint64 Extension::money_to_claim() const {
  return money_to_claim_;
}
inline void Extension::set_money_to_claim(::google::protobuf::uint64 value) {
  set_has_money_to_claim();
  money_to_claim_ = value;
}

// optional uint64 items_to_claim = 13;
inline bool Extension::has_items_to_claim() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Extension::set_has_items_to_claim() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Extension::clear_has_items_to_claim() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Extension::clear_items_to_claim() {
  items_to_claim_ = GOOGLE_ULONGLONG(0);
  clear_has_items_to_claim();
}
inline ::google::protobuf::uint64 Extension::items_to_claim() const {
  return items_to_claim_;
}
inline void Extension::set_items_to_claim(::google::protobuf::uint64 value) {
  set_has_items_to_claim();
  items_to_claim_ = value;
}

// -------------------------------------------------------------------

// Offer

// required .bnet.protocol.exchange.Order order = 1;
inline bool Offer::has_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Offer::set_has_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Offer::clear_has_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Offer::clear_order() {
  if (order_ != NULL) order_->::bnet::protocol::exchange::Order::Clear();
  clear_has_order();
}
inline const ::bnet::protocol::exchange::Order& Offer::order() const {
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::bnet::protocol::exchange::Order* Offer::mutable_order() {
  set_has_order();
  if (order_ == NULL) order_ = new ::bnet::protocol::exchange::Order;
  return order_;
}
inline ::bnet::protocol::exchange::Order* Offer::release_order() {
  clear_has_order();
  ::bnet::protocol::exchange::Order* temp = order_;
  order_ = NULL;
  return temp;
}

// optional uint64 trade_now_price = 2;
inline bool Offer::has_trade_now_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Offer::set_has_trade_now_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Offer::clear_has_trade_now_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Offer::clear_trade_now_price() {
  trade_now_price_ = GOOGLE_ULONGLONG(0);
  clear_has_trade_now_price();
}
inline ::google::protobuf::uint64 Offer::trade_now_price() const {
  return trade_now_price_;
}
inline void Offer::set_trade_now_price(::google::protobuf::uint64 value) {
  set_has_trade_now_price();
  trade_now_price_ = value;
}

// optional uint64 reserve_price = 3;
inline bool Offer::has_reserve_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Offer::set_has_reserve_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Offer::clear_has_reserve_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Offer::clear_reserve_price() {
  reserve_price_ = GOOGLE_ULONGLONG(0);
  clear_has_reserve_price();
}
inline ::google::protobuf::uint64 Offer::reserve_price() const {
  return reserve_price_;
}
inline void Offer::set_reserve_price(::google::protobuf::uint64 value) {
  set_has_reserve_price();
  reserve_price_ = value;
}

// optional uint64 out_bid_price = 4;
inline bool Offer::has_out_bid_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Offer::set_has_out_bid_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Offer::clear_has_out_bid_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Offer::clear_out_bid_price() {
  out_bid_price_ = GOOGLE_ULONGLONG(0);
  clear_has_out_bid_price();
}
inline ::google::protobuf::uint64 Offer::out_bid_price() const {
  return out_bid_price_;
}
inline void Offer::set_out_bid_price(::google::protobuf::uint64 value) {
  set_has_out_bid_price();
  out_bid_price_ = value;
}

// -------------------------------------------------------------------

// OfferExtended

// required .bnet.protocol.exchange.Offer offer = 1;
inline bool OfferExtended::has_offer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfferExtended::set_has_offer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfferExtended::clear_has_offer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfferExtended::clear_offer() {
  if (offer_ != NULL) offer_->::bnet::protocol::exchange::Offer::Clear();
  clear_has_offer();
}
inline const ::bnet::protocol::exchange::Offer& OfferExtended::offer() const {
  return offer_ != NULL ? *offer_ : *default_instance_->offer_;
}
inline ::bnet::protocol::exchange::Offer* OfferExtended::mutable_offer() {
  set_has_offer();
  if (offer_ == NULL) offer_ = new ::bnet::protocol::exchange::Offer;
  return offer_;
}
inline ::bnet::protocol::exchange::Offer* OfferExtended::release_offer() {
  clear_has_offer();
  ::bnet::protocol::exchange::Offer* temp = offer_;
  offer_ = NULL;
  return temp;
}

// required .bnet.protocol.exchange.Extension extension = 2;
inline bool OfferExtended::has_extension() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfferExtended::set_has_extension() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfferExtended::clear_has_extension() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfferExtended::clear_extension() {
  if (extension_ != NULL) extension_->::bnet::protocol::exchange::Extension::Clear();
  clear_has_extension();
}
inline const ::bnet::protocol::exchange::Extension& OfferExtended::extension() const {
  return extension_ != NULL ? *extension_ : *default_instance_->extension_;
}
inline ::bnet::protocol::exchange::Extension* OfferExtended::mutable_extension() {
  set_has_extension();
  if (extension_ == NULL) extension_ = new ::bnet::protocol::exchange::Extension;
  return extension_;
}
inline ::bnet::protocol::exchange::Extension* OfferExtended::release_extension() {
  clear_has_extension();
  ::bnet::protocol::exchange::Extension* temp = extension_;
  extension_ = NULL;
  return temp;
}

// optional uint64 current_winning_price = 3;
inline bool OfferExtended::has_current_winning_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfferExtended::set_has_current_winning_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfferExtended::clear_has_current_winning_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfferExtended::clear_current_winning_price() {
  current_winning_price_ = GOOGLE_ULONGLONG(0);
  clear_has_current_winning_price();
}
inline ::google::protobuf::uint64 OfferExtended::current_winning_price() const {
  return current_winning_price_;
}
inline void OfferExtended::set_current_winning_price(::google::protobuf::uint64 value) {
  set_has_current_winning_price();
  current_winning_price_ = value;
}

// -------------------------------------------------------------------

// OfferCreation

// required .bnet.protocol.exchange.Offer offer = 1;
inline bool OfferCreation::has_offer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfferCreation::set_has_offer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfferCreation::clear_has_offer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfferCreation::clear_offer() {
  if (offer_ != NULL) offer_->::bnet::protocol::exchange::Offer::Clear();
  clear_has_offer();
}
inline const ::bnet::protocol::exchange::Offer& OfferCreation::offer() const {
  return offer_ != NULL ? *offer_ : *default_instance_->offer_;
}
inline ::bnet::protocol::exchange::Offer* OfferCreation::mutable_offer() {
  set_has_offer();
  if (offer_ == NULL) offer_ = new ::bnet::protocol::exchange::Offer;
  return offer_;
}
inline ::bnet::protocol::exchange::Offer* OfferCreation::release_offer() {
  clear_has_offer();
  ::bnet::protocol::exchange::Offer* temp = offer_;
  offer_ = NULL;
  return temp;
}

// optional uint64 auction_duration = 2;
inline bool OfferCreation::has_auction_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfferCreation::set_has_auction_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfferCreation::clear_has_auction_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfferCreation::clear_auction_duration() {
  auction_duration_ = GOOGLE_ULONGLONG(0);
  clear_has_auction_duration();
}
inline ::google::protobuf::uint64 OfferCreation::auction_duration() const {
  return auction_duration_;
}
inline void OfferCreation::set_auction_duration(::google::protobuf::uint64 value) {
  set_has_auction_duration();
  auction_duration_ = value;
}

// optional uint64 auction_start_delay = 3;
inline bool OfferCreation::has_auction_start_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfferCreation::set_has_auction_start_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfferCreation::clear_has_auction_start_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfferCreation::clear_auction_start_delay() {
  auction_start_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_auction_start_delay();
}
inline ::google::protobuf::uint64 OfferCreation::auction_start_delay() const {
  return auction_start_delay_;
}
inline void OfferCreation::set_auction_start_delay(::google::protobuf::uint64 value) {
  set_has_auction_start_delay();
  auction_start_delay_ = value;
}

// optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
inline bool OfferCreation::has_billing_address() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfferCreation::set_has_billing_address() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OfferCreation::clear_has_billing_address() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OfferCreation::clear_billing_address() {
  if (billing_address_ != NULL) billing_address_->::bnet::protocol::exchange::BillingAddress::Clear();
  clear_has_billing_address();
}
inline const ::bnet::protocol::exchange::BillingAddress& OfferCreation::billing_address() const {
  return billing_address_ != NULL ? *billing_address_ : *default_instance_->billing_address_;
}
inline ::bnet::protocol::exchange::BillingAddress* OfferCreation::mutable_billing_address() {
  set_has_billing_address();
  if (billing_address_ == NULL) billing_address_ = new ::bnet::protocol::exchange::BillingAddress;
  return billing_address_;
}
inline ::bnet::protocol::exchange::BillingAddress* OfferCreation::release_billing_address() {
  clear_has_billing_address();
  ::bnet::protocol::exchange::BillingAddress* temp = billing_address_;
  billing_address_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Bid

// required .bnet.protocol.exchange.Order order = 1;
inline bool Bid::has_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bid::set_has_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bid::clear_has_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bid::clear_order() {
  if (order_ != NULL) order_->::bnet::protocol::exchange::Order::Clear();
  clear_has_order();
}
inline const ::bnet::protocol::exchange::Order& Bid::order() const {
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::bnet::protocol::exchange::Order* Bid::mutable_order() {
  set_has_order();
  if (order_ == NULL) order_ = new ::bnet::protocol::exchange::Order;
  return order_;
}
inline ::bnet::protocol::exchange::Order* Bid::release_order() {
  clear_has_order();
  ::bnet::protocol::exchange::Order* temp = order_;
  order_ = NULL;
  return temp;
}

// optional uint64 current_unit_price = 2;
inline bool Bid::has_current_unit_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bid::set_has_current_unit_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bid::clear_has_current_unit_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bid::clear_current_unit_price() {
  current_unit_price_ = GOOGLE_ULONGLONG(0);
  clear_has_current_unit_price();
}
inline ::google::protobuf::uint64 Bid::current_unit_price() const {
  return current_unit_price_;
}
inline void Bid::set_current_unit_price(::google::protobuf::uint64 value) {
  set_has_current_unit_price();
  current_unit_price_ = value;
}

// optional uint64 max_unit_price = 3;
inline bool Bid::has_max_unit_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bid::set_has_max_unit_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bid::clear_has_max_unit_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bid::clear_max_unit_price() {
  max_unit_price_ = GOOGLE_ULONGLONG(0);
  clear_has_max_unit_price();
}
inline ::google::protobuf::uint64 Bid::max_unit_price() const {
  return max_unit_price_;
}
inline void Bid::set_max_unit_price(::google::protobuf::uint64 value) {
  set_has_max_unit_price();
  max_unit_price_ = value;
}

// -------------------------------------------------------------------

// BidExtended

// required .bnet.protocol.exchange.Bid bid = 1;
inline bool BidExtended::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidExtended::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidExtended::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidExtended::clear_bid() {
  if (bid_ != NULL) bid_->::bnet::protocol::exchange::Bid::Clear();
  clear_has_bid();
}
inline const ::bnet::protocol::exchange::Bid& BidExtended::bid() const {
  return bid_ != NULL ? *bid_ : *default_instance_->bid_;
}
inline ::bnet::protocol::exchange::Bid* BidExtended::mutable_bid() {
  set_has_bid();
  if (bid_ == NULL) bid_ = new ::bnet::protocol::exchange::Bid;
  return bid_;
}
inline ::bnet::protocol::exchange::Bid* BidExtended::release_bid() {
  clear_has_bid();
  ::bnet::protocol::exchange::Bid* temp = bid_;
  bid_ = NULL;
  return temp;
}

// required .bnet.protocol.exchange.Extension extension = 2;
inline bool BidExtended::has_extension() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidExtended::set_has_extension() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidExtended::clear_has_extension() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidExtended::clear_extension() {
  if (extension_ != NULL) extension_->::bnet::protocol::exchange::Extension::Clear();
  clear_has_extension();
}
inline const ::bnet::protocol::exchange::Extension& BidExtended::extension() const {
  return extension_ != NULL ? *extension_ : *default_instance_->extension_;
}
inline ::bnet::protocol::exchange::Extension* BidExtended::mutable_extension() {
  set_has_extension();
  if (extension_ == NULL) extension_ = new ::bnet::protocol::exchange::Extension;
  return extension_;
}
inline ::bnet::protocol::exchange::Extension* BidExtended::release_extension() {
  clear_has_extension();
  ::bnet::protocol::exchange::Extension* temp = extension_;
  extension_ = NULL;
  return temp;
}

// optional uint64 offer_out_bid_price = 3;
inline bool BidExtended::has_offer_out_bid_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidExtended::set_has_offer_out_bid_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidExtended::clear_has_offer_out_bid_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidExtended::clear_offer_out_bid_price() {
  offer_out_bid_price_ = GOOGLE_ULONGLONG(0);
  clear_has_offer_out_bid_price();
}
inline ::google::protobuf::uint64 BidExtended::offer_out_bid_price() const {
  return offer_out_bid_price_;
}
inline void BidExtended::set_offer_out_bid_price(::google::protobuf::uint64 value) {
  set_has_offer_out_bid_price();
  offer_out_bid_price_ = value;
}

// optional uint64 offer_trade_now_price = 4;
inline bool BidExtended::has_offer_trade_now_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidExtended::set_has_offer_trade_now_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidExtended::clear_has_offer_trade_now_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidExtended::clear_offer_trade_now_price() {
  offer_trade_now_price_ = GOOGLE_ULONGLONG(0);
  clear_has_offer_trade_now_price();
}
inline ::google::protobuf::uint64 BidExtended::offer_trade_now_price() const {
  return offer_trade_now_price_;
}
inline void BidExtended::set_offer_trade_now_price(::google::protobuf::uint64 value) {
  set_has_offer_trade_now_price();
  offer_trade_now_price_ = value;
}

// optional uint64 offer_current_winning_price = 5;
inline bool BidExtended::has_offer_current_winning_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidExtended::set_has_offer_current_winning_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidExtended::clear_has_offer_current_winning_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidExtended::clear_offer_current_winning_price() {
  offer_current_winning_price_ = GOOGLE_ULONGLONG(0);
  clear_has_offer_current_winning_price();
}
inline ::google::protobuf::uint64 BidExtended::offer_current_winning_price() const {
  return offer_current_winning_price_;
}
inline void BidExtended::set_offer_current_winning_price(::google::protobuf::uint64 value) {
  set_has_offer_current_winning_price();
  offer_current_winning_price_ = value;
}

// -------------------------------------------------------------------

// BidCreation

// required .bnet.protocol.exchange.Bid bid = 1;
inline bool BidCreation::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidCreation::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidCreation::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidCreation::clear_bid() {
  if (bid_ != NULL) bid_->::bnet::protocol::exchange::Bid::Clear();
  clear_has_bid();
}
inline const ::bnet::protocol::exchange::Bid& BidCreation::bid() const {
  return bid_ != NULL ? *bid_ : *default_instance_->bid_;
}
inline ::bnet::protocol::exchange::Bid* BidCreation::mutable_bid() {
  set_has_bid();
  if (bid_ == NULL) bid_ = new ::bnet::protocol::exchange::Bid;
  return bid_;
}
inline ::bnet::protocol::exchange::Bid* BidCreation::release_bid() {
  clear_has_bid();
  ::bnet::protocol::exchange::Bid* temp = bid_;
  bid_ = NULL;
  return temp;
}

// optional uint64 auction_duration = 2;
inline bool BidCreation::has_auction_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidCreation::set_has_auction_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidCreation::clear_has_auction_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidCreation::clear_auction_duration() {
  auction_duration_ = GOOGLE_ULONGLONG(0);
  clear_has_auction_duration();
}
inline ::google::protobuf::uint64 BidCreation::auction_duration() const {
  return auction_duration_;
}
inline void BidCreation::set_auction_duration(::google::protobuf::uint64 value) {
  set_has_auction_duration();
  auction_duration_ = value;
}

// optional uint64 auction_start_delay = 3;
inline bool BidCreation::has_auction_start_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidCreation::set_has_auction_start_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidCreation::clear_has_auction_start_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidCreation::clear_auction_start_delay() {
  auction_start_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_auction_start_delay();
}
inline ::google::protobuf::uint64 BidCreation::auction_start_delay() const {
  return auction_start_delay_;
}
inline void BidCreation::set_auction_start_delay(::google::protobuf::uint64 value) {
  set_has_auction_start_delay();
  auction_start_delay_ = value;
}

// optional .bnet.protocol.exchange.BillingAddress billing_address = 4;
inline bool BidCreation::has_billing_address() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidCreation::set_has_billing_address() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidCreation::clear_has_billing_address() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidCreation::clear_billing_address() {
  if (billing_address_ != NULL) billing_address_->::bnet::protocol::exchange::BillingAddress::Clear();
  clear_has_billing_address();
}
inline const ::bnet::protocol::exchange::BillingAddress& BidCreation::billing_address() const {
  return billing_address_ != NULL ? *billing_address_ : *default_instance_->billing_address_;
}
inline ::bnet::protocol::exchange::BillingAddress* BidCreation::mutable_billing_address() {
  set_has_billing_address();
  if (billing_address_ == NULL) billing_address_ = new ::bnet::protocol::exchange::BillingAddress;
  return billing_address_;
}
inline ::bnet::protocol::exchange::BillingAddress* BidCreation::release_billing_address() {
  clear_has_billing_address();
  ::bnet::protocol::exchange::BillingAddress* temp = billing_address_;
  billing_address_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// QueryFilterByOrderId

// required uint32 max_result = 1;
inline bool QueryFilterByOrderId::has_max_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFilterByOrderId::set_has_max_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFilterByOrderId::clear_has_max_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFilterByOrderId::clear_max_result() {
  max_result_ = 0u;
  clear_has_max_result();
}
inline ::google::protobuf::uint32 QueryFilterByOrderId::max_result() const {
  return max_result_;
}
inline void QueryFilterByOrderId::set_max_result(::google::protobuf::uint32 value) {
  set_has_max_result();
  max_result_ = value;
}

// optional uint64 ref_order_id = 2;
inline bool QueryFilterByOrderId::has_ref_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFilterByOrderId::set_has_ref_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFilterByOrderId::clear_has_ref_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFilterByOrderId::clear_ref_order_id() {
  ref_order_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ref_order_id();
}
inline ::google::protobuf::uint64 QueryFilterByOrderId::ref_order_id() const {
  return ref_order_id_;
}
inline void QueryFilterByOrderId::set_ref_order_id(::google::protobuf::uint64 value) {
  set_has_ref_order_id();
  ref_order_id_ = value;
}

// -------------------------------------------------------------------

// QueryFilterByCreatedTime

// required uint32 max_result = 1;
inline bool QueryFilterByCreatedTime::has_max_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFilterByCreatedTime::set_has_max_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFilterByCreatedTime::clear_has_max_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFilterByCreatedTime::clear_max_result() {
  max_result_ = 0u;
  clear_has_max_result();
}
inline ::google::protobuf::uint32 QueryFilterByCreatedTime::max_result() const {
  return max_result_;
}
inline void QueryFilterByCreatedTime::set_max_result(::google::protobuf::uint32 value) {
  set_has_max_result();
  max_result_ = value;
}

// optional uint64 ref_created_time = 2;
inline bool QueryFilterByCreatedTime::has_ref_created_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFilterByCreatedTime::set_has_ref_created_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFilterByCreatedTime::clear_has_ref_created_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFilterByCreatedTime::clear_ref_created_time() {
  ref_created_time_ = GOOGLE_ULONGLONG(0);
  clear_has_ref_created_time();
}
inline ::google::protobuf::uint64 QueryFilterByCreatedTime::ref_created_time() const {
  return ref_created_time_;
}
inline void QueryFilterByCreatedTime::set_ref_created_time(::google::protobuf::uint64 value) {
  set_has_ref_created_time();
  ref_created_time_ = value;
}

// -------------------------------------------------------------------

// Settlement

// required uint64 order_book_id = 1;
inline bool Settlement::has_order_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Settlement::set_has_order_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Settlement::clear_has_order_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Settlement::clear_order_book_id() {
  order_book_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_book_id();
}
inline ::google::protobuf::uint64 Settlement::order_book_id() const {
  return order_book_id_;
}
inline void Settlement::set_order_book_id(::google::protobuf::uint64 value) {
  set_has_order_book_id();
  order_book_id_ = value;
}

// required uint64 money_amount = 2;
inline bool Settlement::has_money_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Settlement::set_has_money_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Settlement::clear_has_money_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Settlement::clear_money_amount() {
  money_amount_ = GOOGLE_ULONGLONG(0);
  clear_has_money_amount();
}
inline ::google::protobuf::uint64 Settlement::money_amount() const {
  return money_amount_;
}
inline void Settlement::set_money_amount(::google::protobuf::uint64 value) {
  set_has_money_amount();
  money_amount_ = value;
}

// required uint64 items_amount = 3;
inline bool Settlement::has_items_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Settlement::set_has_items_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Settlement::clear_has_items_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Settlement::clear_items_amount() {
  items_amount_ = GOOGLE_ULONGLONG(0);
  clear_has_items_amount();
}
inline ::google::protobuf::uint64 Settlement::items_amount() const {
  return items_amount_;
}
inline void Settlement::set_items_amount(::google::protobuf::uint64 value) {
  set_has_items_amount();
  items_amount_ = value;
}

// required uint64 offer_settle_id = 4;
inline bool Settlement::has_offer_settle_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Settlement::set_has_offer_settle_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Settlement::clear_has_offer_settle_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Settlement::clear_offer_settle_id() {
  offer_settle_id_ = GOOGLE_ULONGLONG(0);
  clear_has_offer_settle_id();
}
inline ::google::protobuf::uint64 Settlement::offer_settle_id() const {
  return offer_settle_id_;
}
inline void Settlement::set_offer_settle_id(::google::protobuf::uint64 value) {
  set_has_offer_settle_id();
  offer_settle_id_ = value;
}

// -------------------------------------------------------------------

// CurrencyConfig

// required string currency = 1;
inline bool CurrencyConfig::has_currency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurrencyConfig::set_has_currency() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurrencyConfig::clear_has_currency() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurrencyConfig::clear_currency() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& CurrencyConfig::currency() const {
  return *currency_;
}
inline void CurrencyConfig::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void CurrencyConfig::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void CurrencyConfig::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CurrencyConfig::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  return currency_;
}
inline ::std::string* CurrencyConfig::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 tick_size = 2;
inline bool CurrencyConfig::has_tick_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurrencyConfig::set_has_tick_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurrencyConfig::clear_has_tick_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurrencyConfig::clear_tick_size() {
  tick_size_ = GOOGLE_ULONGLONG(0);
  clear_has_tick_size();
}
inline ::google::protobuf::uint64 CurrencyConfig::tick_size() const {
  return tick_size_;
}
inline void CurrencyConfig::set_tick_size(::google::protobuf::uint64 value) {
  set_has_tick_size();
  tick_size_ = value;
}

// required uint64 flat_outbid_incr = 3;
inline bool CurrencyConfig::has_flat_outbid_incr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CurrencyConfig::set_has_flat_outbid_incr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CurrencyConfig::clear_has_flat_outbid_incr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CurrencyConfig::clear_flat_outbid_incr() {
  flat_outbid_incr_ = GOOGLE_ULONGLONG(0);
  clear_has_flat_outbid_incr();
}
inline ::google::protobuf::uint64 CurrencyConfig::flat_outbid_incr() const {
  return flat_outbid_incr_;
}
inline void CurrencyConfig::set_flat_outbid_incr(::google::protobuf::uint64 value) {
  set_has_flat_outbid_incr();
  flat_outbid_incr_ = value;
}

// required uint64 scale_outbid_incr = 4;
inline bool CurrencyConfig::has_scale_outbid_incr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CurrencyConfig::set_has_scale_outbid_incr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CurrencyConfig::clear_has_scale_outbid_incr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CurrencyConfig::clear_scale_outbid_incr() {
  scale_outbid_incr_ = GOOGLE_ULONGLONG(0);
  clear_has_scale_outbid_incr();
}
inline ::google::protobuf::uint64 CurrencyConfig::scale_outbid_incr() const {
  return scale_outbid_incr_;
}
inline void CurrencyConfig::set_scale_outbid_incr(::google::protobuf::uint64 value) {
  set_has_scale_outbid_incr();
  scale_outbid_incr_ = value;
}

// required uint64 min_starting_unit_price = 5;
inline bool CurrencyConfig::has_min_starting_unit_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CurrencyConfig::set_has_min_starting_unit_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CurrencyConfig::clear_has_min_starting_unit_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CurrencyConfig::clear_min_starting_unit_price() {
  min_starting_unit_price_ = GOOGLE_ULONGLONG(0);
  clear_has_min_starting_unit_price();
}
inline ::google::protobuf::uint64 CurrencyConfig::min_starting_unit_price() const {
  return min_starting_unit_price_;
}
inline void CurrencyConfig::set_min_starting_unit_price(::google::protobuf::uint64 value) {
  set_has_min_starting_unit_price();
  min_starting_unit_price_ = value;
}

// required uint64 max_starting_unit_price = 6;
inline bool CurrencyConfig::has_max_starting_unit_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CurrencyConfig::set_has_max_starting_unit_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CurrencyConfig::clear_has_max_starting_unit_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CurrencyConfig::clear_max_starting_unit_price() {
  max_starting_unit_price_ = GOOGLE_ULONGLONG(0);
  clear_has_max_starting_unit_price();
}
inline ::google::protobuf::uint64 CurrencyConfig::max_starting_unit_price() const {
  return max_starting_unit_price_;
}
inline void CurrencyConfig::set_max_starting_unit_price(::google::protobuf::uint64 value) {
  set_has_max_starting_unit_price();
  max_starting_unit_price_ = value;
}

// required uint64 max_unit_price = 7;
inline bool CurrencyConfig::has_max_unit_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CurrencyConfig::set_has_max_unit_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CurrencyConfig::clear_has_max_unit_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CurrencyConfig::clear_max_unit_price() {
  max_unit_price_ = GOOGLE_ULONGLONG(0);
  clear_has_max_unit_price();
}
inline ::google::protobuf::uint64 CurrencyConfig::max_unit_price() const {
  return max_unit_price_;
}
inline void CurrencyConfig::set_max_unit_price(::google::protobuf::uint64 value) {
  set_has_max_unit_price();
  max_unit_price_ = value;
}

// required uint64 max_total_amount = 8;
inline bool CurrencyConfig::has_max_total_amount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CurrencyConfig::set_has_max_total_amount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CurrencyConfig::clear_has_max_total_amount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CurrencyConfig::clear_max_total_amount() {
  max_total_amount_ = GOOGLE_ULONGLONG(0);
  clear_has_max_total_amount();
}
inline ::google::protobuf::uint64 CurrencyConfig::max_total_amount() const {
  return max_total_amount_;
}
inline void CurrencyConfig::set_max_total_amount(::google::protobuf::uint64 value) {
  set_has_max_total_amount();
  max_total_amount_ = value;
}

// required int32 buyout_rule = 9;
inline bool CurrencyConfig::has_buyout_rule() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CurrencyConfig::set_has_buyout_rule() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CurrencyConfig::clear_has_buyout_rule() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CurrencyConfig::clear_buyout_rule() {
  buyout_rule_ = 0;
  clear_has_buyout_rule();
}
inline ::google::protobuf::int32 CurrencyConfig::buyout_rule() const {
  return buyout_rule_;
}
inline void CurrencyConfig::set_buyout_rule(::google::protobuf::int32 value) {
  set_has_buyout_rule();
  buyout_rule_ = value;
}

// -------------------------------------------------------------------

// SpecialistConfig

// required int32 specialist = 1;
inline bool SpecialistConfig::has_specialist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecialistConfig::set_has_specialist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpecialistConfig::clear_has_specialist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpecialistConfig::clear_specialist() {
  specialist_ = 0;
  clear_has_specialist();
}
inline ::google::protobuf::int32 SpecialistConfig::specialist() const {
  return specialist_;
}
inline void SpecialistConfig::set_specialist(::google::protobuf::int32 value) {
  set_has_specialist();
  specialist_ = value;
}

// repeated uint64 auction_durations = 2;
inline int SpecialistConfig::auction_durations_size() const {
  return auction_durations_.size();
}
inline void SpecialistConfig::clear_auction_durations() {
  auction_durations_.Clear();
}
inline ::google::protobuf::uint64 SpecialistConfig::auction_durations(int index) const {
  return auction_durations_.Get(index);
}
inline void SpecialistConfig::set_auction_durations(int index, ::google::protobuf::uint64 value) {
  auction_durations_.Set(index, value);
}
inline void SpecialistConfig::add_auction_durations(::google::protobuf::uint64 value) {
  auction_durations_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SpecialistConfig::auction_durations() const {
  return auction_durations_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SpecialistConfig::mutable_auction_durations() {
  return &auction_durations_;
}

// repeated uint64 auction_start_delays = 3;
inline int SpecialistConfig::auction_start_delays_size() const {
  return auction_start_delays_.size();
}
inline void SpecialistConfig::clear_auction_start_delays() {
  auction_start_delays_.Clear();
}
inline ::google::protobuf::uint64 SpecialistConfig::auction_start_delays(int index) const {
  return auction_start_delays_.Get(index);
}
inline void SpecialistConfig::set_auction_start_delays(int index, ::google::protobuf::uint64 value) {
  auction_start_delays_.Set(index, value);
}
inline void SpecialistConfig::add_auction_start_delays(::google::protobuf::uint64 value) {
  auction_start_delays_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SpecialistConfig::auction_start_delays() const {
  return auction_start_delays_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SpecialistConfig::mutable_auction_start_delays() {
  return &auction_start_delays_;
}

// required uint64 anti_sniping_extension_delay = 4;
inline bool SpecialistConfig::has_anti_sniping_extension_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpecialistConfig::set_has_anti_sniping_extension_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpecialistConfig::clear_has_anti_sniping_extension_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpecialistConfig::clear_anti_sniping_extension_delay() {
  anti_sniping_extension_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_anti_sniping_extension_delay();
}
inline ::google::protobuf::uint64 SpecialistConfig::anti_sniping_extension_delay() const {
  return anti_sniping_extension_delay_;
}
inline void SpecialistConfig::set_anti_sniping_extension_delay(::google::protobuf::uint64 value) {
  set_has_anti_sniping_extension_delay();
  anti_sniping_extension_delay_ = value;
}

// repeated .bnet.protocol.exchange.CurrencyConfig currency_config = 5;
inline int SpecialistConfig::currency_config_size() const {
  return currency_config_.size();
}
inline void SpecialistConfig::clear_currency_config() {
  currency_config_.Clear();
}
inline const ::bnet::protocol::exchange::CurrencyConfig& SpecialistConfig::currency_config(int index) const {
  return currency_config_.Get(index);
}
inline ::bnet::protocol::exchange::CurrencyConfig* SpecialistConfig::mutable_currency_config(int index) {
  return currency_config_.Mutable(index);
}
inline ::bnet::protocol::exchange::CurrencyConfig* SpecialistConfig::add_currency_config() {
  return currency_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::exchange::CurrencyConfig >&
SpecialistConfig::currency_config() const {
  return currency_config_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::exchange::CurrencyConfig >*
SpecialistConfig::mutable_currency_config() {
  return &currency_config_;
}

// -------------------------------------------------------------------

// BillingAddress

// required int32 country_id = 1;
inline bool BillingAddress::has_country_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BillingAddress::set_has_country_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BillingAddress::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BillingAddress::clear_country_id() {
  country_id_ = 0;
  clear_has_country_id();
}
inline ::google::protobuf::int32 BillingAddress::country_id() const {
  return country_id_;
}
inline void BillingAddress::set_country_id(::google::protobuf::int32 value) {
  set_has_country_id();
  country_id_ = value;
}

// required string city = 2;
inline bool BillingAddress::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BillingAddress::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BillingAddress::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BillingAddress::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& BillingAddress::city() const {
  return *city_;
}
inline void BillingAddress::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void BillingAddress::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void BillingAddress::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BillingAddress::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* BillingAddress::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string state = 3;
inline bool BillingAddress::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BillingAddress::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BillingAddress::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BillingAddress::clear_state() {
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& BillingAddress::state() const {
  return *state_;
}
inline void BillingAddress::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void BillingAddress::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void BillingAddress::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BillingAddress::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  return state_;
}
inline ::std::string* BillingAddress::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string postal_code = 4;
inline bool BillingAddress::has_postal_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BillingAddress::set_has_postal_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BillingAddress::clear_has_postal_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BillingAddress::clear_postal_code() {
  if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
    postal_code_->clear();
  }
  clear_has_postal_code();
}
inline const ::std::string& BillingAddress::postal_code() const {
  return *postal_code_;
}
inline void BillingAddress::set_postal_code(const ::std::string& value) {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::kEmptyString) {
    postal_code_ = new ::std::string;
  }
  postal_code_->assign(value);
}
inline void BillingAddress::set_postal_code(const char* value) {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::kEmptyString) {
    postal_code_ = new ::std::string;
  }
  postal_code_->assign(value);
}
inline void BillingAddress::set_postal_code(const char* value, size_t size) {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::kEmptyString) {
    postal_code_ = new ::std::string;
  }
  postal_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BillingAddress::mutable_postal_code() {
  set_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::kEmptyString) {
    postal_code_ = new ::std::string;
  }
  return postal_code_;
}
inline ::std::string* BillingAddress::release_postal_code() {
  clear_has_postal_code();
  if (postal_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = postal_code_;
    postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FeeEstimationData

// required fixed32 program = 1;
inline bool FeeEstimationData::has_program() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeeEstimationData::set_has_program() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeeEstimationData::clear_has_program() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeeEstimationData::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 FeeEstimationData::program() const {
  return program_;
}
inline void FeeEstimationData::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
}

// required int32 specialist = 2;
inline bool FeeEstimationData::has_specialist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeeEstimationData::set_has_specialist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeeEstimationData::clear_has_specialist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeeEstimationData::clear_specialist() {
  specialist_ = 0;
  clear_has_specialist();
}
inline ::google::protobuf::int32 FeeEstimationData::specialist() const {
  return specialist_;
}
inline void FeeEstimationData::set_specialist(::google::protobuf::int32 value) {
  set_has_specialist();
  specialist_ = value;
}

// required string currency = 3;
inline bool FeeEstimationData::has_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeeEstimationData::set_has_currency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeeEstimationData::clear_has_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeeEstimationData::clear_currency() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& FeeEstimationData::currency() const {
  return *currency_;
}
inline void FeeEstimationData::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void FeeEstimationData::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void FeeEstimationData::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeeEstimationData::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  return currency_;
}
inline ::std::string* FeeEstimationData::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required fixed32 source = 4;
inline bool FeeEstimationData::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeeEstimationData::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeeEstimationData::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeeEstimationData::clear_source() {
  source_ = 0u;
  clear_has_source();
}
inline ::google::protobuf::uint32 FeeEstimationData::source() const {
  return source_;
}
inline void FeeEstimationData::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
}

// required uint64 amount = 5;
inline bool FeeEstimationData::has_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FeeEstimationData::set_has_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FeeEstimationData::clear_has_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FeeEstimationData::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 FeeEstimationData::amount() const {
  return amount_;
}
inline void FeeEstimationData::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional .bnet.protocol.EntityId bnet_account = 6;
inline bool FeeEstimationData::has_bnet_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FeeEstimationData::set_has_bnet_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FeeEstimationData::clear_has_bnet_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FeeEstimationData::clear_bnet_account() {
  if (bnet_account_ != NULL) bnet_account_->::bnet::protocol::EntityId::Clear();
  clear_has_bnet_account();
}
inline const ::bnet::protocol::EntityId& FeeEstimationData::bnet_account() const {
  return bnet_account_ != NULL ? *bnet_account_ : *default_instance_->bnet_account_;
}
inline ::bnet::protocol::EntityId* FeeEstimationData::mutable_bnet_account() {
  set_has_bnet_account();
  if (bnet_account_ == NULL) bnet_account_ = new ::bnet::protocol::EntityId;
  return bnet_account_;
}
inline ::bnet::protocol::EntityId* FeeEstimationData::release_bnet_account() {
  clear_has_bnet_account();
  ::bnet::protocol::EntityId* temp = bnet_account_;
  bnet_account_ = NULL;
  return temp;
}

// optional .bnet.protocol.exchange.BillingAddress billing_address = 7;
inline bool FeeEstimationData::has_billing_address() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FeeEstimationData::set_has_billing_address() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FeeEstimationData::clear_has_billing_address() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FeeEstimationData::clear_billing_address() {
  if (billing_address_ != NULL) billing_address_->::bnet::protocol::exchange::BillingAddress::Clear();
  clear_has_billing_address();
}
inline const ::bnet::protocol::exchange::BillingAddress& FeeEstimationData::billing_address() const {
  return billing_address_ != NULL ? *billing_address_ : *default_instance_->billing_address_;
}
inline ::bnet::protocol::exchange::BillingAddress* FeeEstimationData::mutable_billing_address() {
  set_has_billing_address();
  if (billing_address_ == NULL) billing_address_ = new ::bnet::protocol::exchange::BillingAddress;
  return billing_address_;
}
inline ::bnet::protocol::exchange::BillingAddress* FeeEstimationData::release_billing_address() {
  clear_has_billing_address();
  ::bnet::protocol::exchange::BillingAddress* temp = billing_address_;
  billing_address_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace exchange
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fexchange_2fexchange_5ftypes_2eproto__INCLUDED
