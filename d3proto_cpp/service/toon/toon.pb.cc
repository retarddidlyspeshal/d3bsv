// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/toon/toon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace toon {

namespace {

const ::google::protobuf::Descriptor* ToonHandle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToonHandle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToonName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToonName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToonInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2ftoon_2ftoon_2eproto() {
  protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/toon/toon.proto");
  GOOGLE_CHECK(file != NULL);
  ToonHandle_descriptor_ = file->message_type(0);
  static const int ToonHandle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonHandle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonHandle, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonHandle, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonHandle, realm_),
  };
  ToonHandle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToonHandle_descriptor_,
      ToonHandle::default_instance_,
      ToonHandle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonHandle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonHandle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToonHandle));
  ToonName_descriptor_ = file->message_type(1);
  static const int ToonName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonName, full_name_),
  };
  ToonName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToonName_descriptor_,
      ToonName::default_instance_,
      ToonName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToonName));
  ToonInfo_descriptor_ = file->message_type(2);
  static const int ToonInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonInfo, name_),
  };
  ToonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToonInfo_descriptor_,
      ToonInfo::default_instance_,
      ToonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToonInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2ftoon_2ftoon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToonHandle_descriptor_, &ToonHandle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToonName_descriptor_, &ToonName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToonInfo_descriptor_, &ToonInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2ftoon_2ftoon_2eproto() {
  delete ToonHandle::default_instance_;
  delete ToonHandle_reflection_;
  delete ToonName::default_instance_;
  delete ToonName_reflection_;
  delete ToonInfo::default_instance_;
  delete ToonInfo_reflection_;
}

void protobuf_AddDesc_service_2ftoon_2ftoon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027service/toon/toon.proto\022\022bnet.protocol"
    ".toon\"H\n\nToonHandle\022\n\n\002id\030\001 \002(\006\022\017\n\007progr"
    "am\030\002 \002(\007\022\016\n\006region\030\003 \002(\r\022\r\n\005realm\030\004 \002(\r\""
    "\035\n\010ToonName\022\021\n\tfull_name\030\001 \002(\t\"6\n\010ToonIn"
    "fo\022*\n\004name\030\001 \002(\0132\034.bnet.protocol.toon.To"
    "onName", 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/toon/toon.proto", &protobuf_RegisterTypes);
  ToonHandle::default_instance_ = new ToonHandle();
  ToonName::default_instance_ = new ToonName();
  ToonInfo::default_instance_ = new ToonInfo();
  ToonHandle::default_instance_->InitAsDefaultInstance();
  ToonName::default_instance_->InitAsDefaultInstance();
  ToonInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2ftoon_2ftoon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2ftoon_2ftoon_2eproto {
  StaticDescriptorInitializer_service_2ftoon_2ftoon_2eproto() {
    protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();
  }
} static_descriptor_initializer_service_2ftoon_2ftoon_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ToonHandle::kIdFieldNumber;
const int ToonHandle::kProgramFieldNumber;
const int ToonHandle::kRegionFieldNumber;
const int ToonHandle::kRealmFieldNumber;
#endif  // !_MSC_VER

ToonHandle::ToonHandle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToonHandle::InitAsDefaultInstance() {
}

ToonHandle::ToonHandle(const ToonHandle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToonHandle::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  program_ = 0u;
  region_ = 0u;
  realm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToonHandle::~ToonHandle() {
  SharedDtor();
}

void ToonHandle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToonHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToonHandle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToonHandle_descriptor_;
}

const ToonHandle& ToonHandle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();  return *default_instance_;
}

ToonHandle* ToonHandle::default_instance_ = NULL;

ToonHandle* ToonHandle::New() const {
  return new ToonHandle;
}

void ToonHandle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    program_ = 0u;
    region_ = 0u;
    realm_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToonHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_program;
        break;
      }
      
      // required fixed32 program = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_program:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_region;
        break;
      }
      
      // required uint32 region = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_realm;
        break;
      }
      
      // required uint32 realm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &realm_)));
          set_has_realm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToonHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }
  
  // required fixed32 program = 2;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->program(), output);
  }
  
  // required uint32 region = 3;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region(), output);
  }
  
  // required uint32 realm = 4;
  if (has_realm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->realm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToonHandle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }
  
  // required fixed32 program = 2;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->program(), target);
  }
  
  // required uint32 region = 3;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->region(), target);
  }
  
  // required uint32 realm = 4;
  if (has_realm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->realm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToonHandle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed32 program = 2;
    if (has_program()) {
      total_size += 1 + 4;
    }
    
    // required uint32 region = 3;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }
    
    // required uint32 realm = 4;
    if (has_realm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->realm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToonHandle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToonHandle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToonHandle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToonHandle::MergeFrom(const ToonHandle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_realm()) {
      set_realm(from.realm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToonHandle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToonHandle::CopyFrom(const ToonHandle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToonHandle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ToonHandle::Swap(ToonHandle* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(program_, other->program_);
    std::swap(region_, other->region_);
    std::swap(realm_, other->realm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToonHandle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToonHandle_descriptor_;
  metadata.reflection = ToonHandle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToonName::kFullNameFieldNumber;
#endif  // !_MSC_VER

ToonName::ToonName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToonName::InitAsDefaultInstance() {
}

ToonName::ToonName(const ToonName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToonName::SharedCtor() {
  _cached_size_ = 0;
  full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToonName::~ToonName() {
  SharedDtor();
}

void ToonName::SharedDtor() {
  if (full_name_ != &::google::protobuf::internal::kEmptyString) {
    delete full_name_;
  }
  if (this != default_instance_) {
  }
}

void ToonName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToonName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToonName_descriptor_;
}

const ToonName& ToonName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();  return *default_instance_;
}

ToonName* ToonName::default_instance_ = NULL;

ToonName* ToonName::New() const {
  return new ToonName;
}

void ToonName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_full_name()) {
      if (full_name_ != &::google::protobuf::internal::kEmptyString) {
        full_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToonName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string full_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_name().data(), this->full_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToonName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string full_name = 1;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->full_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToonName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string full_name = 1;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToonName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string full_name = 1;
    if (has_full_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToonName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToonName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToonName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToonName::MergeFrom(const ToonName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_full_name()) {
      set_full_name(from.full_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToonName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToonName::CopyFrom(const ToonName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToonName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ToonName::Swap(ToonName* other) {
  if (other != this) {
    std::swap(full_name_, other->full_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToonName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToonName_descriptor_;
  metadata.reflection = ToonName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToonInfo::kNameFieldNumber;
#endif  // !_MSC_VER

ToonInfo::ToonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToonInfo::InitAsDefaultInstance() {
  name_ = const_cast< ::bnet::protocol::toon::ToonName*>(&::bnet::protocol::toon::ToonName::default_instance());
}

ToonInfo::ToonInfo(const ToonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToonInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToonInfo::~ToonInfo() {
  SharedDtor();
}

void ToonInfo::SharedDtor() {
  if (this != default_instance_) {
    delete name_;
  }
}

void ToonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToonInfo_descriptor_;
}

const ToonInfo& ToonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();  return *default_instance_;
}

ToonInfo* ToonInfo::default_instance_ = NULL;

ToonInfo* ToonInfo::New() const {
  return new ToonInfo;
}

void ToonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != NULL) name_->::bnet::protocol::toon::ToonName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.toon.ToonName name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.toon.ToonName name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.toon.ToonName name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToonInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.toon.ToonName name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToonInfo::MergeFrom(const ToonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      mutable_name()->::bnet::protocol::toon::ToonName::MergeFrom(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToonInfo::CopyFrom(const ToonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToonInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_name()) {
    if (!this->name().IsInitialized()) return false;
  }
  return true;
}

void ToonInfo::Swap(ToonInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToonInfo_descriptor_;
  metadata.reflection = ToonInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace toon
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
