// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/toon/toon.proto

#ifndef PROTOBUF_service_2ftoon_2ftoon_2eproto__INCLUDED
#define PROTOBUF_service_2ftoon_2ftoon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace toon {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();
void protobuf_AssignDesc_service_2ftoon_2ftoon_2eproto();
void protobuf_ShutdownFile_service_2ftoon_2ftoon_2eproto();

class ToonHandle;
class ToonName;
class ToonInfo;

// ===================================================================

class ToonHandle : public ::google::protobuf::Message {
 public:
  ToonHandle();
  virtual ~ToonHandle();
  
  ToonHandle(const ToonHandle& from);
  
  inline ToonHandle& operator=(const ToonHandle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ToonHandle& default_instance();
  
  void Swap(ToonHandle* other);
  
  // implements Message ----------------------------------------------
  
  ToonHandle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToonHandle& from);
  void MergeFrom(const ToonHandle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required fixed32 program = 2;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 2;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);
  
  // required uint32 region = 3;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 3;
  inline ::google::protobuf::uint32 region() const;
  inline void set_region(::google::protobuf::uint32 value);
  
  // required uint32 realm = 4;
  inline bool has_realm() const;
  inline void clear_realm();
  static const int kRealmFieldNumber = 4;
  inline ::google::protobuf::uint32 realm() const;
  inline void set_realm(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.toon.ToonHandle)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_program();
  inline void clear_has_program();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_realm();
  inline void clear_has_realm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 program_;
  ::google::protobuf::uint32 region_;
  ::google::protobuf::uint32 realm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();
  friend void protobuf_AssignDesc_service_2ftoon_2ftoon_2eproto();
  friend void protobuf_ShutdownFile_service_2ftoon_2ftoon_2eproto();
  
  void InitAsDefaultInstance();
  static ToonHandle* default_instance_;
};
// -------------------------------------------------------------------

class ToonName : public ::google::protobuf::Message {
 public:
  ToonName();
  virtual ~ToonName();
  
  ToonName(const ToonName& from);
  
  inline ToonName& operator=(const ToonName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ToonName& default_instance();
  
  void Swap(ToonName* other);
  
  // implements Message ----------------------------------------------
  
  ToonName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToonName& from);
  void MergeFrom(const ToonName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string full_name = 1;
  inline bool has_full_name() const;
  inline void clear_full_name();
  static const int kFullNameFieldNumber = 1;
  inline const ::std::string& full_name() const;
  inline void set_full_name(const ::std::string& value);
  inline void set_full_name(const char* value);
  inline void set_full_name(const char* value, size_t size);
  inline ::std::string* mutable_full_name();
  inline ::std::string* release_full_name();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.toon.ToonName)
 private:
  inline void set_has_full_name();
  inline void clear_has_full_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* full_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();
  friend void protobuf_AssignDesc_service_2ftoon_2ftoon_2eproto();
  friend void protobuf_ShutdownFile_service_2ftoon_2ftoon_2eproto();
  
  void InitAsDefaultInstance();
  static ToonName* default_instance_;
};
// -------------------------------------------------------------------

class ToonInfo : public ::google::protobuf::Message {
 public:
  ToonInfo();
  virtual ~ToonInfo();
  
  ToonInfo(const ToonInfo& from);
  
  inline ToonInfo& operator=(const ToonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ToonInfo& default_instance();
  
  void Swap(ToonInfo* other);
  
  // implements Message ----------------------------------------------
  
  ToonInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToonInfo& from);
  void MergeFrom(const ToonInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.toon.ToonName name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::bnet::protocol::toon::ToonName& name() const;
  inline ::bnet::protocol::toon::ToonName* mutable_name();
  inline ::bnet::protocol::toon::ToonName* release_name();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.toon.ToonInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::toon::ToonName* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();
  friend void protobuf_AssignDesc_service_2ftoon_2ftoon_2eproto();
  friend void protobuf_ShutdownFile_service_2ftoon_2ftoon_2eproto();
  
  void InitAsDefaultInstance();
  static ToonInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ToonHandle

// required fixed64 id = 1;
inline bool ToonHandle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToonHandle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToonHandle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToonHandle::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ToonHandle::id() const {
  return id_;
}
inline void ToonHandle::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required fixed32 program = 2;
inline bool ToonHandle::has_program() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToonHandle::set_has_program() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToonHandle::clear_has_program() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToonHandle::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 ToonHandle::program() const {
  return program_;
}
inline void ToonHandle::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
}

// required uint32 region = 3;
inline bool ToonHandle::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToonHandle::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToonHandle::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToonHandle::clear_region() {
  region_ = 0u;
  clear_has_region();
}
inline ::google::protobuf::uint32 ToonHandle::region() const {
  return region_;
}
inline void ToonHandle::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
}

// required uint32 realm = 4;
inline bool ToonHandle::has_realm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToonHandle::set_has_realm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToonHandle::clear_has_realm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToonHandle::clear_realm() {
  realm_ = 0u;
  clear_has_realm();
}
inline ::google::protobuf::uint32 ToonHandle::realm() const {
  return realm_;
}
inline void ToonHandle::set_realm(::google::protobuf::uint32 value) {
  set_has_realm();
  realm_ = value;
}

// -------------------------------------------------------------------

// ToonName

// required string full_name = 1;
inline bool ToonName::has_full_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToonName::set_has_full_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToonName::clear_has_full_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToonName::clear_full_name() {
  if (full_name_ != &::google::protobuf::internal::kEmptyString) {
    full_name_->clear();
  }
  clear_has_full_name();
}
inline const ::std::string& ToonName::full_name() const {
  return *full_name_;
}
inline void ToonName::set_full_name(const ::std::string& value) {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    full_name_ = new ::std::string;
  }
  full_name_->assign(value);
}
inline void ToonName::set_full_name(const char* value) {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    full_name_ = new ::std::string;
  }
  full_name_->assign(value);
}
inline void ToonName::set_full_name(const char* value, size_t size) {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    full_name_ = new ::std::string;
  }
  full_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToonName::mutable_full_name() {
  set_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    full_name_ = new ::std::string;
  }
  return full_name_;
}
inline ::std::string* ToonName::release_full_name() {
  clear_has_full_name();
  if (full_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_name_;
    full_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ToonInfo

// required .bnet.protocol.toon.ToonName name = 1;
inline bool ToonInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToonInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToonInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToonInfo::clear_name() {
  if (name_ != NULL) name_->::bnet::protocol::toon::ToonName::Clear();
  clear_has_name();
}
inline const ::bnet::protocol::toon::ToonName& ToonInfo::name() const {
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
inline ::bnet::protocol::toon::ToonName* ToonInfo::mutable_name() {
  set_has_name();
  if (name_ == NULL) name_ = new ::bnet::protocol::toon::ToonName;
  return name_;
}
inline ::bnet::protocol::toon::ToonName* ToonInfo::release_name() {
  clear_has_name();
  ::bnet::protocol::toon::ToonName* temp = name_;
  name_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace toon
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2ftoon_2ftoon_2eproto__INCLUDED
