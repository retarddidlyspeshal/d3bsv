// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/toon/toon_external.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace toon {
namespace external {

namespace {

const ::google::protobuf::Descriptor* ToonListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToonListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToonListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToonListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectToonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectToonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectToonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectToonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateToonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateToonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateToonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateToonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteToonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteToonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteToonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteToonResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2ftoon_2ftoon_5fexternal_2eproto() {
  protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/toon/toon_external.proto");
  GOOGLE_CHECK(file != NULL);
  ToonListRequest_descriptor_ = file->message_type(0);
  static const int ToonListRequest_offsets_[1] = {
  };
  ToonListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToonListRequest_descriptor_,
      ToonListRequest::default_instance_,
      ToonListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToonListRequest));
  ToonListResponse_descriptor_ = file->message_type(1);
  static const int ToonListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonListResponse, toons_),
  };
  ToonListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToonListResponse_descriptor_,
      ToonListResponse::default_instance_,
      ToonListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToonListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToonListResponse));
  SelectToonRequest_descriptor_ = file->message_type(2);
  static const int SelectToonRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonRequest, toon_),
  };
  SelectToonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectToonRequest_descriptor_,
      SelectToonRequest::default_instance_,
      SelectToonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectToonRequest));
  SelectToonResponse_descriptor_ = file->message_type(3);
  static const int SelectToonResponse_offsets_[1] = {
  };
  SelectToonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectToonResponse_descriptor_,
      SelectToonResponse::default_instance_,
      SelectToonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectToonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectToonResponse));
  CreateToonRequest_descriptor_ = file->message_type(4);
  static const int CreateToonRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, attribute_),
  };
  CreateToonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateToonRequest_descriptor_,
      CreateToonRequest::default_instance_,
      CreateToonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateToonRequest));
  CreateToonResponse_descriptor_ = file->message_type(5);
  static const int CreateToonResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonResponse, toon_),
  };
  CreateToonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateToonResponse_descriptor_,
      CreateToonResponse::default_instance_,
      CreateToonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateToonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateToonResponse));
  DeleteToonRequest_descriptor_ = file->message_type(6);
  static const int DeleteToonRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonRequest, toon_),
  };
  DeleteToonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteToonRequest_descriptor_,
      DeleteToonRequest::default_instance_,
      DeleteToonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteToonRequest));
  DeleteToonResponse_descriptor_ = file->message_type(7);
  static const int DeleteToonResponse_offsets_[1] = {
  };
  DeleteToonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteToonResponse_descriptor_,
      DeleteToonResponse::default_instance_,
      DeleteToonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteToonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteToonResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2ftoon_2ftoon_5fexternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToonListRequest_descriptor_, &ToonListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToonListResponse_descriptor_, &ToonListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectToonRequest_descriptor_, &SelectToonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectToonResponse_descriptor_, &SelectToonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateToonRequest_descriptor_, &CreateToonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateToonResponse_descriptor_, &CreateToonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteToonRequest_descriptor_, &DeleteToonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteToonResponse_descriptor_, &DeleteToonResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2ftoon_2ftoon_5fexternal_2eproto() {
  delete ToonListRequest::default_instance_;
  delete ToonListRequest_reflection_;
  delete ToonListResponse::default_instance_;
  delete ToonListResponse_reflection_;
  delete SelectToonRequest::default_instance_;
  delete SelectToonRequest_reflection_;
  delete SelectToonResponse::default_instance_;
  delete SelectToonResponse_reflection_;
  delete CreateToonRequest::default_instance_;
  delete CreateToonRequest_reflection_;
  delete CreateToonResponse::default_instance_;
  delete CreateToonResponse_reflection_;
  delete DeleteToonRequest::default_instance_;
  delete DeleteToonRequest_reflection_;
  delete DeleteToonResponse::default_instance_;
  delete DeleteToonResponse_reflection_;
}

void protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::toon::protobuf_AddDesc_service_2ftoon_2ftoon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n service/toon/toon_external.proto\022\033bnet"
    ".protocol.toon.external\032\021lib/rpc/rpc.pro"
    "to\032\031lib/protocol/entity.proto\032\034lib/proto"
    "col/attribute.proto\032\027service/toon/toon.p"
    "roto\"\021\n\017ToonListRequest\":\n\020ToonListRespo"
    "nse\022&\n\005toons\030\002 \003(\0132\027.bnet.protocol.Entit"
    "yId\":\n\021SelectToonRequest\022%\n\004toon\030\001 \002(\0132\027"
    ".bnet.protocol.EntityId\"\024\n\022SelectToonRes"
    "ponse\"X\n\021CreateToonRequest\022\014\n\004name\030\001 \001(\t"
    "\0225\n\tattribute\030\002 \003(\0132\".bnet.protocol.attr"
    "ibute.Attribute\";\n\022CreateToonResponse\022%\n"
    "\004toon\030\002 \001(\0132\027.bnet.protocol.EntityId\":\n\021"
    "DeleteToonRequest\022%\n\004toon\030\001 \002(\0132\027.bnet.p"
    "rotocol.EntityId\"\024\n\022DeleteToonResponse", 558);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/toon/toon_external.proto", &protobuf_RegisterTypes);
  ToonListRequest::default_instance_ = new ToonListRequest();
  ToonListResponse::default_instance_ = new ToonListResponse();
  SelectToonRequest::default_instance_ = new SelectToonRequest();
  SelectToonResponse::default_instance_ = new SelectToonResponse();
  CreateToonRequest::default_instance_ = new CreateToonRequest();
  CreateToonResponse::default_instance_ = new CreateToonResponse();
  DeleteToonRequest::default_instance_ = new DeleteToonRequest();
  DeleteToonResponse::default_instance_ = new DeleteToonResponse();
  ToonListRequest::default_instance_->InitAsDefaultInstance();
  ToonListResponse::default_instance_->InitAsDefaultInstance();
  SelectToonRequest::default_instance_->InitAsDefaultInstance();
  SelectToonResponse::default_instance_->InitAsDefaultInstance();
  CreateToonRequest::default_instance_->InitAsDefaultInstance();
  CreateToonResponse::default_instance_->InitAsDefaultInstance();
  DeleteToonRequest::default_instance_->InitAsDefaultInstance();
  DeleteToonResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2ftoon_2ftoon_5fexternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2ftoon_2ftoon_5fexternal_2eproto {
  StaticDescriptorInitializer_service_2ftoon_2ftoon_5fexternal_2eproto() {
    protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();
  }
} static_descriptor_initializer_service_2ftoon_2ftoon_5fexternal_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ToonListRequest::ToonListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToonListRequest::InitAsDefaultInstance() {
}

ToonListRequest::ToonListRequest(const ToonListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToonListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToonListRequest::~ToonListRequest() {
  SharedDtor();
}

void ToonListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToonListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToonListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToonListRequest_descriptor_;
}

const ToonListRequest& ToonListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();  return *default_instance_;
}

ToonListRequest* ToonListRequest::default_instance_ = NULL;

ToonListRequest* ToonListRequest::New() const {
  return new ToonListRequest;
}

void ToonListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToonListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ToonListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToonListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToonListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToonListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToonListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToonListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToonListRequest::MergeFrom(const ToonListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToonListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToonListRequest::CopyFrom(const ToonListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToonListRequest::IsInitialized() const {
  
  return true;
}

void ToonListRequest::Swap(ToonListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToonListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToonListRequest_descriptor_;
  metadata.reflection = ToonListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToonListResponse::kToonsFieldNumber;
#endif  // !_MSC_VER

ToonListResponse::ToonListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToonListResponse::InitAsDefaultInstance() {
}

ToonListResponse::ToonListResponse(const ToonListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToonListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToonListResponse::~ToonListResponse() {
  SharedDtor();
}

void ToonListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToonListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToonListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToonListResponse_descriptor_;
}

const ToonListResponse& ToonListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();  return *default_instance_;
}

ToonListResponse* ToonListResponse::default_instance_ = NULL;

ToonListResponse* ToonListResponse::New() const {
  return new ToonListResponse;
}

void ToonListResponse::Clear() {
  toons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToonListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.EntityId toons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toons;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToonListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.EntityId toons = 2;
  for (int i = 0; i < this->toons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toons(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToonListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.EntityId toons = 2;
  for (int i = 0; i < this->toons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toons(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToonListResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.EntityId toons = 2;
  total_size += 1 * this->toons_size();
  for (int i = 0; i < this->toons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toons(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToonListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToonListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToonListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToonListResponse::MergeFrom(const ToonListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  toons_.MergeFrom(from.toons_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToonListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToonListResponse::CopyFrom(const ToonListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToonListResponse::IsInitialized() const {
  
  for (int i = 0; i < toons_size(); i++) {
    if (!this->toons(i).IsInitialized()) return false;
  }
  return true;
}

void ToonListResponse::Swap(ToonListResponse* other) {
  if (other != this) {
    toons_.Swap(&other->toons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToonListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToonListResponse_descriptor_;
  metadata.reflection = ToonListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectToonRequest::kToonFieldNumber;
#endif  // !_MSC_VER

SelectToonRequest::SelectToonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectToonRequest::InitAsDefaultInstance() {
  toon_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

SelectToonRequest::SelectToonRequest(const SelectToonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectToonRequest::SharedCtor() {
  _cached_size_ = 0;
  toon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectToonRequest::~SelectToonRequest() {
  SharedDtor();
}

void SelectToonRequest::SharedDtor() {
  if (this != default_instance_) {
    delete toon_;
  }
}

void SelectToonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectToonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectToonRequest_descriptor_;
}

const SelectToonRequest& SelectToonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();  return *default_instance_;
}

SelectToonRequest* SelectToonRequest::default_instance_ = NULL;

SelectToonRequest* SelectToonRequest::New() const {
  return new SelectToonRequest;
}

void SelectToonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_toon()) {
      if (toon_ != NULL) toon_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectToonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId toon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectToonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId toon = 1;
  if (has_toon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->toon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectToonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId toon = 1;
  if (has_toon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->toon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectToonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId toon = 1;
    if (has_toon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectToonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectToonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectToonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectToonRequest::MergeFrom(const SelectToonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toon()) {
      mutable_toon()->::bnet::protocol::EntityId::MergeFrom(from.toon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectToonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectToonRequest::CopyFrom(const SelectToonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectToonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_toon()) {
    if (!this->toon().IsInitialized()) return false;
  }
  return true;
}

void SelectToonRequest::Swap(SelectToonRequest* other) {
  if (other != this) {
    std::swap(toon_, other->toon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectToonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectToonRequest_descriptor_;
  metadata.reflection = SelectToonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SelectToonResponse::SelectToonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectToonResponse::InitAsDefaultInstance() {
}

SelectToonResponse::SelectToonResponse(const SelectToonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectToonResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectToonResponse::~SelectToonResponse() {
  SharedDtor();
}

void SelectToonResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectToonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectToonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectToonResponse_descriptor_;
}

const SelectToonResponse& SelectToonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();  return *default_instance_;
}

SelectToonResponse* SelectToonResponse::default_instance_ = NULL;

SelectToonResponse* SelectToonResponse::New() const {
  return new SelectToonResponse;
}

void SelectToonResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectToonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SelectToonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectToonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectToonResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectToonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectToonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectToonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectToonResponse::MergeFrom(const SelectToonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectToonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectToonResponse::CopyFrom(const SelectToonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectToonResponse::IsInitialized() const {
  
  return true;
}

void SelectToonResponse::Swap(SelectToonResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectToonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectToonResponse_descriptor_;
  metadata.reflection = SelectToonResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateToonRequest::kNameFieldNumber;
const int CreateToonRequest::kAttributeFieldNumber;
#endif  // !_MSC_VER

CreateToonRequest::CreateToonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateToonRequest::InitAsDefaultInstance() {
}

CreateToonRequest::CreateToonRequest(const CreateToonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateToonRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateToonRequest::~CreateToonRequest() {
  SharedDtor();
}

void CreateToonRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreateToonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateToonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateToonRequest_descriptor_;
}

const CreateToonRequest& CreateToonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();  return *default_instance_;
}

CreateToonRequest* CreateToonRequest::default_instance_ = NULL;

CreateToonRequest* CreateToonRequest::New() const {
  return new CreateToonRequest;
}

void CreateToonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateToonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateToonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateToonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateToonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateToonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateToonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateToonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateToonRequest::MergeFrom(const CreateToonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateToonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateToonRequest::CopyFrom(const CreateToonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateToonRequest::IsInitialized() const {
  
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void CreateToonRequest::Swap(CreateToonRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateToonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateToonRequest_descriptor_;
  metadata.reflection = CreateToonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateToonResponse::kToonFieldNumber;
#endif  // !_MSC_VER

CreateToonResponse::CreateToonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateToonResponse::InitAsDefaultInstance() {
  toon_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

CreateToonResponse::CreateToonResponse(const CreateToonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateToonResponse::SharedCtor() {
  _cached_size_ = 0;
  toon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateToonResponse::~CreateToonResponse() {
  SharedDtor();
}

void CreateToonResponse::SharedDtor() {
  if (this != default_instance_) {
    delete toon_;
  }
}

void CreateToonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateToonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateToonResponse_descriptor_;
}

const CreateToonResponse& CreateToonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();  return *default_instance_;
}

CreateToonResponse* CreateToonResponse::default_instance_ = NULL;

CreateToonResponse* CreateToonResponse::New() const {
  return new CreateToonResponse;
}

void CreateToonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_toon()) {
      if (toon_ != NULL) toon_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateToonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId toon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateToonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId toon = 2;
  if (has_toon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateToonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId toon = 2;
  if (has_toon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateToonResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId toon = 2;
    if (has_toon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateToonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateToonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateToonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateToonResponse::MergeFrom(const CreateToonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toon()) {
      mutable_toon()->::bnet::protocol::EntityId::MergeFrom(from.toon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateToonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateToonResponse::CopyFrom(const CreateToonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateToonResponse::IsInitialized() const {
  
  if (has_toon()) {
    if (!this->toon().IsInitialized()) return false;
  }
  return true;
}

void CreateToonResponse::Swap(CreateToonResponse* other) {
  if (other != this) {
    std::swap(toon_, other->toon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateToonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateToonResponse_descriptor_;
  metadata.reflection = CreateToonResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteToonRequest::kToonFieldNumber;
#endif  // !_MSC_VER

DeleteToonRequest::DeleteToonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteToonRequest::InitAsDefaultInstance() {
  toon_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

DeleteToonRequest::DeleteToonRequest(const DeleteToonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteToonRequest::SharedCtor() {
  _cached_size_ = 0;
  toon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteToonRequest::~DeleteToonRequest() {
  SharedDtor();
}

void DeleteToonRequest::SharedDtor() {
  if (this != default_instance_) {
    delete toon_;
  }
}

void DeleteToonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteToonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteToonRequest_descriptor_;
}

const DeleteToonRequest& DeleteToonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();  return *default_instance_;
}

DeleteToonRequest* DeleteToonRequest::default_instance_ = NULL;

DeleteToonRequest* DeleteToonRequest::New() const {
  return new DeleteToonRequest;
}

void DeleteToonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_toon()) {
      if (toon_ != NULL) toon_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteToonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId toon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteToonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId toon = 1;
  if (has_toon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->toon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteToonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId toon = 1;
  if (has_toon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->toon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteToonRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId toon = 1;
    if (has_toon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteToonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteToonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteToonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteToonRequest::MergeFrom(const DeleteToonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toon()) {
      mutable_toon()->::bnet::protocol::EntityId::MergeFrom(from.toon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteToonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteToonRequest::CopyFrom(const DeleteToonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteToonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_toon()) {
    if (!this->toon().IsInitialized()) return false;
  }
  return true;
}

void DeleteToonRequest::Swap(DeleteToonRequest* other) {
  if (other != this) {
    std::swap(toon_, other->toon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteToonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteToonRequest_descriptor_;
  metadata.reflection = DeleteToonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeleteToonResponse::DeleteToonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteToonResponse::InitAsDefaultInstance() {
}

DeleteToonResponse::DeleteToonResponse(const DeleteToonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteToonResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteToonResponse::~DeleteToonResponse() {
  SharedDtor();
}

void DeleteToonResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteToonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteToonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteToonResponse_descriptor_;
}

const DeleteToonResponse& DeleteToonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftoon_2ftoon_5fexternal_2eproto();  return *default_instance_;
}

DeleteToonResponse* DeleteToonResponse::default_instance_ = NULL;

DeleteToonResponse* DeleteToonResponse::New() const {
  return new DeleteToonResponse;
}

void DeleteToonResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteToonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeleteToonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteToonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteToonResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteToonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteToonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteToonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteToonResponse::MergeFrom(const DeleteToonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteToonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteToonResponse::CopyFrom(const DeleteToonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteToonResponse::IsInitialized() const {
  
  return true;
}

void DeleteToonResponse::Swap(DeleteToonResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteToonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteToonResponse_descriptor_;
  metadata.reflection = DeleteToonResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace external
}  // namespace toon
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
