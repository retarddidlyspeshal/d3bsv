// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/notification/notification.proto

#ifndef PROTOBUF_service_2fnotification_2fnotification_2eproto__INCLUDED
#define PROTOBUF_service_2fnotification_2fnotification_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/protocol/attribute.pb.h"
#include "lib/protocol/entity.pb.h"
#include "lib/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace notification {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fnotification_2fnotification_2eproto();
void protobuf_AssignDesc_service_2fnotification_2fnotification_2eproto();
void protobuf_ShutdownFile_service_2fnotification_2fnotification_2eproto();

class Notification;
class FindClientRequest;
class FindClientResponse;
class RegisterClientRequest;
class UnregisterClientRequest;

// ===================================================================

class Notification : public ::google::protobuf::Message {
 public:
  Notification();
  virtual ~Notification();
  
  Notification(const Notification& from);
  
  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Notification& default_instance();
  
  void Swap(Notification* other);
  
  // implements Message ----------------------------------------------
  
  Notification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId sender_id = 1;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& sender_id() const;
  inline ::bnet::protocol::EntityId* mutable_sender_id();
  inline ::bnet::protocol::EntityId* release_sender_id();
  
  // optional .bnet.protocol.EntityId sender_game_account = 2;
  inline bool has_sender_game_account() const;
  inline void clear_sender_game_account();
  static const int kSenderGameAccountFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& sender_game_account() const;
  inline ::bnet::protocol::EntityId* mutable_sender_game_account();
  inline ::bnet::protocol::EntityId* release_sender_game_account();
  
  // required .bnet.protocol.EntityId target_id = 3;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& target_id() const;
  inline ::bnet::protocol::EntityId* mutable_target_id();
  inline ::bnet::protocol::EntityId* release_target_id();
  
  // required string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 5;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.notification.Notification)
 private:
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_sender_game_account();
  inline void clear_has_sender_game_account();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* sender_id_;
  ::bnet::protocol::EntityId* sender_game_account_;
  ::bnet::protocol::EntityId* target_id_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_AssignDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_ShutdownFile_service_2fnotification_2fnotification_2eproto();
  
  void InitAsDefaultInstance();
  static Notification* default_instance_;
};
// -------------------------------------------------------------------

class FindClientRequest : public ::google::protobuf::Message {
 public:
  FindClientRequest();
  virtual ~FindClientRequest();
  
  FindClientRequest(const FindClientRequest& from);
  
  inline FindClientRequest& operator=(const FindClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindClientRequest& default_instance();
  
  void Swap(FindClientRequest* other);
  
  // implements Message ----------------------------------------------
  
  FindClientRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindClientRequest& from);
  void MergeFrom(const FindClientRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId entity_id = 1;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& entity_id() const;
  inline ::bnet::protocol::EntityId* mutable_entity_id();
  inline ::bnet::protocol::EntityId* release_entity_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.notification.FindClientRequest)
 private:
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* entity_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_AssignDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_ShutdownFile_service_2fnotification_2fnotification_2eproto();
  
  void InitAsDefaultInstance();
  static FindClientRequest* default_instance_;
};
// -------------------------------------------------------------------

class FindClientResponse : public ::google::protobuf::Message {
 public:
  FindClientResponse();
  virtual ~FindClientResponse();
  
  FindClientResponse(const FindClientResponse& from);
  
  inline FindClientResponse& operator=(const FindClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindClientResponse& default_instance();
  
  void Swap(FindClientResponse* other);
  
  // implements Message ----------------------------------------------
  
  FindClientResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindClientResponse& from);
  void MergeFrom(const FindClientResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 label = 1;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline ::google::protobuf::uint32 label() const;
  inline void set_label(::google::protobuf::uint32 value);
  
  // optional .bnet.protocol.ProcessId client_process_id = 2;
  inline bool has_client_process_id() const;
  inline void clear_client_process_id();
  static const int kClientProcessIdFieldNumber = 2;
  inline const ::bnet::protocol::ProcessId& client_process_id() const;
  inline ::bnet::protocol::ProcessId* mutable_client_process_id();
  inline ::bnet::protocol::ProcessId* release_client_process_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.notification.FindClientResponse)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_client_process_id();
  inline void clear_has_client_process_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::ProcessId* client_process_id_;
  ::google::protobuf::uint32 label_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_AssignDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_ShutdownFile_service_2fnotification_2fnotification_2eproto();
  
  void InitAsDefaultInstance();
  static FindClientResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegisterClientRequest : public ::google::protobuf::Message {
 public:
  RegisterClientRequest();
  virtual ~RegisterClientRequest();
  
  RegisterClientRequest(const RegisterClientRequest& from);
  
  inline RegisterClientRequest& operator=(const RegisterClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterClientRequest& default_instance();
  
  void Swap(RegisterClientRequest* other);
  
  // implements Message ----------------------------------------------
  
  RegisterClientRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterClientRequest& from);
  void MergeFrom(const RegisterClientRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId entity_id = 1;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& entity_id() const;
  inline ::bnet::protocol::EntityId* mutable_entity_id();
  inline ::bnet::protocol::EntityId* release_entity_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.notification.RegisterClientRequest)
 private:
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* entity_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_AssignDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_ShutdownFile_service_2fnotification_2fnotification_2eproto();
  
  void InitAsDefaultInstance();
  static RegisterClientRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnregisterClientRequest : public ::google::protobuf::Message {
 public:
  UnregisterClientRequest();
  virtual ~UnregisterClientRequest();
  
  UnregisterClientRequest(const UnregisterClientRequest& from);
  
  inline UnregisterClientRequest& operator=(const UnregisterClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnregisterClientRequest& default_instance();
  
  void Swap(UnregisterClientRequest* other);
  
  // implements Message ----------------------------------------------
  
  UnregisterClientRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnregisterClientRequest& from);
  void MergeFrom(const UnregisterClientRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId entity_id = 1;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& entity_id() const;
  inline ::bnet::protocol::EntityId* mutable_entity_id();
  inline ::bnet::protocol::EntityId* release_entity_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.notification.UnregisterClientRequest)
 private:
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* entity_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_AssignDesc_service_2fnotification_2fnotification_2eproto();
  friend void protobuf_ShutdownFile_service_2fnotification_2fnotification_2eproto();
  
  void InitAsDefaultInstance();
  static UnregisterClientRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// Notification

// optional .bnet.protocol.EntityId sender_id = 1;
inline bool Notification::has_sender_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notification::set_has_sender_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notification::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notification::clear_sender_id() {
  if (sender_id_ != NULL) sender_id_->::bnet::protocol::EntityId::Clear();
  clear_has_sender_id();
}
inline const ::bnet::protocol::EntityId& Notification::sender_id() const {
  return sender_id_ != NULL ? *sender_id_ : *default_instance_->sender_id_;
}
inline ::bnet::protocol::EntityId* Notification::mutable_sender_id() {
  set_has_sender_id();
  if (sender_id_ == NULL) sender_id_ = new ::bnet::protocol::EntityId;
  return sender_id_;
}
inline ::bnet::protocol::EntityId* Notification::release_sender_id() {
  clear_has_sender_id();
  ::bnet::protocol::EntityId* temp = sender_id_;
  sender_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId sender_game_account = 2;
inline bool Notification::has_sender_game_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notification::set_has_sender_game_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notification::clear_has_sender_game_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notification::clear_sender_game_account() {
  if (sender_game_account_ != NULL) sender_game_account_->::bnet::protocol::EntityId::Clear();
  clear_has_sender_game_account();
}
inline const ::bnet::protocol::EntityId& Notification::sender_game_account() const {
  return sender_game_account_ != NULL ? *sender_game_account_ : *default_instance_->sender_game_account_;
}
inline ::bnet::protocol::EntityId* Notification::mutable_sender_game_account() {
  set_has_sender_game_account();
  if (sender_game_account_ == NULL) sender_game_account_ = new ::bnet::protocol::EntityId;
  return sender_game_account_;
}
inline ::bnet::protocol::EntityId* Notification::release_sender_game_account() {
  clear_has_sender_game_account();
  ::bnet::protocol::EntityId* temp = sender_game_account_;
  sender_game_account_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId target_id = 3;
inline bool Notification::has_target_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notification::set_has_target_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notification::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notification::clear_target_id() {
  if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
  clear_has_target_id();
}
inline const ::bnet::protocol::EntityId& Notification::target_id() const {
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::bnet::protocol::EntityId* Notification::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::bnet::protocol::EntityId;
  return target_id_;
}
inline ::bnet::protocol::EntityId* Notification::release_target_id() {
  clear_has_target_id();
  ::bnet::protocol::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}

// required string type = 4;
inline bool Notification::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Notification::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Notification::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Notification::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Notification::type() const {
  return *type_;
}
inline void Notification::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Notification::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Notification::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Notification::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bnet.protocol.attribute.Attribute attribute = 5;
inline int Notification::attribute_size() const {
  return attribute_.size();
}
inline void Notification::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& Notification::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* Notification::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* Notification::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
Notification::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
Notification::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// FindClientRequest

// required .bnet.protocol.EntityId entity_id = 1;
inline bool FindClientRequest::has_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindClientRequest::set_has_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindClientRequest::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindClientRequest::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::bnet::protocol::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::bnet::protocol::EntityId& FindClientRequest::entity_id() const {
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::bnet::protocol::EntityId* FindClientRequest::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::bnet::protocol::EntityId;
  return entity_id_;
}
inline ::bnet::protocol::EntityId* FindClientRequest::release_entity_id() {
  clear_has_entity_id();
  ::bnet::protocol::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// FindClientResponse

// required uint32 label = 1;
inline bool FindClientResponse::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindClientResponse::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindClientResponse::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindClientResponse::clear_label() {
  label_ = 0u;
  clear_has_label();
}
inline ::google::protobuf::uint32 FindClientResponse::label() const {
  return label_;
}
inline void FindClientResponse::set_label(::google::protobuf::uint32 value) {
  set_has_label();
  label_ = value;
}

// optional .bnet.protocol.ProcessId client_process_id = 2;
inline bool FindClientResponse::has_client_process_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FindClientResponse::set_has_client_process_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FindClientResponse::clear_has_client_process_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FindClientResponse::clear_client_process_id() {
  if (client_process_id_ != NULL) client_process_id_->::bnet::protocol::ProcessId::Clear();
  clear_has_client_process_id();
}
inline const ::bnet::protocol::ProcessId& FindClientResponse::client_process_id() const {
  return client_process_id_ != NULL ? *client_process_id_ : *default_instance_->client_process_id_;
}
inline ::bnet::protocol::ProcessId* FindClientResponse::mutable_client_process_id() {
  set_has_client_process_id();
  if (client_process_id_ == NULL) client_process_id_ = new ::bnet::protocol::ProcessId;
  return client_process_id_;
}
inline ::bnet::protocol::ProcessId* FindClientResponse::release_client_process_id() {
  clear_has_client_process_id();
  ::bnet::protocol::ProcessId* temp = client_process_id_;
  client_process_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RegisterClientRequest

// required .bnet.protocol.EntityId entity_id = 1;
inline bool RegisterClientRequest::has_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterClientRequest::set_has_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterClientRequest::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterClientRequest::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::bnet::protocol::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::bnet::protocol::EntityId& RegisterClientRequest::entity_id() const {
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::bnet::protocol::EntityId* RegisterClientRequest::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::bnet::protocol::EntityId;
  return entity_id_;
}
inline ::bnet::protocol::EntityId* RegisterClientRequest::release_entity_id() {
  clear_has_entity_id();
  ::bnet::protocol::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UnregisterClientRequest

// required .bnet.protocol.EntityId entity_id = 1;
inline bool UnregisterClientRequest::has_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnregisterClientRequest::set_has_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnregisterClientRequest::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnregisterClientRequest::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::bnet::protocol::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::bnet::protocol::EntityId& UnregisterClientRequest::entity_id() const {
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::bnet::protocol::EntityId* UnregisterClientRequest::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::bnet::protocol::EntityId;
  return entity_id_;
}
inline ::bnet::protocol::EntityId* UnregisterClientRequest::release_entity_id() {
  clear_has_entity_id();
  ::bnet::protocol::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace notification
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fnotification_2fnotification_2eproto__INCLUDED
