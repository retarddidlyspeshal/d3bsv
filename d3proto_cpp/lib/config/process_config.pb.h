// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lib/config/process_config.proto

#ifndef PROTOBUF_lib_2fconfig_2fprocess_5fconfig_2eproto__INCLUDED
#define PROTOBUF_lib_2fconfig_2fprocess_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();

class Var;
class Resource;
class ProgramResources;
class ServerAddress;
class ServerSet;
class SupplementalService;
class ListenPoint;
class ServiceShard;
class ServiceConfig;
class RPCServerConfig;
class ProcessConfig;

// ===================================================================

class Var : public ::google::protobuf::Message {
 public:
  Var();
  virtual ~Var();
  
  Var(const Var& from);
  
  inline Var& operator=(const Var& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Var& default_instance();
  
  void Swap(Var* other);
  
  // implements Message ----------------------------------------------
  
  Var* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Var& from);
  void MergeFrom(const Var& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.Var)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Var* default_instance_;
};
// -------------------------------------------------------------------

class Resource : public ::google::protobuf::Message {
 public:
  Resource();
  virtual ~Resource();
  
  Resource(const Resource& from);
  
  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Resource& default_instance();
  
  void Swap(Resource* other);
  
  // implements Message ----------------------------------------------
  
  Resource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.Resource)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_url();
  inline void clear_has_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* url_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Resource* default_instance_;
};
// -------------------------------------------------------------------

class ProgramResources : public ::google::protobuf::Message {
 public:
  ProgramResources();
  virtual ~ProgramResources();
  
  ProgramResources(const ProgramResources& from);
  
  inline ProgramResources& operator=(const ProgramResources& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgramResources& default_instance();
  
  void Swap(ProgramResources* other);
  
  // implements Message ----------------------------------------------
  
  ProgramResources* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProgramResources& from);
  void MergeFrom(const ProgramResources& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.config.Resource program = 1;
  inline int program_size() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 1;
  inline const ::bnet::protocol::config::Resource& program(int index) const;
  inline ::bnet::protocol::config::Resource* mutable_program(int index);
  inline ::bnet::protocol::config::Resource* add_program();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource >&
      program() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource >*
      mutable_program();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.ProgramResources)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource > program_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static ProgramResources* default_instance_;
};
// -------------------------------------------------------------------

class ServerAddress : public ::google::protobuf::Message {
 public:
  ServerAddress();
  virtual ~ServerAddress();
  
  ServerAddress(const ServerAddress& from);
  
  inline ServerAddress& operator=(const ServerAddress& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerAddress& default_instance();
  
  void Swap(ServerAddress* other);
  
  // implements Message ----------------------------------------------
  
  ServerAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerAddress& from);
  void MergeFrom(const ServerAddress& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.Address address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::bnet::protocol::Address& address() const;
  inline ::bnet::protocol::Address* mutable_address();
  inline ::bnet::protocol::Address* release_address();
  
  // required string process_name = 2;
  inline bool has_process_name() const;
  inline void clear_process_name();
  static const int kProcessNameFieldNumber = 2;
  inline const ::std::string& process_name() const;
  inline void set_process_name(const ::std::string& value);
  inline void set_process_name(const char* value);
  inline void set_process_name(const char* value, size_t size);
  inline ::std::string* mutable_process_name();
  inline ::std::string* release_process_name();
  
  // optional string server_name = 3;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 3;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.ServerAddress)
 private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_process_name();
  inline void clear_has_process_name();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::Address* address_;
  ::std::string* process_name_;
  ::std::string* server_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static ServerAddress* default_instance_;
};
// -------------------------------------------------------------------

class ServerSet : public ::google::protobuf::Message {
 public:
  ServerSet();
  virtual ~ServerSet();
  
  ServerSet(const ServerSet& from);
  
  inline ServerSet& operator=(const ServerSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerSet& default_instance();
  
  void Swap(ServerSet* other);
  
  // implements Message ----------------------------------------------
  
  ServerSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerSet& from);
  void MergeFrom(const ServerSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.config.ServerAddress server_address = 1;
  inline int server_address_size() const;
  inline void clear_server_address();
  static const int kServerAddressFieldNumber = 1;
  inline const ::bnet::protocol::config::ServerAddress& server_address(int index) const;
  inline ::bnet::protocol::config::ServerAddress* mutable_server_address(int index);
  inline ::bnet::protocol::config::ServerAddress* add_server_address();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerAddress >&
      server_address() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerAddress >*
      mutable_server_address();
  
  // repeated string exported_service = 2;
  inline int exported_service_size() const;
  inline void clear_exported_service();
  static const int kExportedServiceFieldNumber = 2;
  inline const ::std::string& exported_service(int index) const;
  inline ::std::string* mutable_exported_service(int index);
  inline void set_exported_service(int index, const ::std::string& value);
  inline void set_exported_service(int index, const char* value);
  inline void set_exported_service(int index, const char* value, size_t size);
  inline ::std::string* add_exported_service();
  inline void add_exported_service(const ::std::string& value);
  inline void add_exported_service(const char* value);
  inline void add_exported_service(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& exported_service() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_exported_service();
  
  // repeated string imported_service = 3;
  inline int imported_service_size() const;
  inline void clear_imported_service();
  static const int kImportedServiceFieldNumber = 3;
  inline const ::std::string& imported_service(int index) const;
  inline ::std::string* mutable_imported_service(int index);
  inline void set_imported_service(int index, const ::std::string& value);
  inline void set_imported_service(int index, const char* value);
  inline void set_imported_service(int index, const char* value, size_t size);
  inline ::std::string* add_imported_service();
  inline void add_imported_service(const ::std::string& value);
  inline void add_imported_service(const char* value);
  inline void add_imported_service(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& imported_service() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_imported_service();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.ServerSet)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerAddress > server_address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> exported_service_;
  ::google::protobuf::RepeatedPtrField< ::std::string> imported_service_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static ServerSet* default_instance_;
};
// -------------------------------------------------------------------

class SupplementalService : public ::google::protobuf::Message {
 public:
  SupplementalService();
  virtual ~SupplementalService();
  
  SupplementalService(const SupplementalService& from);
  
  inline SupplementalService& operator=(const SupplementalService& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SupplementalService& default_instance();
  
  void Swap(SupplementalService* other);
  
  // implements Message ----------------------------------------------
  
  SupplementalService* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SupplementalService& from);
  void MergeFrom(const SupplementalService& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.SupplementalService)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static SupplementalService* default_instance_;
};
// -------------------------------------------------------------------

class ListenPoint : public ::google::protobuf::Message {
 public:
  ListenPoint();
  virtual ~ListenPoint();
  
  ListenPoint(const ListenPoint& from);
  
  inline ListenPoint& operator=(const ListenPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListenPoint& default_instance();
  
  void Swap(ListenPoint* other);
  
  // implements Message ----------------------------------------------
  
  ListenPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListenPoint& from);
  void MergeFrom(const ListenPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // optional string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // repeated .bnet.protocol.config.ServerSet accept = 3;
  inline int accept_size() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 3;
  inline const ::bnet::protocol::config::ServerSet& accept(int index) const;
  inline ::bnet::protocol::config::ServerSet* mutable_accept(int index);
  inline ::bnet::protocol::config::ServerSet* add_accept();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet >&
      accept() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet >*
      mutable_accept();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.ListenPoint)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_address();
  inline void clear_has_address();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* address_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet > accept_;
  ::google::protobuf::uint32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static ListenPoint* default_instance_;
};
// -------------------------------------------------------------------

class ServiceShard : public ::google::protobuf::Message {
 public:
  ServiceShard();
  virtual ~ServiceShard();
  
  ServiceShard(const ServiceShard& from);
  
  inline ServiceShard& operator=(const ServiceShard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceShard& default_instance();
  
  void Swap(ServiceShard* other);
  
  // implements Message ----------------------------------------------
  
  ServiceShard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceShard& from);
  void MergeFrom(const ServiceShard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string process_name = 1;
  inline bool has_process_name() const;
  inline void clear_process_name();
  static const int kProcessNameFieldNumber = 1;
  inline const ::std::string& process_name() const;
  inline void set_process_name(const ::std::string& value);
  inline void set_process_name(const char* value);
  inline void set_process_name(const char* value, size_t size);
  inline ::std::string* mutable_process_name();
  inline ::std::string* release_process_name();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.ServiceShard)
 private:
  inline void set_has_process_name();
  inline void clear_has_process_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* process_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static ServiceShard* default_instance_;
};
// -------------------------------------------------------------------

class ServiceConfig : public ::google::protobuf::Message {
 public:
  ServiceConfig();
  virtual ~ServiceConfig();
  
  ServiceConfig(const ServiceConfig& from);
  
  inline ServiceConfig& operator=(const ServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceConfig& default_instance();
  
  void Swap(ServiceConfig* other);
  
  // implements Message ----------------------------------------------
  
  ServiceConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceConfig& from);
  void MergeFrom(const ServiceConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // repeated .bnet.protocol.config.ServiceShard shard = 3;
  inline int shard_size() const;
  inline void clear_shard();
  static const int kShardFieldNumber = 3;
  inline const ::bnet::protocol::config::ServiceShard& shard(int index) const;
  inline ::bnet::protocol::config::ServiceShard* mutable_shard(int index);
  inline ::bnet::protocol::config::ServiceShard* add_shard();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceShard >&
      shard() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceShard >*
      mutable_shard();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.ServiceConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_url();
  inline void clear_has_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* url_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceShard > shard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static ServiceConfig* default_instance_;
};
// -------------------------------------------------------------------

class RPCServerConfig : public ::google::protobuf::Message {
 public:
  RPCServerConfig();
  virtual ~RPCServerConfig();
  
  RPCServerConfig(const RPCServerConfig& from);
  
  inline RPCServerConfig& operator=(const RPCServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCServerConfig& default_instance();
  
  void Swap(RPCServerConfig* other);
  
  // implements Message ----------------------------------------------
  
  RPCServerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCServerConfig& from);
  void MergeFrom(const RPCServerConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .bnet.protocol.config.ListenPoint listen = 2;
  inline bool has_listen() const;
  inline void clear_listen();
  static const int kListenFieldNumber = 2;
  inline const ::bnet::protocol::config::ListenPoint& listen() const;
  inline ::bnet::protocol::config::ListenPoint* mutable_listen();
  inline ::bnet::protocol::config::ListenPoint* release_listen();
  
  // repeated .bnet.protocol.config.ServerSet connect = 3;
  inline int connect_size() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 3;
  inline const ::bnet::protocol::config::ServerSet& connect(int index) const;
  inline ::bnet::protocol::config::ServerSet* mutable_connect(int index);
  inline ::bnet::protocol::config::ServerSet* add_connect();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet >&
      connect() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet >*
      mutable_connect();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.RPCServerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_listen();
  inline void clear_has_listen();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::bnet::protocol::config::ListenPoint* listen_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet > connect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static RPCServerConfig* default_instance_;
};
// -------------------------------------------------------------------

class ProcessConfig : public ::google::protobuf::Message {
 public:
  ProcessConfig();
  virtual ~ProcessConfig();
  
  ProcessConfig(const ProcessConfig& from);
  
  inline ProcessConfig& operator=(const ProcessConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessConfig& default_instance();
  
  void Swap(ProcessConfig* other);
  
  // implements Message ----------------------------------------------
  
  ProcessConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessConfig& from);
  void MergeFrom(const ProcessConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string process_name = 1;
  inline bool has_process_name() const;
  inline void clear_process_name();
  static const int kProcessNameFieldNumber = 1;
  inline const ::std::string& process_name() const;
  inline void set_process_name(const ::std::string& value);
  inline void set_process_name(const char* value);
  inline void set_process_name(const char* value, size_t size);
  inline ::std::string* mutable_process_name();
  inline ::std::string* release_process_name();
  
  // repeated .bnet.protocol.config.RPCServerConfig server = 2;
  inline int server_size() const;
  inline void clear_server();
  static const int kServerFieldNumber = 2;
  inline const ::bnet::protocol::config::RPCServerConfig& server(int index) const;
  inline ::bnet::protocol::config::RPCServerConfig* mutable_server(int index);
  inline ::bnet::protocol::config::RPCServerConfig* add_server();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::RPCServerConfig >&
      server() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::RPCServerConfig >*
      mutable_server();
  
  // repeated .bnet.protocol.config.Resource resource = 3;
  inline int resource_size() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 3;
  inline const ::bnet::protocol::config::Resource& resource(int index) const;
  inline ::bnet::protocol::config::Resource* mutable_resource(int index);
  inline ::bnet::protocol::config::Resource* add_resource();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource >&
      resource() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource >*
      mutable_resource();
  
  // repeated .bnet.protocol.config.ServiceConfig service = 4;
  inline int service_size() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 4;
  inline const ::bnet::protocol::config::ServiceConfig& service(int index) const;
  inline ::bnet::protocol::config::ServiceConfig* mutable_service(int index);
  inline ::bnet::protocol::config::ServiceConfig* add_service();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceConfig >&
      service() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceConfig >*
      mutable_service();
  
  // repeated .bnet.protocol.config.Var var = 5;
  inline int var_size() const;
  inline void clear_var();
  static const int kVarFieldNumber = 5;
  inline const ::bnet::protocol::config::Var& var(int index) const;
  inline ::bnet::protocol::config::Var* mutable_var(int index);
  inline ::bnet::protocol::config::Var* add_var();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Var >&
      var() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Var >*
      mutable_var();
  
  // repeated .bnet.protocol.config.SupplementalService supplemental_service = 6;
  inline int supplemental_service_size() const;
  inline void clear_supplemental_service();
  static const int kSupplementalServiceFieldNumber = 6;
  inline const ::bnet::protocol::config::SupplementalService& supplemental_service(int index) const;
  inline ::bnet::protocol::config::SupplementalService* mutable_supplemental_service(int index);
  inline ::bnet::protocol::config::SupplementalService* add_supplemental_service();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::SupplementalService >&
      supplemental_service() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::SupplementalService >*
      mutable_supplemental_service();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.config.ProcessConfig)
 private:
  inline void set_has_process_name();
  inline void clear_has_process_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* process_name_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::RPCServerConfig > server_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource > resource_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceConfig > service_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Var > var_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::SupplementalService > supplemental_service_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_AssignDesc_lib_2fconfig_2fprocess_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_lib_2fconfig_2fprocess_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static ProcessConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Var

// required string name = 1;
inline bool Var::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Var::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Var::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Var::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Var::name() const {
  return *name_;
}
inline void Var::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Var::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Var::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Var::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Var::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool Var::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Var::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Var::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Var::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Var::value() const {
  return *value_;
}
inline void Var::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Var::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Var::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Var::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Var::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Resource

// required string name = 1;
inline bool Resource::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resource::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Resource::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Resource::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Resource::name() const {
  return *name_;
}
inline void Resource::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Resource::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Resource::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Resource::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Resource::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string url = 2;
inline bool Resource::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resource::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Resource::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Resource::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Resource::url() const {
  return *url_;
}
inline void Resource::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Resource::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Resource::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Resource::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* Resource::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProgramResources

// repeated .bnet.protocol.config.Resource program = 1;
inline int ProgramResources::program_size() const {
  return program_.size();
}
inline void ProgramResources::clear_program() {
  program_.Clear();
}
inline const ::bnet::protocol::config::Resource& ProgramResources::program(int index) const {
  return program_.Get(index);
}
inline ::bnet::protocol::config::Resource* ProgramResources::mutable_program(int index) {
  return program_.Mutable(index);
}
inline ::bnet::protocol::config::Resource* ProgramResources::add_program() {
  return program_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource >&
ProgramResources::program() const {
  return program_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource >*
ProgramResources::mutable_program() {
  return &program_;
}

// -------------------------------------------------------------------

// ServerAddress

// required .bnet.protocol.Address address = 1;
inline bool ServerAddress::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerAddress::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerAddress::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerAddress::clear_address() {
  if (address_ != NULL) address_->::bnet::protocol::Address::Clear();
  clear_has_address();
}
inline const ::bnet::protocol::Address& ServerAddress::address() const {
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::bnet::protocol::Address* ServerAddress::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::bnet::protocol::Address;
  return address_;
}
inline ::bnet::protocol::Address* ServerAddress::release_address() {
  clear_has_address();
  ::bnet::protocol::Address* temp = address_;
  address_ = NULL;
  return temp;
}

// required string process_name = 2;
inline bool ServerAddress::has_process_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerAddress::set_has_process_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerAddress::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerAddress::clear_process_name() {
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    process_name_->clear();
  }
  clear_has_process_name();
}
inline const ::std::string& ServerAddress::process_name() const {
  return *process_name_;
}
inline void ServerAddress::set_process_name(const ::std::string& value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void ServerAddress::set_process_name(const char* value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void ServerAddress::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerAddress::mutable_process_name() {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  return process_name_;
}
inline ::std::string* ServerAddress::release_process_name() {
  clear_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_name_;
    process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string server_name = 3;
inline bool ServerAddress::has_server_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerAddress::set_has_server_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerAddress::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerAddress::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& ServerAddress::server_name() const {
  return *server_name_;
}
inline void ServerAddress::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ServerAddress::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ServerAddress::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerAddress::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* ServerAddress::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ServerSet

// repeated .bnet.protocol.config.ServerAddress server_address = 1;
inline int ServerSet::server_address_size() const {
  return server_address_.size();
}
inline void ServerSet::clear_server_address() {
  server_address_.Clear();
}
inline const ::bnet::protocol::config::ServerAddress& ServerSet::server_address(int index) const {
  return server_address_.Get(index);
}
inline ::bnet::protocol::config::ServerAddress* ServerSet::mutable_server_address(int index) {
  return server_address_.Mutable(index);
}
inline ::bnet::protocol::config::ServerAddress* ServerSet::add_server_address() {
  return server_address_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerAddress >&
ServerSet::server_address() const {
  return server_address_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerAddress >*
ServerSet::mutable_server_address() {
  return &server_address_;
}

// repeated string exported_service = 2;
inline int ServerSet::exported_service_size() const {
  return exported_service_.size();
}
inline void ServerSet::clear_exported_service() {
  exported_service_.Clear();
}
inline const ::std::string& ServerSet::exported_service(int index) const {
  return exported_service_.Get(index);
}
inline ::std::string* ServerSet::mutable_exported_service(int index) {
  return exported_service_.Mutable(index);
}
inline void ServerSet::set_exported_service(int index, const ::std::string& value) {
  exported_service_.Mutable(index)->assign(value);
}
inline void ServerSet::set_exported_service(int index, const char* value) {
  exported_service_.Mutable(index)->assign(value);
}
inline void ServerSet::set_exported_service(int index, const char* value, size_t size) {
  exported_service_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerSet::add_exported_service() {
  return exported_service_.Add();
}
inline void ServerSet::add_exported_service(const ::std::string& value) {
  exported_service_.Add()->assign(value);
}
inline void ServerSet::add_exported_service(const char* value) {
  exported_service_.Add()->assign(value);
}
inline void ServerSet::add_exported_service(const char* value, size_t size) {
  exported_service_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerSet::exported_service() const {
  return exported_service_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerSet::mutable_exported_service() {
  return &exported_service_;
}

// repeated string imported_service = 3;
inline int ServerSet::imported_service_size() const {
  return imported_service_.size();
}
inline void ServerSet::clear_imported_service() {
  imported_service_.Clear();
}
inline const ::std::string& ServerSet::imported_service(int index) const {
  return imported_service_.Get(index);
}
inline ::std::string* ServerSet::mutable_imported_service(int index) {
  return imported_service_.Mutable(index);
}
inline void ServerSet::set_imported_service(int index, const ::std::string& value) {
  imported_service_.Mutable(index)->assign(value);
}
inline void ServerSet::set_imported_service(int index, const char* value) {
  imported_service_.Mutable(index)->assign(value);
}
inline void ServerSet::set_imported_service(int index, const char* value, size_t size) {
  imported_service_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerSet::add_imported_service() {
  return imported_service_.Add();
}
inline void ServerSet::add_imported_service(const ::std::string& value) {
  imported_service_.Add()->assign(value);
}
inline void ServerSet::add_imported_service(const char* value) {
  imported_service_.Add()->assign(value);
}
inline void ServerSet::add_imported_service(const char* value, size_t size) {
  imported_service_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerSet::imported_service() const {
  return imported_service_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerSet::mutable_imported_service() {
  return &imported_service_;
}

// -------------------------------------------------------------------

// SupplementalService

// required string name = 1;
inline bool SupplementalService::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SupplementalService::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SupplementalService::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SupplementalService::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SupplementalService::name() const {
  return *name_;
}
inline void SupplementalService::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SupplementalService::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SupplementalService::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SupplementalService::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SupplementalService::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 port = 2;
inline bool SupplementalService::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SupplementalService::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SupplementalService::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SupplementalService::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 SupplementalService::port() const {
  return port_;
}
inline void SupplementalService::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// ListenPoint

// required uint32 port = 1;
inline bool ListenPoint::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListenPoint::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListenPoint::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListenPoint::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ListenPoint::port() const {
  return port_;
}
inline void ListenPoint::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional string address = 2;
inline bool ListenPoint::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListenPoint::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListenPoint::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListenPoint::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& ListenPoint::address() const {
  return *address_;
}
inline void ListenPoint::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ListenPoint::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void ListenPoint::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListenPoint::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* ListenPoint::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bnet.protocol.config.ServerSet accept = 3;
inline int ListenPoint::accept_size() const {
  return accept_.size();
}
inline void ListenPoint::clear_accept() {
  accept_.Clear();
}
inline const ::bnet::protocol::config::ServerSet& ListenPoint::accept(int index) const {
  return accept_.Get(index);
}
inline ::bnet::protocol::config::ServerSet* ListenPoint::mutable_accept(int index) {
  return accept_.Mutable(index);
}
inline ::bnet::protocol::config::ServerSet* ListenPoint::add_accept() {
  return accept_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet >&
ListenPoint::accept() const {
  return accept_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet >*
ListenPoint::mutable_accept() {
  return &accept_;
}

// -------------------------------------------------------------------

// ServiceShard

// required string process_name = 1;
inline bool ServiceShard::has_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceShard::set_has_process_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceShard::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceShard::clear_process_name() {
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    process_name_->clear();
  }
  clear_has_process_name();
}
inline const ::std::string& ServiceShard::process_name() const {
  return *process_name_;
}
inline void ServiceShard::set_process_name(const ::std::string& value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void ServiceShard::set_process_name(const char* value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void ServiceShard::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceShard::mutable_process_name() {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  return process_name_;
}
inline ::std::string* ServiceShard::release_process_name() {
  clear_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_name_;
    process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ServiceConfig

// required string name = 1;
inline bool ServiceConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServiceConfig::name() const {
  return *name_;
}
inline void ServiceConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ServiceConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ServiceConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ServiceConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string url = 2;
inline bool ServiceConfig::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceConfig::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceConfig::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceConfig::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ServiceConfig::url() const {
  return *url_;
}
inline void ServiceConfig::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ServiceConfig::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ServiceConfig::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceConfig::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ServiceConfig::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bnet.protocol.config.ServiceShard shard = 3;
inline int ServiceConfig::shard_size() const {
  return shard_.size();
}
inline void ServiceConfig::clear_shard() {
  shard_.Clear();
}
inline const ::bnet::protocol::config::ServiceShard& ServiceConfig::shard(int index) const {
  return shard_.Get(index);
}
inline ::bnet::protocol::config::ServiceShard* ServiceConfig::mutable_shard(int index) {
  return shard_.Mutable(index);
}
inline ::bnet::protocol::config::ServiceShard* ServiceConfig::add_shard() {
  return shard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceShard >&
ServiceConfig::shard() const {
  return shard_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceShard >*
ServiceConfig::mutable_shard() {
  return &shard_;
}

// -------------------------------------------------------------------

// RPCServerConfig

// required string name = 1;
inline bool RPCServerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCServerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCServerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCServerConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RPCServerConfig::name() const {
  return *name_;
}
inline void RPCServerConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCServerConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPCServerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCServerConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RPCServerConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .bnet.protocol.config.ListenPoint listen = 2;
inline bool RPCServerConfig::has_listen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCServerConfig::set_has_listen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCServerConfig::clear_has_listen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCServerConfig::clear_listen() {
  if (listen_ != NULL) listen_->::bnet::protocol::config::ListenPoint::Clear();
  clear_has_listen();
}
inline const ::bnet::protocol::config::ListenPoint& RPCServerConfig::listen() const {
  return listen_ != NULL ? *listen_ : *default_instance_->listen_;
}
inline ::bnet::protocol::config::ListenPoint* RPCServerConfig::mutable_listen() {
  set_has_listen();
  if (listen_ == NULL) listen_ = new ::bnet::protocol::config::ListenPoint;
  return listen_;
}
inline ::bnet::protocol::config::ListenPoint* RPCServerConfig::release_listen() {
  clear_has_listen();
  ::bnet::protocol::config::ListenPoint* temp = listen_;
  listen_ = NULL;
  return temp;
}

// repeated .bnet.protocol.config.ServerSet connect = 3;
inline int RPCServerConfig::connect_size() const {
  return connect_.size();
}
inline void RPCServerConfig::clear_connect() {
  connect_.Clear();
}
inline const ::bnet::protocol::config::ServerSet& RPCServerConfig::connect(int index) const {
  return connect_.Get(index);
}
inline ::bnet::protocol::config::ServerSet* RPCServerConfig::mutable_connect(int index) {
  return connect_.Mutable(index);
}
inline ::bnet::protocol::config::ServerSet* RPCServerConfig::add_connect() {
  return connect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet >&
RPCServerConfig::connect() const {
  return connect_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServerSet >*
RPCServerConfig::mutable_connect() {
  return &connect_;
}

// -------------------------------------------------------------------

// ProcessConfig

// required string process_name = 1;
inline bool ProcessConfig::has_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessConfig::set_has_process_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessConfig::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessConfig::clear_process_name() {
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    process_name_->clear();
  }
  clear_has_process_name();
}
inline const ::std::string& ProcessConfig::process_name() const {
  return *process_name_;
}
inline void ProcessConfig::set_process_name(const ::std::string& value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void ProcessConfig::set_process_name(const char* value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void ProcessConfig::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessConfig::mutable_process_name() {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  return process_name_;
}
inline ::std::string* ProcessConfig::release_process_name() {
  clear_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_name_;
    process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bnet.protocol.config.RPCServerConfig server = 2;
inline int ProcessConfig::server_size() const {
  return server_.size();
}
inline void ProcessConfig::clear_server() {
  server_.Clear();
}
inline const ::bnet::protocol::config::RPCServerConfig& ProcessConfig::server(int index) const {
  return server_.Get(index);
}
inline ::bnet::protocol::config::RPCServerConfig* ProcessConfig::mutable_server(int index) {
  return server_.Mutable(index);
}
inline ::bnet::protocol::config::RPCServerConfig* ProcessConfig::add_server() {
  return server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::RPCServerConfig >&
ProcessConfig::server() const {
  return server_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::RPCServerConfig >*
ProcessConfig::mutable_server() {
  return &server_;
}

// repeated .bnet.protocol.config.Resource resource = 3;
inline int ProcessConfig::resource_size() const {
  return resource_.size();
}
inline void ProcessConfig::clear_resource() {
  resource_.Clear();
}
inline const ::bnet::protocol::config::Resource& ProcessConfig::resource(int index) const {
  return resource_.Get(index);
}
inline ::bnet::protocol::config::Resource* ProcessConfig::mutable_resource(int index) {
  return resource_.Mutable(index);
}
inline ::bnet::protocol::config::Resource* ProcessConfig::add_resource() {
  return resource_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource >&
ProcessConfig::resource() const {
  return resource_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Resource >*
ProcessConfig::mutable_resource() {
  return &resource_;
}

// repeated .bnet.protocol.config.ServiceConfig service = 4;
inline int ProcessConfig::service_size() const {
  return service_.size();
}
inline void ProcessConfig::clear_service() {
  service_.Clear();
}
inline const ::bnet::protocol::config::ServiceConfig& ProcessConfig::service(int index) const {
  return service_.Get(index);
}
inline ::bnet::protocol::config::ServiceConfig* ProcessConfig::mutable_service(int index) {
  return service_.Mutable(index);
}
inline ::bnet::protocol::config::ServiceConfig* ProcessConfig::add_service() {
  return service_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceConfig >&
ProcessConfig::service() const {
  return service_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::ServiceConfig >*
ProcessConfig::mutable_service() {
  return &service_;
}

// repeated .bnet.protocol.config.Var var = 5;
inline int ProcessConfig::var_size() const {
  return var_.size();
}
inline void ProcessConfig::clear_var() {
  var_.Clear();
}
inline const ::bnet::protocol::config::Var& ProcessConfig::var(int index) const {
  return var_.Get(index);
}
inline ::bnet::protocol::config::Var* ProcessConfig::mutable_var(int index) {
  return var_.Mutable(index);
}
inline ::bnet::protocol::config::Var* ProcessConfig::add_var() {
  return var_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Var >&
ProcessConfig::var() const {
  return var_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::Var >*
ProcessConfig::mutable_var() {
  return &var_;
}

// repeated .bnet.protocol.config.SupplementalService supplemental_service = 6;
inline int ProcessConfig::supplemental_service_size() const {
  return supplemental_service_.size();
}
inline void ProcessConfig::clear_supplemental_service() {
  supplemental_service_.Clear();
}
inline const ::bnet::protocol::config::SupplementalService& ProcessConfig::supplemental_service(int index) const {
  return supplemental_service_.Get(index);
}
inline ::bnet::protocol::config::SupplementalService* ProcessConfig::mutable_supplemental_service(int index) {
  return supplemental_service_.Mutable(index);
}
inline ::bnet::protocol::config::SupplementalService* ProcessConfig::add_supplemental_service() {
  return supplemental_service_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::SupplementalService >&
ProcessConfig::supplemental_service() const {
  return supplemental_service_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::config::SupplementalService >*
ProcessConfig::mutable_supplemental_service() {
  return &supplemental_service_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lib_2fconfig_2fprocess_5fconfig_2eproto__INCLUDED
