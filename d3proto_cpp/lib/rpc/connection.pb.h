// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lib/rpc/connection.proto

#ifndef PROTOBUF_lib_2frpc_2fconnection_2eproto__INCLUDED
#define PROTOBUF_lib_2frpc_2fconnection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace connection {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();

class ConnectRequest;
class ConnectResponse;
class BoundService;
class BindRequest;
class BindResponse;
class EchoRequest;
class EchoResponse;
class DisconnectRequest;
class DisconnectNotification;
class NullRequest;
class EncryptRequest;

// ===================================================================

class ConnectRequest : public ::google::protobuf::Message {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();
  
  ConnectRequest(const ConnectRequest& from);
  
  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();
  
  void Swap(ConnectRequest* other);
  
  // implements Message ----------------------------------------------
  
  ConnectRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.ProcessId client_id = 1;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  inline const ::bnet::protocol::ProcessId& client_id() const;
  inline ::bnet::protocol::ProcessId* mutable_client_id();
  inline ::bnet::protocol::ProcessId* release_client_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.ConnectRequest)
 private:
  inline void set_has_client_id();
  inline void clear_has_client_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::ProcessId* client_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static ConnectRequest* default_instance_;
};
// -------------------------------------------------------------------

class ConnectResponse : public ::google::protobuf::Message {
 public:
  ConnectResponse();
  virtual ~ConnectResponse();
  
  ConnectResponse(const ConnectResponse& from);
  
  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectResponse& default_instance();
  
  void Swap(ConnectResponse* other);
  
  // implements Message ----------------------------------------------
  
  ConnectResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectResponse& from);
  void MergeFrom(const ConnectResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.ProcessId server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline const ::bnet::protocol::ProcessId& server_id() const;
  inline ::bnet::protocol::ProcessId* mutable_server_id();
  inline ::bnet::protocol::ProcessId* release_server_id();
  
  // optional .bnet.protocol.ProcessId client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline const ::bnet::protocol::ProcessId& client_id() const;
  inline ::bnet::protocol::ProcessId* mutable_client_id();
  inline ::bnet::protocol::ProcessId* release_client_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.ConnectResponse)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::ProcessId* server_id_;
  ::bnet::protocol::ProcessId* client_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static ConnectResponse* default_instance_;
};
// -------------------------------------------------------------------

class BoundService : public ::google::protobuf::Message {
 public:
  BoundService();
  virtual ~BoundService();
  
  BoundService(const BoundService& from);
  
  inline BoundService& operator=(const BoundService& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundService& default_instance();
  
  void Swap(BoundService* other);
  
  // implements Message ----------------------------------------------
  
  BoundService* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoundService& from);
  void MergeFrom(const BoundService& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed32 hash = 1;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 1;
  inline ::google::protobuf::uint32 hash() const;
  inline void set_hash(::google::protobuf::uint32 value);
  
  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.BoundService)
 private:
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 hash_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static BoundService* default_instance_;
};
// -------------------------------------------------------------------

class BindRequest : public ::google::protobuf::Message {
 public:
  BindRequest();
  virtual ~BindRequest();
  
  BindRequest(const BindRequest& from);
  
  inline BindRequest& operator=(const BindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BindRequest& default_instance();
  
  void Swap(BindRequest* other);
  
  // implements Message ----------------------------------------------
  
  BindRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindRequest& from);
  void MergeFrom(const BindRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated fixed32 imported_service_hash = 1;
  inline int imported_service_hash_size() const;
  inline void clear_imported_service_hash();
  static const int kImportedServiceHashFieldNumber = 1;
  inline ::google::protobuf::uint32 imported_service_hash(int index) const;
  inline void set_imported_service_hash(int index, ::google::protobuf::uint32 value);
  inline void add_imported_service_hash(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      imported_service_hash() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_imported_service_hash();
  
  // repeated .bnet.protocol.connection.BoundService exported_service = 2;
  inline int exported_service_size() const;
  inline void clear_exported_service();
  static const int kExportedServiceFieldNumber = 2;
  inline const ::bnet::protocol::connection::BoundService& exported_service(int index) const;
  inline ::bnet::protocol::connection::BoundService* mutable_exported_service(int index);
  inline ::bnet::protocol::connection::BoundService* add_exported_service();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::connection::BoundService >&
      exported_service() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::connection::BoundService >*
      mutable_exported_service();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.BindRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > imported_service_hash_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::connection::BoundService > exported_service_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static BindRequest* default_instance_;
};
// -------------------------------------------------------------------

class BindResponse : public ::google::protobuf::Message {
 public:
  BindResponse();
  virtual ~BindResponse();
  
  BindResponse(const BindResponse& from);
  
  inline BindResponse& operator=(const BindResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BindResponse& default_instance();
  
  void Swap(BindResponse* other);
  
  // implements Message ----------------------------------------------
  
  BindResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindResponse& from);
  void MergeFrom(const BindResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 imported_service_id = 1;
  inline int imported_service_id_size() const;
  inline void clear_imported_service_id();
  static const int kImportedServiceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 imported_service_id(int index) const;
  inline void set_imported_service_id(int index, ::google::protobuf::uint32 value);
  inline void add_imported_service_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      imported_service_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_imported_service_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.BindResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > imported_service_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static BindResponse* default_instance_;
};
// -------------------------------------------------------------------

class EchoRequest : public ::google::protobuf::Message {
 public:
  EchoRequest();
  virtual ~EchoRequest();
  
  EchoRequest(const EchoRequest& from);
  
  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRequest& default_instance();
  
  void Swap(EchoRequest* other);
  
  // implements Message ----------------------------------------------
  
  EchoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);
  
  // optional bool network_only = 2;
  inline bool has_network_only() const;
  inline void clear_network_only();
  static const int kNetworkOnlyFieldNumber = 2;
  inline bool network_only() const;
  inline void set_network_only(bool value);
  
  // optional bytes payload = 3;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 3;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.EchoRequest)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_network_only();
  inline void clear_has_network_only();
  inline void set_has_payload();
  inline void clear_has_payload();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 time_;
  ::std::string* payload_;
  bool network_only_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static EchoRequest* default_instance_;
};
// -------------------------------------------------------------------

class EchoResponse : public ::google::protobuf::Message {
 public:
  EchoResponse();
  virtual ~EchoResponse();
  
  EchoResponse(const EchoResponse& from);
  
  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoResponse& default_instance();
  
  void Swap(EchoResponse* other);
  
  // implements Message ----------------------------------------------
  
  EchoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);
  
  // optional bytes payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.EchoResponse)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_payload();
  inline void clear_has_payload();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 time_;
  ::std::string* payload_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static EchoResponse* default_instance_;
};
// -------------------------------------------------------------------

class DisconnectRequest : public ::google::protobuf::Message {
 public:
  DisconnectRequest();
  virtual ~DisconnectRequest();
  
  DisconnectRequest(const DisconnectRequest& from);
  
  inline DisconnectRequest& operator=(const DisconnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisconnectRequest& default_instance();
  
  void Swap(DisconnectRequest* other);
  
  // implements Message ----------------------------------------------
  
  DisconnectRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisconnectRequest& from);
  void MergeFrom(const DisconnectRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.DisconnectRequest)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static DisconnectRequest* default_instance_;
};
// -------------------------------------------------------------------

class DisconnectNotification : public ::google::protobuf::Message {
 public:
  DisconnectNotification();
  virtual ~DisconnectNotification();
  
  DisconnectNotification(const DisconnectNotification& from);
  
  inline DisconnectNotification& operator=(const DisconnectNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisconnectNotification& default_instance();
  
  void Swap(DisconnectNotification* other);
  
  // implements Message ----------------------------------------------
  
  DisconnectNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisconnectNotification& from);
  void MergeFrom(const DisconnectNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);
  
  // optional string reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.DisconnectNotification)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* reason_;
  ::google::protobuf::uint32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static DisconnectNotification* default_instance_;
};
// -------------------------------------------------------------------

class NullRequest : public ::google::protobuf::Message {
 public:
  NullRequest();
  virtual ~NullRequest();
  
  NullRequest(const NullRequest& from);
  
  inline NullRequest& operator=(const NullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NullRequest& default_instance();
  
  void Swap(NullRequest* other);
  
  // implements Message ----------------------------------------------
  
  NullRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NullRequest& from);
  void MergeFrom(const NullRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.NullRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static NullRequest* default_instance_;
};
// -------------------------------------------------------------------

class EncryptRequest : public ::google::protobuf::Message {
 public:
  EncryptRequest();
  virtual ~EncryptRequest();
  
  EncryptRequest(const EncryptRequest& from);
  
  inline EncryptRequest& operator=(const EncryptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncryptRequest& default_instance();
  
  void Swap(EncryptRequest* other);
  
  // implements Message ----------------------------------------------
  
  EncryptRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncryptRequest& from);
  void MergeFrom(const EncryptRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.connection.EncryptRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto();
  friend void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto();
  
  void InitAsDefaultInstance();
  static EncryptRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// ConnectRequest

// optional .bnet.protocol.ProcessId client_id = 1;
inline bool ConnectRequest::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectRequest::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectRequest::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectRequest::clear_client_id() {
  if (client_id_ != NULL) client_id_->::bnet::protocol::ProcessId::Clear();
  clear_has_client_id();
}
inline const ::bnet::protocol::ProcessId& ConnectRequest::client_id() const {
  return client_id_ != NULL ? *client_id_ : *default_instance_->client_id_;
}
inline ::bnet::protocol::ProcessId* ConnectRequest::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == NULL) client_id_ = new ::bnet::protocol::ProcessId;
  return client_id_;
}
inline ::bnet::protocol::ProcessId* ConnectRequest::release_client_id() {
  clear_has_client_id();
  ::bnet::protocol::ProcessId* temp = client_id_;
  client_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ConnectResponse

// required .bnet.protocol.ProcessId server_id = 1;
inline bool ConnectResponse::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectResponse::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectResponse::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectResponse::clear_server_id() {
  if (server_id_ != NULL) server_id_->::bnet::protocol::ProcessId::Clear();
  clear_has_server_id();
}
inline const ::bnet::protocol::ProcessId& ConnectResponse::server_id() const {
  return server_id_ != NULL ? *server_id_ : *default_instance_->server_id_;
}
inline ::bnet::protocol::ProcessId* ConnectResponse::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == NULL) server_id_ = new ::bnet::protocol::ProcessId;
  return server_id_;
}
inline ::bnet::protocol::ProcessId* ConnectResponse::release_server_id() {
  clear_has_server_id();
  ::bnet::protocol::ProcessId* temp = server_id_;
  server_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.ProcessId client_id = 2;
inline bool ConnectResponse::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectResponse::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectResponse::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectResponse::clear_client_id() {
  if (client_id_ != NULL) client_id_->::bnet::protocol::ProcessId::Clear();
  clear_has_client_id();
}
inline const ::bnet::protocol::ProcessId& ConnectResponse::client_id() const {
  return client_id_ != NULL ? *client_id_ : *default_instance_->client_id_;
}
inline ::bnet::protocol::ProcessId* ConnectResponse::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == NULL) client_id_ = new ::bnet::protocol::ProcessId;
  return client_id_;
}
inline ::bnet::protocol::ProcessId* ConnectResponse::release_client_id() {
  clear_has_client_id();
  ::bnet::protocol::ProcessId* temp = client_id_;
  client_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// BoundService

// required fixed32 hash = 1;
inline bool BoundService::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoundService::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoundService::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoundService::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
inline ::google::protobuf::uint32 BoundService::hash() const {
  return hash_;
}
inline void BoundService::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
}

// required uint32 id = 2;
inline bool BoundService::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoundService::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoundService::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoundService::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BoundService::id() const {
  return id_;
}
inline void BoundService::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// BindRequest

// repeated fixed32 imported_service_hash = 1;
inline int BindRequest::imported_service_hash_size() const {
  return imported_service_hash_.size();
}
inline void BindRequest::clear_imported_service_hash() {
  imported_service_hash_.Clear();
}
inline ::google::protobuf::uint32 BindRequest::imported_service_hash(int index) const {
  return imported_service_hash_.Get(index);
}
inline void BindRequest::set_imported_service_hash(int index, ::google::protobuf::uint32 value) {
  imported_service_hash_.Set(index, value);
}
inline void BindRequest::add_imported_service_hash(::google::protobuf::uint32 value) {
  imported_service_hash_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BindRequest::imported_service_hash() const {
  return imported_service_hash_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BindRequest::mutable_imported_service_hash() {
  return &imported_service_hash_;
}

// repeated .bnet.protocol.connection.BoundService exported_service = 2;
inline int BindRequest::exported_service_size() const {
  return exported_service_.size();
}
inline void BindRequest::clear_exported_service() {
  exported_service_.Clear();
}
inline const ::bnet::protocol::connection::BoundService& BindRequest::exported_service(int index) const {
  return exported_service_.Get(index);
}
inline ::bnet::protocol::connection::BoundService* BindRequest::mutable_exported_service(int index) {
  return exported_service_.Mutable(index);
}
inline ::bnet::protocol::connection::BoundService* BindRequest::add_exported_service() {
  return exported_service_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::connection::BoundService >&
BindRequest::exported_service() const {
  return exported_service_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::connection::BoundService >*
BindRequest::mutable_exported_service() {
  return &exported_service_;
}

// -------------------------------------------------------------------

// BindResponse

// repeated uint32 imported_service_id = 1;
inline int BindResponse::imported_service_id_size() const {
  return imported_service_id_.size();
}
inline void BindResponse::clear_imported_service_id() {
  imported_service_id_.Clear();
}
inline ::google::protobuf::uint32 BindResponse::imported_service_id(int index) const {
  return imported_service_id_.Get(index);
}
inline void BindResponse::set_imported_service_id(int index, ::google::protobuf::uint32 value) {
  imported_service_id_.Set(index, value);
}
inline void BindResponse::add_imported_service_id(::google::protobuf::uint32 value) {
  imported_service_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BindResponse::imported_service_id() const {
  return imported_service_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BindResponse::mutable_imported_service_id() {
  return &imported_service_id_;
}

// -------------------------------------------------------------------

// EchoRequest

// optional fixed64 time = 1;
inline bool EchoRequest::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRequest::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoRequest::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 EchoRequest::time() const {
  return time_;
}
inline void EchoRequest::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional bool network_only = 2;
inline bool EchoRequest::has_network_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EchoRequest::set_has_network_only() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EchoRequest::clear_has_network_only() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EchoRequest::clear_network_only() {
  network_only_ = false;
  clear_has_network_only();
}
inline bool EchoRequest::network_only() const {
  return network_only_;
}
inline void EchoRequest::set_network_only(bool value) {
  set_has_network_only();
  network_only_ = value;
}

// optional bytes payload = 3;
inline bool EchoRequest::has_payload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EchoRequest::set_has_payload() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EchoRequest::clear_has_payload() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EchoRequest::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& EchoRequest::payload() const {
  return *payload_;
}
inline void EchoRequest::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void EchoRequest::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void EchoRequest::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoRequest::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* EchoRequest::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EchoResponse

// optional fixed64 time = 1;
inline bool EchoResponse::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoResponse::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoResponse::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoResponse::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 EchoResponse::time() const {
  return time_;
}
inline void EchoResponse::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional bytes payload = 2;
inline bool EchoResponse::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EchoResponse::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EchoResponse::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EchoResponse::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& EchoResponse::payload() const {
  return *payload_;
}
inline void EchoResponse::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void EchoResponse::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void EchoResponse::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoResponse::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* EchoResponse::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DisconnectRequest

// required uint32 error_code = 1;
inline bool DisconnectRequest::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisconnectRequest::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisconnectRequest::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisconnectRequest::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 DisconnectRequest::error_code() const {
  return error_code_;
}
inline void DisconnectRequest::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// DisconnectNotification

// required uint32 error_code = 1;
inline bool DisconnectNotification::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisconnectNotification::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisconnectNotification::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisconnectNotification::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 DisconnectNotification::error_code() const {
  return error_code_;
}
inline void DisconnectNotification::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional string reason = 2;
inline bool DisconnectNotification::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisconnectNotification::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DisconnectNotification::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DisconnectNotification::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& DisconnectNotification::reason() const {
  return *reason_;
}
inline void DisconnectNotification::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void DisconnectNotification::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void DisconnectNotification::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisconnectNotification::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* DisconnectNotification::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NullRequest

// -------------------------------------------------------------------

// EncryptRequest


// @@protoc_insertion_point(namespace_scope)

}  // namespace connection
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lib_2frpc_2fconnection_2eproto__INCLUDED
