// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lib/rpc/connection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace connection {

namespace {

const ::google::protobuf::Descriptor* ConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundService_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundService_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EchoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EchoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EchoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EchoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisconnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisconnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisconnectNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisconnectNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* NullRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NullRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto() {
  protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lib/rpc/connection.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectRequest_descriptor_ = file->message_type(0);
  static const int ConnectRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, client_id_),
  };
  ConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRequest_descriptor_,
      ConnectRequest::default_instance_,
      ConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRequest));
  ConnectResponse_descriptor_ = file->message_type(1);
  static const int ConnectResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, client_id_),
  };
  ConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectResponse_descriptor_,
      ConnectResponse::default_instance_,
      ConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectResponse));
  BoundService_descriptor_ = file->message_type(2);
  static const int BoundService_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundService, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundService, id_),
  };
  BoundService_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoundService_descriptor_,
      BoundService::default_instance_,
      BoundService_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundService, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundService, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoundService));
  BindRequest_descriptor_ = file->message_type(3);
  static const int BindRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, imported_service_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, exported_service_),
  };
  BindRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindRequest_descriptor_,
      BindRequest::default_instance_,
      BindRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindRequest));
  BindResponse_descriptor_ = file->message_type(4);
  static const int BindResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindResponse, imported_service_id_),
  };
  BindResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindResponse_descriptor_,
      BindResponse::default_instance_,
      BindResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindResponse));
  EchoRequest_descriptor_ = file->message_type(5);
  static const int EchoRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, network_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, payload_),
  };
  EchoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EchoRequest_descriptor_,
      EchoRequest::default_instance_,
      EchoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EchoRequest));
  EchoResponse_descriptor_ = file->message_type(6);
  static const int EchoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, payload_),
  };
  EchoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EchoResponse_descriptor_,
      EchoResponse::default_instance_,
      EchoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EchoResponse));
  DisconnectRequest_descriptor_ = file->message_type(7);
  static const int DisconnectRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectRequest, error_code_),
  };
  DisconnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisconnectRequest_descriptor_,
      DisconnectRequest::default_instance_,
      DisconnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisconnectRequest));
  DisconnectNotification_descriptor_ = file->message_type(8);
  static const int DisconnectNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectNotification, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectNotification, reason_),
  };
  DisconnectNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisconnectNotification_descriptor_,
      DisconnectNotification::default_instance_,
      DisconnectNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisconnectNotification));
  NullRequest_descriptor_ = file->message_type(9);
  static const int NullRequest_offsets_[1] = {
  };
  NullRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NullRequest_descriptor_,
      NullRequest::default_instance_,
      NullRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NullRequest));
  EncryptRequest_descriptor_ = file->message_type(10);
  static const int EncryptRequest_offsets_[1] = {
  };
  EncryptRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptRequest_descriptor_,
      EncryptRequest::default_instance_,
      EncryptRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lib_2frpc_2fconnection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRequest_descriptor_, &ConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectResponse_descriptor_, &ConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoundService_descriptor_, &BoundService::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindRequest_descriptor_, &BindRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindResponse_descriptor_, &BindResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EchoRequest_descriptor_, &EchoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EchoResponse_descriptor_, &EchoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisconnectRequest_descriptor_, &DisconnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisconnectNotification_descriptor_, &DisconnectNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NullRequest_descriptor_, &NullRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptRequest_descriptor_, &EncryptRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto() {
  delete ConnectRequest::default_instance_;
  delete ConnectRequest_reflection_;
  delete ConnectResponse::default_instance_;
  delete ConnectResponse_reflection_;
  delete BoundService::default_instance_;
  delete BoundService_reflection_;
  delete BindRequest::default_instance_;
  delete BindRequest_reflection_;
  delete BindResponse::default_instance_;
  delete BindResponse_reflection_;
  delete EchoRequest::default_instance_;
  delete EchoRequest_reflection_;
  delete EchoResponse::default_instance_;
  delete EchoResponse_reflection_;
  delete DisconnectRequest::default_instance_;
  delete DisconnectRequest_reflection_;
  delete DisconnectNotification::default_instance_;
  delete DisconnectNotification_reflection_;
  delete NullRequest::default_instance_;
  delete NullRequest_reflection_;
  delete EncryptRequest::default_instance_;
  delete EncryptRequest_reflection_;
}

void protobuf_AddDesc_lib_2frpc_2fconnection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030lib/rpc/connection.proto\022\030bnet.protoco"
    "l.connection\032\021lib/rpc/rpc.proto\"=\n\016Conne"
    "ctRequest\022+\n\tclient_id\030\001 \001(\0132\030.bnet.prot"
    "ocol.ProcessId\"k\n\017ConnectResponse\022+\n\tser"
    "ver_id\030\001 \002(\0132\030.bnet.protocol.ProcessId\022+"
    "\n\tclient_id\030\002 \001(\0132\030.bnet.protocol.Proces"
    "sId\"(\n\014BoundService\022\014\n\004hash\030\001 \002(\007\022\n\n\002id\030"
    "\002 \002(\r\"n\n\013BindRequest\022\035\n\025imported_service"
    "_hash\030\001 \003(\007\022@\n\020exported_service\030\002 \003(\0132&."
    "bnet.protocol.connection.BoundService\"+\n"
    "\014BindResponse\022\033\n\023imported_service_id\030\001 \003"
    "(\r\"B\n\013EchoRequest\022\014\n\004time\030\001 \001(\006\022\024\n\014netwo"
    "rk_only\030\002 \001(\010\022\017\n\007payload\030\003 \001(\014\"-\n\014EchoRe"
    "sponse\022\014\n\004time\030\001 \001(\006\022\017\n\007payload\030\002 \001(\014\"\'\n"
    "\021DisconnectRequest\022\022\n\nerror_code\030\001 \002(\r\"<"
    "\n\026DisconnectNotification\022\022\n\nerror_code\030\001"
    " \002(\r\022\016\n\006reason\030\002 \001(\t\"\r\n\013NullRequest\"\020\n\016E"
    "ncryptRequest", 693);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lib/rpc/connection.proto", &protobuf_RegisterTypes);
  ConnectRequest::default_instance_ = new ConnectRequest();
  ConnectResponse::default_instance_ = new ConnectResponse();
  BoundService::default_instance_ = new BoundService();
  BindRequest::default_instance_ = new BindRequest();
  BindResponse::default_instance_ = new BindResponse();
  EchoRequest::default_instance_ = new EchoRequest();
  EchoResponse::default_instance_ = new EchoResponse();
  DisconnectRequest::default_instance_ = new DisconnectRequest();
  DisconnectNotification::default_instance_ = new DisconnectNotification();
  NullRequest::default_instance_ = new NullRequest();
  EncryptRequest::default_instance_ = new EncryptRequest();
  ConnectRequest::default_instance_->InitAsDefaultInstance();
  ConnectResponse::default_instance_->InitAsDefaultInstance();
  BoundService::default_instance_->InitAsDefaultInstance();
  BindRequest::default_instance_->InitAsDefaultInstance();
  BindResponse::default_instance_->InitAsDefaultInstance();
  EchoRequest::default_instance_->InitAsDefaultInstance();
  EchoResponse::default_instance_->InitAsDefaultInstance();
  DisconnectRequest::default_instance_->InitAsDefaultInstance();
  DisconnectNotification::default_instance_->InitAsDefaultInstance();
  NullRequest::default_instance_->InitAsDefaultInstance();
  EncryptRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lib_2frpc_2fconnection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lib_2frpc_2fconnection_2eproto {
  StaticDescriptorInitializer_lib_2frpc_2fconnection_2eproto() {
    protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();
  }
} static_descriptor_initializer_lib_2frpc_2fconnection_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ConnectRequest::kClientIdFieldNumber;
#endif  // !_MSC_VER

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectRequest::InitAsDefaultInstance() {
  client_id_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
}

ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRequest::~ConnectRequest() {
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  if (this != default_instance_) {
    delete client_id_;
  }
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRequest_descriptor_;
}

const ConnectRequest& ConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

ConnectRequest* ConnectRequest::default_instance_ = NULL;

ConnectRequest* ConnectRequest::New() const {
  return new ConnectRequest;
}

void ConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_client_id()) {
      if (client_id_ != NULL) client_id_->::bnet::protocol::ProcessId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.ProcessId client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.ProcessId client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->client_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.ProcessId client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->client_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.ProcessId client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      mutable_client_id()->::bnet::protocol::ProcessId::MergeFrom(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  
  if (has_client_id()) {
    if (!this->client_id().IsInitialized()) return false;
  }
  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRequest_descriptor_;
  metadata.reflection = ConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectResponse::kServerIdFieldNumber;
const int ConnectResponse::kClientIdFieldNumber;
#endif  // !_MSC_VER

ConnectResponse::ConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectResponse::InitAsDefaultInstance() {
  server_id_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
  client_id_ = const_cast< ::bnet::protocol::ProcessId*>(&::bnet::protocol::ProcessId::default_instance());
}

ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = NULL;
  client_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectResponse::~ConnectResponse() {
  SharedDtor();
}

void ConnectResponse::SharedDtor() {
  if (this != default_instance_) {
    delete server_id_;
    delete client_id_;
  }
}

void ConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectResponse_descriptor_;
}

const ConnectResponse& ConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

ConnectResponse* ConnectResponse::default_instance_ = NULL;

ConnectResponse* ConnectResponse::New() const {
  return new ConnectResponse;
}

void ConnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_id()) {
      if (server_id_ != NULL) server_id_->::bnet::protocol::ProcessId::Clear();
    }
    if (has_client_id()) {
      if (client_id_ != NULL) client_id_->::bnet::protocol::ProcessId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.ProcessId server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_id;
        break;
      }
      
      // optional .bnet.protocol.ProcessId client_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.ProcessId server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_id(), output);
  }
  
  // optional .bnet.protocol.ProcessId client_id = 2;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.ProcessId server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_id(), target);
  }
  
  // optional .bnet.protocol.ProcessId client_id = 2;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.ProcessId server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_id());
    }
    
    // optional .bnet.protocol.ProcessId client_id = 2;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      mutable_server_id()->::bnet::protocol::ProcessId::MergeFrom(from.server_id());
    }
    if (from.has_client_id()) {
      mutable_client_id()->::bnet::protocol::ProcessId::MergeFrom(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_server_id()) {
    if (!this->server_id().IsInitialized()) return false;
  }
  if (has_client_id()) {
    if (!this->client_id().IsInitialized()) return false;
  }
  return true;
}

void ConnectResponse::Swap(ConnectResponse* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectResponse_descriptor_;
  metadata.reflection = ConnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoundService::kHashFieldNumber;
const int BoundService::kIdFieldNumber;
#endif  // !_MSC_VER

BoundService::BoundService()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoundService::InitAsDefaultInstance() {
}

BoundService::BoundService(const BoundService& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoundService::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundService::~BoundService() {
  SharedDtor();
}

void BoundService::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoundService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundService_descriptor_;
}

const BoundService& BoundService::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

BoundService* BoundService::default_instance_ = NULL;

BoundService* BoundService::New() const {
  return new BoundService;
}

void BoundService::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoundService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoundService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->hash(), output);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoundService::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->hash(), target);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoundService::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 hash = 1;
    if (has_hash()) {
      total_size += 1 + 4;
    }
    
    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundService::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoundService* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoundService*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoundService::MergeFrom(const BoundService& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoundService::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundService::CopyFrom(const BoundService& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundService::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BoundService::Swap(BoundService* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoundService::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundService_descriptor_;
  metadata.reflection = BoundService_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindRequest::kImportedServiceHashFieldNumber;
const int BindRequest::kExportedServiceFieldNumber;
#endif  // !_MSC_VER

BindRequest::BindRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BindRequest::InitAsDefaultInstance() {
}

BindRequest::BindRequest(const BindRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BindRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindRequest::~BindRequest() {
  SharedDtor();
}

void BindRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindRequest_descriptor_;
}

const BindRequest& BindRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

BindRequest* BindRequest::default_instance_ = NULL;

BindRequest* BindRequest::New() const {
  return new BindRequest;
}

void BindRequest::Clear() {
  imported_service_hash_.Clear();
  exported_service_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 imported_service_hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_imported_service_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13, input, this->mutable_imported_service_hash())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_imported_service_hash())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_imported_service_hash;
        if (input->ExpectTag(18)) goto parse_exported_service;
        break;
      }
      
      // repeated .bnet.protocol.connection.BoundService exported_service = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exported_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exported_service()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exported_service;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed32 imported_service_hash = 1;
  for (int i = 0; i < this->imported_service_hash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->imported_service_hash(i), output);
  }
  
  // repeated .bnet.protocol.connection.BoundService exported_service = 2;
  for (int i = 0; i < this->exported_service_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exported_service(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BindRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed32 imported_service_hash = 1;
  for (int i = 0; i < this->imported_service_hash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(1, this->imported_service_hash(i), target);
  }
  
  // repeated .bnet.protocol.connection.BoundService exported_service = 2;
  for (int i = 0; i < this->exported_service_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exported_service(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BindRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated fixed32 imported_service_hash = 1;
  {
    int data_size = 0;
    data_size = 4 * this->imported_service_hash_size();
    total_size += 1 * this->imported_service_hash_size() + data_size;
  }
  
  // repeated .bnet.protocol.connection.BoundService exported_service = 2;
  total_size += 1 * this->exported_service_size();
  for (int i = 0; i < this->exported_service_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exported_service(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindRequest::MergeFrom(const BindRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  imported_service_hash_.MergeFrom(from.imported_service_hash_);
  exported_service_.MergeFrom(from.exported_service_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindRequest::CopyFrom(const BindRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindRequest::IsInitialized() const {
  
  for (int i = 0; i < exported_service_size(); i++) {
    if (!this->exported_service(i).IsInitialized()) return false;
  }
  return true;
}

void BindRequest::Swap(BindRequest* other) {
  if (other != this) {
    imported_service_hash_.Swap(&other->imported_service_hash_);
    exported_service_.Swap(&other->exported_service_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindRequest_descriptor_;
  metadata.reflection = BindRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindResponse::kImportedServiceIdFieldNumber;
#endif  // !_MSC_VER

BindResponse::BindResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BindResponse::InitAsDefaultInstance() {
}

BindResponse::BindResponse(const BindResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BindResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindResponse::~BindResponse() {
  SharedDtor();
}

void BindResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindResponse_descriptor_;
}

const BindResponse& BindResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

BindResponse* BindResponse::default_instance_ = NULL;

BindResponse* BindResponse::New() const {
  return new BindResponse;
}

void BindResponse::Clear() {
  imported_service_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 imported_service_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imported_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_imported_service_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_imported_service_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_imported_service_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 imported_service_id = 1;
  for (int i = 0; i < this->imported_service_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->imported_service_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BindResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 imported_service_id = 1;
  for (int i = 0; i < this->imported_service_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->imported_service_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BindResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 imported_service_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->imported_service_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->imported_service_id(i));
    }
    total_size += 1 * this->imported_service_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindResponse::MergeFrom(const BindResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  imported_service_id_.MergeFrom(from.imported_service_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindResponse::CopyFrom(const BindResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindResponse::IsInitialized() const {
  
  return true;
}

void BindResponse::Swap(BindResponse* other) {
  if (other != this) {
    imported_service_id_.Swap(&other->imported_service_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindResponse_descriptor_;
  metadata.reflection = BindResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EchoRequest::kTimeFieldNumber;
const int EchoRequest::kNetworkOnlyFieldNumber;
const int EchoRequest::kPayloadFieldNumber;
#endif  // !_MSC_VER

EchoRequest::EchoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EchoRequest::InitAsDefaultInstance() {
}

EchoRequest::EchoRequest(const EchoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EchoRequest::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  network_only_ = false;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EchoRequest::~EchoRequest() {
  SharedDtor();
}

void EchoRequest::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void EchoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoRequest_descriptor_;
}

const EchoRequest& EchoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

EchoRequest* EchoRequest::default_instance_ = NULL;

EchoRequest* EchoRequest::New() const {
  return new EchoRequest;
}

void EchoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
    network_only_ = false;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EchoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_network_only;
        break;
      }
      
      // optional bool network_only = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &network_only_)));
          set_has_network_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EchoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->time(), output);
  }
  
  // optional bool network_only = 2;
  if (has_network_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->network_only(), output);
  }
  
  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EchoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->time(), target);
  }
  
  // optional bool network_only = 2;
  if (has_network_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->network_only(), target);
  }
  
  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EchoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 time = 1;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional bool network_only = 2;
    if (has_network_only()) {
      total_size += 1 + 1;
    }
    
    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EchoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EchoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EchoRequest::MergeFrom(const EchoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_network_only()) {
      set_network_only(from.network_only());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EchoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const {
  
  return true;
}

void EchoRequest::Swap(EchoRequest* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(network_only_, other->network_only_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EchoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EchoRequest_descriptor_;
  metadata.reflection = EchoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EchoResponse::kTimeFieldNumber;
const int EchoResponse::kPayloadFieldNumber;
#endif  // !_MSC_VER

EchoResponse::EchoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EchoResponse::InitAsDefaultInstance() {
}

EchoResponse::EchoResponse(const EchoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EchoResponse::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EchoResponse::~EchoResponse() {
  SharedDtor();
}

void EchoResponse::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void EchoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoResponse_descriptor_;
}

const EchoResponse& EchoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

EchoResponse* EchoResponse::default_instance_ = NULL;

EchoResponse* EchoResponse::New() const {
  return new EchoResponse;
}

void EchoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EchoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EchoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->time(), output);
  }
  
  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EchoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->time(), target);
  }
  
  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EchoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 time = 1;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EchoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EchoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EchoResponse::MergeFrom(const EchoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EchoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponse::IsInitialized() const {
  
  return true;
}

void EchoResponse::Swap(EchoResponse* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EchoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EchoResponse_descriptor_;
  metadata.reflection = EchoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisconnectRequest::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DisconnectRequest::DisconnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisconnectRequest::InitAsDefaultInstance() {
}

DisconnectRequest::DisconnectRequest(const DisconnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisconnectRequest::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisconnectRequest::~DisconnectRequest() {
  SharedDtor();
}

void DisconnectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisconnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisconnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisconnectRequest_descriptor_;
}

const DisconnectRequest& DisconnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

DisconnectRequest* DisconnectRequest::default_instance_ = NULL;

DisconnectRequest* DisconnectRequest::New() const {
  return new DisconnectRequest;
}

void DisconnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisconnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisconnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisconnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisconnectRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisconnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisconnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisconnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisconnectRequest::MergeFrom(const DisconnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisconnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectRequest::CopyFrom(const DisconnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DisconnectRequest::Swap(DisconnectRequest* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisconnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisconnectRequest_descriptor_;
  metadata.reflection = DisconnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisconnectNotification::kErrorCodeFieldNumber;
const int DisconnectNotification::kReasonFieldNumber;
#endif  // !_MSC_VER

DisconnectNotification::DisconnectNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisconnectNotification::InitAsDefaultInstance() {
}

DisconnectNotification::DisconnectNotification(const DisconnectNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisconnectNotification::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisconnectNotification::~DisconnectNotification() {
  SharedDtor();
}

void DisconnectNotification::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void DisconnectNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisconnectNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisconnectNotification_descriptor_;
}

const DisconnectNotification& DisconnectNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

DisconnectNotification* DisconnectNotification::default_instance_ = NULL;

DisconnectNotification* DisconnectNotification::New() const {
  return new DisconnectNotification;
}

void DisconnectNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisconnectNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }
      
      // optional string reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisconnectNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }
  
  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisconnectNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }
  
  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisconnectNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }
    
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisconnectNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisconnectNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisconnectNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisconnectNotification::MergeFrom(const DisconnectNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisconnectNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectNotification::CopyFrom(const DisconnectNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DisconnectNotification::Swap(DisconnectNotification* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisconnectNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisconnectNotification_descriptor_;
  metadata.reflection = DisconnectNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NullRequest::NullRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NullRequest::InitAsDefaultInstance() {
}

NullRequest::NullRequest(const NullRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NullRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NullRequest::~NullRequest() {
  SharedDtor();
}

void NullRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NullRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NullRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NullRequest_descriptor_;
}

const NullRequest& NullRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

NullRequest* NullRequest::default_instance_ = NULL;

NullRequest* NullRequest::New() const {
  return new NullRequest;
}

void NullRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NullRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NullRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NullRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NullRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NullRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NullRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NullRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NullRequest::MergeFrom(const NullRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NullRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullRequest::CopyFrom(const NullRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullRequest::IsInitialized() const {
  
  return true;
}

void NullRequest::Swap(NullRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NullRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NullRequest_descriptor_;
  metadata.reflection = NullRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EncryptRequest::EncryptRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EncryptRequest::InitAsDefaultInstance() {
}

EncryptRequest::EncryptRequest(const EncryptRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EncryptRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptRequest::~EncryptRequest() {
  SharedDtor();
}

void EncryptRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EncryptRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptRequest_descriptor_;
}

const EncryptRequest& EncryptRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2frpc_2fconnection_2eproto();  return *default_instance_;
}

EncryptRequest* EncryptRequest::default_instance_ = NULL;

EncryptRequest* EncryptRequest::New() const {
  return new EncryptRequest;
}

void EncryptRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EncryptRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EncryptRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EncryptRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptRequest::MergeFrom(const EncryptRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptRequest::CopyFrom(const EncryptRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptRequest::IsInitialized() const {
  
  return true;
}

void EncryptRequest::Swap(EncryptRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptRequest_descriptor_;
  metadata.reflection = EncryptRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace connection
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
