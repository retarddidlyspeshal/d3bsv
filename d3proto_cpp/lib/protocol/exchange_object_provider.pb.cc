// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lib/protocol/exchange_object_provider.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace exchange_object_provider {

namespace {

const ::google::protobuf::Descriptor* ReportAuthorizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportAuthorizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSettleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSettleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportCancelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportCancelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPaymentMethodsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPaymentMethodsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaymentMethod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaymentMethod_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPaymentMethodsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPaymentMethodsResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto() {
  protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lib/protocol/exchange_object_provider.proto");
  GOOGLE_CHECK(file != NULL);
  ReportAuthorizeRequest_descriptor_ = file->message_type(0);
  static const int ReportAuthorizeRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAuthorizeRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAuthorizeRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAuthorizeRequest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAuthorizeRequest, auth_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAuthorizeRequest, defer_delivery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAuthorizeRequest, bnet_account_id_),
  };
  ReportAuthorizeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportAuthorizeRequest_descriptor_,
      ReportAuthorizeRequest::default_instance_,
      ReportAuthorizeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAuthorizeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAuthorizeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportAuthorizeRequest));
  ReportSettleRequest_descriptor_ = file->message_type(1);
  static const int ReportSettleRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSettleRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSettleRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSettleRequest, result_),
  };
  ReportSettleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportSettleRequest_descriptor_,
      ReportSettleRequest::default_instance_,
      ReportSettleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSettleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSettleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportSettleRequest));
  ReportCancelRequest_descriptor_ = file->message_type(2);
  static const int ReportCancelRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportCancelRequest, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportCancelRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportCancelRequest, result_),
  };
  ReportCancelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportCancelRequest_descriptor_,
      ReportCancelRequest::default_instance_,
      ReportCancelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportCancelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportCancelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportCancelRequest));
  GetPaymentMethodsRequest_descriptor_ = file->message_type(3);
  static const int GetPaymentMethodsRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsRequest, bnet_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsRequest, game_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsRequest, toon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsRequest, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsRequest, cash_in_out_mask_),
  };
  GetPaymentMethodsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPaymentMethodsRequest_descriptor_,
      GetPaymentMethodsRequest::default_instance_,
      GetPaymentMethodsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPaymentMethodsRequest));
  PaymentMethod_descriptor_ = file->message_type(4);
  static const int PaymentMethod_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentMethod, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentMethod, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentMethod, amount_),
  };
  PaymentMethod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PaymentMethod_descriptor_,
      PaymentMethod::default_instance_,
      PaymentMethod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentMethod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaymentMethod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PaymentMethod));
  GetPaymentMethodsResponse_descriptor_ = file->message_type(5);
  static const int GetPaymentMethodsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsResponse, methods_),
  };
  GetPaymentMethodsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPaymentMethodsResponse_descriptor_,
      GetPaymentMethodsResponse::default_instance_,
      GetPaymentMethodsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPaymentMethodsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPaymentMethodsResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportAuthorizeRequest_descriptor_, &ReportAuthorizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportSettleRequest_descriptor_, &ReportSettleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportCancelRequest_descriptor_, &ReportCancelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPaymentMethodsRequest_descriptor_, &GetPaymentMethodsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PaymentMethod_descriptor_, &PaymentMethod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPaymentMethodsResponse_descriptor_, &GetPaymentMethodsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto() {
  delete ReportAuthorizeRequest::default_instance_;
  delete ReportAuthorizeRequest_reflection_;
  delete ReportSettleRequest::default_instance_;
  delete ReportSettleRequest_reflection_;
  delete ReportCancelRequest::default_instance_;
  delete ReportCancelRequest_reflection_;
  delete GetPaymentMethodsRequest::default_instance_;
  delete GetPaymentMethodsRequest_reflection_;
  delete PaymentMethod::default_instance_;
  delete PaymentMethod_reflection_;
  delete GetPaymentMethodsResponse::default_instance_;
  delete GetPaymentMethodsResponse_reflection_;
}

void protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::exchange::protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+lib/protocol/exchange_object_provider."
    "proto\022&bnet.protocol.exchange_object_pro"
    "vider\032\031lib/protocol/entity.proto\032\033lib/pr"
    "otocol/exchange.proto\"\236\002\n\026ReportAuthoriz"
    "eRequest\0229\n\014partition_id\030\001 \002(\0132#.bnet.pr"
    "otocol.exchange.PartitionId\0222\n\005token\030\002 \002"
    "(\0132#.bnet.protocol.exchange.PartitionId\022"
    "\016\n\006result\030\003 \002(\004\022;\n\013auth_handle\030\004 \001(\0132&.b"
    "net.protocol.exchange.BlobFromOfType\022\026\n\016"
    "defer_delivery\030\005 \001(\010\0220\n\017bnet_account_id\030"
    "\006 \002(\0132\027.bnet.protocol.EntityId\"\224\001\n\023Repor"
    "tSettleRequest\0229\n\014partition_id\030\001 \002(\0132#.b"
    "net.protocol.exchange.PartitionId\0222\n\005tok"
    "en\030\002 \002(\0132#.bnet.protocol.exchange.Partit"
    "ionId\022\016\n\006result\030\003 \002(\004\"\224\001\n\023ReportCancelRe"
    "quest\0229\n\014partition_id\030\001 \002(\0132#.bnet.proto"
    "col.exchange.PartitionId\0222\n\005token\030\002 \002(\0132"
    "#.bnet.protocol.exchange.PartitionId\022\016\n\006"
    "result\030\003 \002(\004\"\313\001\n\030GetPaymentMethodsReques"
    "t\022-\n\014bnet_account\030\001 \001(\0132\027.bnet.protocol."
    "EntityId\022-\n\014game_account\030\002 \001(\0132\027.bnet.pr"
    "otocol.EntityId\022%\n\004toon\030\003 \001(\0132\027.bnet.pro"
    "tocol.EntityId\022\020\n\010currency\030\004 \002(\t\022\030\n\020cash"
    "_in_out_mask\030\005 \002(\r\"g\n\rPaymentMethod\0221\n\007a"
    "ccount\030\001 \002(\0132 .bnet.protocol.exchange.Bl"
    "obFrom\022\023\n\013description\030\002 \002(\t\022\016\n\006amount\030\003 "
    "\001(\004\"c\n\031GetPaymentMethodsResponse\022F\n\007meth"
    "ods\030\001 \003(\01325.bnet.protocol.exchange_objec"
    "t_provider.PaymentMethod", 1144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lib/protocol/exchange_object_provider.proto", &protobuf_RegisterTypes);
  ReportAuthorizeRequest::default_instance_ = new ReportAuthorizeRequest();
  ReportSettleRequest::default_instance_ = new ReportSettleRequest();
  ReportCancelRequest::default_instance_ = new ReportCancelRequest();
  GetPaymentMethodsRequest::default_instance_ = new GetPaymentMethodsRequest();
  PaymentMethod::default_instance_ = new PaymentMethod();
  GetPaymentMethodsResponse::default_instance_ = new GetPaymentMethodsResponse();
  ReportAuthorizeRequest::default_instance_->InitAsDefaultInstance();
  ReportSettleRequest::default_instance_->InitAsDefaultInstance();
  ReportCancelRequest::default_instance_->InitAsDefaultInstance();
  GetPaymentMethodsRequest::default_instance_->InitAsDefaultInstance();
  PaymentMethod::default_instance_->InitAsDefaultInstance();
  GetPaymentMethodsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto {
  StaticDescriptorInitializer_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto() {
    protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto();
  }
} static_descriptor_initializer_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReportAuthorizeRequest::kPartitionIdFieldNumber;
const int ReportAuthorizeRequest::kTokenFieldNumber;
const int ReportAuthorizeRequest::kResultFieldNumber;
const int ReportAuthorizeRequest::kAuthHandleFieldNumber;
const int ReportAuthorizeRequest::kDeferDeliveryFieldNumber;
const int ReportAuthorizeRequest::kBnetAccountIdFieldNumber;
#endif  // !_MSC_VER

ReportAuthorizeRequest::ReportAuthorizeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportAuthorizeRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  token_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  auth_handle_ = const_cast< ::bnet::protocol::exchange::BlobFromOfType*>(&::bnet::protocol::exchange::BlobFromOfType::default_instance());
  bnet_account_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

ReportAuthorizeRequest::ReportAuthorizeRequest(const ReportAuthorizeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportAuthorizeRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  token_ = NULL;
  result_ = GOOGLE_ULONGLONG(0);
  auth_handle_ = NULL;
  defer_delivery_ = false;
  bnet_account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAuthorizeRequest::~ReportAuthorizeRequest() {
  SharedDtor();
}

void ReportAuthorizeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete token_;
    delete auth_handle_;
    delete bnet_account_id_;
  }
}

void ReportAuthorizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportAuthorizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportAuthorizeRequest_descriptor_;
}

const ReportAuthorizeRequest& ReportAuthorizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto();  return *default_instance_;
}

ReportAuthorizeRequest* ReportAuthorizeRequest::default_instance_ = NULL;

ReportAuthorizeRequest* ReportAuthorizeRequest::New() const {
  return new ReportAuthorizeRequest;
}

void ReportAuthorizeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_token()) {
      if (token_ != NULL) token_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    result_ = GOOGLE_ULONGLONG(0);
    if (has_auth_handle()) {
      if (auth_handle_ != NULL) auth_handle_->::bnet::protocol::exchange::BlobFromOfType::Clear();
    }
    defer_delivery_ = false;
    if (has_bnet_account_id()) {
      if (bnet_account_id_ != NULL) bnet_account_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportAuthorizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required .bnet.protocol.exchange.PartitionId token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // required uint64 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_auth_handle;
        break;
      }
      
      // optional .bnet.protocol.exchange.BlobFromOfType auth_handle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth_handle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defer_delivery;
        break;
      }
      
      // optional bool defer_delivery = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defer_delivery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defer_delivery_)));
          set_has_defer_delivery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bnet_account_id;
        break;
      }
      
      // required .bnet.protocol.EntityId bnet_account_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bnet_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportAuthorizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.PartitionId token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->token(), output);
  }
  
  // required uint64 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->result(), output);
  }
  
  // optional .bnet.protocol.exchange.BlobFromOfType auth_handle = 4;
  if (has_auth_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->auth_handle(), output);
  }
  
  // optional bool defer_delivery = 5;
  if (has_defer_delivery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->defer_delivery(), output);
  }
  
  // required .bnet.protocol.EntityId bnet_account_id = 6;
  if (has_bnet_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bnet_account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportAuthorizeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.PartitionId token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->token(), target);
  }
  
  // required uint64 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->result(), target);
  }
  
  // optional .bnet.protocol.exchange.BlobFromOfType auth_handle = 4;
  if (has_auth_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->auth_handle(), target);
  }
  
  // optional bool defer_delivery = 5;
  if (has_defer_delivery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->defer_delivery(), target);
  }
  
  // required .bnet.protocol.EntityId bnet_account_id = 6;
  if (has_bnet_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bnet_account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportAuthorizeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.PartitionId token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token());
    }
    
    // required uint64 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->result());
    }
    
    // optional .bnet.protocol.exchange.BlobFromOfType auth_handle = 4;
    if (has_auth_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth_handle());
    }
    
    // optional bool defer_delivery = 5;
    if (has_defer_delivery()) {
      total_size += 1 + 1;
    }
    
    // required .bnet.protocol.EntityId bnet_account_id = 6;
    if (has_bnet_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAuthorizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportAuthorizeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportAuthorizeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportAuthorizeRequest::MergeFrom(const ReportAuthorizeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_token()) {
      mutable_token()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.token());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_auth_handle()) {
      mutable_auth_handle()->::bnet::protocol::exchange::BlobFromOfType::MergeFrom(from.auth_handle());
    }
    if (from.has_defer_delivery()) {
      set_defer_delivery(from.defer_delivery());
    }
    if (from.has_bnet_account_id()) {
      mutable_bnet_account_id()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportAuthorizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportAuthorizeRequest::CopyFrom(const ReportAuthorizeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAuthorizeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_token()) {
    if (!this->token().IsInitialized()) return false;
  }
  if (has_auth_handle()) {
    if (!this->auth_handle().IsInitialized()) return false;
  }
  if (has_bnet_account_id()) {
    if (!this->bnet_account_id().IsInitialized()) return false;
  }
  return true;
}

void ReportAuthorizeRequest::Swap(ReportAuthorizeRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(token_, other->token_);
    std::swap(result_, other->result_);
    std::swap(auth_handle_, other->auth_handle_);
    std::swap(defer_delivery_, other->defer_delivery_);
    std::swap(bnet_account_id_, other->bnet_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportAuthorizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportAuthorizeRequest_descriptor_;
  metadata.reflection = ReportAuthorizeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportSettleRequest::kPartitionIdFieldNumber;
const int ReportSettleRequest::kTokenFieldNumber;
const int ReportSettleRequest::kResultFieldNumber;
#endif  // !_MSC_VER

ReportSettleRequest::ReportSettleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportSettleRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  token_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
}

ReportSettleRequest::ReportSettleRequest(const ReportSettleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportSettleRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  token_ = NULL;
  result_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportSettleRequest::~ReportSettleRequest() {
  SharedDtor();
}

void ReportSettleRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete token_;
  }
}

void ReportSettleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSettleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSettleRequest_descriptor_;
}

const ReportSettleRequest& ReportSettleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto();  return *default_instance_;
}

ReportSettleRequest* ReportSettleRequest::default_instance_ = NULL;

ReportSettleRequest* ReportSettleRequest::New() const {
  return new ReportSettleRequest;
}

void ReportSettleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_token()) {
      if (token_ != NULL) token_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    result_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportSettleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required .bnet.protocol.exchange.PartitionId token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // required uint64 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportSettleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.PartitionId token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->token(), output);
  }
  
  // required uint64 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportSettleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.PartitionId token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->token(), target);
  }
  
  // required uint64 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportSettleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.PartitionId token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token());
    }
    
    // required uint64 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSettleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportSettleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportSettleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportSettleRequest::MergeFrom(const ReportSettleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_token()) {
      mutable_token()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.token());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportSettleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSettleRequest::CopyFrom(const ReportSettleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSettleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_token()) {
    if (!this->token().IsInitialized()) return false;
  }
  return true;
}

void ReportSettleRequest::Swap(ReportSettleRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(token_, other->token_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportSettleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSettleRequest_descriptor_;
  metadata.reflection = ReportSettleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportCancelRequest::kPartitionIdFieldNumber;
const int ReportCancelRequest::kTokenFieldNumber;
const int ReportCancelRequest::kResultFieldNumber;
#endif  // !_MSC_VER

ReportCancelRequest::ReportCancelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportCancelRequest::InitAsDefaultInstance() {
  partition_id_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
  token_ = const_cast< ::bnet::protocol::exchange::PartitionId*>(&::bnet::protocol::exchange::PartitionId::default_instance());
}

ReportCancelRequest::ReportCancelRequest(const ReportCancelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportCancelRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_id_ = NULL;
  token_ = NULL;
  result_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportCancelRequest::~ReportCancelRequest() {
  SharedDtor();
}

void ReportCancelRequest::SharedDtor() {
  if (this != default_instance_) {
    delete partition_id_;
    delete token_;
  }
}

void ReportCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportCancelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportCancelRequest_descriptor_;
}

const ReportCancelRequest& ReportCancelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto();  return *default_instance_;
}

ReportCancelRequest* ReportCancelRequest::default_instance_ = NULL;

ReportCancelRequest* ReportCancelRequest::New() const {
  return new ReportCancelRequest;
}

void ReportCancelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_partition_id()) {
      if (partition_id_ != NULL) partition_id_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    if (has_token()) {
      if (token_ != NULL) token_->::bnet::protocol::exchange::PartitionId::Clear();
    }
    result_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.PartitionId partition_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required .bnet.protocol.exchange.PartitionId token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // required uint64 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partition_id(), output);
  }
  
  // required .bnet.protocol.exchange.PartitionId token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->token(), output);
  }
  
  // required uint64 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportCancelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.PartitionId partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partition_id(), target);
  }
  
  // required .bnet.protocol.exchange.PartitionId token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->token(), target);
  }
  
  // required uint64 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportCancelRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.PartitionId partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partition_id());
    }
    
    // required .bnet.protocol.exchange.PartitionId token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token());
    }
    
    // required uint64 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportCancelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportCancelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportCancelRequest::MergeFrom(const ReportCancelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      mutable_partition_id()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.partition_id());
    }
    if (from.has_token()) {
      mutable_token()->::bnet::protocol::exchange::PartitionId::MergeFrom(from.token());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportCancelRequest::CopyFrom(const ReportCancelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportCancelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_partition_id()) {
    if (!this->partition_id().IsInitialized()) return false;
  }
  if (has_token()) {
    if (!this->token().IsInitialized()) return false;
  }
  return true;
}

void ReportCancelRequest::Swap(ReportCancelRequest* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(token_, other->token_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportCancelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportCancelRequest_descriptor_;
  metadata.reflection = ReportCancelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPaymentMethodsRequest::kBnetAccountFieldNumber;
const int GetPaymentMethodsRequest::kGameAccountFieldNumber;
const int GetPaymentMethodsRequest::kToonFieldNumber;
const int GetPaymentMethodsRequest::kCurrencyFieldNumber;
const int GetPaymentMethodsRequest::kCashInOutMaskFieldNumber;
#endif  // !_MSC_VER

GetPaymentMethodsRequest::GetPaymentMethodsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPaymentMethodsRequest::InitAsDefaultInstance() {
  bnet_account_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  game_account_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  toon_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

GetPaymentMethodsRequest::GetPaymentMethodsRequest(const GetPaymentMethodsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPaymentMethodsRequest::SharedCtor() {
  _cached_size_ = 0;
  bnet_account_ = NULL;
  game_account_ = NULL;
  toon_ = NULL;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cash_in_out_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPaymentMethodsRequest::~GetPaymentMethodsRequest() {
  SharedDtor();
}

void GetPaymentMethodsRequest::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (this != default_instance_) {
    delete bnet_account_;
    delete game_account_;
    delete toon_;
  }
}

void GetPaymentMethodsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPaymentMethodsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPaymentMethodsRequest_descriptor_;
}

const GetPaymentMethodsRequest& GetPaymentMethodsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto();  return *default_instance_;
}

GetPaymentMethodsRequest* GetPaymentMethodsRequest::default_instance_ = NULL;

GetPaymentMethodsRequest* GetPaymentMethodsRequest::New() const {
  return new GetPaymentMethodsRequest;
}

void GetPaymentMethodsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bnet_account()) {
      if (bnet_account_ != NULL) bnet_account_->::bnet::protocol::EntityId::Clear();
    }
    if (has_game_account()) {
      if (game_account_ != NULL) game_account_->::bnet::protocol::EntityId::Clear();
    }
    if (has_toon()) {
      if (toon_ != NULL) toon_->::bnet::protocol::EntityId::Clear();
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    cash_in_out_mask_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPaymentMethodsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId bnet_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bnet_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_account;
        break;
      }
      
      // optional .bnet.protocol.EntityId game_account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toon;
        break;
      }
      
      // optional .bnet.protocol.EntityId toon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currency;
        break;
      }
      
      // required string currency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cash_in_out_mask;
        break;
      }
      
      // required uint32 cash_in_out_mask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash_in_out_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_in_out_mask_)));
          set_has_cash_in_out_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPaymentMethodsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId bnet_account = 1;
  if (has_bnet_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bnet_account(), output);
  }
  
  // optional .bnet.protocol.EntityId game_account = 2;
  if (has_game_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_account(), output);
  }
  
  // optional .bnet.protocol.EntityId toon = 3;
  if (has_toon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->toon(), output);
  }
  
  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currency(), output);
  }
  
  // required uint32 cash_in_out_mask = 5;
  if (has_cash_in_out_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cash_in_out_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPaymentMethodsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId bnet_account = 1;
  if (has_bnet_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bnet_account(), target);
  }
  
  // optional .bnet.protocol.EntityId game_account = 2;
  if (has_game_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_account(), target);
  }
  
  // optional .bnet.protocol.EntityId toon = 3;
  if (has_toon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->toon(), target);
  }
  
  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency(), target);
  }
  
  // required uint32 cash_in_out_mask = 5;
  if (has_cash_in_out_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cash_in_out_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPaymentMethodsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId bnet_account = 1;
    if (has_bnet_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bnet_account());
    }
    
    // optional .bnet.protocol.EntityId game_account = 2;
    if (has_game_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_account());
    }
    
    // optional .bnet.protocol.EntityId toon = 3;
    if (has_toon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon());
    }
    
    // required string currency = 4;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }
    
    // required uint32 cash_in_out_mask = 5;
    if (has_cash_in_out_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash_in_out_mask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPaymentMethodsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPaymentMethodsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPaymentMethodsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPaymentMethodsRequest::MergeFrom(const GetPaymentMethodsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bnet_account()) {
      mutable_bnet_account()->::bnet::protocol::EntityId::MergeFrom(from.bnet_account());
    }
    if (from.has_game_account()) {
      mutable_game_account()->::bnet::protocol::EntityId::MergeFrom(from.game_account());
    }
    if (from.has_toon()) {
      mutable_toon()->::bnet::protocol::EntityId::MergeFrom(from.toon());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_cash_in_out_mask()) {
      set_cash_in_out_mask(from.cash_in_out_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPaymentMethodsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPaymentMethodsRequest::CopyFrom(const GetPaymentMethodsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPaymentMethodsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  
  if (has_bnet_account()) {
    if (!this->bnet_account().IsInitialized()) return false;
  }
  if (has_game_account()) {
    if (!this->game_account().IsInitialized()) return false;
  }
  if (has_toon()) {
    if (!this->toon().IsInitialized()) return false;
  }
  return true;
}

void GetPaymentMethodsRequest::Swap(GetPaymentMethodsRequest* other) {
  if (other != this) {
    std::swap(bnet_account_, other->bnet_account_);
    std::swap(game_account_, other->game_account_);
    std::swap(toon_, other->toon_);
    std::swap(currency_, other->currency_);
    std::swap(cash_in_out_mask_, other->cash_in_out_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPaymentMethodsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPaymentMethodsRequest_descriptor_;
  metadata.reflection = GetPaymentMethodsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PaymentMethod::kAccountFieldNumber;
const int PaymentMethod::kDescriptionFieldNumber;
const int PaymentMethod::kAmountFieldNumber;
#endif  // !_MSC_VER

PaymentMethod::PaymentMethod()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PaymentMethod::InitAsDefaultInstance() {
  account_ = const_cast< ::bnet::protocol::exchange::BlobFrom*>(&::bnet::protocol::exchange::BlobFrom::default_instance());
}

PaymentMethod::PaymentMethod(const PaymentMethod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PaymentMethod::SharedCtor() {
  _cached_size_ = 0;
  account_ = NULL;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PaymentMethod::~PaymentMethod() {
  SharedDtor();
}

void PaymentMethod::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
    delete account_;
  }
}

void PaymentMethod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaymentMethod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaymentMethod_descriptor_;
}

const PaymentMethod& PaymentMethod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto();  return *default_instance_;
}

PaymentMethod* PaymentMethod::default_instance_ = NULL;

PaymentMethod* PaymentMethod::New() const {
  return new PaymentMethod;
}

void PaymentMethod::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != NULL) account_->::bnet::protocol::exchange::BlobFrom::Clear();
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PaymentMethod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.exchange.BlobFrom account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }
      
      // required string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }
      
      // optional uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PaymentMethod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.exchange.BlobFrom account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account(), output);
  }
  
  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }
  
  // optional uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PaymentMethod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.exchange.BlobFrom account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account(), target);
  }
  
  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }
  
  // optional uint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PaymentMethod::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.exchange.BlobFrom account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }
    
    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaymentMethod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PaymentMethod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PaymentMethod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PaymentMethod::MergeFrom(const PaymentMethod& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      mutable_account()->::bnet::protocol::exchange::BlobFrom::MergeFrom(from.account());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PaymentMethod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentMethod::CopyFrom(const PaymentMethod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentMethod::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_account()) {
    if (!this->account().IsInitialized()) return false;
  }
  return true;
}

void PaymentMethod::Swap(PaymentMethod* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(description_, other->description_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PaymentMethod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaymentMethod_descriptor_;
  metadata.reflection = PaymentMethod_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPaymentMethodsResponse::kMethodsFieldNumber;
#endif  // !_MSC_VER

GetPaymentMethodsResponse::GetPaymentMethodsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPaymentMethodsResponse::InitAsDefaultInstance() {
}

GetPaymentMethodsResponse::GetPaymentMethodsResponse(const GetPaymentMethodsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPaymentMethodsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPaymentMethodsResponse::~GetPaymentMethodsResponse() {
  SharedDtor();
}

void GetPaymentMethodsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPaymentMethodsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPaymentMethodsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPaymentMethodsResponse_descriptor_;
}

const GetPaymentMethodsResponse& GetPaymentMethodsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_5fobject_5fprovider_2eproto();  return *default_instance_;
}

GetPaymentMethodsResponse* GetPaymentMethodsResponse::default_instance_ = NULL;

GetPaymentMethodsResponse* GetPaymentMethodsResponse::New() const {
  return new GetPaymentMethodsResponse;
}

void GetPaymentMethodsResponse::Clear() {
  methods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPaymentMethodsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.exchange_object_provider.PaymentMethod methods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_methods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_methods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_methods;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPaymentMethodsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.exchange_object_provider.PaymentMethod methods = 1;
  for (int i = 0; i < this->methods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->methods(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPaymentMethodsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.exchange_object_provider.PaymentMethod methods = 1;
  for (int i = 0; i < this->methods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->methods(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPaymentMethodsResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .bnet.protocol.exchange_object_provider.PaymentMethod methods = 1;
  total_size += 1 * this->methods_size();
  for (int i = 0; i < this->methods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->methods(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPaymentMethodsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPaymentMethodsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPaymentMethodsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPaymentMethodsResponse::MergeFrom(const GetPaymentMethodsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  methods_.MergeFrom(from.methods_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPaymentMethodsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPaymentMethodsResponse::CopyFrom(const GetPaymentMethodsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPaymentMethodsResponse::IsInitialized() const {
  
  for (int i = 0; i < methods_size(); i++) {
    if (!this->methods(i).IsInitialized()) return false;
  }
  return true;
}

void GetPaymentMethodsResponse::Swap(GetPaymentMethodsResponse* other) {
  if (other != this) {
    methods_.Swap(&other->methods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPaymentMethodsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPaymentMethodsResponse_descriptor_;
  metadata.reflection = GetPaymentMethodsResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace exchange_object_provider
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
