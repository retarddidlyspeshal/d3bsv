// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lib/protocol/resource.proto

#ifndef PROTOBUF_lib_2fprotocol_2fresource_2eproto__INCLUDED
#define PROTOBUF_lib_2fprotocol_2fresource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/protocol/content_handle.pb.h"
#include "lib/protocol/attribute.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lib_2fprotocol_2fresource_2eproto();
void protobuf_AssignDesc_lib_2fprotocol_2fresource_2eproto();
void protobuf_ShutdownFile_lib_2fprotocol_2fresource_2eproto();

class Payload;
class Dependency;
class Metadata;
class IndexEntry;
class ResourceIndex;

// ===================================================================

class Payload : public ::google::protobuf::Message {
 public:
  Payload();
  virtual ~Payload();
  
  Payload(const Payload& from);
  
  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Payload& default_instance();
  
  void Swap(Payload* other);
  
  // implements Message ----------------------------------------------
  
  Payload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Payload& from);
  void MergeFrom(const Payload& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string content_handle = 1;
  inline bool has_content_handle() const;
  inline void clear_content_handle();
  static const int kContentHandleFieldNumber = 1;
  inline const ::std::string& content_handle() const;
  inline void set_content_handle(const ::std::string& value);
  inline void set_content_handle(const char* value);
  inline void set_content_handle(const char* value, size_t size);
  inline ::std::string* mutable_content_handle();
  inline ::std::string* release_content_handle();
  
  // required uint32 data_size = 2;
  inline bool has_data_size() const;
  inline void clear_data_size();
  static const int kDataSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 data_size() const;
  inline void set_data_size(::google::protobuf::uint32 value);
  
  // repeated .bnet.protocol.attribute.Attribute custom = 3;
  inline int custom_size() const;
  inline void clear_custom();
  static const int kCustomFieldNumber = 3;
  inline const ::bnet::protocol::attribute::Attribute& custom(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_custom(int index);
  inline ::bnet::protocol::attribute::Attribute* add_custom();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      custom() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_custom();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.Payload)
 private:
  inline void set_has_content_handle();
  inline void clear_has_content_handle();
  inline void set_has_data_size();
  inline void clear_has_data_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_handle_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > custom_;
  ::google::protobuf::uint32 data_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2fresource_2eproto();
  
  void InitAsDefaultInstance();
  static Payload* default_instance_;
};
// -------------------------------------------------------------------

class Dependency : public ::google::protobuf::Message {
 public:
  Dependency();
  virtual ~Dependency();
  
  Dependency(const Dependency& from);
  
  inline Dependency& operator=(const Dependency& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dependency& default_instance();
  
  void Swap(Dependency* other);
  
  // implements Message ----------------------------------------------
  
  Dependency* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dependency& from);
  void MergeFrom(const Dependency& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string resource_handle = 1;
  inline bool has_resource_handle() const;
  inline void clear_resource_handle();
  static const int kResourceHandleFieldNumber = 1;
  inline const ::std::string& resource_handle() const;
  inline void set_resource_handle(const ::std::string& value);
  inline void set_resource_handle(const char* value);
  inline void set_resource_handle(const char* value, size_t size);
  inline ::std::string* mutable_resource_handle();
  inline ::std::string* release_resource_handle();
  
  // repeated .bnet.protocol.attribute.Attribute custom = 2;
  inline int custom_size() const;
  inline void clear_custom();
  static const int kCustomFieldNumber = 2;
  inline const ::bnet::protocol::attribute::Attribute& custom(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_custom(int index);
  inline ::bnet::protocol::attribute::Attribute* add_custom();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      custom() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_custom();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.Dependency)
 private:
  inline void set_has_resource_handle();
  inline void clear_has_resource_handle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* resource_handle_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > custom_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2fresource_2eproto();
  
  void InitAsDefaultInstance();
  static Dependency* default_instance_;
};
// -------------------------------------------------------------------

class Metadata : public ::google::protobuf::Message {
 public:
  Metadata();
  virtual ~Metadata();
  
  Metadata(const Metadata& from);
  
  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadata& default_instance();
  
  void Swap(Metadata* other);
  
  // implements Message ----------------------------------------------
  
  Metadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.Dependency dependency = 1;
  inline int dependency_size() const;
  inline void clear_dependency();
  static const int kDependencyFieldNumber = 1;
  inline const ::bnet::protocol::Dependency& dependency(int index) const;
  inline ::bnet::protocol::Dependency* mutable_dependency(int index);
  inline ::bnet::protocol::Dependency* add_dependency();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Dependency >&
      dependency() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Dependency >*
      mutable_dependency();
  
  // repeated .bnet.protocol.Payload payload = 2;
  inline int payload_size() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::bnet::protocol::Payload& payload(int index) const;
  inline ::bnet::protocol::Payload* mutable_payload(int index);
  inline ::bnet::protocol::Payload* add_payload();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Payload >&
      payload() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Payload >*
      mutable_payload();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.Metadata)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Dependency > dependency_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Payload > payload_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2fresource_2eproto();
  
  void InitAsDefaultInstance();
  static Metadata* default_instance_;
};
// -------------------------------------------------------------------

class IndexEntry : public ::google::protobuf::Message {
 public:
  IndexEntry();
  virtual ~IndexEntry();
  
  IndexEntry(const IndexEntry& from);
  
  inline IndexEntry& operator=(const IndexEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexEntry& default_instance();
  
  void Swap(IndexEntry* other);
  
  // implements Message ----------------------------------------------
  
  IndexEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexEntry& from);
  void MergeFrom(const IndexEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.IndexEntry)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_url();
  inline void clear_has_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* url_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2fresource_2eproto();
  
  void InitAsDefaultInstance();
  static IndexEntry* default_instance_;
};
// -------------------------------------------------------------------

class ResourceIndex : public ::google::protobuf::Message {
 public:
  ResourceIndex();
  virtual ~ResourceIndex();
  
  ResourceIndex(const ResourceIndex& from);
  
  inline ResourceIndex& operator=(const ResourceIndex& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceIndex& default_instance();
  
  void Swap(ResourceIndex* other);
  
  // implements Message ----------------------------------------------
  
  ResourceIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceIndex& from);
  void MergeFrom(const ResourceIndex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.IndexEntry entry = 1;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline const ::bnet::protocol::IndexEntry& entry(int index) const;
  inline ::bnet::protocol::IndexEntry* mutable_entry(int index);
  inline ::bnet::protocol::IndexEntry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::IndexEntry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::IndexEntry >*
      mutable_entry();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.ResourceIndex)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::IndexEntry > entry_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2fresource_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2fresource_2eproto();
  
  void InitAsDefaultInstance();
  static ResourceIndex* default_instance_;
};
// ===================================================================


// ===================================================================

// Payload

// required string content_handle = 1;
inline bool Payload::has_content_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Payload::set_has_content_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Payload::clear_has_content_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Payload::clear_content_handle() {
  if (content_handle_ != &::google::protobuf::internal::kEmptyString) {
    content_handle_->clear();
  }
  clear_has_content_handle();
}
inline const ::std::string& Payload::content_handle() const {
  return *content_handle_;
}
inline void Payload::set_content_handle(const ::std::string& value) {
  set_has_content_handle();
  if (content_handle_ == &::google::protobuf::internal::kEmptyString) {
    content_handle_ = new ::std::string;
  }
  content_handle_->assign(value);
}
inline void Payload::set_content_handle(const char* value) {
  set_has_content_handle();
  if (content_handle_ == &::google::protobuf::internal::kEmptyString) {
    content_handle_ = new ::std::string;
  }
  content_handle_->assign(value);
}
inline void Payload::set_content_handle(const char* value, size_t size) {
  set_has_content_handle();
  if (content_handle_ == &::google::protobuf::internal::kEmptyString) {
    content_handle_ = new ::std::string;
  }
  content_handle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Payload::mutable_content_handle() {
  set_has_content_handle();
  if (content_handle_ == &::google::protobuf::internal::kEmptyString) {
    content_handle_ = new ::std::string;
  }
  return content_handle_;
}
inline ::std::string* Payload::release_content_handle() {
  clear_has_content_handle();
  if (content_handle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_handle_;
    content_handle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 data_size = 2;
inline bool Payload::has_data_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Payload::set_has_data_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Payload::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Payload::clear_data_size() {
  data_size_ = 0u;
  clear_has_data_size();
}
inline ::google::protobuf::uint32 Payload::data_size() const {
  return data_size_;
}
inline void Payload::set_data_size(::google::protobuf::uint32 value) {
  set_has_data_size();
  data_size_ = value;
}

// repeated .bnet.protocol.attribute.Attribute custom = 3;
inline int Payload::custom_size() const {
  return custom_.size();
}
inline void Payload::clear_custom() {
  custom_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& Payload::custom(int index) const {
  return custom_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* Payload::mutable_custom(int index) {
  return custom_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* Payload::add_custom() {
  return custom_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
Payload::custom() const {
  return custom_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
Payload::mutable_custom() {
  return &custom_;
}

// -------------------------------------------------------------------

// Dependency

// required string resource_handle = 1;
inline bool Dependency::has_resource_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dependency::set_has_resource_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dependency::clear_has_resource_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dependency::clear_resource_handle() {
  if (resource_handle_ != &::google::protobuf::internal::kEmptyString) {
    resource_handle_->clear();
  }
  clear_has_resource_handle();
}
inline const ::std::string& Dependency::resource_handle() const {
  return *resource_handle_;
}
inline void Dependency::set_resource_handle(const ::std::string& value) {
  set_has_resource_handle();
  if (resource_handle_ == &::google::protobuf::internal::kEmptyString) {
    resource_handle_ = new ::std::string;
  }
  resource_handle_->assign(value);
}
inline void Dependency::set_resource_handle(const char* value) {
  set_has_resource_handle();
  if (resource_handle_ == &::google::protobuf::internal::kEmptyString) {
    resource_handle_ = new ::std::string;
  }
  resource_handle_->assign(value);
}
inline void Dependency::set_resource_handle(const char* value, size_t size) {
  set_has_resource_handle();
  if (resource_handle_ == &::google::protobuf::internal::kEmptyString) {
    resource_handle_ = new ::std::string;
  }
  resource_handle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Dependency::mutable_resource_handle() {
  set_has_resource_handle();
  if (resource_handle_ == &::google::protobuf::internal::kEmptyString) {
    resource_handle_ = new ::std::string;
  }
  return resource_handle_;
}
inline ::std::string* Dependency::release_resource_handle() {
  clear_has_resource_handle();
  if (resource_handle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resource_handle_;
    resource_handle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bnet.protocol.attribute.Attribute custom = 2;
inline int Dependency::custom_size() const {
  return custom_.size();
}
inline void Dependency::clear_custom() {
  custom_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& Dependency::custom(int index) const {
  return custom_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* Dependency::mutable_custom(int index) {
  return custom_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* Dependency::add_custom() {
  return custom_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
Dependency::custom() const {
  return custom_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
Dependency::mutable_custom() {
  return &custom_;
}

// -------------------------------------------------------------------

// Metadata

// repeated .bnet.protocol.Dependency dependency = 1;
inline int Metadata::dependency_size() const {
  return dependency_.size();
}
inline void Metadata::clear_dependency() {
  dependency_.Clear();
}
inline const ::bnet::protocol::Dependency& Metadata::dependency(int index) const {
  return dependency_.Get(index);
}
inline ::bnet::protocol::Dependency* Metadata::mutable_dependency(int index) {
  return dependency_.Mutable(index);
}
inline ::bnet::protocol::Dependency* Metadata::add_dependency() {
  return dependency_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Dependency >&
Metadata::dependency() const {
  return dependency_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Dependency >*
Metadata::mutable_dependency() {
  return &dependency_;
}

// repeated .bnet.protocol.Payload payload = 2;
inline int Metadata::payload_size() const {
  return payload_.size();
}
inline void Metadata::clear_payload() {
  payload_.Clear();
}
inline const ::bnet::protocol::Payload& Metadata::payload(int index) const {
  return payload_.Get(index);
}
inline ::bnet::protocol::Payload* Metadata::mutable_payload(int index) {
  return payload_.Mutable(index);
}
inline ::bnet::protocol::Payload* Metadata::add_payload() {
  return payload_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Payload >&
Metadata::payload() const {
  return payload_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::Payload >*
Metadata::mutable_payload() {
  return &payload_;
}

// -------------------------------------------------------------------

// IndexEntry

// required string name = 1;
inline bool IndexEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IndexEntry::name() const {
  return *name_;
}
inline void IndexEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IndexEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IndexEntry::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IndexEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* IndexEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string url = 2;
inline bool IndexEntry::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexEntry::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexEntry::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexEntry::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& IndexEntry::url() const {
  return *url_;
}
inline void IndexEntry::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void IndexEntry::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void IndexEntry::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IndexEntry::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* IndexEntry::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResourceIndex

// repeated .bnet.protocol.IndexEntry entry = 1;
inline int ResourceIndex::entry_size() const {
  return entry_.size();
}
inline void ResourceIndex::clear_entry() {
  entry_.Clear();
}
inline const ::bnet::protocol::IndexEntry& ResourceIndex::entry(int index) const {
  return entry_.Get(index);
}
inline ::bnet::protocol::IndexEntry* ResourceIndex::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::bnet::protocol::IndexEntry* ResourceIndex::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::IndexEntry >&
ResourceIndex::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::IndexEntry >*
ResourceIndex::mutable_entry() {
  return &entry_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lib_2fprotocol_2fresource_2eproto__INCLUDED
