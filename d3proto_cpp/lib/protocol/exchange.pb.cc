// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lib/protocol/exchange.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace exchange {

namespace {

const ::google::protobuf::Descriptor* PartitionId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartitionId_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobFrom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobFrom_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobOfType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobOfType_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobFromOfType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobFromOfType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lib_2fprotocol_2fexchange_2eproto() {
  protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lib/protocol/exchange.proto");
  GOOGLE_CHECK(file != NULL);
  PartitionId_descriptor_ = file->message_type(0);
  static const int PartitionId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionId, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionId, low_),
  };
  PartitionId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartitionId_descriptor_,
      PartitionId::default_instance_,
      PartitionId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartitionId));
  BlobFrom_descriptor_ = file->message_type(1);
  static const int BlobFrom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFrom, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFrom, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFrom, extra_data_),
  };
  BlobFrom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobFrom_descriptor_,
      BlobFrom::default_instance_,
      BlobFrom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFrom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFrom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobFrom));
  BlobOfType_descriptor_ = file->message_type(2);
  static const int BlobOfType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOfType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOfType, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOfType, extra_data_),
  };
  BlobOfType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobOfType_descriptor_,
      BlobOfType::default_instance_,
      BlobOfType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOfType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOfType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobOfType));
  BlobFromOfType_descriptor_ = file->message_type(3);
  static const int BlobFromOfType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFromOfType, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFromOfType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFromOfType, data_),
  };
  BlobFromOfType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobFromOfType_descriptor_,
      BlobFromOfType::default_instance_,
      BlobFromOfType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFromOfType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFromOfType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobFromOfType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lib_2fprotocol_2fexchange_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartitionId_descriptor_, &PartitionId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobFrom_descriptor_, &BlobFrom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobOfType_descriptor_, &BlobOfType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobFromOfType_descriptor_, &BlobFromOfType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lib_2fprotocol_2fexchange_2eproto() {
  delete PartitionId::default_instance_;
  delete PartitionId_reflection_;
  delete BlobFrom::default_instance_;
  delete BlobFrom_reflection_;
  delete BlobOfType::default_instance_;
  delete BlobOfType_reflection_;
  delete BlobFromOfType::default_instance_;
  delete BlobFromOfType_reflection_;
}

void protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033lib/protocol/exchange.proto\022\026bnet.prot"
    "ocol.exchange\"(\n\013PartitionId\022\014\n\004high\030\001 \002"
    "(\006\022\013\n\003low\030\002 \002(\006\"<\n\010BlobFrom\022\016\n\006source\030\001 "
    "\002(\007\022\014\n\004data\030\002 \002(\014\022\022\n\nextra_data\030\003 \001(\014\"<\n"
    "\nBlobOfType\022\014\n\004type\030\001 \002(\t\022\014\n\004data\030\002 \001(\014\022"
    "\022\n\nextra_data\030\003 \001(\014\"<\n\016BlobFromOfType\022\016\n"
    "\006source\030\001 \002(\007\022\014\n\004type\030\002 \002(\t\022\014\n\004data\030\003 \002("
    "\014", 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lib/protocol/exchange.proto", &protobuf_RegisterTypes);
  PartitionId::default_instance_ = new PartitionId();
  BlobFrom::default_instance_ = new BlobFrom();
  BlobOfType::default_instance_ = new BlobOfType();
  BlobFromOfType::default_instance_ = new BlobFromOfType();
  PartitionId::default_instance_->InitAsDefaultInstance();
  BlobFrom::default_instance_->InitAsDefaultInstance();
  BlobOfType::default_instance_->InitAsDefaultInstance();
  BlobFromOfType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lib_2fprotocol_2fexchange_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lib_2fprotocol_2fexchange_2eproto {
  StaticDescriptorInitializer_lib_2fprotocol_2fexchange_2eproto() {
    protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto();
  }
} static_descriptor_initializer_lib_2fprotocol_2fexchange_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PartitionId::kHighFieldNumber;
const int PartitionId::kLowFieldNumber;
#endif  // !_MSC_VER

PartitionId::PartitionId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartitionId::InitAsDefaultInstance() {
}

PartitionId::PartitionId(const PartitionId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartitionId::SharedCtor() {
  _cached_size_ = 0;
  high_ = GOOGLE_ULONGLONG(0);
  low_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartitionId::~PartitionId() {
  SharedDtor();
}

void PartitionId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartitionId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartitionId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartitionId_descriptor_;
}

const PartitionId& PartitionId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto();  return *default_instance_;
}

PartitionId* PartitionId::default_instance_ = NULL;

PartitionId* PartitionId::New() const {
  return new PartitionId;
}

void PartitionId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    high_ = GOOGLE_ULONGLONG(0);
    low_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartitionId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 high = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_low;
        break;
      }
      
      // required fixed64 low = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartitionId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 high = 1;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->high(), output);
  }
  
  // required fixed64 low = 2;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->low(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartitionId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 high = 1;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->high(), target);
  }
  
  // required fixed64 low = 2;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->low(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartitionId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 high = 1;
    if (has_high()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 low = 2;
    if (has_low()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartitionId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartitionId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartitionId::MergeFrom(const PartitionId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartitionId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionId::CopyFrom(const PartitionId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PartitionId::Swap(PartitionId* other) {
  if (other != this) {
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartitionId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartitionId_descriptor_;
  metadata.reflection = PartitionId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobFrom::kSourceFieldNumber;
const int BlobFrom::kDataFieldNumber;
const int BlobFrom::kExtraDataFieldNumber;
#endif  // !_MSC_VER

BlobFrom::BlobFrom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlobFrom::InitAsDefaultInstance() {
}

BlobFrom::BlobFrom(const BlobFrom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlobFrom::SharedCtor() {
  _cached_size_ = 0;
  source_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobFrom::~BlobFrom() {
  SharedDtor();
}

void BlobFrom::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_data_;
  }
  if (this != default_instance_) {
  }
}

void BlobFrom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobFrom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobFrom_descriptor_;
}

const BlobFrom& BlobFrom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto();  return *default_instance_;
}

BlobFrom* BlobFrom::default_instance_ = NULL;

BlobFrom* BlobFrom::New() const {
  return new BlobFrom;
}

void BlobFrom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_extra_data()) {
      if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
        extra_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobFrom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extra_data;
        break;
      }
      
      // optional bytes extra_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlobFrom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->source(), output);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  // optional bytes extra_data = 3;
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->extra_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlobFrom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->source(), target);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  // optional bytes extra_data = 3;
  if (has_extra_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->extra_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlobFrom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 source = 1;
    if (has_source()) {
      total_size += 1 + 4;
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional bytes extra_data = 3;
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobFrom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobFrom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobFrom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobFrom::MergeFrom(const BlobFrom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_extra_data()) {
      set_extra_data(from.extra_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobFrom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobFrom::CopyFrom(const BlobFrom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobFrom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BlobFrom::Swap(BlobFrom* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(data_, other->data_);
    std::swap(extra_data_, other->extra_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobFrom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobFrom_descriptor_;
  metadata.reflection = BlobFrom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobOfType::kTypeFieldNumber;
const int BlobOfType::kDataFieldNumber;
const int BlobOfType::kExtraDataFieldNumber;
#endif  // !_MSC_VER

BlobOfType::BlobOfType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlobOfType::InitAsDefaultInstance() {
}

BlobOfType::BlobOfType(const BlobOfType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlobOfType::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobOfType::~BlobOfType() {
  SharedDtor();
}

void BlobOfType::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_data_;
  }
  if (this != default_instance_) {
  }
}

void BlobOfType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobOfType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobOfType_descriptor_;
}

const BlobOfType& BlobOfType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto();  return *default_instance_;
}

BlobOfType* BlobOfType::default_instance_ = NULL;

BlobOfType* BlobOfType::New() const {
  return new BlobOfType;
}

void BlobOfType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_extra_data()) {
      if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
        extra_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobOfType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extra_data;
        break;
      }
      
      // optional bytes extra_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlobOfType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  // optional bytes extra_data = 3;
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->extra_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlobOfType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  // optional bytes extra_data = 3;
  if (has_extra_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->extra_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlobOfType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional bytes extra_data = 3;
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobOfType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobOfType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobOfType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobOfType::MergeFrom(const BlobOfType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_extra_data()) {
      set_extra_data(from.extra_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobOfType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobOfType::CopyFrom(const BlobOfType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobOfType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BlobOfType::Swap(BlobOfType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(extra_data_, other->extra_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobOfType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobOfType_descriptor_;
  metadata.reflection = BlobOfType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobFromOfType::kSourceFieldNumber;
const int BlobFromOfType::kTypeFieldNumber;
const int BlobFromOfType::kDataFieldNumber;
#endif  // !_MSC_VER

BlobFromOfType::BlobFromOfType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlobFromOfType::InitAsDefaultInstance() {
}

BlobFromOfType::BlobFromOfType(const BlobFromOfType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlobFromOfType::SharedCtor() {
  _cached_size_ = 0;
  source_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobFromOfType::~BlobFromOfType() {
  SharedDtor();
}

void BlobFromOfType::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BlobFromOfType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobFromOfType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobFromOfType_descriptor_;
}

const BlobFromOfType& BlobFromOfType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2fexchange_2eproto();  return *default_instance_;
}

BlobFromOfType* BlobFromOfType::default_instance_ = NULL;

BlobFromOfType* BlobFromOfType::New() const {
  return new BlobFromOfType;
}

void BlobFromOfType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ = 0u;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobFromOfType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlobFromOfType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->source(), output);
  }
  
  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlobFromOfType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->source(), target);
  }
  
  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlobFromOfType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 source = 1;
    if (has_source()) {
      total_size += 1 + 4;
    }
    
    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobFromOfType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobFromOfType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobFromOfType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobFromOfType::MergeFrom(const BlobFromOfType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobFromOfType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobFromOfType::CopyFrom(const BlobFromOfType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobFromOfType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BlobFromOfType::Swap(BlobFromOfType* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobFromOfType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobFromOfType_descriptor_;
  metadata.reflection = BlobFromOfType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace exchange
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
