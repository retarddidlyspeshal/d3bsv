// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lib/protocol/invitation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace invitation {

namespace {

const ::google::protobuf::Descriptor* Invitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Suggestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Suggestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendInvitationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendInvitationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lib_2fprotocol_2finvitation_2eproto() {
  protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lib/protocol/invitation.proto");
  GOOGLE_CHECK(file != NULL);
  Invitation_descriptor_ = file->message_type(0);
  static const int Invitation_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, inviter_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, invitee_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, inviter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, invitee_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, invitation_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, expiration_time_),
  };
  Invitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invitation_descriptor_,
      Invitation::default_instance_,
      Invitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invitation));
  Suggestion_descriptor_ = file->message_type(1);
  static const int Suggestion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, suggester_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, suggestee_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, suggester_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, suggestee_name_),
  };
  Suggestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Suggestion_descriptor_,
      Suggestion::default_instance_,
      Suggestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Suggestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Suggestion));
  SendInvitationRequest_descriptor_ = file->message_type(2);
  static const int SendInvitationRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, agent_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, invitation_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, expiration_time_),
  };
  SendInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendInvitationRequest_descriptor_,
      SendInvitationRequest::default_instance_,
      SendInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendInvitationRequest));
  SendInvitationResponse_descriptor_ = file->message_type(3);
  static const int SendInvitationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationResponse, invitation_),
  };
  SendInvitationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendInvitationResponse_descriptor_,
      SendInvitationResponse::default_instance_,
      SendInvitationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendInvitationResponse));
  GenericRequest_descriptor_ = file->message_type(4);
  static const int GenericRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericRequest, invitation_id_),
  };
  GenericRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericRequest_descriptor_,
      GenericRequest::default_instance_,
      GenericRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lib_2fprotocol_2finvitation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invitation_descriptor_, &Invitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Suggestion_descriptor_, &Suggestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendInvitationRequest_descriptor_, &SendInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendInvitationResponse_descriptor_, &SendInvitationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericRequest_descriptor_, &GenericRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lib_2fprotocol_2finvitation_2eproto() {
  delete Invitation::default_instance_;
  delete Invitation_reflection_;
  delete Suggestion::default_instance_;
  delete Suggestion_reflection_;
  delete SendInvitationRequest::default_instance_;
  delete SendInvitationRequest_reflection_;
  delete SendInvitationResponse::default_instance_;
  delete SendInvitationResponse_reflection_;
  delete GenericRequest::default_instance_;
  delete GenericRequest_reflection_;
}

void protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035lib/protocol/invitation.proto\022\030bnet.pr"
    "otocol.invitation\032\034lib/protocol/attribut"
    "e.proto\032\031lib/protocol/entity.proto\"\366\001\n\nI"
    "nvitation\022\n\n\002id\030\001 \002(\006\0221\n\020inviter_identit"
    "y\030\002 \002(\0132\027.bnet.protocol.Identity\0221\n\020invi"
    "tee_identity\030\003 \002(\0132\027.bnet.protocol.Ident"
    "ity\022\024\n\014inviter_name\030\004 \001(\t\022\024\n\014invitee_nam"
    "e\030\005 \001(\t\022\032\n\022invitation_message\030\006 \001(\t\022\025\n\rc"
    "reation_time\030\007 \001(\004\022\027\n\017expiration_time\030\010 "
    "\001(\004\"\307\001\n\nSuggestion\022+\n\nchannel_id\030\001 \001(\0132\027"
    ".bnet.protocol.EntityId\022-\n\014suggester_id\030"
    "\002 \002(\0132\027.bnet.protocol.EntityId\022-\n\014sugges"
    "tee_id\030\003 \002(\0132\027.bnet.protocol.EntityId\022\026\n"
    "\016suggester_name\030\004 \001(\t\022\026\n\016suggestee_name\030"
    "\005 \001(\t\"\251\001\n\025SendInvitationRequest\022/\n\016agent"
    "_identity\030\001 \001(\0132\027.bnet.protocol.Identity"
    "\022*\n\ttarget_id\030\002 \002(\0132\027.bnet.protocol.Enti"
    "tyId\022\032\n\022invitation_message\030\003 \001(\t\022\027\n\017expi"
    "ration_time\030\004 \001(\004\"R\n\026SendInvitationRespo"
    "nse\0228\n\ninvitation\030\002 \001(\0132$.bnet.protocol."
    "invitation.Invitation\"~\n\016GenericRequest\022"
    ")\n\010agent_id\030\001 \001(\0132\027.bnet.protocol.Entity"
    "Id\022*\n\ttarget_id\030\002 \001(\0132\027.bnet.protocol.En"
    "tityId\022\025\n\rinvitation_id\030\003 \002(\006", 949);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lib/protocol/invitation.proto", &protobuf_RegisterTypes);
  Invitation::default_instance_ = new Invitation();
  Suggestion::default_instance_ = new Suggestion();
  SendInvitationRequest::default_instance_ = new SendInvitationRequest();
  SendInvitationResponse::default_instance_ = new SendInvitationResponse();
  GenericRequest::default_instance_ = new GenericRequest();
  Invitation::default_instance_->InitAsDefaultInstance();
  Suggestion::default_instance_->InitAsDefaultInstance();
  SendInvitationRequest::default_instance_->InitAsDefaultInstance();
  SendInvitationResponse::default_instance_->InitAsDefaultInstance();
  GenericRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lib_2fprotocol_2finvitation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lib_2fprotocol_2finvitation_2eproto {
  StaticDescriptorInitializer_lib_2fprotocol_2finvitation_2eproto() {
    protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  }
} static_descriptor_initializer_lib_2fprotocol_2finvitation_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Invitation::kIdFieldNumber;
const int Invitation::kInviterIdentityFieldNumber;
const int Invitation::kInviteeIdentityFieldNumber;
const int Invitation::kInviterNameFieldNumber;
const int Invitation::kInviteeNameFieldNumber;
const int Invitation::kInvitationMessageFieldNumber;
const int Invitation::kCreationTimeFieldNumber;
const int Invitation::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

Invitation::Invitation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Invitation::InitAsDefaultInstance() {
  inviter_identity_ = const_cast< ::bnet::protocol::Identity*>(&::bnet::protocol::Identity::default_instance());
  invitee_identity_ = const_cast< ::bnet::protocol::Identity*>(&::bnet::protocol::Identity::default_instance());
}

Invitation::Invitation(const Invitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Invitation::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  inviter_identity_ = NULL;
  invitee_identity_ = NULL;
  inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  invitee_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  invitation_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creation_time_ = GOOGLE_ULONGLONG(0);
  expiration_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invitation::~Invitation() {
  SharedDtor();
}

void Invitation::SharedDtor() {
  if (inviter_name_ != &::google::protobuf::internal::kEmptyString) {
    delete inviter_name_;
  }
  if (invitee_name_ != &::google::protobuf::internal::kEmptyString) {
    delete invitee_name_;
  }
  if (invitation_message_ != &::google::protobuf::internal::kEmptyString) {
    delete invitation_message_;
  }
  if (this != default_instance_) {
    delete inviter_identity_;
    delete invitee_identity_;
  }
}

void Invitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invitation_descriptor_;
}

const Invitation& Invitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();  return *default_instance_;
}

Invitation* Invitation::default_instance_ = NULL;

Invitation* Invitation::New() const {
  return new Invitation;
}

void Invitation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_inviter_identity()) {
      if (inviter_identity_ != NULL) inviter_identity_->::bnet::protocol::Identity::Clear();
    }
    if (has_invitee_identity()) {
      if (invitee_identity_ != NULL) invitee_identity_->::bnet::protocol::Identity::Clear();
    }
    if (has_inviter_name()) {
      if (inviter_name_ != &::google::protobuf::internal::kEmptyString) {
        inviter_name_->clear();
      }
    }
    if (has_invitee_name()) {
      if (invitee_name_ != &::google::protobuf::internal::kEmptyString) {
        invitee_name_->clear();
      }
    }
    if (has_invitation_message()) {
      if (invitation_message_ != &::google::protobuf::internal::kEmptyString) {
        invitation_message_->clear();
      }
    }
    creation_time_ = GOOGLE_ULONGLONG(0);
    expiration_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviter_identity;
        break;
      }
      
      // required .bnet.protocol.Identity inviter_identity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviter_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviter_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invitee_identity;
        break;
      }
      
      // required .bnet.protocol.Identity invitee_identity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitee_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitee_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_inviter_name;
        break;
      }
      
      // optional string inviter_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviter_name().data(), this->inviter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_invitee_name;
        break;
      }
      
      // optional string invitee_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitee_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitee_name().data(), this->invitee_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_invitation_message;
        break;
      }
      
      // optional string invitation_message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitation_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitation_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitation_message().data(), this->invitation_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_creation_time;
        break;
      }
      
      // optional uint64 creation_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_expiration_time;
        break;
      }
      
      // optional uint64 expiration_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Invitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }
  
  // required .bnet.protocol.Identity inviter_identity = 2;
  if (has_inviter_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inviter_identity(), output);
  }
  
  // required .bnet.protocol.Identity invitee_identity = 3;
  if (has_invitee_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invitee_identity(), output);
  }
  
  // optional string inviter_name = 4;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->inviter_name(), output);
  }
  
  // optional string invitee_name = 5;
  if (has_invitee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->invitee_name(), output);
  }
  
  // optional string invitation_message = 6;
  if (has_invitation_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitation_message().data(), this->invitation_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->invitation_message(), output);
  }
  
  // optional uint64 creation_time = 7;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->creation_time(), output);
  }
  
  // optional uint64 expiration_time = 8;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->expiration_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Invitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }
  
  // required .bnet.protocol.Identity inviter_identity = 2;
  if (has_inviter_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inviter_identity(), target);
  }
  
  // required .bnet.protocol.Identity invitee_identity = 3;
  if (has_invitee_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invitee_identity(), target);
  }
  
  // optional string inviter_name = 4;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inviter_name(), target);
  }
  
  // optional string invitee_name = 5;
  if (has_invitee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitee_name().data(), this->invitee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->invitee_name(), target);
  }
  
  // optional string invitation_message = 6;
  if (has_invitation_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitation_message().data(), this->invitation_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->invitation_message(), target);
  }
  
  // optional uint64 creation_time = 7;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->creation_time(), target);
  }
  
  // optional uint64 expiration_time = 8;
  if (has_expiration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->expiration_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Invitation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
    // required .bnet.protocol.Identity inviter_identity = 2;
    if (has_inviter_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inviter_identity());
    }
    
    // required .bnet.protocol.Identity invitee_identity = 3;
    if (has_invitee_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitee_identity());
    }
    
    // optional string inviter_name = 4;
    if (has_inviter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviter_name());
    }
    
    // optional string invitee_name = 5;
    if (has_invitee_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitee_name());
    }
    
    // optional string invitation_message = 6;
    if (has_invitation_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitation_message());
    }
    
    // optional uint64 creation_time = 7;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_time());
    }
    
    // optional uint64 expiration_time = 8;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiration_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invitation::MergeFrom(const Invitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_inviter_identity()) {
      mutable_inviter_identity()->::bnet::protocol::Identity::MergeFrom(from.inviter_identity());
    }
    if (from.has_invitee_identity()) {
      mutable_invitee_identity()->::bnet::protocol::Identity::MergeFrom(from.invitee_identity());
    }
    if (from.has_inviter_name()) {
      set_inviter_name(from.inviter_name());
    }
    if (from.has_invitee_name()) {
      set_invitee_name(from.invitee_name());
    }
    if (from.has_invitation_message()) {
      set_invitation_message(from.invitation_message());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invitation::CopyFrom(const Invitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invitation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_inviter_identity()) {
    if (!this->inviter_identity().IsInitialized()) return false;
  }
  if (has_invitee_identity()) {
    if (!this->invitee_identity().IsInitialized()) return false;
  }
  return true;
}

void Invitation::Swap(Invitation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(inviter_identity_, other->inviter_identity_);
    std::swap(invitee_identity_, other->invitee_identity_);
    std::swap(inviter_name_, other->inviter_name_);
    std::swap(invitee_name_, other->invitee_name_);
    std::swap(invitation_message_, other->invitation_message_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invitation_descriptor_;
  metadata.reflection = Invitation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Suggestion::kChannelIdFieldNumber;
const int Suggestion::kSuggesterIdFieldNumber;
const int Suggestion::kSuggesteeIdFieldNumber;
const int Suggestion::kSuggesterNameFieldNumber;
const int Suggestion::kSuggesteeNameFieldNumber;
#endif  // !_MSC_VER

Suggestion::Suggestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Suggestion::InitAsDefaultInstance() {
  channel_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  suggester_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  suggestee_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

Suggestion::Suggestion(const Suggestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Suggestion::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = NULL;
  suggester_id_ = NULL;
  suggestee_id_ = NULL;
  suggester_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suggestee_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Suggestion::~Suggestion() {
  SharedDtor();
}

void Suggestion::SharedDtor() {
  if (suggester_name_ != &::google::protobuf::internal::kEmptyString) {
    delete suggester_name_;
  }
  if (suggestee_name_ != &::google::protobuf::internal::kEmptyString) {
    delete suggestee_name_;
  }
  if (this != default_instance_) {
    delete channel_id_;
    delete suggester_id_;
    delete suggestee_id_;
  }
}

void Suggestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Suggestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Suggestion_descriptor_;
}

const Suggestion& Suggestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();  return *default_instance_;
}

Suggestion* Suggestion::default_instance_ = NULL;

Suggestion* Suggestion::New() const {
  return new Suggestion;
}

void Suggestion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_id()) {
      if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_suggester_id()) {
      if (suggester_id_ != NULL) suggester_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_suggestee_id()) {
      if (suggestee_id_ != NULL) suggestee_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_suggester_name()) {
      if (suggester_name_ != &::google::protobuf::internal::kEmptyString) {
        suggester_name_->clear();
      }
    }
    if (has_suggestee_name()) {
      if (suggestee_name_ != &::google::protobuf::internal::kEmptyString) {
        suggestee_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Suggestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_suggester_id;
        break;
      }
      
      // required .bnet.protocol.EntityId suggester_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggester_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggester_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suggestee_id;
        break;
      }
      
      // required .bnet.protocol.EntityId suggestee_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggestee_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggestee_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_suggester_name;
        break;
      }
      
      // optional string suggester_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggester_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggester_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suggester_name().data(), this->suggester_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_suggestee_name;
        break;
      }
      
      // optional string suggestee_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggestee_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggestee_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suggestee_name().data(), this->suggestee_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Suggestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_id(), output);
  }
  
  // required .bnet.protocol.EntityId suggester_id = 2;
  if (has_suggester_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->suggester_id(), output);
  }
  
  // required .bnet.protocol.EntityId suggestee_id = 3;
  if (has_suggestee_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suggestee_id(), output);
  }
  
  // optional string suggester_name = 4;
  if (has_suggester_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suggester_name().data(), this->suggester_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->suggester_name(), output);
  }
  
  // optional string suggestee_name = 5;
  if (has_suggestee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suggestee_name().data(), this->suggestee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->suggestee_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Suggestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_id(), target);
  }
  
  // required .bnet.protocol.EntityId suggester_id = 2;
  if (has_suggester_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->suggester_id(), target);
  }
  
  // required .bnet.protocol.EntityId suggestee_id = 3;
  if (has_suggestee_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suggestee_id(), target);
  }
  
  // optional string suggester_name = 4;
  if (has_suggester_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suggester_name().data(), this->suggester_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->suggester_name(), target);
  }
  
  // optional string suggestee_name = 5;
  if (has_suggestee_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suggestee_name().data(), this->suggestee_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suggestee_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Suggestion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_id());
    }
    
    // required .bnet.protocol.EntityId suggester_id = 2;
    if (has_suggester_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggester_id());
    }
    
    // required .bnet.protocol.EntityId suggestee_id = 3;
    if (has_suggestee_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggestee_id());
    }
    
    // optional string suggester_name = 4;
    if (has_suggester_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggester_name());
    }
    
    // optional string suggestee_name = 5;
    if (has_suggestee_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggestee_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Suggestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Suggestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Suggestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Suggestion::MergeFrom(const Suggestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      mutable_channel_id()->::bnet::protocol::EntityId::MergeFrom(from.channel_id());
    }
    if (from.has_suggester_id()) {
      mutable_suggester_id()->::bnet::protocol::EntityId::MergeFrom(from.suggester_id());
    }
    if (from.has_suggestee_id()) {
      mutable_suggestee_id()->::bnet::protocol::EntityId::MergeFrom(from.suggestee_id());
    }
    if (from.has_suggester_name()) {
      set_suggester_name(from.suggester_name());
    }
    if (from.has_suggestee_name()) {
      set_suggestee_name(from.suggestee_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Suggestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Suggestion::CopyFrom(const Suggestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Suggestion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  if (has_channel_id()) {
    if (!this->channel_id().IsInitialized()) return false;
  }
  if (has_suggester_id()) {
    if (!this->suggester_id().IsInitialized()) return false;
  }
  if (has_suggestee_id()) {
    if (!this->suggestee_id().IsInitialized()) return false;
  }
  return true;
}

void Suggestion::Swap(Suggestion* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(suggester_id_, other->suggester_id_);
    std::swap(suggestee_id_, other->suggestee_id_);
    std::swap(suggester_name_, other->suggester_name_);
    std::swap(suggestee_name_, other->suggestee_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Suggestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Suggestion_descriptor_;
  metadata.reflection = Suggestion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendInvitationRequest::kAgentIdentityFieldNumber;
const int SendInvitationRequest::kTargetIdFieldNumber;
const int SendInvitationRequest::kInvitationMessageFieldNumber;
const int SendInvitationRequest::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

SendInvitationRequest::SendInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendInvitationRequest::InitAsDefaultInstance() {
  agent_identity_ = const_cast< ::bnet::protocol::Identity*>(&::bnet::protocol::Identity::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

SendInvitationRequest::SendInvitationRequest(const SendInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_identity_ = NULL;
  target_id_ = NULL;
  invitation_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expiration_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendInvitationRequest::~SendInvitationRequest() {
  SharedDtor();
}

void SendInvitationRequest::SharedDtor() {
  if (invitation_message_ != &::google::protobuf::internal::kEmptyString) {
    delete invitation_message_;
  }
  if (this != default_instance_) {
    delete agent_identity_;
    delete target_id_;
  }
}

void SendInvitationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendInvitationRequest_descriptor_;
}

const SendInvitationRequest& SendInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();  return *default_instance_;
}

SendInvitationRequest* SendInvitationRequest::default_instance_ = NULL;

SendInvitationRequest* SendInvitationRequest::New() const {
  return new SendInvitationRequest;
}

void SendInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_identity()) {
      if (agent_identity_ != NULL) agent_identity_->::bnet::protocol::Identity::Clear();
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_invitation_message()) {
      if (invitation_message_ != &::google::protobuf::internal::kEmptyString) {
        invitation_message_->clear();
      }
    }
    expiration_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.Identity agent_identity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }
      
      // required .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invitation_message;
        break;
      }
      
      // optional string invitation_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitation_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitation_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitation_message().data(), this->invitation_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expiration_time;
        break;
      }
      
      // optional uint64 expiration_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.Identity agent_identity = 1;
  if (has_agent_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_identity(), output);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  // optional string invitation_message = 3;
  if (has_invitation_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitation_message().data(), this->invitation_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->invitation_message(), output);
  }
  
  // optional uint64 expiration_time = 4;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expiration_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.Identity agent_identity = 1;
  if (has_agent_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_identity(), target);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  // optional string invitation_message = 3;
  if (has_invitation_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitation_message().data(), this->invitation_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->invitation_message(), target);
  }
  
  // optional uint64 expiration_time = 4;
  if (has_expiration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expiration_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendInvitationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.Identity agent_identity = 1;
    if (has_agent_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_identity());
    }
    
    // required .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
    // optional string invitation_message = 3;
    if (has_invitation_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitation_message());
    }
    
    // optional uint64 expiration_time = 4;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiration_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendInvitationRequest::MergeFrom(const SendInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_identity()) {
      mutable_agent_identity()->::bnet::protocol::Identity::MergeFrom(from.agent_identity());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
    if (from.has_invitation_message()) {
      set_invitation_message(from.invitation_message());
    }
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendInvitationRequest::CopyFrom(const SendInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_identity()) {
    if (!this->agent_identity().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void SendInvitationRequest::Swap(SendInvitationRequest* other) {
  if (other != this) {
    std::swap(agent_identity_, other->agent_identity_);
    std::swap(target_id_, other->target_id_);
    std::swap(invitation_message_, other->invitation_message_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendInvitationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendInvitationRequest_descriptor_;
  metadata.reflection = SendInvitationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendInvitationResponse::kInvitationFieldNumber;
#endif  // !_MSC_VER

SendInvitationResponse::SendInvitationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendInvitationResponse::InitAsDefaultInstance() {
  invitation_ = const_cast< ::bnet::protocol::invitation::Invitation*>(&::bnet::protocol::invitation::Invitation::default_instance());
}

SendInvitationResponse::SendInvitationResponse(const SendInvitationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendInvitationResponse::SharedCtor() {
  _cached_size_ = 0;
  invitation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendInvitationResponse::~SendInvitationResponse() {
  SharedDtor();
}

void SendInvitationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete invitation_;
  }
}

void SendInvitationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendInvitationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendInvitationResponse_descriptor_;
}

const SendInvitationResponse& SendInvitationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();  return *default_instance_;
}

SendInvitationResponse* SendInvitationResponse::default_instance_ = NULL;

SendInvitationResponse* SendInvitationResponse::New() const {
  return new SendInvitationResponse;
}

void SendInvitationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_invitation()) {
      if (invitation_ != NULL) invitation_->::bnet::protocol::invitation::Invitation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendInvitationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.invitation.Invitation invitation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendInvitationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.invitation.Invitation invitation = 2;
  if (has_invitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->invitation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendInvitationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.invitation.Invitation invitation = 2;
  if (has_invitation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->invitation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendInvitationResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.invitation.Invitation invitation = 2;
    if (has_invitation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendInvitationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendInvitationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendInvitationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendInvitationResponse::MergeFrom(const SendInvitationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitation()) {
      mutable_invitation()->::bnet::protocol::invitation::Invitation::MergeFrom(from.invitation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendInvitationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendInvitationResponse::CopyFrom(const SendInvitationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationResponse::IsInitialized() const {
  
  if (has_invitation()) {
    if (!this->invitation().IsInitialized()) return false;
  }
  return true;
}

void SendInvitationResponse::Swap(SendInvitationResponse* other) {
  if (other != this) {
    std::swap(invitation_, other->invitation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendInvitationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendInvitationResponse_descriptor_;
  metadata.reflection = SendInvitationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenericRequest::kAgentIdFieldNumber;
const int GenericRequest::kTargetIdFieldNumber;
const int GenericRequest::kInvitationIdFieldNumber;
#endif  // !_MSC_VER

GenericRequest::GenericRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenericRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

GenericRequest::GenericRequest(const GenericRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenericRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  invitation_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericRequest::~GenericRequest() {
  SharedDtor();
}

void GenericRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void GenericRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericRequest_descriptor_;
}

const GenericRequest& GenericRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();  return *default_instance_;
}

GenericRequest* GenericRequest::default_instance_ = NULL;

GenericRequest* GenericRequest::New() const {
  return new GenericRequest;
}

void GenericRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
    invitation_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }
      
      // optional .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_invitation_id;
        break;
      }
      
      // required fixed64 invitation_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_invitation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invitation_id_)));
          set_has_invitation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // optional .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  // required fixed64 invitation_id = 3;
  if (has_invitation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->invitation_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // optional .bnet.protocol.EntityId target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  // required fixed64 invitation_id = 3;
  if (has_invitation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->invitation_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // optional .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
    // required fixed64 invitation_id = 3;
    if (has_invitation_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericRequest::MergeFrom(const GenericRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
    if (from.has_invitation_id()) {
      set_invitation_id(from.invitation_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericRequest::CopyFrom(const GenericRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void GenericRequest::Swap(GenericRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(invitation_id_, other->invitation_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenericRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericRequest_descriptor_;
  metadata.reflection = GenericRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace invitation
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
