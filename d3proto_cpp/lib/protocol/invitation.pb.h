// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lib/protocol/invitation.proto

#ifndef PROTOBUF_lib_2fprotocol_2finvitation_2eproto__INCLUDED
#define PROTOBUF_lib_2fprotocol_2finvitation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/protocol/attribute.pb.h"
#include "lib/protocol/entity.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace invitation {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
void protobuf_AssignDesc_lib_2fprotocol_2finvitation_2eproto();
void protobuf_ShutdownFile_lib_2fprotocol_2finvitation_2eproto();

class Invitation;
class Suggestion;
class SendInvitationRequest;
class SendInvitationResponse;
class GenericRequest;

// ===================================================================

class Invitation : public ::google::protobuf::Message {
 public:
  Invitation();
  virtual ~Invitation();
  
  Invitation(const Invitation& from);
  
  inline Invitation& operator=(const Invitation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Invitation& default_instance();
  
  void Swap(Invitation* other);
  
  // implements Message ----------------------------------------------
  
  Invitation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Invitation& from);
  void MergeFrom(const Invitation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required .bnet.protocol.Identity inviter_identity = 2;
  inline bool has_inviter_identity() const;
  inline void clear_inviter_identity();
  static const int kInviterIdentityFieldNumber = 2;
  inline const ::bnet::protocol::Identity& inviter_identity() const;
  inline ::bnet::protocol::Identity* mutable_inviter_identity();
  inline ::bnet::protocol::Identity* release_inviter_identity();
  
  // required .bnet.protocol.Identity invitee_identity = 3;
  inline bool has_invitee_identity() const;
  inline void clear_invitee_identity();
  static const int kInviteeIdentityFieldNumber = 3;
  inline const ::bnet::protocol::Identity& invitee_identity() const;
  inline ::bnet::protocol::Identity* mutable_invitee_identity();
  inline ::bnet::protocol::Identity* release_invitee_identity();
  
  // optional string inviter_name = 4;
  inline bool has_inviter_name() const;
  inline void clear_inviter_name();
  static const int kInviterNameFieldNumber = 4;
  inline const ::std::string& inviter_name() const;
  inline void set_inviter_name(const ::std::string& value);
  inline void set_inviter_name(const char* value);
  inline void set_inviter_name(const char* value, size_t size);
  inline ::std::string* mutable_inviter_name();
  inline ::std::string* release_inviter_name();
  
  // optional string invitee_name = 5;
  inline bool has_invitee_name() const;
  inline void clear_invitee_name();
  static const int kInviteeNameFieldNumber = 5;
  inline const ::std::string& invitee_name() const;
  inline void set_invitee_name(const ::std::string& value);
  inline void set_invitee_name(const char* value);
  inline void set_invitee_name(const char* value, size_t size);
  inline ::std::string* mutable_invitee_name();
  inline ::std::string* release_invitee_name();
  
  // optional string invitation_message = 6;
  inline bool has_invitation_message() const;
  inline void clear_invitation_message();
  static const int kInvitationMessageFieldNumber = 6;
  inline const ::std::string& invitation_message() const;
  inline void set_invitation_message(const ::std::string& value);
  inline void set_invitation_message(const char* value);
  inline void set_invitation_message(const char* value, size_t size);
  inline ::std::string* mutable_invitation_message();
  inline ::std::string* release_invitation_message();
  
  // optional uint64 creation_time = 7;
  inline bool has_creation_time() const;
  inline void clear_creation_time();
  static const int kCreationTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 creation_time() const;
  inline void set_creation_time(::google::protobuf::uint64 value);
  
  // optional uint64 expiration_time = 8;
  inline bool has_expiration_time() const;
  inline void clear_expiration_time();
  static const int kExpirationTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 expiration_time() const;
  inline void set_expiration_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.invitation.Invitation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_inviter_identity();
  inline void clear_has_inviter_identity();
  inline void set_has_invitee_identity();
  inline void clear_has_invitee_identity();
  inline void set_has_inviter_name();
  inline void clear_has_inviter_name();
  inline void set_has_invitee_name();
  inline void clear_has_invitee_name();
  inline void set_has_invitation_message();
  inline void clear_has_invitation_message();
  inline void set_has_creation_time();
  inline void clear_has_creation_time();
  inline void set_has_expiration_time();
  inline void clear_has_expiration_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::bnet::protocol::Identity* inviter_identity_;
  ::bnet::protocol::Identity* invitee_identity_;
  ::std::string* inviter_name_;
  ::std::string* invitee_name_;
  ::std::string* invitation_message_;
  ::google::protobuf::uint64 creation_time_;
  ::google::protobuf::uint64 expiration_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2finvitation_2eproto();
  
  void InitAsDefaultInstance();
  static Invitation* default_instance_;
};
// -------------------------------------------------------------------

class Suggestion : public ::google::protobuf::Message {
 public:
  Suggestion();
  virtual ~Suggestion();
  
  Suggestion(const Suggestion& from);
  
  inline Suggestion& operator=(const Suggestion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Suggestion& default_instance();
  
  void Swap(Suggestion* other);
  
  // implements Message ----------------------------------------------
  
  Suggestion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Suggestion& from);
  void MergeFrom(const Suggestion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& channel_id() const;
  inline ::bnet::protocol::EntityId* mutable_channel_id();
  inline ::bnet::protocol::EntityId* release_channel_id();
  
  // required .bnet.protocol.EntityId suggester_id = 2;
  inline bool has_suggester_id() const;
  inline void clear_suggester_id();
  static const int kSuggesterIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& suggester_id() const;
  inline ::bnet::protocol::EntityId* mutable_suggester_id();
  inline ::bnet::protocol::EntityId* release_suggester_id();
  
  // required .bnet.protocol.EntityId suggestee_id = 3;
  inline bool has_suggestee_id() const;
  inline void clear_suggestee_id();
  static const int kSuggesteeIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& suggestee_id() const;
  inline ::bnet::protocol::EntityId* mutable_suggestee_id();
  inline ::bnet::protocol::EntityId* release_suggestee_id();
  
  // optional string suggester_name = 4;
  inline bool has_suggester_name() const;
  inline void clear_suggester_name();
  static const int kSuggesterNameFieldNumber = 4;
  inline const ::std::string& suggester_name() const;
  inline void set_suggester_name(const ::std::string& value);
  inline void set_suggester_name(const char* value);
  inline void set_suggester_name(const char* value, size_t size);
  inline ::std::string* mutable_suggester_name();
  inline ::std::string* release_suggester_name();
  
  // optional string suggestee_name = 5;
  inline bool has_suggestee_name() const;
  inline void clear_suggestee_name();
  static const int kSuggesteeNameFieldNumber = 5;
  inline const ::std::string& suggestee_name() const;
  inline void set_suggestee_name(const ::std::string& value);
  inline void set_suggestee_name(const char* value);
  inline void set_suggestee_name(const char* value, size_t size);
  inline ::std::string* mutable_suggestee_name();
  inline ::std::string* release_suggestee_name();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.invitation.Suggestion)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_suggester_id();
  inline void clear_has_suggester_id();
  inline void set_has_suggestee_id();
  inline void clear_has_suggestee_id();
  inline void set_has_suggester_name();
  inline void clear_has_suggester_name();
  inline void set_has_suggestee_name();
  inline void clear_has_suggestee_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* channel_id_;
  ::bnet::protocol::EntityId* suggester_id_;
  ::bnet::protocol::EntityId* suggestee_id_;
  ::std::string* suggester_name_;
  ::std::string* suggestee_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2finvitation_2eproto();
  
  void InitAsDefaultInstance();
  static Suggestion* default_instance_;
};
// -------------------------------------------------------------------

class SendInvitationRequest : public ::google::protobuf::Message {
 public:
  SendInvitationRequest();
  virtual ~SendInvitationRequest();
  
  SendInvitationRequest(const SendInvitationRequest& from);
  
  inline SendInvitationRequest& operator=(const SendInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendInvitationRequest& default_instance();
  
  void Swap(SendInvitationRequest* other);
  
  // implements Message ----------------------------------------------
  
  SendInvitationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendInvitationRequest& from);
  void MergeFrom(const SendInvitationRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.Identity agent_identity = 1;
  inline bool has_agent_identity() const;
  inline void clear_agent_identity();
  static const int kAgentIdentityFieldNumber = 1;
  inline const ::bnet::protocol::Identity& agent_identity() const;
  inline ::bnet::protocol::Identity* mutable_agent_identity();
  inline ::bnet::protocol::Identity* release_agent_identity();
  
  // required .bnet.protocol.EntityId target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& target_id() const;
  inline ::bnet::protocol::EntityId* mutable_target_id();
  inline ::bnet::protocol::EntityId* release_target_id();
  
  // optional string invitation_message = 3;
  inline bool has_invitation_message() const;
  inline void clear_invitation_message();
  static const int kInvitationMessageFieldNumber = 3;
  inline const ::std::string& invitation_message() const;
  inline void set_invitation_message(const ::std::string& value);
  inline void set_invitation_message(const char* value);
  inline void set_invitation_message(const char* value, size_t size);
  inline ::std::string* mutable_invitation_message();
  inline ::std::string* release_invitation_message();
  
  // optional uint64 expiration_time = 4;
  inline bool has_expiration_time() const;
  inline void clear_expiration_time();
  static const int kExpirationTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 expiration_time() const;
  inline void set_expiration_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.invitation.SendInvitationRequest)
 private:
  inline void set_has_agent_identity();
  inline void clear_has_agent_identity();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_invitation_message();
  inline void clear_has_invitation_message();
  inline void set_has_expiration_time();
  inline void clear_has_expiration_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::Identity* agent_identity_;
  ::bnet::protocol::EntityId* target_id_;
  ::std::string* invitation_message_;
  ::google::protobuf::uint64 expiration_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2finvitation_2eproto();
  
  void InitAsDefaultInstance();
  static SendInvitationRequest* default_instance_;
};
// -------------------------------------------------------------------

class SendInvitationResponse : public ::google::protobuf::Message {
 public:
  SendInvitationResponse();
  virtual ~SendInvitationResponse();
  
  SendInvitationResponse(const SendInvitationResponse& from);
  
  inline SendInvitationResponse& operator=(const SendInvitationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendInvitationResponse& default_instance();
  
  void Swap(SendInvitationResponse* other);
  
  // implements Message ----------------------------------------------
  
  SendInvitationResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendInvitationResponse& from);
  void MergeFrom(const SendInvitationResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.invitation.Invitation invitation = 2;
  inline bool has_invitation() const;
  inline void clear_invitation();
  static const int kInvitationFieldNumber = 2;
  inline const ::bnet::protocol::invitation::Invitation& invitation() const;
  inline ::bnet::protocol::invitation::Invitation* mutable_invitation();
  inline ::bnet::protocol::invitation::Invitation* release_invitation();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.invitation.SendInvitationResponse)
 private:
  inline void set_has_invitation();
  inline void clear_has_invitation();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::invitation::Invitation* invitation_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2finvitation_2eproto();
  
  void InitAsDefaultInstance();
  static SendInvitationResponse* default_instance_;
};
// -------------------------------------------------------------------

class GenericRequest : public ::google::protobuf::Message {
 public:
  GenericRequest();
  virtual ~GenericRequest();
  
  GenericRequest(const GenericRequest& from);
  
  inline GenericRequest& operator=(const GenericRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericRequest& default_instance();
  
  void Swap(GenericRequest* other);
  
  // implements Message ----------------------------------------------
  
  GenericRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenericRequest& from);
  void MergeFrom(const GenericRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  inline ::bnet::protocol::EntityId* release_agent_id();
  
  // optional .bnet.protocol.EntityId target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& target_id() const;
  inline ::bnet::protocol::EntityId* mutable_target_id();
  inline ::bnet::protocol::EntityId* release_target_id();
  
  // required fixed64 invitation_id = 3;
  inline bool has_invitation_id() const;
  inline void clear_invitation_id();
  static const int kInvitationIdFieldNumber = 3;
  inline ::google::protobuf::uint64 invitation_id() const;
  inline void set_invitation_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.invitation.GenericRequest)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_invitation_id();
  inline void clear_has_invitation_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::EntityId* target_id_;
  ::google::protobuf::uint64 invitation_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_AssignDesc_lib_2fprotocol_2finvitation_2eproto();
  friend void protobuf_ShutdownFile_lib_2fprotocol_2finvitation_2eproto();
  
  void InitAsDefaultInstance();
  static GenericRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// Invitation

// required fixed64 id = 1;
inline bool Invitation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Invitation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Invitation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Invitation::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Invitation::id() const {
  return id_;
}
inline void Invitation::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required .bnet.protocol.Identity inviter_identity = 2;
inline bool Invitation::has_inviter_identity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Invitation::set_has_inviter_identity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Invitation::clear_has_inviter_identity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Invitation::clear_inviter_identity() {
  if (inviter_identity_ != NULL) inviter_identity_->::bnet::protocol::Identity::Clear();
  clear_has_inviter_identity();
}
inline const ::bnet::protocol::Identity& Invitation::inviter_identity() const {
  return inviter_identity_ != NULL ? *inviter_identity_ : *default_instance_->inviter_identity_;
}
inline ::bnet::protocol::Identity* Invitation::mutable_inviter_identity() {
  set_has_inviter_identity();
  if (inviter_identity_ == NULL) inviter_identity_ = new ::bnet::protocol::Identity;
  return inviter_identity_;
}
inline ::bnet::protocol::Identity* Invitation::release_inviter_identity() {
  clear_has_inviter_identity();
  ::bnet::protocol::Identity* temp = inviter_identity_;
  inviter_identity_ = NULL;
  return temp;
}

// required .bnet.protocol.Identity invitee_identity = 3;
inline bool Invitation::has_invitee_identity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Invitation::set_has_invitee_identity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Invitation::clear_has_invitee_identity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Invitation::clear_invitee_identity() {
  if (invitee_identity_ != NULL) invitee_identity_->::bnet::protocol::Identity::Clear();
  clear_has_invitee_identity();
}
inline const ::bnet::protocol::Identity& Invitation::invitee_identity() const {
  return invitee_identity_ != NULL ? *invitee_identity_ : *default_instance_->invitee_identity_;
}
inline ::bnet::protocol::Identity* Invitation::mutable_invitee_identity() {
  set_has_invitee_identity();
  if (invitee_identity_ == NULL) invitee_identity_ = new ::bnet::protocol::Identity;
  return invitee_identity_;
}
inline ::bnet::protocol::Identity* Invitation::release_invitee_identity() {
  clear_has_invitee_identity();
  ::bnet::protocol::Identity* temp = invitee_identity_;
  invitee_identity_ = NULL;
  return temp;
}

// optional string inviter_name = 4;
inline bool Invitation::has_inviter_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Invitation::set_has_inviter_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Invitation::clear_has_inviter_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Invitation::clear_inviter_name() {
  if (inviter_name_ != &::google::protobuf::internal::kEmptyString) {
    inviter_name_->clear();
  }
  clear_has_inviter_name();
}
inline const ::std::string& Invitation::inviter_name() const {
  return *inviter_name_;
}
inline void Invitation::set_inviter_name(const ::std::string& value) {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    inviter_name_ = new ::std::string;
  }
  inviter_name_->assign(value);
}
inline void Invitation::set_inviter_name(const char* value) {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    inviter_name_ = new ::std::string;
  }
  inviter_name_->assign(value);
}
inline void Invitation::set_inviter_name(const char* value, size_t size) {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    inviter_name_ = new ::std::string;
  }
  inviter_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Invitation::mutable_inviter_name() {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    inviter_name_ = new ::std::string;
  }
  return inviter_name_;
}
inline ::std::string* Invitation::release_inviter_name() {
  clear_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inviter_name_;
    inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string invitee_name = 5;
inline bool Invitation::has_invitee_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Invitation::set_has_invitee_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Invitation::clear_has_invitee_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Invitation::clear_invitee_name() {
  if (invitee_name_ != &::google::protobuf::internal::kEmptyString) {
    invitee_name_->clear();
  }
  clear_has_invitee_name();
}
inline const ::std::string& Invitation::invitee_name() const {
  return *invitee_name_;
}
inline void Invitation::set_invitee_name(const ::std::string& value) {
  set_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    invitee_name_ = new ::std::string;
  }
  invitee_name_->assign(value);
}
inline void Invitation::set_invitee_name(const char* value) {
  set_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    invitee_name_ = new ::std::string;
  }
  invitee_name_->assign(value);
}
inline void Invitation::set_invitee_name(const char* value, size_t size) {
  set_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    invitee_name_ = new ::std::string;
  }
  invitee_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Invitation::mutable_invitee_name() {
  set_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    invitee_name_ = new ::std::string;
  }
  return invitee_name_;
}
inline ::std::string* Invitation::release_invitee_name() {
  clear_has_invitee_name();
  if (invitee_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invitee_name_;
    invitee_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string invitation_message = 6;
inline bool Invitation::has_invitation_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Invitation::set_has_invitation_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Invitation::clear_has_invitation_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Invitation::clear_invitation_message() {
  if (invitation_message_ != &::google::protobuf::internal::kEmptyString) {
    invitation_message_->clear();
  }
  clear_has_invitation_message();
}
inline const ::std::string& Invitation::invitation_message() const {
  return *invitation_message_;
}
inline void Invitation::set_invitation_message(const ::std::string& value) {
  set_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    invitation_message_ = new ::std::string;
  }
  invitation_message_->assign(value);
}
inline void Invitation::set_invitation_message(const char* value) {
  set_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    invitation_message_ = new ::std::string;
  }
  invitation_message_->assign(value);
}
inline void Invitation::set_invitation_message(const char* value, size_t size) {
  set_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    invitation_message_ = new ::std::string;
  }
  invitation_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Invitation::mutable_invitation_message() {
  set_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    invitation_message_ = new ::std::string;
  }
  return invitation_message_;
}
inline ::std::string* Invitation::release_invitation_message() {
  clear_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invitation_message_;
    invitation_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 creation_time = 7;
inline bool Invitation::has_creation_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Invitation::set_has_creation_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Invitation::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Invitation::clear_creation_time() {
  creation_time_ = GOOGLE_ULONGLONG(0);
  clear_has_creation_time();
}
inline ::google::protobuf::uint64 Invitation::creation_time() const {
  return creation_time_;
}
inline void Invitation::set_creation_time(::google::protobuf::uint64 value) {
  set_has_creation_time();
  creation_time_ = value;
}

// optional uint64 expiration_time = 8;
inline bool Invitation::has_expiration_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Invitation::set_has_expiration_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Invitation::clear_has_expiration_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Invitation::clear_expiration_time() {
  expiration_time_ = GOOGLE_ULONGLONG(0);
  clear_has_expiration_time();
}
inline ::google::protobuf::uint64 Invitation::expiration_time() const {
  return expiration_time_;
}
inline void Invitation::set_expiration_time(::google::protobuf::uint64 value) {
  set_has_expiration_time();
  expiration_time_ = value;
}

// -------------------------------------------------------------------

// Suggestion

// optional .bnet.protocol.EntityId channel_id = 1;
inline bool Suggestion::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Suggestion::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Suggestion::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Suggestion::clear_channel_id() {
  if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
  clear_has_channel_id();
}
inline const ::bnet::protocol::EntityId& Suggestion::channel_id() const {
  return channel_id_ != NULL ? *channel_id_ : *default_instance_->channel_id_;
}
inline ::bnet::protocol::EntityId* Suggestion::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == NULL) channel_id_ = new ::bnet::protocol::EntityId;
  return channel_id_;
}
inline ::bnet::protocol::EntityId* Suggestion::release_channel_id() {
  clear_has_channel_id();
  ::bnet::protocol::EntityId* temp = channel_id_;
  channel_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId suggester_id = 2;
inline bool Suggestion::has_suggester_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Suggestion::set_has_suggester_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Suggestion::clear_has_suggester_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Suggestion::clear_suggester_id() {
  if (suggester_id_ != NULL) suggester_id_->::bnet::protocol::EntityId::Clear();
  clear_has_suggester_id();
}
inline const ::bnet::protocol::EntityId& Suggestion::suggester_id() const {
  return suggester_id_ != NULL ? *suggester_id_ : *default_instance_->suggester_id_;
}
inline ::bnet::protocol::EntityId* Suggestion::mutable_suggester_id() {
  set_has_suggester_id();
  if (suggester_id_ == NULL) suggester_id_ = new ::bnet::protocol::EntityId;
  return suggester_id_;
}
inline ::bnet::protocol::EntityId* Suggestion::release_suggester_id() {
  clear_has_suggester_id();
  ::bnet::protocol::EntityId* temp = suggester_id_;
  suggester_id_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId suggestee_id = 3;
inline bool Suggestion::has_suggestee_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Suggestion::set_has_suggestee_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Suggestion::clear_has_suggestee_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Suggestion::clear_suggestee_id() {
  if (suggestee_id_ != NULL) suggestee_id_->::bnet::protocol::EntityId::Clear();
  clear_has_suggestee_id();
}
inline const ::bnet::protocol::EntityId& Suggestion::suggestee_id() const {
  return suggestee_id_ != NULL ? *suggestee_id_ : *default_instance_->suggestee_id_;
}
inline ::bnet::protocol::EntityId* Suggestion::mutable_suggestee_id() {
  set_has_suggestee_id();
  if (suggestee_id_ == NULL) suggestee_id_ = new ::bnet::protocol::EntityId;
  return suggestee_id_;
}
inline ::bnet::protocol::EntityId* Suggestion::release_suggestee_id() {
  clear_has_suggestee_id();
  ::bnet::protocol::EntityId* temp = suggestee_id_;
  suggestee_id_ = NULL;
  return temp;
}

// optional string suggester_name = 4;
inline bool Suggestion::has_suggester_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Suggestion::set_has_suggester_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Suggestion::clear_has_suggester_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Suggestion::clear_suggester_name() {
  if (suggester_name_ != &::google::protobuf::internal::kEmptyString) {
    suggester_name_->clear();
  }
  clear_has_suggester_name();
}
inline const ::std::string& Suggestion::suggester_name() const {
  return *suggester_name_;
}
inline void Suggestion::set_suggester_name(const ::std::string& value) {
  set_has_suggester_name();
  if (suggester_name_ == &::google::protobuf::internal::kEmptyString) {
    suggester_name_ = new ::std::string;
  }
  suggester_name_->assign(value);
}
inline void Suggestion::set_suggester_name(const char* value) {
  set_has_suggester_name();
  if (suggester_name_ == &::google::protobuf::internal::kEmptyString) {
    suggester_name_ = new ::std::string;
  }
  suggester_name_->assign(value);
}
inline void Suggestion::set_suggester_name(const char* value, size_t size) {
  set_has_suggester_name();
  if (suggester_name_ == &::google::protobuf::internal::kEmptyString) {
    suggester_name_ = new ::std::string;
  }
  suggester_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Suggestion::mutable_suggester_name() {
  set_has_suggester_name();
  if (suggester_name_ == &::google::protobuf::internal::kEmptyString) {
    suggester_name_ = new ::std::string;
  }
  return suggester_name_;
}
inline ::std::string* Suggestion::release_suggester_name() {
  clear_has_suggester_name();
  if (suggester_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = suggester_name_;
    suggester_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string suggestee_name = 5;
inline bool Suggestion::has_suggestee_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Suggestion::set_has_suggestee_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Suggestion::clear_has_suggestee_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Suggestion::clear_suggestee_name() {
  if (suggestee_name_ != &::google::protobuf::internal::kEmptyString) {
    suggestee_name_->clear();
  }
  clear_has_suggestee_name();
}
inline const ::std::string& Suggestion::suggestee_name() const {
  return *suggestee_name_;
}
inline void Suggestion::set_suggestee_name(const ::std::string& value) {
  set_has_suggestee_name();
  if (suggestee_name_ == &::google::protobuf::internal::kEmptyString) {
    suggestee_name_ = new ::std::string;
  }
  suggestee_name_->assign(value);
}
inline void Suggestion::set_suggestee_name(const char* value) {
  set_has_suggestee_name();
  if (suggestee_name_ == &::google::protobuf::internal::kEmptyString) {
    suggestee_name_ = new ::std::string;
  }
  suggestee_name_->assign(value);
}
inline void Suggestion::set_suggestee_name(const char* value, size_t size) {
  set_has_suggestee_name();
  if (suggestee_name_ == &::google::protobuf::internal::kEmptyString) {
    suggestee_name_ = new ::std::string;
  }
  suggestee_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Suggestion::mutable_suggestee_name() {
  set_has_suggestee_name();
  if (suggestee_name_ == &::google::protobuf::internal::kEmptyString) {
    suggestee_name_ = new ::std::string;
  }
  return suggestee_name_;
}
inline ::std::string* Suggestion::release_suggestee_name() {
  clear_has_suggestee_name();
  if (suggestee_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = suggestee_name_;
    suggestee_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SendInvitationRequest

// optional .bnet.protocol.Identity agent_identity = 1;
inline bool SendInvitationRequest::has_agent_identity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendInvitationRequest::set_has_agent_identity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendInvitationRequest::clear_has_agent_identity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendInvitationRequest::clear_agent_identity() {
  if (agent_identity_ != NULL) agent_identity_->::bnet::protocol::Identity::Clear();
  clear_has_agent_identity();
}
inline const ::bnet::protocol::Identity& SendInvitationRequest::agent_identity() const {
  return agent_identity_ != NULL ? *agent_identity_ : *default_instance_->agent_identity_;
}
inline ::bnet::protocol::Identity* SendInvitationRequest::mutable_agent_identity() {
  set_has_agent_identity();
  if (agent_identity_ == NULL) agent_identity_ = new ::bnet::protocol::Identity;
  return agent_identity_;
}
inline ::bnet::protocol::Identity* SendInvitationRequest::release_agent_identity() {
  clear_has_agent_identity();
  ::bnet::protocol::Identity* temp = agent_identity_;
  agent_identity_ = NULL;
  return temp;
}

// required .bnet.protocol.EntityId target_id = 2;
inline bool SendInvitationRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendInvitationRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendInvitationRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendInvitationRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
  clear_has_target_id();
}
inline const ::bnet::protocol::EntityId& SendInvitationRequest::target_id() const {
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::bnet::protocol::EntityId* SendInvitationRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::bnet::protocol::EntityId;
  return target_id_;
}
inline ::bnet::protocol::EntityId* SendInvitationRequest::release_target_id() {
  clear_has_target_id();
  ::bnet::protocol::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}

// optional string invitation_message = 3;
inline bool SendInvitationRequest::has_invitation_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendInvitationRequest::set_has_invitation_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendInvitationRequest::clear_has_invitation_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendInvitationRequest::clear_invitation_message() {
  if (invitation_message_ != &::google::protobuf::internal::kEmptyString) {
    invitation_message_->clear();
  }
  clear_has_invitation_message();
}
inline const ::std::string& SendInvitationRequest::invitation_message() const {
  return *invitation_message_;
}
inline void SendInvitationRequest::set_invitation_message(const ::std::string& value) {
  set_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    invitation_message_ = new ::std::string;
  }
  invitation_message_->assign(value);
}
inline void SendInvitationRequest::set_invitation_message(const char* value) {
  set_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    invitation_message_ = new ::std::string;
  }
  invitation_message_->assign(value);
}
inline void SendInvitationRequest::set_invitation_message(const char* value, size_t size) {
  set_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    invitation_message_ = new ::std::string;
  }
  invitation_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendInvitationRequest::mutable_invitation_message() {
  set_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    invitation_message_ = new ::std::string;
  }
  return invitation_message_;
}
inline ::std::string* SendInvitationRequest::release_invitation_message() {
  clear_has_invitation_message();
  if (invitation_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invitation_message_;
    invitation_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 expiration_time = 4;
inline bool SendInvitationRequest::has_expiration_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendInvitationRequest::set_has_expiration_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendInvitationRequest::clear_has_expiration_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendInvitationRequest::clear_expiration_time() {
  expiration_time_ = GOOGLE_ULONGLONG(0);
  clear_has_expiration_time();
}
inline ::google::protobuf::uint64 SendInvitationRequest::expiration_time() const {
  return expiration_time_;
}
inline void SendInvitationRequest::set_expiration_time(::google::protobuf::uint64 value) {
  set_has_expiration_time();
  expiration_time_ = value;
}

// -------------------------------------------------------------------

// SendInvitationResponse

// optional .bnet.protocol.invitation.Invitation invitation = 2;
inline bool SendInvitationResponse::has_invitation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendInvitationResponse::set_has_invitation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendInvitationResponse::clear_has_invitation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendInvitationResponse::clear_invitation() {
  if (invitation_ != NULL) invitation_->::bnet::protocol::invitation::Invitation::Clear();
  clear_has_invitation();
}
inline const ::bnet::protocol::invitation::Invitation& SendInvitationResponse::invitation() const {
  return invitation_ != NULL ? *invitation_ : *default_instance_->invitation_;
}
inline ::bnet::protocol::invitation::Invitation* SendInvitationResponse::mutable_invitation() {
  set_has_invitation();
  if (invitation_ == NULL) invitation_ = new ::bnet::protocol::invitation::Invitation;
  return invitation_;
}
inline ::bnet::protocol::invitation::Invitation* SendInvitationResponse::release_invitation() {
  clear_has_invitation();
  ::bnet::protocol::invitation::Invitation* temp = invitation_;
  invitation_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GenericRequest

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool GenericRequest::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericRequest::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenericRequest::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenericRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  clear_has_agent_id();
}
inline const ::bnet::protocol::EntityId& GenericRequest::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* GenericRequest::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}
inline ::bnet::protocol::EntityId* GenericRequest::release_agent_id() {
  clear_has_agent_id();
  ::bnet::protocol::EntityId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}

// optional .bnet.protocol.EntityId target_id = 2;
inline bool GenericRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenericRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenericRequest::clear_target_id() {
  if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
  clear_has_target_id();
}
inline const ::bnet::protocol::EntityId& GenericRequest::target_id() const {
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::bnet::protocol::EntityId* GenericRequest::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) target_id_ = new ::bnet::protocol::EntityId;
  return target_id_;
}
inline ::bnet::protocol::EntityId* GenericRequest::release_target_id() {
  clear_has_target_id();
  ::bnet::protocol::EntityId* temp = target_id_;
  target_id_ = NULL;
  return temp;
}

// required fixed64 invitation_id = 3;
inline bool GenericRequest::has_invitation_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericRequest::set_has_invitation_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GenericRequest::clear_has_invitation_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GenericRequest::clear_invitation_id() {
  invitation_id_ = GOOGLE_ULONGLONG(0);
  clear_has_invitation_id();
}
inline ::google::protobuf::uint64 GenericRequest::invitation_id() const {
  return invitation_id_;
}
inline void GenericRequest::set_invitation_id(::google::protobuf::uint64 value) {
  set_has_invitation_id();
  invitation_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace invitation
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lib_2fprotocol_2finvitation_2eproto__INCLUDED
