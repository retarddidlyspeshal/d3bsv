// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Items.proto

#ifndef PROTOBUF_Items_2eproto__INCLUDED
#define PROTOBUF_Items_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "GBHandle.pb.h"
#include "OnlineService.pb.h"
// @@protoc_insertion_point(includes)

namespace D3 {
namespace Items {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Items_2eproto();
void protobuf_AssignDesc_Items_2eproto();
void protobuf_ShutdownFile_Items_2eproto();

class RareItemName;
class Generator;
class EmbeddedGenerator;
class SavedItem;
class AuctionAccountInfo;
class AuctionItem;
class AuctionInfo;
class ItemList;
class Ownership;

// ===================================================================

class RareItemName : public ::google::protobuf::Message {
 public:
  RareItemName();
  virtual ~RareItemName();
  
  RareItemName(const RareItemName& from);
  
  inline RareItemName& operator=(const RareItemName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RareItemName& default_instance();
  
  void Swap(RareItemName* other);
  
  // implements Message ----------------------------------------------
  
  RareItemName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RareItemName& from);
  void MergeFrom(const RareItemName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool item_name_is_prefix = 1;
  inline bool has_item_name_is_prefix() const;
  inline void clear_item_name_is_prefix();
  static const int kItemNameIsPrefixFieldNumber = 1;
  inline bool item_name_is_prefix() const;
  inline void set_item_name_is_prefix(bool value);
  
  // required sfixed32 sno_affix_string_list = 2;
  inline bool has_sno_affix_string_list() const;
  inline void clear_sno_affix_string_list();
  static const int kSnoAffixStringListFieldNumber = 2;
  inline ::google::protobuf::int32 sno_affix_string_list() const;
  inline void set_sno_affix_string_list(::google::protobuf::int32 value);
  
  // required sint32 affix_string_list_index = 3;
  inline bool has_affix_string_list_index() const;
  inline void clear_affix_string_list_index();
  static const int kAffixStringListIndexFieldNumber = 3;
  inline ::google::protobuf::int32 affix_string_list_index() const;
  inline void set_affix_string_list_index(::google::protobuf::int32 value);
  
  // required sint32 item_string_list_index = 4;
  inline bool has_item_string_list_index() const;
  inline void clear_item_string_list_index();
  static const int kItemStringListIndexFieldNumber = 4;
  inline ::google::protobuf::int32 item_string_list_index() const;
  inline void set_item_string_list_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:D3.Items.RareItemName)
 private:
  inline void set_has_item_name_is_prefix();
  inline void clear_has_item_name_is_prefix();
  inline void set_has_sno_affix_string_list();
  inline void clear_has_sno_affix_string_list();
  inline void set_has_affix_string_list_index();
  inline void clear_has_affix_string_list_index();
  inline void set_has_item_string_list_index();
  inline void clear_has_item_string_list_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool item_name_is_prefix_;
  ::google::protobuf::int32 sno_affix_string_list_;
  ::google::protobuf::int32 affix_string_list_index_;
  ::google::protobuf::int32 item_string_list_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Items_2eproto();
  friend void protobuf_AssignDesc_Items_2eproto();
  friend void protobuf_ShutdownFile_Items_2eproto();
  
  void InitAsDefaultInstance();
  static RareItemName* default_instance_;
};
// -------------------------------------------------------------------

class Generator : public ::google::protobuf::Message {
 public:
  Generator();
  virtual ~Generator();
  
  Generator(const Generator& from);
  
  inline Generator& operator=(const Generator& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Generator& default_instance();
  
  void Swap(Generator* other);
  
  // implements Message ----------------------------------------------
  
  Generator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Generator& from);
  void MergeFrom(const Generator& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 seed = 1;
  inline bool has_seed() const;
  inline void clear_seed();
  static const int kSeedFieldNumber = 1;
  inline ::google::protobuf::uint32 seed() const;
  inline void set_seed(::google::protobuf::uint32 value);
  
  // required .D3.GameBalance.Handle gb_handle = 2;
  inline bool has_gb_handle() const;
  inline void clear_gb_handle();
  static const int kGbHandleFieldNumber = 2;
  inline const ::D3::GameBalance::Handle& gb_handle() const;
  inline ::D3::GameBalance::Handle* mutable_gb_handle();
  inline ::D3::GameBalance::Handle* release_gb_handle();
  
  // repeated sfixed32 base_affixes = 3;
  inline int base_affixes_size() const;
  inline void clear_base_affixes();
  static const int kBaseAffixesFieldNumber = 3;
  inline ::google::protobuf::int32 base_affixes(int index) const;
  inline void set_base_affixes(int index, ::google::protobuf::int32 value);
  inline void add_base_affixes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      base_affixes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_base_affixes();
  
  // required .D3.Items.RareItemName rare_item_name = 4;
  inline bool has_rare_item_name() const;
  inline void clear_rare_item_name();
  static const int kRareItemNameFieldNumber = 4;
  inline const ::D3::Items::RareItemName& rare_item_name() const;
  inline ::D3::Items::RareItemName* mutable_rare_item_name();
  inline ::D3::Items::RareItemName* release_rare_item_name();
  
  // required sfixed32 enchant_affix = 5;
  inline bool has_enchant_affix() const;
  inline void clear_enchant_affix();
  static const int kEnchantAffixFieldNumber = 5;
  inline ::google::protobuf::int32 enchant_affix() const;
  inline void set_enchant_affix(::google::protobuf::int32 value);
  
  // required sfixed32 socket_affix = 6;
  inline bool has_socket_affix() const;
  inline void clear_socket_affix();
  static const int kSocketAffixFieldNumber = 6;
  inline ::google::protobuf::int32 socket_affix() const;
  inline void set_socket_affix(::google::protobuf::int32 value);
  
  // required uint32 flags = 7;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 7;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);
  
  // required uint32 durability = 8;
  inline bool has_durability() const;
  inline void clear_durability();
  static const int kDurabilityFieldNumber = 8;
  inline ::google::protobuf::uint32 durability() const;
  inline void set_durability(::google::protobuf::uint32 value);
  
  // required uint64 stack_size = 9;
  inline bool has_stack_size() const;
  inline void clear_stack_size();
  static const int kStackSizeFieldNumber = 9;
  inline ::google::protobuf::uint64 stack_size() const;
  inline void set_stack_size(::google::protobuf::uint64 value);
  
  // required uint32 dye_type = 10;
  inline bool has_dye_type() const;
  inline void clear_dye_type();
  static const int kDyeTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 dye_type() const;
  inline void set_dye_type(::google::protobuf::uint32 value);
  
  // required sint32 item_quality_level = 11;
  inline bool has_item_quality_level() const;
  inline void clear_item_quality_level();
  static const int kItemQualityLevelFieldNumber = 11;
  inline ::google::protobuf::int32 item_quality_level() const;
  inline void set_item_quality_level(::google::protobuf::int32 value);
  
  // required sint32 item_binding_level = 12;
  inline bool has_item_binding_level() const;
  inline void clear_item_binding_level();
  static const int kItemBindingLevelFieldNumber = 12;
  inline ::google::protobuf::int32 item_binding_level() const;
  inline void set_item_binding_level(::google::protobuf::int32 value);
  
  // required uint32 max_durability = 13;
  inline bool has_max_durability() const;
  inline void clear_max_durability();
  static const int kMaxDurabilityFieldNumber = 13;
  inline ::google::protobuf::uint32 max_durability() const;
  inline void set_max_durability(::google::protobuf::uint32 value);
  
  // repeated .D3.Items.EmbeddedGenerator contents = 14;
  inline int contents_size() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 14;
  inline const ::D3::Items::EmbeddedGenerator& contents(int index) const;
  inline ::D3::Items::EmbeddedGenerator* mutable_contents(int index);
  inline ::D3::Items::EmbeddedGenerator* add_contents();
  inline const ::google::protobuf::RepeatedPtrField< ::D3::Items::EmbeddedGenerator >&
      contents() const;
  inline ::google::protobuf::RepeatedPtrField< ::D3::Items::EmbeddedGenerator >*
      mutable_contents();
  
  // optional sfixed32 attuned_skill = 15;
  inline bool has_attuned_skill() const;
  inline void clear_attuned_skill();
  static const int kAttunedSkillFieldNumber = 15;
  inline ::google::protobuf::int32 attuned_skill() const;
  inline void set_attuned_skill(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:D3.Items.Generator)
 private:
  inline void set_has_seed();
  inline void clear_has_seed();
  inline void set_has_gb_handle();
  inline void clear_has_gb_handle();
  inline void set_has_rare_item_name();
  inline void clear_has_rare_item_name();
  inline void set_has_enchant_affix();
  inline void clear_has_enchant_affix();
  inline void set_has_socket_affix();
  inline void clear_has_socket_affix();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_durability();
  inline void clear_has_durability();
  inline void set_has_stack_size();
  inline void clear_has_stack_size();
  inline void set_has_dye_type();
  inline void clear_has_dye_type();
  inline void set_has_item_quality_level();
  inline void clear_has_item_quality_level();
  inline void set_has_item_binding_level();
  inline void clear_has_item_binding_level();
  inline void set_has_max_durability();
  inline void clear_has_max_durability();
  inline void set_has_attuned_skill();
  inline void clear_has_attuned_skill();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::GameBalance::Handle* gb_handle_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > base_affixes_;
  ::google::protobuf::uint32 seed_;
  ::google::protobuf::int32 enchant_affix_;
  ::D3::Items::RareItemName* rare_item_name_;
  ::google::protobuf::int32 socket_affix_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint64 stack_size_;
  ::google::protobuf::uint32 durability_;
  ::google::protobuf::uint32 dye_type_;
  ::google::protobuf::int32 item_quality_level_;
  ::google::protobuf::int32 item_binding_level_;
  ::google::protobuf::RepeatedPtrField< ::D3::Items::EmbeddedGenerator > contents_;
  ::google::protobuf::uint32 max_durability_;
  ::google::protobuf::int32 attuned_skill_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_Items_2eproto();
  friend void protobuf_AssignDesc_Items_2eproto();
  friend void protobuf_ShutdownFile_Items_2eproto();
  
  void InitAsDefaultInstance();
  static Generator* default_instance_;
};
// -------------------------------------------------------------------

class EmbeddedGenerator : public ::google::protobuf::Message {
 public:
  EmbeddedGenerator();
  virtual ~EmbeddedGenerator();
  
  EmbeddedGenerator(const EmbeddedGenerator& from);
  
  inline EmbeddedGenerator& operator=(const EmbeddedGenerator& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbeddedGenerator& default_instance();
  
  void Swap(EmbeddedGenerator* other);
  
  // implements Message ----------------------------------------------
  
  EmbeddedGenerator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmbeddedGenerator& from);
  void MergeFrom(const EmbeddedGenerator& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.OnlineService.ItemId id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::D3::OnlineService::ItemId& id() const;
  inline ::D3::OnlineService::ItemId* mutable_id();
  inline ::D3::OnlineService::ItemId* release_id();
  
  // required .D3.Items.Generator generator = 2;
  inline bool has_generator() const;
  inline void clear_generator();
  static const int kGeneratorFieldNumber = 2;
  inline const ::D3::Items::Generator& generator() const;
  inline ::D3::Items::Generator* mutable_generator();
  inline ::D3::Items::Generator* release_generator();
  
  // @@protoc_insertion_point(class_scope:D3.Items.EmbeddedGenerator)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_generator();
  inline void clear_has_generator();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::OnlineService::ItemId* id_;
  ::D3::Items::Generator* generator_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Items_2eproto();
  friend void protobuf_AssignDesc_Items_2eproto();
  friend void protobuf_ShutdownFile_Items_2eproto();
  
  void InitAsDefaultInstance();
  static EmbeddedGenerator* default_instance_;
};
// -------------------------------------------------------------------

class SavedItem : public ::google::protobuf::Message {
 public:
  SavedItem();
  virtual ~SavedItem();
  
  SavedItem(const SavedItem& from);
  
  inline SavedItem& operator=(const SavedItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SavedItem& default_instance();
  
  void Swap(SavedItem* other);
  
  // implements Message ----------------------------------------------
  
  SavedItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SavedItem& from);
  void MergeFrom(const SavedItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.OnlineService.ItemId id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::D3::OnlineService::ItemId& id() const;
  inline ::D3::OnlineService::ItemId* mutable_id();
  inline ::D3::OnlineService::ItemId* release_id();
  
  // optional .D3.OnlineService.EntityId owner_entity_id = 2;
  inline bool has_owner_entity_id() const;
  inline void clear_owner_entity_id();
  static const int kOwnerEntityIdFieldNumber = 2;
  inline const ::D3::OnlineService::EntityId& owner_entity_id() const;
  inline ::D3::OnlineService::EntityId* mutable_owner_entity_id();
  inline ::D3::OnlineService::EntityId* release_owner_entity_id();
  
  // optional .D3.OnlineService.ItemId socket_id = 3;
  inline bool has_socket_id() const;
  inline void clear_socket_id();
  static const int kSocketIdFieldNumber = 3;
  inline const ::D3::OnlineService::ItemId& socket_id() const;
  inline ::D3::OnlineService::ItemId* mutable_socket_id();
  inline ::D3::OnlineService::ItemId* release_socket_id();
  
  // required sint32 hireling_class = 4;
  inline bool has_hireling_class() const;
  inline void clear_hireling_class();
  static const int kHirelingClassFieldNumber = 4;
  inline ::google::protobuf::int32 hireling_class() const;
  inline void set_hireling_class(::google::protobuf::int32 value);
  
  // required sint32 item_slot = 5;
  inline bool has_item_slot() const;
  inline void clear_item_slot();
  static const int kItemSlotFieldNumber = 5;
  inline ::google::protobuf::int32 item_slot() const;
  inline void set_item_slot(::google::protobuf::int32 value);
  
  // required sint32 square_index = 6;
  inline bool has_square_index() const;
  inline void clear_square_index();
  static const int kSquareIndexFieldNumber = 6;
  inline ::google::protobuf::int32 square_index() const;
  inline void set_square_index(::google::protobuf::int32 value);
  
  // required uint32 used_socket_count = 7;
  inline bool has_used_socket_count() const;
  inline void clear_used_socket_count();
  static const int kUsedSocketCountFieldNumber = 7;
  inline ::google::protobuf::uint32 used_socket_count() const;
  inline void set_used_socket_count(::google::protobuf::uint32 value);
  
  // optional .D3.Items.Generator generator = 8;
  inline bool has_generator() const;
  inline void clear_generator();
  static const int kGeneratorFieldNumber = 8;
  inline const ::D3::Items::Generator& generator() const;
  inline ::D3::Items::Generator* mutable_generator();
  inline ::D3::Items::Generator* release_generator();
  
  // @@protoc_insertion_point(class_scope:D3.Items.SavedItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_owner_entity_id();
  inline void clear_has_owner_entity_id();
  inline void set_has_socket_id();
  inline void clear_has_socket_id();
  inline void set_has_hireling_class();
  inline void clear_has_hireling_class();
  inline void set_has_item_slot();
  inline void clear_has_item_slot();
  inline void set_has_square_index();
  inline void clear_has_square_index();
  inline void set_has_used_socket_count();
  inline void clear_has_used_socket_count();
  inline void set_has_generator();
  inline void clear_has_generator();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::OnlineService::ItemId* id_;
  ::D3::OnlineService::EntityId* owner_entity_id_;
  ::D3::OnlineService::ItemId* socket_id_;
  ::google::protobuf::int32 hireling_class_;
  ::google::protobuf::int32 item_slot_;
  ::google::protobuf::int32 square_index_;
  ::google::protobuf::uint32 used_socket_count_;
  ::D3::Items::Generator* generator_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_Items_2eproto();
  friend void protobuf_AssignDesc_Items_2eproto();
  friend void protobuf_ShutdownFile_Items_2eproto();
  
  void InitAsDefaultInstance();
  static SavedItem* default_instance_;
};
// -------------------------------------------------------------------

class AuctionAccountInfo : public ::google::protobuf::Message {
 public:
  AuctionAccountInfo();
  virtual ~AuctionAccountInfo();
  
  AuctionAccountInfo(const AuctionAccountInfo& from);
  
  inline AuctionAccountInfo& operator=(const AuctionAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionAccountInfo& default_instance();
  
  void Swap(AuctionAccountInfo* other);
  
  // implements Message ----------------------------------------------
  
  AuctionAccountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionAccountInfo& from);
  void MergeFrom(const AuctionAccountInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.OnlineService.EntityId account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline const ::D3::OnlineService::EntityId& account_id() const;
  inline ::D3::OnlineService::EntityId* mutable_account_id();
  inline ::D3::OnlineService::EntityId* release_account_id();
  
  // required .D3.OnlineService.EntityId escrow_id = 2;
  inline bool has_escrow_id() const;
  inline void clear_escrow_id();
  static const int kEscrowIdFieldNumber = 2;
  inline const ::D3::OnlineService::EntityId& escrow_id() const;
  inline ::D3::OnlineService::EntityId* mutable_escrow_id();
  inline ::D3::OnlineService::EntityId* release_escrow_id();
  
  // @@protoc_insertion_point(class_scope:D3.Items.AuctionAccountInfo)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_escrow_id();
  inline void clear_has_escrow_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::OnlineService::EntityId* account_id_;
  ::D3::OnlineService::EntityId* escrow_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Items_2eproto();
  friend void protobuf_AssignDesc_Items_2eproto();
  friend void protobuf_ShutdownFile_Items_2eproto();
  
  void InitAsDefaultInstance();
  static AuctionAccountInfo* default_instance_;
};
// -------------------------------------------------------------------

class AuctionItem : public ::google::protobuf::Message {
 public:
  AuctionItem();
  virtual ~AuctionItem();
  
  AuctionItem(const AuctionItem& from);
  
  inline AuctionItem& operator=(const AuctionItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionItem& default_instance();
  
  void Swap(AuctionItem* other);
  
  // implements Message ----------------------------------------------
  
  AuctionItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionItem& from);
  void MergeFrom(const AuctionItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.OnlineService.ItemId id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::D3::OnlineService::ItemId& id() const;
  inline ::D3::OnlineService::ItemId* mutable_id();
  inline ::D3::OnlineService::ItemId* release_id();
  
  // required .D3.Items.Generator generator = 2;
  inline bool has_generator() const;
  inline void clear_generator();
  static const int kGeneratorFieldNumber = 2;
  inline const ::D3::Items::Generator& generator() const;
  inline ::D3::Items::Generator* mutable_generator();
  inline ::D3::Items::Generator* release_generator();
  
  // @@protoc_insertion_point(class_scope:D3.Items.AuctionItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_generator();
  inline void clear_has_generator();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::OnlineService::ItemId* id_;
  ::D3::Items::Generator* generator_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Items_2eproto();
  friend void protobuf_AssignDesc_Items_2eproto();
  friend void protobuf_ShutdownFile_Items_2eproto();
  
  void InitAsDefaultInstance();
  static AuctionItem* default_instance_;
};
// -------------------------------------------------------------------

class AuctionInfo : public ::google::protobuf::Message {
 public:
  AuctionInfo();
  virtual ~AuctionInfo();
  
  AuctionInfo(const AuctionInfo& from);
  
  inline AuctionInfo& operator=(const AuctionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuctionInfo& default_instance();
  
  void Swap(AuctionInfo* other);
  
  // implements Message ----------------------------------------------
  
  AuctionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuctionInfo& from);
  void MergeFrom(const AuctionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.OnlineService.ItemId id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::D3::OnlineService::ItemId& id() const;
  inline ::D3::OnlineService::ItemId* mutable_id();
  inline ::D3::OnlineService::ItemId* release_id();
  
  // optional .D3.Items.Ownership owner = 2;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 2;
  inline const ::D3::Items::Ownership& owner() const;
  inline ::D3::Items::Ownership* mutable_owner();
  inline ::D3::Items::Ownership* release_owner();
  
  // @@protoc_insertion_point(class_scope:D3.Items.AuctionInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_owner();
  inline void clear_has_owner();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::OnlineService::ItemId* id_;
  ::D3::Items::Ownership* owner_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Items_2eproto();
  friend void protobuf_AssignDesc_Items_2eproto();
  friend void protobuf_ShutdownFile_Items_2eproto();
  
  void InitAsDefaultInstance();
  static AuctionInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemList : public ::google::protobuf::Message {
 public:
  ItemList();
  virtual ~ItemList();
  
  ItemList(const ItemList& from);
  
  inline ItemList& operator=(const ItemList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemList& default_instance();
  
  void Swap(ItemList* other);
  
  // implements Message ----------------------------------------------
  
  ItemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemList& from);
  void MergeFrom(const ItemList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .D3.Items.SavedItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::D3::Items::SavedItem& items(int index) const;
  inline ::D3::Items::SavedItem* mutable_items(int index);
  inline ::D3::Items::SavedItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::D3::Items::SavedItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::D3::Items::SavedItem >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:D3.Items.ItemList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::D3::Items::SavedItem > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Items_2eproto();
  friend void protobuf_AssignDesc_Items_2eproto();
  friend void protobuf_ShutdownFile_Items_2eproto();
  
  void InitAsDefaultInstance();
  static ItemList* default_instance_;
};
// -------------------------------------------------------------------

class Ownership : public ::google::protobuf::Message {
 public:
  Ownership();
  virtual ~Ownership();
  
  Ownership(const Ownership& from);
  
  inline Ownership& operator=(const Ownership& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ownership& default_instance();
  
  void Swap(Ownership* other);
  
  // implements Message ----------------------------------------------
  
  Ownership* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ownership& from);
  void MergeFrom(const Ownership& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .D3.OnlineService.EntityId owner_entity_id = 1;
  inline bool has_owner_entity_id() const;
  inline void clear_owner_entity_id();
  static const int kOwnerEntityIdFieldNumber = 1;
  inline const ::D3::OnlineService::EntityId& owner_entity_id() const;
  inline ::D3::OnlineService::EntityId* mutable_owner_entity_id();
  inline ::D3::OnlineService::EntityId* release_owner_entity_id();
  
  // optional sint64 delete_time = 2;
  inline bool has_delete_time() const;
  inline void clear_delete_time();
  static const int kDeleteTimeFieldNumber = 2;
  inline ::google::protobuf::int64 delete_time() const;
  inline void set_delete_time(::google::protobuf::int64 value);
  
  // optional .D3.OnlineService.EntityId escrow_id = 3;
  inline bool has_escrow_id() const;
  inline void clear_escrow_id();
  static const int kEscrowIdFieldNumber = 3;
  inline const ::D3::OnlineService::EntityId& escrow_id() const;
  inline ::D3::OnlineService::EntityId* mutable_escrow_id();
  inline ::D3::OnlineService::EntityId* release_escrow_id();
  
  // @@protoc_insertion_point(class_scope:D3.Items.Ownership)
 private:
  inline void set_has_owner_entity_id();
  inline void clear_has_owner_entity_id();
  inline void set_has_delete_time();
  inline void clear_has_delete_time();
  inline void set_has_escrow_id();
  inline void clear_has_escrow_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::D3::OnlineService::EntityId* owner_entity_id_;
  ::google::protobuf::int64 delete_time_;
  ::D3::OnlineService::EntityId* escrow_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Items_2eproto();
  friend void protobuf_AssignDesc_Items_2eproto();
  friend void protobuf_ShutdownFile_Items_2eproto();
  
  void InitAsDefaultInstance();
  static Ownership* default_instance_;
};
// ===================================================================


// ===================================================================

// RareItemName

// required bool item_name_is_prefix = 1;
inline bool RareItemName::has_item_name_is_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RareItemName::set_has_item_name_is_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RareItemName::clear_has_item_name_is_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RareItemName::clear_item_name_is_prefix() {
  item_name_is_prefix_ = false;
  clear_has_item_name_is_prefix();
}
inline bool RareItemName::item_name_is_prefix() const {
  return item_name_is_prefix_;
}
inline void RareItemName::set_item_name_is_prefix(bool value) {
  set_has_item_name_is_prefix();
  item_name_is_prefix_ = value;
}

// required sfixed32 sno_affix_string_list = 2;
inline bool RareItemName::has_sno_affix_string_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RareItemName::set_has_sno_affix_string_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RareItemName::clear_has_sno_affix_string_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RareItemName::clear_sno_affix_string_list() {
  sno_affix_string_list_ = 0;
  clear_has_sno_affix_string_list();
}
inline ::google::protobuf::int32 RareItemName::sno_affix_string_list() const {
  return sno_affix_string_list_;
}
inline void RareItemName::set_sno_affix_string_list(::google::protobuf::int32 value) {
  set_has_sno_affix_string_list();
  sno_affix_string_list_ = value;
}

// required sint32 affix_string_list_index = 3;
inline bool RareItemName::has_affix_string_list_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RareItemName::set_has_affix_string_list_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RareItemName::clear_has_affix_string_list_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RareItemName::clear_affix_string_list_index() {
  affix_string_list_index_ = 0;
  clear_has_affix_string_list_index();
}
inline ::google::protobuf::int32 RareItemName::affix_string_list_index() const {
  return affix_string_list_index_;
}
inline void RareItemName::set_affix_string_list_index(::google::protobuf::int32 value) {
  set_has_affix_string_list_index();
  affix_string_list_index_ = value;
}

// required sint32 item_string_list_index = 4;
inline bool RareItemName::has_item_string_list_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RareItemName::set_has_item_string_list_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RareItemName::clear_has_item_string_list_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RareItemName::clear_item_string_list_index() {
  item_string_list_index_ = 0;
  clear_has_item_string_list_index();
}
inline ::google::protobuf::int32 RareItemName::item_string_list_index() const {
  return item_string_list_index_;
}
inline void RareItemName::set_item_string_list_index(::google::protobuf::int32 value) {
  set_has_item_string_list_index();
  item_string_list_index_ = value;
}

// -------------------------------------------------------------------

// Generator

// required uint32 seed = 1;
inline bool Generator::has_seed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Generator::set_has_seed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Generator::clear_has_seed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Generator::clear_seed() {
  seed_ = 0u;
  clear_has_seed();
}
inline ::google::protobuf::uint32 Generator::seed() const {
  return seed_;
}
inline void Generator::set_seed(::google::protobuf::uint32 value) {
  set_has_seed();
  seed_ = value;
}

// required .D3.GameBalance.Handle gb_handle = 2;
inline bool Generator::has_gb_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Generator::set_has_gb_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Generator::clear_has_gb_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Generator::clear_gb_handle() {
  if (gb_handle_ != NULL) gb_handle_->::D3::GameBalance::Handle::Clear();
  clear_has_gb_handle();
}
inline const ::D3::GameBalance::Handle& Generator::gb_handle() const {
  return gb_handle_ != NULL ? *gb_handle_ : *default_instance_->gb_handle_;
}
inline ::D3::GameBalance::Handle* Generator::mutable_gb_handle() {
  set_has_gb_handle();
  if (gb_handle_ == NULL) gb_handle_ = new ::D3::GameBalance::Handle;
  return gb_handle_;
}
inline ::D3::GameBalance::Handle* Generator::release_gb_handle() {
  clear_has_gb_handle();
  ::D3::GameBalance::Handle* temp = gb_handle_;
  gb_handle_ = NULL;
  return temp;
}

// repeated sfixed32 base_affixes = 3;
inline int Generator::base_affixes_size() const {
  return base_affixes_.size();
}
inline void Generator::clear_base_affixes() {
  base_affixes_.Clear();
}
inline ::google::protobuf::int32 Generator::base_affixes(int index) const {
  return base_affixes_.Get(index);
}
inline void Generator::set_base_affixes(int index, ::google::protobuf::int32 value) {
  base_affixes_.Set(index, value);
}
inline void Generator::add_base_affixes(::google::protobuf::int32 value) {
  base_affixes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Generator::base_affixes() const {
  return base_affixes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Generator::mutable_base_affixes() {
  return &base_affixes_;
}

// required .D3.Items.RareItemName rare_item_name = 4;
inline bool Generator::has_rare_item_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Generator::set_has_rare_item_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Generator::clear_has_rare_item_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Generator::clear_rare_item_name() {
  if (rare_item_name_ != NULL) rare_item_name_->::D3::Items::RareItemName::Clear();
  clear_has_rare_item_name();
}
inline const ::D3::Items::RareItemName& Generator::rare_item_name() const {
  return rare_item_name_ != NULL ? *rare_item_name_ : *default_instance_->rare_item_name_;
}
inline ::D3::Items::RareItemName* Generator::mutable_rare_item_name() {
  set_has_rare_item_name();
  if (rare_item_name_ == NULL) rare_item_name_ = new ::D3::Items::RareItemName;
  return rare_item_name_;
}
inline ::D3::Items::RareItemName* Generator::release_rare_item_name() {
  clear_has_rare_item_name();
  ::D3::Items::RareItemName* temp = rare_item_name_;
  rare_item_name_ = NULL;
  return temp;
}

// required sfixed32 enchant_affix = 5;
inline bool Generator::has_enchant_affix() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Generator::set_has_enchant_affix() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Generator::clear_has_enchant_affix() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Generator::clear_enchant_affix() {
  enchant_affix_ = 0;
  clear_has_enchant_affix();
}
inline ::google::protobuf::int32 Generator::enchant_affix() const {
  return enchant_affix_;
}
inline void Generator::set_enchant_affix(::google::protobuf::int32 value) {
  set_has_enchant_affix();
  enchant_affix_ = value;
}

// required sfixed32 socket_affix = 6;
inline bool Generator::has_socket_affix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Generator::set_has_socket_affix() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Generator::clear_has_socket_affix() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Generator::clear_socket_affix() {
  socket_affix_ = 0;
  clear_has_socket_affix();
}
inline ::google::protobuf::int32 Generator::socket_affix() const {
  return socket_affix_;
}
inline void Generator::set_socket_affix(::google::protobuf::int32 value) {
  set_has_socket_affix();
  socket_affix_ = value;
}

// required uint32 flags = 7;
inline bool Generator::has_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Generator::set_has_flags() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Generator::clear_has_flags() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Generator::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 Generator::flags() const {
  return flags_;
}
inline void Generator::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// required uint32 durability = 8;
inline bool Generator::has_durability() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Generator::set_has_durability() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Generator::clear_has_durability() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Generator::clear_durability() {
  durability_ = 0u;
  clear_has_durability();
}
inline ::google::protobuf::uint32 Generator::durability() const {
  return durability_;
}
inline void Generator::set_durability(::google::protobuf::uint32 value) {
  set_has_durability();
  durability_ = value;
}

// required uint64 stack_size = 9;
inline bool Generator::has_stack_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Generator::set_has_stack_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Generator::clear_has_stack_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Generator::clear_stack_size() {
  stack_size_ = GOOGLE_ULONGLONG(0);
  clear_has_stack_size();
}
inline ::google::protobuf::uint64 Generator::stack_size() const {
  return stack_size_;
}
inline void Generator::set_stack_size(::google::protobuf::uint64 value) {
  set_has_stack_size();
  stack_size_ = value;
}

// required uint32 dye_type = 10;
inline bool Generator::has_dye_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Generator::set_has_dye_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Generator::clear_has_dye_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Generator::clear_dye_type() {
  dye_type_ = 0u;
  clear_has_dye_type();
}
inline ::google::protobuf::uint32 Generator::dye_type() const {
  return dye_type_;
}
inline void Generator::set_dye_type(::google::protobuf::uint32 value) {
  set_has_dye_type();
  dye_type_ = value;
}

// required sint32 item_quality_level = 11;
inline bool Generator::has_item_quality_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Generator::set_has_item_quality_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Generator::clear_has_item_quality_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Generator::clear_item_quality_level() {
  item_quality_level_ = 0;
  clear_has_item_quality_level();
}
inline ::google::protobuf::int32 Generator::item_quality_level() const {
  return item_quality_level_;
}
inline void Generator::set_item_quality_level(::google::protobuf::int32 value) {
  set_has_item_quality_level();
  item_quality_level_ = value;
}

// required sint32 item_binding_level = 12;
inline bool Generator::has_item_binding_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Generator::set_has_item_binding_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Generator::clear_has_item_binding_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Generator::clear_item_binding_level() {
  item_binding_level_ = 0;
  clear_has_item_binding_level();
}
inline ::google::protobuf::int32 Generator::item_binding_level() const {
  return item_binding_level_;
}
inline void Generator::set_item_binding_level(::google::protobuf::int32 value) {
  set_has_item_binding_level();
  item_binding_level_ = value;
}

// required uint32 max_durability = 13;
inline bool Generator::has_max_durability() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Generator::set_has_max_durability() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Generator::clear_has_max_durability() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Generator::clear_max_durability() {
  max_durability_ = 0u;
  clear_has_max_durability();
}
inline ::google::protobuf::uint32 Generator::max_durability() const {
  return max_durability_;
}
inline void Generator::set_max_durability(::google::protobuf::uint32 value) {
  set_has_max_durability();
  max_durability_ = value;
}

// repeated .D3.Items.EmbeddedGenerator contents = 14;
inline int Generator::contents_size() const {
  return contents_.size();
}
inline void Generator::clear_contents() {
  contents_.Clear();
}
inline const ::D3::Items::EmbeddedGenerator& Generator::contents(int index) const {
  return contents_.Get(index);
}
inline ::D3::Items::EmbeddedGenerator* Generator::mutable_contents(int index) {
  return contents_.Mutable(index);
}
inline ::D3::Items::EmbeddedGenerator* Generator::add_contents() {
  return contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::D3::Items::EmbeddedGenerator >&
Generator::contents() const {
  return contents_;
}
inline ::google::protobuf::RepeatedPtrField< ::D3::Items::EmbeddedGenerator >*
Generator::mutable_contents() {
  return &contents_;
}

// optional sfixed32 attuned_skill = 15;
inline bool Generator::has_attuned_skill() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Generator::set_has_attuned_skill() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Generator::clear_has_attuned_skill() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Generator::clear_attuned_skill() {
  attuned_skill_ = 0;
  clear_has_attuned_skill();
}
inline ::google::protobuf::int32 Generator::attuned_skill() const {
  return attuned_skill_;
}
inline void Generator::set_attuned_skill(::google::protobuf::int32 value) {
  set_has_attuned_skill();
  attuned_skill_ = value;
}

// -------------------------------------------------------------------

// EmbeddedGenerator

// required .D3.OnlineService.ItemId id = 1;
inline bool EmbeddedGenerator::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbeddedGenerator::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbeddedGenerator::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbeddedGenerator::clear_id() {
  if (id_ != NULL) id_->::D3::OnlineService::ItemId::Clear();
  clear_has_id();
}
inline const ::D3::OnlineService::ItemId& EmbeddedGenerator::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::D3::OnlineService::ItemId* EmbeddedGenerator::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::D3::OnlineService::ItemId;
  return id_;
}
inline ::D3::OnlineService::ItemId* EmbeddedGenerator::release_id() {
  clear_has_id();
  ::D3::OnlineService::ItemId* temp = id_;
  id_ = NULL;
  return temp;
}

// required .D3.Items.Generator generator = 2;
inline bool EmbeddedGenerator::has_generator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbeddedGenerator::set_has_generator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbeddedGenerator::clear_has_generator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbeddedGenerator::clear_generator() {
  if (generator_ != NULL) generator_->::D3::Items::Generator::Clear();
  clear_has_generator();
}
inline const ::D3::Items::Generator& EmbeddedGenerator::generator() const {
  return generator_ != NULL ? *generator_ : *default_instance_->generator_;
}
inline ::D3::Items::Generator* EmbeddedGenerator::mutable_generator() {
  set_has_generator();
  if (generator_ == NULL) generator_ = new ::D3::Items::Generator;
  return generator_;
}
inline ::D3::Items::Generator* EmbeddedGenerator::release_generator() {
  clear_has_generator();
  ::D3::Items::Generator* temp = generator_;
  generator_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SavedItem

// required .D3.OnlineService.ItemId id = 1;
inline bool SavedItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SavedItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SavedItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SavedItem::clear_id() {
  if (id_ != NULL) id_->::D3::OnlineService::ItemId::Clear();
  clear_has_id();
}
inline const ::D3::OnlineService::ItemId& SavedItem::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::D3::OnlineService::ItemId* SavedItem::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::D3::OnlineService::ItemId;
  return id_;
}
inline ::D3::OnlineService::ItemId* SavedItem::release_id() {
  clear_has_id();
  ::D3::OnlineService::ItemId* temp = id_;
  id_ = NULL;
  return temp;
}

// optional .D3.OnlineService.EntityId owner_entity_id = 2;
inline bool SavedItem::has_owner_entity_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SavedItem::set_has_owner_entity_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SavedItem::clear_has_owner_entity_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SavedItem::clear_owner_entity_id() {
  if (owner_entity_id_ != NULL) owner_entity_id_->::D3::OnlineService::EntityId::Clear();
  clear_has_owner_entity_id();
}
inline const ::D3::OnlineService::EntityId& SavedItem::owner_entity_id() const {
  return owner_entity_id_ != NULL ? *owner_entity_id_ : *default_instance_->owner_entity_id_;
}
inline ::D3::OnlineService::EntityId* SavedItem::mutable_owner_entity_id() {
  set_has_owner_entity_id();
  if (owner_entity_id_ == NULL) owner_entity_id_ = new ::D3::OnlineService::EntityId;
  return owner_entity_id_;
}
inline ::D3::OnlineService::EntityId* SavedItem::release_owner_entity_id() {
  clear_has_owner_entity_id();
  ::D3::OnlineService::EntityId* temp = owner_entity_id_;
  owner_entity_id_ = NULL;
  return temp;
}

// optional .D3.OnlineService.ItemId socket_id = 3;
inline bool SavedItem::has_socket_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SavedItem::set_has_socket_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SavedItem::clear_has_socket_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SavedItem::clear_socket_id() {
  if (socket_id_ != NULL) socket_id_->::D3::OnlineService::ItemId::Clear();
  clear_has_socket_id();
}
inline const ::D3::OnlineService::ItemId& SavedItem::socket_id() const {
  return socket_id_ != NULL ? *socket_id_ : *default_instance_->socket_id_;
}
inline ::D3::OnlineService::ItemId* SavedItem::mutable_socket_id() {
  set_has_socket_id();
  if (socket_id_ == NULL) socket_id_ = new ::D3::OnlineService::ItemId;
  return socket_id_;
}
inline ::D3::OnlineService::ItemId* SavedItem::release_socket_id() {
  clear_has_socket_id();
  ::D3::OnlineService::ItemId* temp = socket_id_;
  socket_id_ = NULL;
  return temp;
}

// required sint32 hireling_class = 4;
inline bool SavedItem::has_hireling_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SavedItem::set_has_hireling_class() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SavedItem::clear_has_hireling_class() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SavedItem::clear_hireling_class() {
  hireling_class_ = 0;
  clear_has_hireling_class();
}
inline ::google::protobuf::int32 SavedItem::hireling_class() const {
  return hireling_class_;
}
inline void SavedItem::set_hireling_class(::google::protobuf::int32 value) {
  set_has_hireling_class();
  hireling_class_ = value;
}

// required sint32 item_slot = 5;
inline bool SavedItem::has_item_slot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SavedItem::set_has_item_slot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SavedItem::clear_has_item_slot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SavedItem::clear_item_slot() {
  item_slot_ = 0;
  clear_has_item_slot();
}
inline ::google::protobuf::int32 SavedItem::item_slot() const {
  return item_slot_;
}
inline void SavedItem::set_item_slot(::google::protobuf::int32 value) {
  set_has_item_slot();
  item_slot_ = value;
}

// required sint32 square_index = 6;
inline bool SavedItem::has_square_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SavedItem::set_has_square_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SavedItem::clear_has_square_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SavedItem::clear_square_index() {
  square_index_ = 0;
  clear_has_square_index();
}
inline ::google::protobuf::int32 SavedItem::square_index() const {
  return square_index_;
}
inline void SavedItem::set_square_index(::google::protobuf::int32 value) {
  set_has_square_index();
  square_index_ = value;
}

// required uint32 used_socket_count = 7;
inline bool SavedItem::has_used_socket_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SavedItem::set_has_used_socket_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SavedItem::clear_has_used_socket_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SavedItem::clear_used_socket_count() {
  used_socket_count_ = 0u;
  clear_has_used_socket_count();
}
inline ::google::protobuf::uint32 SavedItem::used_socket_count() const {
  return used_socket_count_;
}
inline void SavedItem::set_used_socket_count(::google::protobuf::uint32 value) {
  set_has_used_socket_count();
  used_socket_count_ = value;
}

// optional .D3.Items.Generator generator = 8;
inline bool SavedItem::has_generator() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SavedItem::set_has_generator() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SavedItem::clear_has_generator() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SavedItem::clear_generator() {
  if (generator_ != NULL) generator_->::D3::Items::Generator::Clear();
  clear_has_generator();
}
inline const ::D3::Items::Generator& SavedItem::generator() const {
  return generator_ != NULL ? *generator_ : *default_instance_->generator_;
}
inline ::D3::Items::Generator* SavedItem::mutable_generator() {
  set_has_generator();
  if (generator_ == NULL) generator_ = new ::D3::Items::Generator;
  return generator_;
}
inline ::D3::Items::Generator* SavedItem::release_generator() {
  clear_has_generator();
  ::D3::Items::Generator* temp = generator_;
  generator_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AuctionAccountInfo

// required .D3.OnlineService.EntityId account_id = 1;
inline bool AuctionAccountInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionAccountInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionAccountInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionAccountInfo::clear_account_id() {
  if (account_id_ != NULL) account_id_->::D3::OnlineService::EntityId::Clear();
  clear_has_account_id();
}
inline const ::D3::OnlineService::EntityId& AuctionAccountInfo::account_id() const {
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::D3::OnlineService::EntityId* AuctionAccountInfo::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::D3::OnlineService::EntityId;
  return account_id_;
}
inline ::D3::OnlineService::EntityId* AuctionAccountInfo::release_account_id() {
  clear_has_account_id();
  ::D3::OnlineService::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}

// required .D3.OnlineService.EntityId escrow_id = 2;
inline bool AuctionAccountInfo::has_escrow_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionAccountInfo::set_has_escrow_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionAccountInfo::clear_has_escrow_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionAccountInfo::clear_escrow_id() {
  if (escrow_id_ != NULL) escrow_id_->::D3::OnlineService::EntityId::Clear();
  clear_has_escrow_id();
}
inline const ::D3::OnlineService::EntityId& AuctionAccountInfo::escrow_id() const {
  return escrow_id_ != NULL ? *escrow_id_ : *default_instance_->escrow_id_;
}
inline ::D3::OnlineService::EntityId* AuctionAccountInfo::mutable_escrow_id() {
  set_has_escrow_id();
  if (escrow_id_ == NULL) escrow_id_ = new ::D3::OnlineService::EntityId;
  return escrow_id_;
}
inline ::D3::OnlineService::EntityId* AuctionAccountInfo::release_escrow_id() {
  clear_has_escrow_id();
  ::D3::OnlineService::EntityId* temp = escrow_id_;
  escrow_id_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AuctionItem

// required .D3.OnlineService.ItemId id = 1;
inline bool AuctionItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionItem::clear_id() {
  if (id_ != NULL) id_->::D3::OnlineService::ItemId::Clear();
  clear_has_id();
}
inline const ::D3::OnlineService::ItemId& AuctionItem::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::D3::OnlineService::ItemId* AuctionItem::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::D3::OnlineService::ItemId;
  return id_;
}
inline ::D3::OnlineService::ItemId* AuctionItem::release_id() {
  clear_has_id();
  ::D3::OnlineService::ItemId* temp = id_;
  id_ = NULL;
  return temp;
}

// required .D3.Items.Generator generator = 2;
inline bool AuctionItem::has_generator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionItem::set_has_generator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionItem::clear_has_generator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionItem::clear_generator() {
  if (generator_ != NULL) generator_->::D3::Items::Generator::Clear();
  clear_has_generator();
}
inline const ::D3::Items::Generator& AuctionItem::generator() const {
  return generator_ != NULL ? *generator_ : *default_instance_->generator_;
}
inline ::D3::Items::Generator* AuctionItem::mutable_generator() {
  set_has_generator();
  if (generator_ == NULL) generator_ = new ::D3::Items::Generator;
  return generator_;
}
inline ::D3::Items::Generator* AuctionItem::release_generator() {
  clear_has_generator();
  ::D3::Items::Generator* temp = generator_;
  generator_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AuctionInfo

// required .D3.OnlineService.ItemId id = 1;
inline bool AuctionInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuctionInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuctionInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuctionInfo::clear_id() {
  if (id_ != NULL) id_->::D3::OnlineService::ItemId::Clear();
  clear_has_id();
}
inline const ::D3::OnlineService::ItemId& AuctionInfo::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::D3::OnlineService::ItemId* AuctionInfo::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::D3::OnlineService::ItemId;
  return id_;
}
inline ::D3::OnlineService::ItemId* AuctionInfo::release_id() {
  clear_has_id();
  ::D3::OnlineService::ItemId* temp = id_;
  id_ = NULL;
  return temp;
}

// optional .D3.Items.Ownership owner = 2;
inline bool AuctionInfo::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuctionInfo::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuctionInfo::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuctionInfo::clear_owner() {
  if (owner_ != NULL) owner_->::D3::Items::Ownership::Clear();
  clear_has_owner();
}
inline const ::D3::Items::Ownership& AuctionInfo::owner() const {
  return owner_ != NULL ? *owner_ : *default_instance_->owner_;
}
inline ::D3::Items::Ownership* AuctionInfo::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) owner_ = new ::D3::Items::Ownership;
  return owner_;
}
inline ::D3::Items::Ownership* AuctionInfo::release_owner() {
  clear_has_owner();
  ::D3::Items::Ownership* temp = owner_;
  owner_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ItemList

// repeated .D3.Items.SavedItem items = 1;
inline int ItemList::items_size() const {
  return items_.size();
}
inline void ItemList::clear_items() {
  items_.Clear();
}
inline const ::D3::Items::SavedItem& ItemList::items(int index) const {
  return items_.Get(index);
}
inline ::D3::Items::SavedItem* ItemList::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::D3::Items::SavedItem* ItemList::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::D3::Items::SavedItem >&
ItemList::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::D3::Items::SavedItem >*
ItemList::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// Ownership

// required .D3.OnlineService.EntityId owner_entity_id = 1;
inline bool Ownership::has_owner_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ownership::set_has_owner_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ownership::clear_has_owner_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ownership::clear_owner_entity_id() {
  if (owner_entity_id_ != NULL) owner_entity_id_->::D3::OnlineService::EntityId::Clear();
  clear_has_owner_entity_id();
}
inline const ::D3::OnlineService::EntityId& Ownership::owner_entity_id() const {
  return owner_entity_id_ != NULL ? *owner_entity_id_ : *default_instance_->owner_entity_id_;
}
inline ::D3::OnlineService::EntityId* Ownership::mutable_owner_entity_id() {
  set_has_owner_entity_id();
  if (owner_entity_id_ == NULL) owner_entity_id_ = new ::D3::OnlineService::EntityId;
  return owner_entity_id_;
}
inline ::D3::OnlineService::EntityId* Ownership::release_owner_entity_id() {
  clear_has_owner_entity_id();
  ::D3::OnlineService::EntityId* temp = owner_entity_id_;
  owner_entity_id_ = NULL;
  return temp;
}

// optional sint64 delete_time = 2;
inline bool Ownership::has_delete_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ownership::set_has_delete_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ownership::clear_has_delete_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ownership::clear_delete_time() {
  delete_time_ = GOOGLE_LONGLONG(0);
  clear_has_delete_time();
}
inline ::google::protobuf::int64 Ownership::delete_time() const {
  return delete_time_;
}
inline void Ownership::set_delete_time(::google::protobuf::int64 value) {
  set_has_delete_time();
  delete_time_ = value;
}

// optional .D3.OnlineService.EntityId escrow_id = 3;
inline bool Ownership::has_escrow_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ownership::set_has_escrow_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ownership::clear_has_escrow_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ownership::clear_escrow_id() {
  if (escrow_id_ != NULL) escrow_id_->::D3::OnlineService::EntityId::Clear();
  clear_has_escrow_id();
}
inline const ::D3::OnlineService::EntityId& Ownership::escrow_id() const {
  return escrow_id_ != NULL ? *escrow_id_ : *default_instance_->escrow_id_;
}
inline ::D3::OnlineService::EntityId* Ownership::mutable_escrow_id() {
  set_has_escrow_id();
  if (escrow_id_ == NULL) escrow_id_ = new ::D3::OnlineService::EntityId;
  return escrow_id_;
}
inline ::D3::OnlineService::EntityId* Ownership::release_escrow_id() {
  clear_has_escrow_id();
  ::D3::OnlineService::EntityId* temp = escrow_id_;
  escrow_id_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Items
}  // namespace D3

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Items_2eproto__INCLUDED
