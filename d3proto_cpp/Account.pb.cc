// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace D3 {
namespace Account {

namespace {

const ::google::protobuf::Descriptor* BannerConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BannerConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* Digest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Digest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Digest_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SavedDefinition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedDefinition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Account_2eproto() {
  protobuf_AddDesc_Account_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Account.proto");
  GOOGLE_CHECK(file != NULL);
  BannerConfiguration_descriptor_ = file->message_type(0);
  static const int BannerConfiguration_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, banner_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, sigil_main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, sigil_accent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, pattern_color_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, background_color_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, sigil_color_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, placement_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, use_sigil_variant_),
  };
  BannerConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BannerConfiguration_descriptor_,
      BannerConfiguration::default_instance_,
      BannerConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BannerConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BannerConfiguration));
  Digest_descriptor_ = file->message_type(1);
  static const int Digest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, last_played_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, banner_configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, flags_),
  };
  Digest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Digest_descriptor_,
      Digest::default_instance_,
      Digest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Digest));
  Digest_Flags_descriptor_ = Digest_descriptor_->enum_type(0);
  SavedDefinition_descriptor_ = file->message_type(2);
  static const int SavedDefinition_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, digest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, saved_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, normal_shared_saved_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, hardcore_shared_saved_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, crafter_saved_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, seen_tutorials_),
  };
  SavedDefinition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavedDefinition_descriptor_,
      SavedDefinition::default_instance_,
      SavedDefinition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedDefinition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavedDefinition));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Account_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BannerConfiguration_descriptor_, &BannerConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Digest_descriptor_, &Digest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavedDefinition_descriptor_, &SavedDefinition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Account_2eproto() {
  delete BannerConfiguration::default_instance_;
  delete BannerConfiguration_reflection_;
  delete Digest::default_instance_;
  delete Digest_reflection_;
  delete SavedDefinition::default_instance_;
  delete SavedDefinition_reflection_;
}

void protobuf_AddDesc_Account_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::D3::AttributeSerializer::protobuf_AddDesc_AttributeSerializer_2eproto();
  ::D3::Items::protobuf_AddDesc_Items_2eproto();
  ::D3::OnlineService::protobuf_AddDesc_OnlineService_2eproto();
  ::D3::ItemCrafting::protobuf_AddDesc_ItemCrafting_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rAccount.proto\022\nD3.Account\032\031AttributeSe"
    "rializer.proto\032\013Items.proto\032\023OnlineServi"
    "ce.proto\032\022ItemCrafting.proto\"\362\001\n\023BannerC"
    "onfiguration\022\024\n\014banner_index\030\001 \002(\r\022\022\n\nsi"
    "gil_main\030\002 \002(\005\022\024\n\014sigil_accent\030\003 \002(\005\022\033\n\023"
    "pattern_color_index\030\004 \002(\005\022\036\n\026background_"
    "color_index\030\005 \002(\005\022\031\n\021sigil_color_index\030\006"
    " \002(\005\022\027\n\017placement_index\030\007 \002(\005\022\017\n\007pattern"
    "\030\010 \002(\005\022\031\n\021use_sigil_variant\030\t \002(\010\"\305\001\n\006Di"
    "gest\022\017\n\007version\030\001 \002(\r\0227\n\023last_played_her"
    "o_id\030\002 \002(\0132\032.D3.OnlineService.EntityId\022="
    "\n\024banner_configuration\030\003 \002(\0132\037.D3.Accoun"
    "t.BannerConfiguration\022\r\n\005flags\030\004 \002(\r\"#\n\005"
    "Flags\022\032\n\026HARDCORE_HERO_UNLOCKED\020\001\"\320\002\n\017Sa"
    "vedDefinition\022\017\n\007version\030\001 \002(\r\022\"\n\006digest"
    "\030\002 \001(\0132\022.D3.Account.Digest\022A\n\020saved_attr"
    "ibutes\030\003 \002(\0132\'.D3.AttributeSerializer.Sa"
    "vedAttributes\0225\n\031normal_shared_saved_ite"
    "ms\030\004 \001(\0132\022.D3.Items.ItemList\0227\n\033hardcore"
    "_shared_saved_items\030\005 \001(\0132\022.D3.Items.Ite"
    "mList\022=\n\022crafter_saved_data\030\006 \001(\0132!.D3.I"
    "temCrafting.CrafterSavedData\022\026\n\016seen_tut"
    "orials\030\007 \003(\017", 892);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Account.proto", &protobuf_RegisterTypes);
  BannerConfiguration::default_instance_ = new BannerConfiguration();
  Digest::default_instance_ = new Digest();
  SavedDefinition::default_instance_ = new SavedDefinition();
  BannerConfiguration::default_instance_->InitAsDefaultInstance();
  Digest::default_instance_->InitAsDefaultInstance();
  SavedDefinition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Account_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Account_2eproto {
  StaticDescriptorInitializer_Account_2eproto() {
    protobuf_AddDesc_Account_2eproto();
  }
} static_descriptor_initializer_Account_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BannerConfiguration::kBannerIndexFieldNumber;
const int BannerConfiguration::kSigilMainFieldNumber;
const int BannerConfiguration::kSigilAccentFieldNumber;
const int BannerConfiguration::kPatternColorIndexFieldNumber;
const int BannerConfiguration::kBackgroundColorIndexFieldNumber;
const int BannerConfiguration::kSigilColorIndexFieldNumber;
const int BannerConfiguration::kPlacementIndexFieldNumber;
const int BannerConfiguration::kPatternFieldNumber;
const int BannerConfiguration::kUseSigilVariantFieldNumber;
#endif  // !_MSC_VER

BannerConfiguration::BannerConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BannerConfiguration::InitAsDefaultInstance() {
}

BannerConfiguration::BannerConfiguration(const BannerConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BannerConfiguration::SharedCtor() {
  _cached_size_ = 0;
  banner_index_ = 0u;
  sigil_main_ = 0;
  sigil_accent_ = 0;
  pattern_color_index_ = 0;
  background_color_index_ = 0;
  sigil_color_index_ = 0;
  placement_index_ = 0;
  pattern_ = 0;
  use_sigil_variant_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BannerConfiguration::~BannerConfiguration() {
  SharedDtor();
}

void BannerConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BannerConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BannerConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BannerConfiguration_descriptor_;
}

const BannerConfiguration& BannerConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Account_2eproto();  return *default_instance_;
}

BannerConfiguration* BannerConfiguration::default_instance_ = NULL;

BannerConfiguration* BannerConfiguration::New() const {
  return new BannerConfiguration;
}

void BannerConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banner_index_ = 0u;
    sigil_main_ = 0;
    sigil_accent_ = 0;
    pattern_color_index_ = 0;
    background_color_index_ = 0;
    sigil_color_index_ = 0;
    placement_index_ = 0;
    pattern_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    use_sigil_variant_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BannerConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 banner_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banner_index_)));
          set_has_banner_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sigil_main;
        break;
      }
      
      // required int32 sigil_main = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sigil_main:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sigil_main_)));
          set_has_sigil_main();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sigil_accent;
        break;
      }
      
      // required int32 sigil_accent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sigil_accent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sigil_accent_)));
          set_has_sigil_accent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pattern_color_index;
        break;
      }
      
      // required int32 pattern_color_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pattern_color_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pattern_color_index_)));
          set_has_pattern_color_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_background_color_index;
        break;
      }
      
      // required int32 background_color_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_color_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_color_index_)));
          set_has_background_color_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sigil_color_index;
        break;
      }
      
      // required int32 sigil_color_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sigil_color_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sigil_color_index_)));
          set_has_sigil_color_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_placement_index;
        break;
      }
      
      // required int32 placement_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_placement_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &placement_index_)));
          set_has_placement_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pattern;
        break;
      }
      
      // required int32 pattern = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pattern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pattern_)));
          set_has_pattern();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_use_sigil_variant;
        break;
      }
      
      // required bool use_sigil_variant = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_sigil_variant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sigil_variant_)));
          set_has_use_sigil_variant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BannerConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 banner_index = 1;
  if (has_banner_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banner_index(), output);
  }
  
  // required int32 sigil_main = 2;
  if (has_sigil_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sigil_main(), output);
  }
  
  // required int32 sigil_accent = 3;
  if (has_sigil_accent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sigil_accent(), output);
  }
  
  // required int32 pattern_color_index = 4;
  if (has_pattern_color_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pattern_color_index(), output);
  }
  
  // required int32 background_color_index = 5;
  if (has_background_color_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->background_color_index(), output);
  }
  
  // required int32 sigil_color_index = 6;
  if (has_sigil_color_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sigil_color_index(), output);
  }
  
  // required int32 placement_index = 7;
  if (has_placement_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->placement_index(), output);
  }
  
  // required int32 pattern = 8;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pattern(), output);
  }
  
  // required bool use_sigil_variant = 9;
  if (has_use_sigil_variant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_sigil_variant(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BannerConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 banner_index = 1;
  if (has_banner_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->banner_index(), target);
  }
  
  // required int32 sigil_main = 2;
  if (has_sigil_main()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sigil_main(), target);
  }
  
  // required int32 sigil_accent = 3;
  if (has_sigil_accent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sigil_accent(), target);
  }
  
  // required int32 pattern_color_index = 4;
  if (has_pattern_color_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pattern_color_index(), target);
  }
  
  // required int32 background_color_index = 5;
  if (has_background_color_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->background_color_index(), target);
  }
  
  // required int32 sigil_color_index = 6;
  if (has_sigil_color_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sigil_color_index(), target);
  }
  
  // required int32 placement_index = 7;
  if (has_placement_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->placement_index(), target);
  }
  
  // required int32 pattern = 8;
  if (has_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pattern(), target);
  }
  
  // required bool use_sigil_variant = 9;
  if (has_use_sigil_variant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_sigil_variant(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BannerConfiguration::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 banner_index = 1;
    if (has_banner_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banner_index());
    }
    
    // required int32 sigil_main = 2;
    if (has_sigil_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sigil_main());
    }
    
    // required int32 sigil_accent = 3;
    if (has_sigil_accent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sigil_accent());
    }
    
    // required int32 pattern_color_index = 4;
    if (has_pattern_color_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pattern_color_index());
    }
    
    // required int32 background_color_index = 5;
    if (has_background_color_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->background_color_index());
    }
    
    // required int32 sigil_color_index = 6;
    if (has_sigil_color_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sigil_color_index());
    }
    
    // required int32 placement_index = 7;
    if (has_placement_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->placement_index());
    }
    
    // required int32 pattern = 8;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pattern());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool use_sigil_variant = 9;
    if (has_use_sigil_variant()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BannerConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BannerConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BannerConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BannerConfiguration::MergeFrom(const BannerConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banner_index()) {
      set_banner_index(from.banner_index());
    }
    if (from.has_sigil_main()) {
      set_sigil_main(from.sigil_main());
    }
    if (from.has_sigil_accent()) {
      set_sigil_accent(from.sigil_accent());
    }
    if (from.has_pattern_color_index()) {
      set_pattern_color_index(from.pattern_color_index());
    }
    if (from.has_background_color_index()) {
      set_background_color_index(from.background_color_index());
    }
    if (from.has_sigil_color_index()) {
      set_sigil_color_index(from.sigil_color_index());
    }
    if (from.has_placement_index()) {
      set_placement_index(from.placement_index());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_use_sigil_variant()) {
      set_use_sigil_variant(from.use_sigil_variant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BannerConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BannerConfiguration::CopyFrom(const BannerConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BannerConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void BannerConfiguration::Swap(BannerConfiguration* other) {
  if (other != this) {
    std::swap(banner_index_, other->banner_index_);
    std::swap(sigil_main_, other->sigil_main_);
    std::swap(sigil_accent_, other->sigil_accent_);
    std::swap(pattern_color_index_, other->pattern_color_index_);
    std::swap(background_color_index_, other->background_color_index_);
    std::swap(sigil_color_index_, other->sigil_color_index_);
    std::swap(placement_index_, other->placement_index_);
    std::swap(pattern_, other->pattern_);
    std::swap(use_sigil_variant_, other->use_sigil_variant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BannerConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BannerConfiguration_descriptor_;
  metadata.reflection = BannerConfiguration_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Digest_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Digest_Flags_descriptor_;
}
bool Digest_Flags_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Digest_Flags Digest::HARDCORE_HERO_UNLOCKED;
const Digest_Flags Digest::Flags_MIN;
const Digest_Flags Digest::Flags_MAX;
const int Digest::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Digest::kVersionFieldNumber;
const int Digest::kLastPlayedHeroIdFieldNumber;
const int Digest::kBannerConfigurationFieldNumber;
const int Digest::kFlagsFieldNumber;
#endif  // !_MSC_VER

Digest::Digest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Digest::InitAsDefaultInstance() {
  last_played_hero_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
  banner_configuration_ = const_cast< ::D3::Account::BannerConfiguration*>(&::D3::Account::BannerConfiguration::default_instance());
}

Digest::Digest(const Digest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Digest::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  last_played_hero_id_ = NULL;
  banner_configuration_ = NULL;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Digest::~Digest() {
  SharedDtor();
}

void Digest::SharedDtor() {
  if (this != default_instance_) {
    delete last_played_hero_id_;
    delete banner_configuration_;
  }
}

void Digest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Digest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Digest_descriptor_;
}

const Digest& Digest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Account_2eproto();  return *default_instance_;
}

Digest* Digest::default_instance_ = NULL;

Digest* Digest::New() const {
  return new Digest;
}

void Digest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_last_played_hero_id()) {
      if (last_played_hero_id_ != NULL) last_played_hero_id_->::D3::OnlineService::EntityId::Clear();
    }
    if (has_banner_configuration()) {
      if (banner_configuration_ != NULL) banner_configuration_->::D3::Account::BannerConfiguration::Clear();
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Digest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_played_hero_id;
        break;
      }
      
      // required .D3.OnlineService.EntityId last_played_hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_played_hero_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_played_hero_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_banner_configuration;
        break;
      }
      
      // required .D3.Account.BannerConfiguration banner_configuration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }
      
      // required uint32 flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Digest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // required .D3.OnlineService.EntityId last_played_hero_id = 2;
  if (has_last_played_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->last_played_hero_id(), output);
  }
  
  // required .D3.Account.BannerConfiguration banner_configuration = 3;
  if (has_banner_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->banner_configuration(), output);
  }
  
  // required uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Digest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // required .D3.OnlineService.EntityId last_played_hero_id = 2;
  if (has_last_played_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->last_played_hero_id(), target);
  }
  
  // required .D3.Account.BannerConfiguration banner_configuration = 3;
  if (has_banner_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->banner_configuration(), target);
  }
  
  // required uint32 flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Digest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // required .D3.OnlineService.EntityId last_played_hero_id = 2;
    if (has_last_played_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_played_hero_id());
    }
    
    // required .D3.Account.BannerConfiguration banner_configuration = 3;
    if (has_banner_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner_configuration());
    }
    
    // required uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Digest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Digest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Digest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Digest::MergeFrom(const Digest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_last_played_hero_id()) {
      mutable_last_played_hero_id()->::D3::OnlineService::EntityId::MergeFrom(from.last_played_hero_id());
    }
    if (from.has_banner_configuration()) {
      mutable_banner_configuration()->::D3::Account::BannerConfiguration::MergeFrom(from.banner_configuration());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Digest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Digest::CopyFrom(const Digest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Digest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_last_played_hero_id()) {
    if (!this->last_played_hero_id().IsInitialized()) return false;
  }
  if (has_banner_configuration()) {
    if (!this->banner_configuration().IsInitialized()) return false;
  }
  return true;
}

void Digest::Swap(Digest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(last_played_hero_id_, other->last_played_hero_id_);
    std::swap(banner_configuration_, other->banner_configuration_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Digest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Digest_descriptor_;
  metadata.reflection = Digest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavedDefinition::kVersionFieldNumber;
const int SavedDefinition::kDigestFieldNumber;
const int SavedDefinition::kSavedAttributesFieldNumber;
const int SavedDefinition::kNormalSharedSavedItemsFieldNumber;
const int SavedDefinition::kHardcoreSharedSavedItemsFieldNumber;
const int SavedDefinition::kCrafterSavedDataFieldNumber;
const int SavedDefinition::kSeenTutorialsFieldNumber;
#endif  // !_MSC_VER

SavedDefinition::SavedDefinition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavedDefinition::InitAsDefaultInstance() {
  digest_ = const_cast< ::D3::Account::Digest*>(&::D3::Account::Digest::default_instance());
  saved_attributes_ = const_cast< ::D3::AttributeSerializer::SavedAttributes*>(&::D3::AttributeSerializer::SavedAttributes::default_instance());
  normal_shared_saved_items_ = const_cast< ::D3::Items::ItemList*>(&::D3::Items::ItemList::default_instance());
  hardcore_shared_saved_items_ = const_cast< ::D3::Items::ItemList*>(&::D3::Items::ItemList::default_instance());
  crafter_saved_data_ = const_cast< ::D3::ItemCrafting::CrafterSavedData*>(&::D3::ItemCrafting::CrafterSavedData::default_instance());
}

SavedDefinition::SavedDefinition(const SavedDefinition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavedDefinition::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  digest_ = NULL;
  saved_attributes_ = NULL;
  normal_shared_saved_items_ = NULL;
  hardcore_shared_saved_items_ = NULL;
  crafter_saved_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavedDefinition::~SavedDefinition() {
  SharedDtor();
}

void SavedDefinition::SharedDtor() {
  if (this != default_instance_) {
    delete digest_;
    delete saved_attributes_;
    delete normal_shared_saved_items_;
    delete hardcore_shared_saved_items_;
    delete crafter_saved_data_;
  }
}

void SavedDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedDefinition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedDefinition_descriptor_;
}

const SavedDefinition& SavedDefinition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Account_2eproto();  return *default_instance_;
}

SavedDefinition* SavedDefinition::default_instance_ = NULL;

SavedDefinition* SavedDefinition::New() const {
  return new SavedDefinition;
}

void SavedDefinition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_digest()) {
      if (digest_ != NULL) digest_->::D3::Account::Digest::Clear();
    }
    if (has_saved_attributes()) {
      if (saved_attributes_ != NULL) saved_attributes_->::D3::AttributeSerializer::SavedAttributes::Clear();
    }
    if (has_normal_shared_saved_items()) {
      if (normal_shared_saved_items_ != NULL) normal_shared_saved_items_->::D3::Items::ItemList::Clear();
    }
    if (has_hardcore_shared_saved_items()) {
      if (hardcore_shared_saved_items_ != NULL) hardcore_shared_saved_items_->::D3::Items::ItemList::Clear();
    }
    if (has_crafter_saved_data()) {
      if (crafter_saved_data_ != NULL) crafter_saved_data_->::D3::ItemCrafting::CrafterSavedData::Clear();
    }
  }
  seen_tutorials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavedDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_digest;
        break;
      }
      
      // optional .D3.Account.Digest digest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_digest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_saved_attributes;
        break;
      }
      
      // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saved_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saved_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_normal_shared_saved_items;
        break;
      }
      
      // optional .D3.Items.ItemList normal_shared_saved_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_shared_saved_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal_shared_saved_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hardcore_shared_saved_items;
        break;
      }
      
      // optional .D3.Items.ItemList hardcore_shared_saved_items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hardcore_shared_saved_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardcore_shared_saved_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_crafter_saved_data;
        break;
      }
      
      // optional .D3.ItemCrafting.CrafterSavedData crafter_saved_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crafter_saved_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crafter_saved_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_seen_tutorials;
        break;
      }
      
      // repeated sfixed32 seen_tutorials = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_seen_tutorials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 61, input, this->mutable_seen_tutorials())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_seen_tutorials())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_seen_tutorials;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavedDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }
  
  // optional .D3.Account.Digest digest = 2;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->digest(), output);
  }
  
  // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
  if (has_saved_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->saved_attributes(), output);
  }
  
  // optional .D3.Items.ItemList normal_shared_saved_items = 4;
  if (has_normal_shared_saved_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->normal_shared_saved_items(), output);
  }
  
  // optional .D3.Items.ItemList hardcore_shared_saved_items = 5;
  if (has_hardcore_shared_saved_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hardcore_shared_saved_items(), output);
  }
  
  // optional .D3.ItemCrafting.CrafterSavedData crafter_saved_data = 6;
  if (has_crafter_saved_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->crafter_saved_data(), output);
  }
  
  // repeated sfixed32 seen_tutorials = 7;
  for (int i = 0; i < this->seen_tutorials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      7, this->seen_tutorials(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavedDefinition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }
  
  // optional .D3.Account.Digest digest = 2;
  if (has_digest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->digest(), target);
  }
  
  // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
  if (has_saved_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->saved_attributes(), target);
  }
  
  // optional .D3.Items.ItemList normal_shared_saved_items = 4;
  if (has_normal_shared_saved_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->normal_shared_saved_items(), target);
  }
  
  // optional .D3.Items.ItemList hardcore_shared_saved_items = 5;
  if (has_hardcore_shared_saved_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hardcore_shared_saved_items(), target);
  }
  
  // optional .D3.ItemCrafting.CrafterSavedData crafter_saved_data = 6;
  if (has_crafter_saved_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->crafter_saved_data(), target);
  }
  
  // repeated sfixed32 seen_tutorials = 7;
  for (int i = 0; i < this->seen_tutorials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32ToArray(7, this->seen_tutorials(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavedDefinition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional .D3.Account.Digest digest = 2;
    if (has_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->digest());
    }
    
    // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
    if (has_saved_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->saved_attributes());
    }
    
    // optional .D3.Items.ItemList normal_shared_saved_items = 4;
    if (has_normal_shared_saved_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal_shared_saved_items());
    }
    
    // optional .D3.Items.ItemList hardcore_shared_saved_items = 5;
    if (has_hardcore_shared_saved_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hardcore_shared_saved_items());
    }
    
    // optional .D3.ItemCrafting.CrafterSavedData crafter_saved_data = 6;
    if (has_crafter_saved_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crafter_saved_data());
    }
    
  }
  // repeated sfixed32 seen_tutorials = 7;
  {
    int data_size = 0;
    data_size = 4 * this->seen_tutorials_size();
    total_size += 1 * this->seen_tutorials_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedDefinition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavedDefinition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavedDefinition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavedDefinition::MergeFrom(const SavedDefinition& from) {
  GOOGLE_CHECK_NE(&from, this);
  seen_tutorials_.MergeFrom(from.seen_tutorials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_digest()) {
      mutable_digest()->::D3::Account::Digest::MergeFrom(from.digest());
    }
    if (from.has_saved_attributes()) {
      mutable_saved_attributes()->::D3::AttributeSerializer::SavedAttributes::MergeFrom(from.saved_attributes());
    }
    if (from.has_normal_shared_saved_items()) {
      mutable_normal_shared_saved_items()->::D3::Items::ItemList::MergeFrom(from.normal_shared_saved_items());
    }
    if (from.has_hardcore_shared_saved_items()) {
      mutable_hardcore_shared_saved_items()->::D3::Items::ItemList::MergeFrom(from.hardcore_shared_saved_items());
    }
    if (from.has_crafter_saved_data()) {
      mutable_crafter_saved_data()->::D3::ItemCrafting::CrafterSavedData::MergeFrom(from.crafter_saved_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavedDefinition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedDefinition::CopyFrom(const SavedDefinition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedDefinition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_digest()) {
    if (!this->digest().IsInitialized()) return false;
  }
  if (has_saved_attributes()) {
    if (!this->saved_attributes().IsInitialized()) return false;
  }
  if (has_normal_shared_saved_items()) {
    if (!this->normal_shared_saved_items().IsInitialized()) return false;
  }
  if (has_hardcore_shared_saved_items()) {
    if (!this->hardcore_shared_saved_items().IsInitialized()) return false;
  }
  if (has_crafter_saved_data()) {
    if (!this->crafter_saved_data().IsInitialized()) return false;
  }
  return true;
}

void SavedDefinition::Swap(SavedDefinition* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(digest_, other->digest_);
    std::swap(saved_attributes_, other->saved_attributes_);
    std::swap(normal_shared_saved_items_, other->normal_shared_saved_items_);
    std::swap(hardcore_shared_saved_items_, other->hardcore_shared_saved_items_);
    std::swap(crafter_saved_data_, other->crafter_saved_data_);
    seen_tutorials_.Swap(&other->seen_tutorials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavedDefinition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedDefinition_descriptor_;
  metadata.reflection = SavedDefinition_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Account
}  // namespace D3

// @@protoc_insertion_point(global_scope)
