// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OnlineService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace D3 {
namespace OnlineService {

namespace {

const ::google::protobuf::Descriptor* EntityId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityId_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoopCreateParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoopCreateParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPCreateParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPCreateParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameCreateParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameCreateParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroCreateParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroCreateParams_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OnlineService_2eproto() {
  protobuf_AddDesc_OnlineService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OnlineService.proto");
  GOOGLE_CHECK(file != NULL);
  EntityId_descriptor_ = file->message_type(0);
  static const int EntityId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityId, id_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityId, id_low_),
  };
  EntityId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityId_descriptor_,
      EntityId::default_instance_,
      EntityId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityId));
  GameId_descriptor_ = file->message_type(1);
  static const int GameId_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameId, factory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameId, id_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameId, id_low_),
  };
  GameId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameId_descriptor_,
      GameId::default_instance_,
      GameId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameId));
  ItemId_descriptor_ = file->message_type(2);
  static const int ItemId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemId, id_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemId, id_low_),
  };
  ItemId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemId_descriptor_,
      ItemId::default_instance_,
      ItemId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemId));
  CoopCreateParams_descriptor_ = file->message_type(3);
  static const int CoopCreateParams_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoopCreateParams, difficulty_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoopCreateParams, act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoopCreateParams, sno_quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoopCreateParams, quest_step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoopCreateParams, resume_from_save_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoopCreateParams, open_to_friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoopCreateParams, open_to_friends_message_),
  };
  CoopCreateParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoopCreateParams_descriptor_,
      CoopCreateParams::default_instance_,
      CoopCreateParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoopCreateParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoopCreateParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoopCreateParams));
  PvPCreateParams_descriptor_ = file->message_type(4);
  static const int PvPCreateParams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPCreateParams, sno_world_),
  };
  PvPCreateParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPCreateParams_descriptor_,
      PvPCreateParams::default_instance_,
      PvPCreateParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPCreateParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPCreateParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPCreateParams));
  GameCreateParams_descriptor_ = file->message_type(5);
  static const int GameCreateParams_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCreateParams, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCreateParams, creation_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCreateParams, coop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCreateParams, pvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCreateParams, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCreateParams, is_private_),
  };
  GameCreateParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameCreateParams_descriptor_,
      GameCreateParams::default_instance_,
      GameCreateParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCreateParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCreateParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameCreateParams));
  HeroCreateParams_descriptor_ = file->message_type(6);
  static const int HeroCreateParams_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCreateParams, gbid_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCreateParams, is_hardcore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCreateParams, is_female_),
  };
  HeroCreateParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroCreateParams_descriptor_,
      HeroCreateParams::default_instance_,
      HeroCreateParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCreateParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCreateParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroCreateParams));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OnlineService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityId_descriptor_, &EntityId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameId_descriptor_, &GameId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemId_descriptor_, &ItemId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoopCreateParams_descriptor_, &CoopCreateParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPCreateParams_descriptor_, &PvPCreateParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameCreateParams_descriptor_, &GameCreateParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroCreateParams_descriptor_, &HeroCreateParams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OnlineService_2eproto() {
  delete EntityId::default_instance_;
  delete EntityId_reflection_;
  delete GameId::default_instance_;
  delete GameId_reflection_;
  delete ItemId::default_instance_;
  delete ItemId_reflection_;
  delete CoopCreateParams::default_instance_;
  delete CoopCreateParams_reflection_;
  delete PvPCreateParams::default_instance_;
  delete PvPCreateParams_reflection_;
  delete GameCreateParams::default_instance_;
  delete GameCreateParams_reflection_;
  delete HeroCreateParams::default_instance_;
  delete HeroCreateParams_reflection_;
}

void protobuf_AddDesc_OnlineService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023OnlineService.proto\022\020D3.OnlineService\""
    "+\n\010EntityId\022\017\n\007id_high\030\001 \002(\004\022\016\n\006id_low\030\002"
    " \002(\004\":\n\006GameId\022\017\n\007factory\030\001 \002(\004\022\017\n\007id_hi"
    "gh\030\002 \002(\004\022\016\n\006id_low\030\003 \002(\004\")\n\006ItemId\022\017\n\007id"
    "_high\030\001 \002(\004\022\016\n\006id_low\030\002 \002(\004\"\333\001\n\020CoopCrea"
    "teParams\022\030\n\020difficulty_level\030\001 \002(\005\022\013\n\003ac"
    "t\030\002 \002(\021\022\021\n\tsno_quest\030\003 \002(\017\022\025\n\rquest_step"
    "_id\030\004 \002(\005\022<\n\030resume_from_save_hero_id\030\005 "
    "\001(\0132\032.D3.OnlineService.EntityId\022\027\n\017open_"
    "to_friends\030\006 \002(\010\022\037\n\027open_to_friends_mess"
    "age\030\007 \001(\t\"$\n\017PvPCreateParams\022\021\n\tsno_worl"
    "d\030\001 \002(\017\"\301\001\n\020GameCreateParams\022\021\n\tgame_typ"
    "e\030\001 \002(\021\022\026\n\016creation_flags\030\002 \002(\r\0220\n\004coop\030"
    "\003 \001(\0132\".D3.OnlineService.CoopCreateParam"
    "s\022.\n\003pvp\030\004 \001(\0132!.D3.OnlineService.PvPCre"
    "ateParams\022\014\n\004name\030\005 \001(\t\022\022\n\nis_private\030\006 "
    "\002(\010\"N\n\020HeroCreateParams\022\022\n\ngbid_class\030\001 "
    "\002(\017\022\023\n\013is_hardcore\030\002 \002(\010\022\021\n\tis_female\030\003 "
    "\002(\010", 723);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OnlineService.proto", &protobuf_RegisterTypes);
  EntityId::default_instance_ = new EntityId();
  GameId::default_instance_ = new GameId();
  ItemId::default_instance_ = new ItemId();
  CoopCreateParams::default_instance_ = new CoopCreateParams();
  PvPCreateParams::default_instance_ = new PvPCreateParams();
  GameCreateParams::default_instance_ = new GameCreateParams();
  HeroCreateParams::default_instance_ = new HeroCreateParams();
  EntityId::default_instance_->InitAsDefaultInstance();
  GameId::default_instance_->InitAsDefaultInstance();
  ItemId::default_instance_->InitAsDefaultInstance();
  CoopCreateParams::default_instance_->InitAsDefaultInstance();
  PvPCreateParams::default_instance_->InitAsDefaultInstance();
  GameCreateParams::default_instance_->InitAsDefaultInstance();
  HeroCreateParams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OnlineService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OnlineService_2eproto {
  StaticDescriptorInitializer_OnlineService_2eproto() {
    protobuf_AddDesc_OnlineService_2eproto();
  }
} static_descriptor_initializer_OnlineService_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int EntityId::kIdHighFieldNumber;
const int EntityId::kIdLowFieldNumber;
#endif  // !_MSC_VER

EntityId::EntityId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityId::InitAsDefaultInstance() {
}

EntityId::EntityId(const EntityId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityId::SharedCtor() {
  _cached_size_ = 0;
  id_high_ = GOOGLE_ULONGLONG(0);
  id_low_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityId::~EntityId() {
  SharedDtor();
}

void EntityId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntityId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityId_descriptor_;
}

const EntityId& EntityId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OnlineService_2eproto();  return *default_instance_;
}

EntityId* EntityId::default_instance_ = NULL;

EntityId* EntityId::New() const {
  return new EntityId;
}

void EntityId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_high_ = GOOGLE_ULONGLONG(0);
    id_low_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id_high = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_high_)));
          set_has_id_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_low;
        break;
      }
      
      // required uint64 id_low = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_low_)));
          set_has_id_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id_high = 1;
  if (has_id_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id_high(), output);
  }
  
  // required uint64 id_low = 2;
  if (has_id_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id_low(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id_high = 1;
  if (has_id_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id_high(), target);
  }
  
  // required uint64 id_low = 2;
  if (has_id_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id_low(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id_high = 1;
    if (has_id_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id_high());
    }
    
    // required uint64 id_low = 2;
    if (has_id_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id_low());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityId::MergeFrom(const EntityId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id_high()) {
      set_id_high(from.id_high());
    }
    if (from.has_id_low()) {
      set_id_low(from.id_low());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityId::CopyFrom(const EntityId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EntityId::Swap(EntityId* other) {
  if (other != this) {
    std::swap(id_high_, other->id_high_);
    std::swap(id_low_, other->id_low_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityId_descriptor_;
  metadata.reflection = EntityId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameId::kFactoryFieldNumber;
const int GameId::kIdHighFieldNumber;
const int GameId::kIdLowFieldNumber;
#endif  // !_MSC_VER

GameId::GameId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameId::InitAsDefaultInstance() {
}

GameId::GameId(const GameId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameId::SharedCtor() {
  _cached_size_ = 0;
  factory_ = GOOGLE_ULONGLONG(0);
  id_high_ = GOOGLE_ULONGLONG(0);
  id_low_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameId::~GameId() {
  SharedDtor();
}

void GameId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameId_descriptor_;
}

const GameId& GameId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OnlineService_2eproto();  return *default_instance_;
}

GameId* GameId::default_instance_ = NULL;

GameId* GameId::New() const {
  return new GameId;
}

void GameId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factory_ = GOOGLE_ULONGLONG(0);
    id_high_ = GOOGLE_ULONGLONG(0);
    id_low_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 factory = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &factory_)));
          set_has_factory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_high;
        break;
      }
      
      // required uint64 id_high = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_high_)));
          set_has_id_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_low;
        break;
      }
      
      // required uint64 id_low = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_low_)));
          set_has_id_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 factory = 1;
  if (has_factory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->factory(), output);
  }
  
  // required uint64 id_high = 2;
  if (has_id_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id_high(), output);
  }
  
  // required uint64 id_low = 3;
  if (has_id_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id_low(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 factory = 1;
  if (has_factory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->factory(), target);
  }
  
  // required uint64 id_high = 2;
  if (has_id_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id_high(), target);
  }
  
  // required uint64 id_low = 3;
  if (has_id_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id_low(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 factory = 1;
    if (has_factory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->factory());
    }
    
    // required uint64 id_high = 2;
    if (has_id_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id_high());
    }
    
    // required uint64 id_low = 3;
    if (has_id_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id_low());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameId::MergeFrom(const GameId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factory()) {
      set_factory(from.factory());
    }
    if (from.has_id_high()) {
      set_id_high(from.id_high());
    }
    if (from.has_id_low()) {
      set_id_low(from.id_low());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameId::CopyFrom(const GameId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GameId::Swap(GameId* other) {
  if (other != this) {
    std::swap(factory_, other->factory_);
    std::swap(id_high_, other->id_high_);
    std::swap(id_low_, other->id_low_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameId_descriptor_;
  metadata.reflection = GameId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemId::kIdHighFieldNumber;
const int ItemId::kIdLowFieldNumber;
#endif  // !_MSC_VER

ItemId::ItemId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemId::InitAsDefaultInstance() {
}

ItemId::ItemId(const ItemId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemId::SharedCtor() {
  _cached_size_ = 0;
  id_high_ = GOOGLE_ULONGLONG(0);
  id_low_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemId::~ItemId() {
  SharedDtor();
}

void ItemId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemId_descriptor_;
}

const ItemId& ItemId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OnlineService_2eproto();  return *default_instance_;
}

ItemId* ItemId::default_instance_ = NULL;

ItemId* ItemId::New() const {
  return new ItemId;
}

void ItemId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_high_ = GOOGLE_ULONGLONG(0);
    id_low_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id_high = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_high_)));
          set_has_id_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_low;
        break;
      }
      
      // required uint64 id_low = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_low_)));
          set_has_id_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id_high = 1;
  if (has_id_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id_high(), output);
  }
  
  // required uint64 id_low = 2;
  if (has_id_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id_low(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id_high = 1;
  if (has_id_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id_high(), target);
  }
  
  // required uint64 id_low = 2;
  if (has_id_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id_low(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id_high = 1;
    if (has_id_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id_high());
    }
    
    // required uint64 id_low = 2;
    if (has_id_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id_low());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemId::MergeFrom(const ItemId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id_high()) {
      set_id_high(from.id_high());
    }
    if (from.has_id_low()) {
      set_id_low(from.id_low());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemId::CopyFrom(const ItemId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ItemId::Swap(ItemId* other) {
  if (other != this) {
    std::swap(id_high_, other->id_high_);
    std::swap(id_low_, other->id_low_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemId_descriptor_;
  metadata.reflection = ItemId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoopCreateParams::kDifficultyLevelFieldNumber;
const int CoopCreateParams::kActFieldNumber;
const int CoopCreateParams::kSnoQuestFieldNumber;
const int CoopCreateParams::kQuestStepIdFieldNumber;
const int CoopCreateParams::kResumeFromSaveHeroIdFieldNumber;
const int CoopCreateParams::kOpenToFriendsFieldNumber;
const int CoopCreateParams::kOpenToFriendsMessageFieldNumber;
#endif  // !_MSC_VER

CoopCreateParams::CoopCreateParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoopCreateParams::InitAsDefaultInstance() {
  resume_from_save_hero_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
}

CoopCreateParams::CoopCreateParams(const CoopCreateParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoopCreateParams::SharedCtor() {
  _cached_size_ = 0;
  difficulty_level_ = 0;
  act_ = 0;
  sno_quest_ = 0;
  quest_step_id_ = 0;
  resume_from_save_hero_id_ = NULL;
  open_to_friends_ = false;
  open_to_friends_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoopCreateParams::~CoopCreateParams() {
  SharedDtor();
}

void CoopCreateParams::SharedDtor() {
  if (open_to_friends_message_ != &::google::protobuf::internal::kEmptyString) {
    delete open_to_friends_message_;
  }
  if (this != default_instance_) {
    delete resume_from_save_hero_id_;
  }
}

void CoopCreateParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoopCreateParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoopCreateParams_descriptor_;
}

const CoopCreateParams& CoopCreateParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OnlineService_2eproto();  return *default_instance_;
}

CoopCreateParams* CoopCreateParams::default_instance_ = NULL;

CoopCreateParams* CoopCreateParams::New() const {
  return new CoopCreateParams;
}

void CoopCreateParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    difficulty_level_ = 0;
    act_ = 0;
    sno_quest_ = 0;
    quest_step_id_ = 0;
    if (has_resume_from_save_hero_id()) {
      if (resume_from_save_hero_id_ != NULL) resume_from_save_hero_id_->::D3::OnlineService::EntityId::Clear();
    }
    open_to_friends_ = false;
    if (has_open_to_friends_message()) {
      if (open_to_friends_message_ != &::google::protobuf::internal::kEmptyString) {
        open_to_friends_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoopCreateParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 difficulty_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_level_)));
          set_has_difficulty_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_act;
        break;
      }
      
      // required sint32 act = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &act_)));
          set_has_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sno_quest;
        break;
      }
      
      // required sfixed32 sno_quest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sno_quest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sno_quest_)));
          set_has_sno_quest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quest_step_id;
        break;
      }
      
      // required int32 quest_step_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_step_id_)));
          set_has_quest_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resume_from_save_hero_id;
        break;
      }
      
      // optional .D3.OnlineService.EntityId resume_from_save_hero_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resume_from_save_hero_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resume_from_save_hero_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_open_to_friends;
        break;
      }
      
      // required bool open_to_friends = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_to_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_to_friends_)));
          set_has_open_to_friends();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_open_to_friends_message;
        break;
      }
      
      // optional string open_to_friends_message = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_to_friends_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_to_friends_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->open_to_friends_message().data(), this->open_to_friends_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoopCreateParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 difficulty_level = 1;
  if (has_difficulty_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->difficulty_level(), output);
  }
  
  // required sint32 act = 2;
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->act(), output);
  }
  
  // required sfixed32 sno_quest = 3;
  if (has_sno_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->sno_quest(), output);
  }
  
  // required int32 quest_step_id = 4;
  if (has_quest_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quest_step_id(), output);
  }
  
  // optional .D3.OnlineService.EntityId resume_from_save_hero_id = 5;
  if (has_resume_from_save_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->resume_from_save_hero_id(), output);
  }
  
  // required bool open_to_friends = 6;
  if (has_open_to_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->open_to_friends(), output);
  }
  
  // optional string open_to_friends_message = 7;
  if (has_open_to_friends_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_to_friends_message().data(), this->open_to_friends_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->open_to_friends_message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoopCreateParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 difficulty_level = 1;
  if (has_difficulty_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->difficulty_level(), target);
  }
  
  // required sint32 act = 2;
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->act(), target);
  }
  
  // required sfixed32 sno_quest = 3;
  if (has_sno_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->sno_quest(), target);
  }
  
  // required int32 quest_step_id = 4;
  if (has_quest_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quest_step_id(), target);
  }
  
  // optional .D3.OnlineService.EntityId resume_from_save_hero_id = 5;
  if (has_resume_from_save_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->resume_from_save_hero_id(), target);
  }
  
  // required bool open_to_friends = 6;
  if (has_open_to_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->open_to_friends(), target);
  }
  
  // optional string open_to_friends_message = 7;
  if (has_open_to_friends_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_to_friends_message().data(), this->open_to_friends_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->open_to_friends_message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoopCreateParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 difficulty_level = 1;
    if (has_difficulty_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_level());
    }
    
    // required sint32 act = 2;
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->act());
    }
    
    // required sfixed32 sno_quest = 3;
    if (has_sno_quest()) {
      total_size += 1 + 4;
    }
    
    // required int32 quest_step_id = 4;
    if (has_quest_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_step_id());
    }
    
    // optional .D3.OnlineService.EntityId resume_from_save_hero_id = 5;
    if (has_resume_from_save_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resume_from_save_hero_id());
    }
    
    // required bool open_to_friends = 6;
    if (has_open_to_friends()) {
      total_size += 1 + 1;
    }
    
    // optional string open_to_friends_message = 7;
    if (has_open_to_friends_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_to_friends_message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoopCreateParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoopCreateParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoopCreateParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoopCreateParams::MergeFrom(const CoopCreateParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_difficulty_level()) {
      set_difficulty_level(from.difficulty_level());
    }
    if (from.has_act()) {
      set_act(from.act());
    }
    if (from.has_sno_quest()) {
      set_sno_quest(from.sno_quest());
    }
    if (from.has_quest_step_id()) {
      set_quest_step_id(from.quest_step_id());
    }
    if (from.has_resume_from_save_hero_id()) {
      mutable_resume_from_save_hero_id()->::D3::OnlineService::EntityId::MergeFrom(from.resume_from_save_hero_id());
    }
    if (from.has_open_to_friends()) {
      set_open_to_friends(from.open_to_friends());
    }
    if (from.has_open_to_friends_message()) {
      set_open_to_friends_message(from.open_to_friends_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoopCreateParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoopCreateParams::CopyFrom(const CoopCreateParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoopCreateParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  
  if (has_resume_from_save_hero_id()) {
    if (!this->resume_from_save_hero_id().IsInitialized()) return false;
  }
  return true;
}

void CoopCreateParams::Swap(CoopCreateParams* other) {
  if (other != this) {
    std::swap(difficulty_level_, other->difficulty_level_);
    std::swap(act_, other->act_);
    std::swap(sno_quest_, other->sno_quest_);
    std::swap(quest_step_id_, other->quest_step_id_);
    std::swap(resume_from_save_hero_id_, other->resume_from_save_hero_id_);
    std::swap(open_to_friends_, other->open_to_friends_);
    std::swap(open_to_friends_message_, other->open_to_friends_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoopCreateParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoopCreateParams_descriptor_;
  metadata.reflection = CoopCreateParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPCreateParams::kSnoWorldFieldNumber;
#endif  // !_MSC_VER

PvPCreateParams::PvPCreateParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPCreateParams::InitAsDefaultInstance() {
}

PvPCreateParams::PvPCreateParams(const PvPCreateParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPCreateParams::SharedCtor() {
  _cached_size_ = 0;
  sno_world_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPCreateParams::~PvPCreateParams() {
  SharedDtor();
}

void PvPCreateParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPCreateParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPCreateParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPCreateParams_descriptor_;
}

const PvPCreateParams& PvPCreateParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OnlineService_2eproto();  return *default_instance_;
}

PvPCreateParams* PvPCreateParams::default_instance_ = NULL;

PvPCreateParams* PvPCreateParams::New() const {
  return new PvPCreateParams;
}

void PvPCreateParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sno_world_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPCreateParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 sno_world = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sno_world_)));
          set_has_sno_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPCreateParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 sno_world = 1;
  if (has_sno_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->sno_world(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPCreateParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 sno_world = 1;
  if (has_sno_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->sno_world(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPCreateParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 sno_world = 1;
    if (has_sno_world()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPCreateParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPCreateParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPCreateParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPCreateParams::MergeFrom(const PvPCreateParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sno_world()) {
      set_sno_world(from.sno_world());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPCreateParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPCreateParams::CopyFrom(const PvPCreateParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPCreateParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PvPCreateParams::Swap(PvPCreateParams* other) {
  if (other != this) {
    std::swap(sno_world_, other->sno_world_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPCreateParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPCreateParams_descriptor_;
  metadata.reflection = PvPCreateParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameCreateParams::kGameTypeFieldNumber;
const int GameCreateParams::kCreationFlagsFieldNumber;
const int GameCreateParams::kCoopFieldNumber;
const int GameCreateParams::kPvpFieldNumber;
const int GameCreateParams::kNameFieldNumber;
const int GameCreateParams::kIsPrivateFieldNumber;
#endif  // !_MSC_VER

GameCreateParams::GameCreateParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameCreateParams::InitAsDefaultInstance() {
  coop_ = const_cast< ::D3::OnlineService::CoopCreateParams*>(&::D3::OnlineService::CoopCreateParams::default_instance());
  pvp_ = const_cast< ::D3::OnlineService::PvPCreateParams*>(&::D3::OnlineService::PvPCreateParams::default_instance());
}

GameCreateParams::GameCreateParams(const GameCreateParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameCreateParams::SharedCtor() {
  _cached_size_ = 0;
  game_type_ = 0;
  creation_flags_ = 0u;
  coop_ = NULL;
  pvp_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_private_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameCreateParams::~GameCreateParams() {
  SharedDtor();
}

void GameCreateParams::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete coop_;
    delete pvp_;
  }
}

void GameCreateParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCreateParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameCreateParams_descriptor_;
}

const GameCreateParams& GameCreateParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OnlineService_2eproto();  return *default_instance_;
}

GameCreateParams* GameCreateParams::default_instance_ = NULL;

GameCreateParams* GameCreateParams::New() const {
  return new GameCreateParams;
}

void GameCreateParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_type_ = 0;
    creation_flags_ = 0u;
    if (has_coop()) {
      if (coop_ != NULL) coop_->::D3::OnlineService::CoopCreateParams::Clear();
    }
    if (has_pvp()) {
      if (pvp_ != NULL) pvp_->::D3::OnlineService::PvPCreateParams::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    is_private_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameCreateParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 game_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_creation_flags;
        break;
      }
      
      // required uint32 creation_flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creation_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_flags_)));
          set_has_creation_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_coop;
        break;
      }
      
      // optional .D3.OnlineService.CoopCreateParams coop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pvp;
        break;
      }
      
      // optional .D3.OnlineService.PvPCreateParams pvp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_private;
        break;
      }
      
      // required bool is_private = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_private:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_private_)));
          set_has_is_private();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameCreateParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->game_type(), output);
  }
  
  // required uint32 creation_flags = 2;
  if (has_creation_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->creation_flags(), output);
  }
  
  // optional .D3.OnlineService.CoopCreateParams coop = 3;
  if (has_coop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coop(), output);
  }
  
  // optional .D3.OnlineService.PvPCreateParams pvp = 4;
  if (has_pvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pvp(), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // required bool is_private = 6;
  if (has_is_private()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_private(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameCreateParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 game_type = 1;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->game_type(), target);
  }
  
  // required uint32 creation_flags = 2;
  if (has_creation_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->creation_flags(), target);
  }
  
  // optional .D3.OnlineService.CoopCreateParams coop = 3;
  if (has_coop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coop(), target);
  }
  
  // optional .D3.OnlineService.PvPCreateParams pvp = 4;
  if (has_pvp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pvp(), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // required bool is_private = 6;
  if (has_is_private()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_private(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameCreateParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->game_type());
    }
    
    // required uint32 creation_flags = 2;
    if (has_creation_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creation_flags());
    }
    
    // optional .D3.OnlineService.CoopCreateParams coop = 3;
    if (has_coop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coop());
    }
    
    // optional .D3.OnlineService.PvPCreateParams pvp = 4;
    if (has_pvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool is_private = 6;
    if (has_is_private()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCreateParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameCreateParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameCreateParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameCreateParams::MergeFrom(const GameCreateParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_creation_flags()) {
      set_creation_flags(from.creation_flags());
    }
    if (from.has_coop()) {
      mutable_coop()->::D3::OnlineService::CoopCreateParams::MergeFrom(from.coop());
    }
    if (from.has_pvp()) {
      mutable_pvp()->::D3::OnlineService::PvPCreateParams::MergeFrom(from.pvp());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_private()) {
      set_is_private(from.is_private());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameCreateParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCreateParams::CopyFrom(const GameCreateParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCreateParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  
  if (has_coop()) {
    if (!this->coop().IsInitialized()) return false;
  }
  if (has_pvp()) {
    if (!this->pvp().IsInitialized()) return false;
  }
  return true;
}

void GameCreateParams::Swap(GameCreateParams* other) {
  if (other != this) {
    std::swap(game_type_, other->game_type_);
    std::swap(creation_flags_, other->creation_flags_);
    std::swap(coop_, other->coop_);
    std::swap(pvp_, other->pvp_);
    std::swap(name_, other->name_);
    std::swap(is_private_, other->is_private_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameCreateParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameCreateParams_descriptor_;
  metadata.reflection = GameCreateParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroCreateParams::kGbidClassFieldNumber;
const int HeroCreateParams::kIsHardcoreFieldNumber;
const int HeroCreateParams::kIsFemaleFieldNumber;
#endif  // !_MSC_VER

HeroCreateParams::HeroCreateParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroCreateParams::InitAsDefaultInstance() {
}

HeroCreateParams::HeroCreateParams(const HeroCreateParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroCreateParams::SharedCtor() {
  _cached_size_ = 0;
  gbid_class_ = 0;
  is_hardcore_ = false;
  is_female_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroCreateParams::~HeroCreateParams() {
  SharedDtor();
}

void HeroCreateParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroCreateParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroCreateParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroCreateParams_descriptor_;
}

const HeroCreateParams& HeroCreateParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OnlineService_2eproto();  return *default_instance_;
}

HeroCreateParams* HeroCreateParams::default_instance_ = NULL;

HeroCreateParams* HeroCreateParams::New() const {
  return new HeroCreateParams;
}

void HeroCreateParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gbid_class_ = 0;
    is_hardcore_ = false;
    is_female_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroCreateParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 gbid_class = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &gbid_class_)));
          set_has_gbid_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_hardcore;
        break;
      }
      
      // required bool is_hardcore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hardcore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hardcore_)));
          set_has_is_hardcore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_female;
        break;
      }
      
      // required bool is_female = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_female:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_female_)));
          set_has_is_female();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroCreateParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 gbid_class = 1;
  if (has_gbid_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->gbid_class(), output);
  }
  
  // required bool is_hardcore = 2;
  if (has_is_hardcore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_hardcore(), output);
  }
  
  // required bool is_female = 3;
  if (has_is_female()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_female(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroCreateParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 gbid_class = 1;
  if (has_gbid_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->gbid_class(), target);
  }
  
  // required bool is_hardcore = 2;
  if (has_is_hardcore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_hardcore(), target);
  }
  
  // required bool is_female = 3;
  if (has_is_female()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_female(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroCreateParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 gbid_class = 1;
    if (has_gbid_class()) {
      total_size += 1 + 4;
    }
    
    // required bool is_hardcore = 2;
    if (has_is_hardcore()) {
      total_size += 1 + 1;
    }
    
    // required bool is_female = 3;
    if (has_is_female()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroCreateParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroCreateParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroCreateParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroCreateParams::MergeFrom(const HeroCreateParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gbid_class()) {
      set_gbid_class(from.gbid_class());
    }
    if (from.has_is_hardcore()) {
      set_is_hardcore(from.is_hardcore());
    }
    if (from.has_is_female()) {
      set_is_female(from.is_female());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroCreateParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroCreateParams::CopyFrom(const HeroCreateParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroCreateParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void HeroCreateParams::Swap(HeroCreateParams* other) {
  if (other != this) {
    std::swap(gbid_class_, other->gbid_class_);
    std::swap(is_hardcore_, other->is_hardcore_);
    std::swap(is_female_, other->is_female_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroCreateParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroCreateParams_descriptor_;
  metadata.reflection = HeroCreateParams_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OnlineService
}  // namespace D3

// @@protoc_insertion_point(global_scope)
