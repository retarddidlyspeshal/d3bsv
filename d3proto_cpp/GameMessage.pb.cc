// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace D3 {
namespace GameMessage {

namespace {

const ::google::protobuf::Descriptor* HeroDigestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroDigestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientToonSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientToonSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroDigestListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroDigestListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroDigestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroDigestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroDigestListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroDigestListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBanner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBanner_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveBannerConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveBannerConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroDigestBanner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroDigestBanner_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameCurrentPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameCurrentPlayers_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameMessage_2eproto() {
  protobuf_AddDesc_GameMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameMessage.proto");
  GOOGLE_CHECK(file != NULL);
  HeroDigestList_descriptor_ = file->message_type(0);
  static const int HeroDigestList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestList, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestList, digest_list_),
  };
  HeroDigestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroDigestList_descriptor_,
      HeroDigestList::default_instance_,
      HeroDigestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroDigestList));
  ClientToonSettings_descriptor_ = file->message_type(1);
  static const int ClientToonSettings_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToonSettings, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToonSettings, client_toon_settings_),
  };
  ClientToonSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientToonSettings_descriptor_,
      ClientToonSettings::default_instance_,
      ClientToonSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToonSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToonSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientToonSettings));
  HeroDigestListRequest_descriptor_ = file->message_type(2);
  static const int HeroDigestListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestListRequest, toon_id_),
  };
  HeroDigestListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroDigestListRequest_descriptor_,
      HeroDigestListRequest::default_instance_,
      HeroDigestListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroDigestListRequest));
  HeroDigestResponse_descriptor_ = file->message_type(3);
  static const int HeroDigestResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestResponse, toon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestResponse, hero_digest_),
  };
  HeroDigestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroDigestResponse_descriptor_,
      HeroDigestResponse::default_instance_,
      HeroDigestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroDigestResponse));
  HeroDigestListResponse_descriptor_ = file->message_type(4);
  static const int HeroDigestListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestListResponse, digest_list_),
  };
  HeroDigestListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroDigestListResponse_descriptor_,
      HeroDigestListResponse::default_instance_,
      HeroDigestListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroDigestListResponse));
  PlayerBanner_descriptor_ = file->message_type(5);
  static const int PlayerBanner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBanner, player_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBanner, banner_),
  };
  PlayerBanner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBanner_descriptor_,
      PlayerBanner::default_instance_,
      PlayerBanner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBanner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBanner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBanner));
  SaveBannerConfiguration_descriptor_ = file->message_type(6);
  static const int SaveBannerConfiguration_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBannerConfiguration, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBannerConfiguration, slot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBannerConfiguration, make_active_),
  };
  SaveBannerConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveBannerConfiguration_descriptor_,
      SaveBannerConfiguration::default_instance_,
      SaveBannerConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBannerConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBannerConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveBannerConfiguration));
  HeroDigestBanner_descriptor_ = file->message_type(7);
  static const int HeroDigestBanner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestBanner, hero_digest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestBanner, banner_),
  };
  HeroDigestBanner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroDigestBanner_descriptor_,
      HeroDigestBanner::default_instance_,
      HeroDigestBanner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestBanner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDigestBanner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroDigestBanner));
  GameCurrentPlayers_descriptor_ = file->message_type(8);
  static const int GameCurrentPlayers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCurrentPlayers, players_),
  };
  GameCurrentPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameCurrentPlayers_descriptor_,
      GameCurrentPlayers::default_instance_,
      GameCurrentPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCurrentPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCurrentPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameCurrentPlayers));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroDigestList_descriptor_, &HeroDigestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientToonSettings_descriptor_, &ClientToonSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroDigestListRequest_descriptor_, &HeroDigestListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroDigestResponse_descriptor_, &HeroDigestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroDigestListResponse_descriptor_, &HeroDigestListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBanner_descriptor_, &PlayerBanner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveBannerConfiguration_descriptor_, &SaveBannerConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroDigestBanner_descriptor_, &HeroDigestBanner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameCurrentPlayers_descriptor_, &GameCurrentPlayers::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameMessage_2eproto() {
  delete HeroDigestList::default_instance_;
  delete HeroDigestList_reflection_;
  delete ClientToonSettings::default_instance_;
  delete ClientToonSettings_reflection_;
  delete HeroDigestListRequest::default_instance_;
  delete HeroDigestListRequest_reflection_;
  delete HeroDigestResponse::default_instance_;
  delete HeroDigestResponse_reflection_;
  delete HeroDigestListResponse::default_instance_;
  delete HeroDigestListResponse_reflection_;
  delete PlayerBanner::default_instance_;
  delete PlayerBanner_reflection_;
  delete SaveBannerConfiguration::default_instance_;
  delete SaveBannerConfiguration_reflection_;
  delete HeroDigestBanner::default_instance_;
  delete HeroDigestBanner_reflection_;
  delete GameCurrentPlayers::default_instance_;
  delete GameCurrentPlayers_reflection_;
}

void protobuf_AddDesc_GameMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::D3::Hero::protobuf_AddDesc_Hero_2eproto();
  ::D3::OnlineService::protobuf_AddDesc_OnlineService_2eproto();
  ::D3::Client::protobuf_AddDesc_Settings_2eproto();
  ::D3::Account::protobuf_AddDesc_Account_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GameMessage.proto\022\016D3.GameMessage\032\nHer"
    "o.proto\032\023OnlineService.proto\032\016Settings.p"
    "roto\032\rAccount.proto\"f\n\016HeroDigestList\022.\n"
    "\naccount_id\030\001 \002(\0132\032.D3.OnlineService.Ent"
    "ityId\022$\n\013digest_list\030\002 \003(\0132\017.D3.Hero.Dig"
    "est\"x\n\022ClientToonSettings\022+\n\007toon_id\030\001 \002"
    "(\0132\032.D3.OnlineService.EntityId\0225\n\024client"
    "_toon_settings\030\002 \002(\0132\027.D3.Client.ToonSet"
    "tings\"D\n\025HeroDigestListRequest\022+\n\007toon_i"
    "d\030\001 \003(\0132\032.D3.OnlineService.EntityId\"x\n\022H"
    "eroDigestResponse\022+\n\007toon_id\030\001 \002(\0132\032.D3."
    "OnlineService.EntityId\022\017\n\007success\030\002 \002(\010\022"
    "$\n\013hero_digest\030\003 \001(\0132\017.D3.Hero.Digest\"Q\n"
    "\026HeroDigestListResponse\0227\n\013digest_list\030\001"
    " \003(\0132\".D3.GameMessage.HeroDigestResponse"
    "\"U\n\014PlayerBanner\022\024\n\014player_index\030\001 \002(\r\022/"
    "\n\006banner\030\002 \002(\0132\037.D3.Account.BannerConfig"
    "uration\"s\n\027SaveBannerConfiguration\022/\n\006ba"
    "nner\030\001 \002(\0132\037.D3.Account.BannerConfigurat"
    "ion\022\022\n\nslot_index\030\002 \001(\r\022\023\n\013make_active\030\003"
    " \001(\010\"i\n\020HeroDigestBanner\022$\n\013hero_digest\030"
    "\001 \002(\0132\017.D3.Hero.Digest\022/\n\006banner\030\002 \002(\0132\037"
    ".D3.Account.BannerConfiguration\"G\n\022GameC"
    "urrentPlayers\0221\n\007players\030\001 \003(\0132 .D3.Game"
    "Message.HeroDigestBanner", 984);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameMessage.proto", &protobuf_RegisterTypes);
  HeroDigestList::default_instance_ = new HeroDigestList();
  ClientToonSettings::default_instance_ = new ClientToonSettings();
  HeroDigestListRequest::default_instance_ = new HeroDigestListRequest();
  HeroDigestResponse::default_instance_ = new HeroDigestResponse();
  HeroDigestListResponse::default_instance_ = new HeroDigestListResponse();
  PlayerBanner::default_instance_ = new PlayerBanner();
  SaveBannerConfiguration::default_instance_ = new SaveBannerConfiguration();
  HeroDigestBanner::default_instance_ = new HeroDigestBanner();
  GameCurrentPlayers::default_instance_ = new GameCurrentPlayers();
  HeroDigestList::default_instance_->InitAsDefaultInstance();
  ClientToonSettings::default_instance_->InitAsDefaultInstance();
  HeroDigestListRequest::default_instance_->InitAsDefaultInstance();
  HeroDigestResponse::default_instance_->InitAsDefaultInstance();
  HeroDigestListResponse::default_instance_->InitAsDefaultInstance();
  PlayerBanner::default_instance_->InitAsDefaultInstance();
  SaveBannerConfiguration::default_instance_->InitAsDefaultInstance();
  HeroDigestBanner::default_instance_->InitAsDefaultInstance();
  GameCurrentPlayers::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameMessage_2eproto {
  StaticDescriptorInitializer_GameMessage_2eproto() {
    protobuf_AddDesc_GameMessage_2eproto();
  }
} static_descriptor_initializer_GameMessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int HeroDigestList::kAccountIdFieldNumber;
const int HeroDigestList::kDigestListFieldNumber;
#endif  // !_MSC_VER

HeroDigestList::HeroDigestList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroDigestList::InitAsDefaultInstance() {
  account_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
}

HeroDigestList::HeroDigestList(const HeroDigestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroDigestList::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroDigestList::~HeroDigestList() {
  SharedDtor();
}

void HeroDigestList::SharedDtor() {
  if (this != default_instance_) {
    delete account_id_;
  }
}

void HeroDigestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroDigestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroDigestList_descriptor_;
}

const HeroDigestList& HeroDigestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();  return *default_instance_;
}

HeroDigestList* HeroDigestList::default_instance_ = NULL;

HeroDigestList* HeroDigestList::New() const {
  return new HeroDigestList;
}

void HeroDigestList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::D3::OnlineService::EntityId::Clear();
    }
  }
  digest_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroDigestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.OnlineService.EntityId account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_digest_list;
        break;
      }
      
      // repeated .D3.Hero.Digest digest_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digest_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_digest_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_digest_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroDigestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.OnlineService.EntityId account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account_id(), output);
  }
  
  // repeated .D3.Hero.Digest digest_list = 2;
  for (int i = 0; i < this->digest_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->digest_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroDigestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.OnlineService.EntityId account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_id(), target);
  }
  
  // repeated .D3.Hero.Digest digest_list = 2;
  for (int i = 0; i < this->digest_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->digest_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroDigestList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.OnlineService.EntityId account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }
    
  }
  // repeated .D3.Hero.Digest digest_list = 2;
  total_size += 1 * this->digest_list_size();
  for (int i = 0; i < this->digest_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->digest_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroDigestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroDigestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroDigestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroDigestList::MergeFrom(const HeroDigestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  digest_list_.MergeFrom(from.digest_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      mutable_account_id()->::D3::OnlineService::EntityId::MergeFrom(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroDigestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroDigestList::CopyFrom(const HeroDigestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroDigestList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_account_id()) {
    if (!this->account_id().IsInitialized()) return false;
  }
  for (int i = 0; i < digest_list_size(); i++) {
    if (!this->digest_list(i).IsInitialized()) return false;
  }
  return true;
}

void HeroDigestList::Swap(HeroDigestList* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    digest_list_.Swap(&other->digest_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroDigestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroDigestList_descriptor_;
  metadata.reflection = HeroDigestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientToonSettings::kToonIdFieldNumber;
const int ClientToonSettings::kClientToonSettingsFieldNumber;
#endif  // !_MSC_VER

ClientToonSettings::ClientToonSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientToonSettings::InitAsDefaultInstance() {
  toon_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
  client_toon_settings_ = const_cast< ::D3::Client::ToonSettings*>(&::D3::Client::ToonSettings::default_instance());
}

ClientToonSettings::ClientToonSettings(const ClientToonSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToonSettings::SharedCtor() {
  _cached_size_ = 0;
  toon_id_ = NULL;
  client_toon_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToonSettings::~ClientToonSettings() {
  SharedDtor();
}

void ClientToonSettings::SharedDtor() {
  if (this != default_instance_) {
    delete toon_id_;
    delete client_toon_settings_;
  }
}

void ClientToonSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientToonSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToonSettings_descriptor_;
}

const ClientToonSettings& ClientToonSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();  return *default_instance_;
}

ClientToonSettings* ClientToonSettings::default_instance_ = NULL;

ClientToonSettings* ClientToonSettings::New() const {
  return new ClientToonSettings;
}

void ClientToonSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::D3::OnlineService::EntityId::Clear();
    }
    if (has_client_toon_settings()) {
      if (client_toon_settings_ != NULL) client_toon_settings_->::D3::Client::ToonSettings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToonSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.OnlineService.EntityId toon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_toon_settings;
        break;
      }
      
      // required .D3.Client.ToonSettings client_toon_settings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_toon_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_toon_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToonSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.OnlineService.EntityId toon_id = 1;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->toon_id(), output);
  }
  
  // required .D3.Client.ToonSettings client_toon_settings = 2;
  if (has_client_toon_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_toon_settings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientToonSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.OnlineService.EntityId toon_id = 1;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->toon_id(), target);
  }
  
  // required .D3.Client.ToonSettings client_toon_settings = 2;
  if (has_client_toon_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->client_toon_settings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientToonSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.OnlineService.EntityId toon_id = 1;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // required .D3.Client.ToonSettings client_toon_settings = 2;
    if (has_client_toon_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_toon_settings());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToonSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientToonSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientToonSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientToonSettings::MergeFrom(const ClientToonSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toon_id()) {
      mutable_toon_id()->::D3::OnlineService::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_client_toon_settings()) {
      mutable_client_toon_settings()->::D3::Client::ToonSettings::MergeFrom(from.client_toon_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToonSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToonSettings::CopyFrom(const ClientToonSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToonSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  return true;
}

void ClientToonSettings::Swap(ClientToonSettings* other) {
  if (other != this) {
    std::swap(toon_id_, other->toon_id_);
    std::swap(client_toon_settings_, other->client_toon_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientToonSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientToonSettings_descriptor_;
  metadata.reflection = ClientToonSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroDigestListRequest::kToonIdFieldNumber;
#endif  // !_MSC_VER

HeroDigestListRequest::HeroDigestListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroDigestListRequest::InitAsDefaultInstance() {
}

HeroDigestListRequest::HeroDigestListRequest(const HeroDigestListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroDigestListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroDigestListRequest::~HeroDigestListRequest() {
  SharedDtor();
}

void HeroDigestListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroDigestListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroDigestListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroDigestListRequest_descriptor_;
}

const HeroDigestListRequest& HeroDigestListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();  return *default_instance_;
}

HeroDigestListRequest* HeroDigestListRequest::default_instance_ = NULL;

HeroDigestListRequest* HeroDigestListRequest::New() const {
  return new HeroDigestListRequest;
}

void HeroDigestListRequest::Clear() {
  toon_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroDigestListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .D3.OnlineService.EntityId toon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_toon_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroDigestListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .D3.OnlineService.EntityId toon_id = 1;
  for (int i = 0; i < this->toon_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->toon_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroDigestListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .D3.OnlineService.EntityId toon_id = 1;
  for (int i = 0; i < this->toon_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->toon_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroDigestListRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .D3.OnlineService.EntityId toon_id = 1;
  total_size += 1 * this->toon_id_size();
  for (int i = 0; i < this->toon_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toon_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroDigestListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroDigestListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroDigestListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroDigestListRequest::MergeFrom(const HeroDigestListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  toon_id_.MergeFrom(from.toon_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroDigestListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroDigestListRequest::CopyFrom(const HeroDigestListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroDigestListRequest::IsInitialized() const {
  
  for (int i = 0; i < toon_id_size(); i++) {
    if (!this->toon_id(i).IsInitialized()) return false;
  }
  return true;
}

void HeroDigestListRequest::Swap(HeroDigestListRequest* other) {
  if (other != this) {
    toon_id_.Swap(&other->toon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroDigestListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroDigestListRequest_descriptor_;
  metadata.reflection = HeroDigestListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroDigestResponse::kToonIdFieldNumber;
const int HeroDigestResponse::kSuccessFieldNumber;
const int HeroDigestResponse::kHeroDigestFieldNumber;
#endif  // !_MSC_VER

HeroDigestResponse::HeroDigestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroDigestResponse::InitAsDefaultInstance() {
  toon_id_ = const_cast< ::D3::OnlineService::EntityId*>(&::D3::OnlineService::EntityId::default_instance());
  hero_digest_ = const_cast< ::D3::Hero::Digest*>(&::D3::Hero::Digest::default_instance());
}

HeroDigestResponse::HeroDigestResponse(const HeroDigestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroDigestResponse::SharedCtor() {
  _cached_size_ = 0;
  toon_id_ = NULL;
  success_ = false;
  hero_digest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroDigestResponse::~HeroDigestResponse() {
  SharedDtor();
}

void HeroDigestResponse::SharedDtor() {
  if (this != default_instance_) {
    delete toon_id_;
    delete hero_digest_;
  }
}

void HeroDigestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroDigestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroDigestResponse_descriptor_;
}

const HeroDigestResponse& HeroDigestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();  return *default_instance_;
}

HeroDigestResponse* HeroDigestResponse::default_instance_ = NULL;

HeroDigestResponse* HeroDigestResponse::New() const {
  return new HeroDigestResponse;
}

void HeroDigestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_toon_id()) {
      if (toon_id_ != NULL) toon_id_->::D3::OnlineService::EntityId::Clear();
    }
    success_ = false;
    if (has_hero_digest()) {
      if (hero_digest_ != NULL) hero_digest_->::D3::Hero::Digest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroDigestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.OnlineService.EntityId toon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }
      
      // required bool success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_digest;
        break;
      }
      
      // optional .D3.Hero.Digest hero_digest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_digest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroDigestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.OnlineService.EntityId toon_id = 1;
  if (has_toon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->toon_id(), output);
  }
  
  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }
  
  // optional .D3.Hero.Digest hero_digest = 3;
  if (has_hero_digest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero_digest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroDigestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.OnlineService.EntityId toon_id = 1;
  if (has_toon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->toon_id(), target);
  }
  
  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }
  
  // optional .D3.Hero.Digest hero_digest = 3;
  if (has_hero_digest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero_digest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroDigestResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.OnlineService.EntityId toon_id = 1;
    if (has_toon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toon_id());
    }
    
    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional .D3.Hero.Digest hero_digest = 3;
    if (has_hero_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_digest());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroDigestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroDigestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroDigestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroDigestResponse::MergeFrom(const HeroDigestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toon_id()) {
      mutable_toon_id()->::D3::OnlineService::EntityId::MergeFrom(from.toon_id());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_hero_digest()) {
      mutable_hero_digest()->::D3::Hero::Digest::MergeFrom(from.hero_digest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroDigestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroDigestResponse::CopyFrom(const HeroDigestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroDigestResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_toon_id()) {
    if (!this->toon_id().IsInitialized()) return false;
  }
  if (has_hero_digest()) {
    if (!this->hero_digest().IsInitialized()) return false;
  }
  return true;
}

void HeroDigestResponse::Swap(HeroDigestResponse* other) {
  if (other != this) {
    std::swap(toon_id_, other->toon_id_);
    std::swap(success_, other->success_);
    std::swap(hero_digest_, other->hero_digest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroDigestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroDigestResponse_descriptor_;
  metadata.reflection = HeroDigestResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroDigestListResponse::kDigestListFieldNumber;
#endif  // !_MSC_VER

HeroDigestListResponse::HeroDigestListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroDigestListResponse::InitAsDefaultInstance() {
}

HeroDigestListResponse::HeroDigestListResponse(const HeroDigestListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroDigestListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroDigestListResponse::~HeroDigestListResponse() {
  SharedDtor();
}

void HeroDigestListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroDigestListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroDigestListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroDigestListResponse_descriptor_;
}

const HeroDigestListResponse& HeroDigestListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();  return *default_instance_;
}

HeroDigestListResponse* HeroDigestListResponse::default_instance_ = NULL;

HeroDigestListResponse* HeroDigestListResponse::New() const {
  return new HeroDigestListResponse;
}

void HeroDigestListResponse::Clear() {
  digest_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroDigestListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .D3.GameMessage.HeroDigestResponse digest_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digest_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_digest_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_digest_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroDigestListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .D3.GameMessage.HeroDigestResponse digest_list = 1;
  for (int i = 0; i < this->digest_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->digest_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroDigestListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .D3.GameMessage.HeroDigestResponse digest_list = 1;
  for (int i = 0; i < this->digest_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->digest_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroDigestListResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .D3.GameMessage.HeroDigestResponse digest_list = 1;
  total_size += 1 * this->digest_list_size();
  for (int i = 0; i < this->digest_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->digest_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroDigestListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroDigestListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroDigestListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroDigestListResponse::MergeFrom(const HeroDigestListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  digest_list_.MergeFrom(from.digest_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroDigestListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroDigestListResponse::CopyFrom(const HeroDigestListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroDigestListResponse::IsInitialized() const {
  
  for (int i = 0; i < digest_list_size(); i++) {
    if (!this->digest_list(i).IsInitialized()) return false;
  }
  return true;
}

void HeroDigestListResponse::Swap(HeroDigestListResponse* other) {
  if (other != this) {
    digest_list_.Swap(&other->digest_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroDigestListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroDigestListResponse_descriptor_;
  metadata.reflection = HeroDigestListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBanner::kPlayerIndexFieldNumber;
const int PlayerBanner::kBannerFieldNumber;
#endif  // !_MSC_VER

PlayerBanner::PlayerBanner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBanner::InitAsDefaultInstance() {
  banner_ = const_cast< ::D3::Account::BannerConfiguration*>(&::D3::Account::BannerConfiguration::default_instance());
}

PlayerBanner::PlayerBanner(const PlayerBanner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBanner::SharedCtor() {
  _cached_size_ = 0;
  player_index_ = 0u;
  banner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBanner::~PlayerBanner() {
  SharedDtor();
}

void PlayerBanner::SharedDtor() {
  if (this != default_instance_) {
    delete banner_;
  }
}

void PlayerBanner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBanner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBanner_descriptor_;
}

const PlayerBanner& PlayerBanner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();  return *default_instance_;
}

PlayerBanner* PlayerBanner::default_instance_ = NULL;

PlayerBanner* PlayerBanner::New() const {
  return new PlayerBanner;
}

void PlayerBanner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_index_ = 0u;
    if (has_banner()) {
      if (banner_ != NULL) banner_->::D3::Account::BannerConfiguration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBanner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_index_)));
          set_has_player_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_banner;
        break;
      }
      
      // required .D3.Account.BannerConfiguration banner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBanner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 player_index = 1;
  if (has_player_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_index(), output);
  }
  
  // required .D3.Account.BannerConfiguration banner = 2;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->banner(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBanner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 player_index = 1;
  if (has_player_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_index(), target);
  }
  
  // required .D3.Account.BannerConfiguration banner = 2;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->banner(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBanner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_index = 1;
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_index());
    }
    
    // required .D3.Account.BannerConfiguration banner = 2;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBanner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBanner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBanner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBanner::MergeFrom(const PlayerBanner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_index()) {
      set_player_index(from.player_index());
    }
    if (from.has_banner()) {
      mutable_banner()->::D3::Account::BannerConfiguration::MergeFrom(from.banner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBanner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBanner::CopyFrom(const PlayerBanner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBanner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_banner()) {
    if (!this->banner().IsInitialized()) return false;
  }
  return true;
}

void PlayerBanner::Swap(PlayerBanner* other) {
  if (other != this) {
    std::swap(player_index_, other->player_index_);
    std::swap(banner_, other->banner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBanner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBanner_descriptor_;
  metadata.reflection = PlayerBanner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveBannerConfiguration::kBannerFieldNumber;
const int SaveBannerConfiguration::kSlotIndexFieldNumber;
const int SaveBannerConfiguration::kMakeActiveFieldNumber;
#endif  // !_MSC_VER

SaveBannerConfiguration::SaveBannerConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveBannerConfiguration::InitAsDefaultInstance() {
  banner_ = const_cast< ::D3::Account::BannerConfiguration*>(&::D3::Account::BannerConfiguration::default_instance());
}

SaveBannerConfiguration::SaveBannerConfiguration(const SaveBannerConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveBannerConfiguration::SharedCtor() {
  _cached_size_ = 0;
  banner_ = NULL;
  slot_index_ = 0u;
  make_active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveBannerConfiguration::~SaveBannerConfiguration() {
  SharedDtor();
}

void SaveBannerConfiguration::SharedDtor() {
  if (this != default_instance_) {
    delete banner_;
  }
}

void SaveBannerConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveBannerConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveBannerConfiguration_descriptor_;
}

const SaveBannerConfiguration& SaveBannerConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();  return *default_instance_;
}

SaveBannerConfiguration* SaveBannerConfiguration::default_instance_ = NULL;

SaveBannerConfiguration* SaveBannerConfiguration::New() const {
  return new SaveBannerConfiguration;
}

void SaveBannerConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_banner()) {
      if (banner_ != NULL) banner_->::D3::Account::BannerConfiguration::Clear();
    }
    slot_index_ = 0u;
    make_active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveBannerConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.Account.BannerConfiguration banner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_index;
        break;
      }
      
      // optional uint32 slot_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_index_)));
          set_has_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_make_active;
        break;
      }
      
      // optional bool make_active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_make_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &make_active_)));
          set_has_make_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveBannerConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.Account.BannerConfiguration banner = 1;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->banner(), output);
  }
  
  // optional uint32 slot_index = 2;
  if (has_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_index(), output);
  }
  
  // optional bool make_active = 3;
  if (has_make_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->make_active(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveBannerConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.Account.BannerConfiguration banner = 1;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->banner(), target);
  }
  
  // optional uint32 slot_index = 2;
  if (has_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_index(), target);
  }
  
  // optional bool make_active = 3;
  if (has_make_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->make_active(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveBannerConfiguration::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.Account.BannerConfiguration banner = 1;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }
    
    // optional uint32 slot_index = 2;
    if (has_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_index());
    }
    
    // optional bool make_active = 3;
    if (has_make_active()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveBannerConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveBannerConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveBannerConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveBannerConfiguration::MergeFrom(const SaveBannerConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banner()) {
      mutable_banner()->::D3::Account::BannerConfiguration::MergeFrom(from.banner());
    }
    if (from.has_slot_index()) {
      set_slot_index(from.slot_index());
    }
    if (from.has_make_active()) {
      set_make_active(from.make_active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveBannerConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveBannerConfiguration::CopyFrom(const SaveBannerConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveBannerConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_banner()) {
    if (!this->banner().IsInitialized()) return false;
  }
  return true;
}

void SaveBannerConfiguration::Swap(SaveBannerConfiguration* other) {
  if (other != this) {
    std::swap(banner_, other->banner_);
    std::swap(slot_index_, other->slot_index_);
    std::swap(make_active_, other->make_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveBannerConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveBannerConfiguration_descriptor_;
  metadata.reflection = SaveBannerConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroDigestBanner::kHeroDigestFieldNumber;
const int HeroDigestBanner::kBannerFieldNumber;
#endif  // !_MSC_VER

HeroDigestBanner::HeroDigestBanner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroDigestBanner::InitAsDefaultInstance() {
  hero_digest_ = const_cast< ::D3::Hero::Digest*>(&::D3::Hero::Digest::default_instance());
  banner_ = const_cast< ::D3::Account::BannerConfiguration*>(&::D3::Account::BannerConfiguration::default_instance());
}

HeroDigestBanner::HeroDigestBanner(const HeroDigestBanner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroDigestBanner::SharedCtor() {
  _cached_size_ = 0;
  hero_digest_ = NULL;
  banner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroDigestBanner::~HeroDigestBanner() {
  SharedDtor();
}

void HeroDigestBanner::SharedDtor() {
  if (this != default_instance_) {
    delete hero_digest_;
    delete banner_;
  }
}

void HeroDigestBanner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroDigestBanner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroDigestBanner_descriptor_;
}

const HeroDigestBanner& HeroDigestBanner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();  return *default_instance_;
}

HeroDigestBanner* HeroDigestBanner::default_instance_ = NULL;

HeroDigestBanner* HeroDigestBanner::New() const {
  return new HeroDigestBanner;
}

void HeroDigestBanner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero_digest()) {
      if (hero_digest_ != NULL) hero_digest_->::D3::Hero::Digest::Clear();
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::D3::Account::BannerConfiguration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroDigestBanner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .D3.Hero.Digest hero_digest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_digest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_banner;
        break;
      }
      
      // required .D3.Account.BannerConfiguration banner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroDigestBanner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .D3.Hero.Digest hero_digest = 1;
  if (has_hero_digest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero_digest(), output);
  }
  
  // required .D3.Account.BannerConfiguration banner = 2;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->banner(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroDigestBanner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .D3.Hero.Digest hero_digest = 1;
  if (has_hero_digest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero_digest(), target);
  }
  
  // required .D3.Account.BannerConfiguration banner = 2;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->banner(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroDigestBanner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .D3.Hero.Digest hero_digest = 1;
    if (has_hero_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_digest());
    }
    
    // required .D3.Account.BannerConfiguration banner = 2;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banner());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroDigestBanner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroDigestBanner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroDigestBanner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroDigestBanner::MergeFrom(const HeroDigestBanner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_digest()) {
      mutable_hero_digest()->::D3::Hero::Digest::MergeFrom(from.hero_digest());
    }
    if (from.has_banner()) {
      mutable_banner()->::D3::Account::BannerConfiguration::MergeFrom(from.banner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroDigestBanner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroDigestBanner::CopyFrom(const HeroDigestBanner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroDigestBanner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_hero_digest()) {
    if (!this->hero_digest().IsInitialized()) return false;
  }
  if (has_banner()) {
    if (!this->banner().IsInitialized()) return false;
  }
  return true;
}

void HeroDigestBanner::Swap(HeroDigestBanner* other) {
  if (other != this) {
    std::swap(hero_digest_, other->hero_digest_);
    std::swap(banner_, other->banner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroDigestBanner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroDigestBanner_descriptor_;
  metadata.reflection = HeroDigestBanner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameCurrentPlayers::kPlayersFieldNumber;
#endif  // !_MSC_VER

GameCurrentPlayers::GameCurrentPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameCurrentPlayers::InitAsDefaultInstance() {
}

GameCurrentPlayers::GameCurrentPlayers(const GameCurrentPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameCurrentPlayers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameCurrentPlayers::~GameCurrentPlayers() {
  SharedDtor();
}

void GameCurrentPlayers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameCurrentPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCurrentPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameCurrentPlayers_descriptor_;
}

const GameCurrentPlayers& GameCurrentPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();  return *default_instance_;
}

GameCurrentPlayers* GameCurrentPlayers::default_instance_ = NULL;

GameCurrentPlayers* GameCurrentPlayers::New() const {
  return new GameCurrentPlayers;
}

void GameCurrentPlayers::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameCurrentPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .D3.GameMessage.HeroDigestBanner players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameCurrentPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .D3.GameMessage.HeroDigestBanner players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameCurrentPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .D3.GameMessage.HeroDigestBanner players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameCurrentPlayers::ByteSize() const {
  int total_size = 0;
  
  // repeated .D3.GameMessage.HeroDigestBanner players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCurrentPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameCurrentPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameCurrentPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameCurrentPlayers::MergeFrom(const GameCurrentPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameCurrentPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCurrentPlayers::CopyFrom(const GameCurrentPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCurrentPlayers::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void GameCurrentPlayers::Swap(GameCurrentPlayers* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameCurrentPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameCurrentPlayers_descriptor_;
  metadata.reflection = GameCurrentPlayers_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameMessage
}  // namespace D3

// @@protoc_insertion_point(global_scope)
